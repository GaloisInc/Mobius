(MonitoredProgram
 (get_monitored_class_TCC1 0
  (get_monitored_class_TCC1-1 nil 3399182363 3428745590
   ("" (skolem-typepred)
    (("" (expand* "compatible" "nonempty?" "empty?" "member")
      (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
    nil)
   proved-complete
   ((nonempty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil) (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   334 310 t nil))
 (name_get_monitored_class 0
  (name_get_monitored_class-1 nil 3400563327 3432903140
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (assert) nil nil)) nil)) nil)
   unchecked ((get_monitored_class const-decl "Class" MonitoredProgram nil))
   3688 3630 t shostak))
 (get_monitored_class_in_classes 0
  (get_monitored_class_in_classes-1 nil 3400563719 3432903143
   ("" (skosimp*)
    (("" (expand "get_monitored_class") (("" (propax) nil nil)) nil)) nil)
   unchecked ((get_monitored_class const-decl "Class" MonitoredProgram nil))
   3655 3630 t shostak))
 (get_monitored_class_unique_for_wf_MP_TCC1 0
  (get_monitored_class_unique_for_wf_MP_TCC1-1 nil 3399183164 3428745592
   ("" (skolem-typepred)
    (("" (typepred "program(mp!1)")
      (("" (expand* "wf_MP" "compatible" "singleton?")
        (("" (flatten)
          (("" (skosimp)
            (("" (inst?)
              (("1"
                (expand* "wf_Program" "wf_program_has_unique_class_names_def")
                (("1" (flatten)
                  (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (singleton? const-decl "bool" sets nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1047 1000 t nil))
 (get_monitored_class_unique_for_wf_MP 0
  (get_monitored_class_unique_for_wf_MP-2 nil 3399183561 3432903148
   ("" (skosimp*)
    (("" (expand "get_monitored_class")
      (("" (assert)
        (("" (expand "choose")
          (("" (rewrite "the_lem")
            (("" (hide 2)
              (("" (expand "singleton?")
                (("" (typepred "mp!1")
                  (("" (expand "compatible")
                    (("" (flatten)
                      (("" (skosimp*)
                        (("" (inst?)
                          (("1" (skosimp*)
                            (("1" (typepred "y!1")
                              (("1" (assert)
                                (("1" (typepred "program(mp!1)")
                                  (("1" (expand "wf_Program")
                                    (("1" (flatten)
                                      (("1"
                                        (expand
                                         "wf_program_has_unique_class_names_def")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((get_monitored_class const-decl "Class" MonitoredProgram nil)
    (choose const-decl "(p)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (singleton? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (the_lem formula-decl nil sets nil))
   4458 4380 t nil)
  (get_monitored_class_unique_for_wf_MP-1 nil 3399183469 3399183536
   ("" (skosimp)
    (("" (expand* "wf_MP" "get_monitored_class" "choose" "the") nil nil)) nil)
   unchecked
   ((choose const-decl "(p)" sets nil) (the const-decl "(p)" sets nil)) 67208
   100 t shostak)))
(MonitoredProgramSemantics
 (update_PState_TCC1 0
  (update_PState_TCC1-1 nil 3391514279 3428745593 ("" (subtype-tcc) nil nil)
   proved-complete
   ((MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil))
   663 610 nil nil))
 (update_GhostVars_TCC1 0
  (update_GhostVars_TCC1-1 nil 3391514279 3428745593
   ("" (subtype-tcc) nil nil) proved-complete
   ((MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil))
   246 250 nil nil))
 (wf_state_implies_wf_ap_state 0
  (wf_state_implies_wf_ap_state-1 nil 3433157263 3433157273
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "wf_ap_state") (("" (flatten) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_ap_state const-decl "boolean" MonitoredProgramSemantics nil))
   9942 190 t shostak))
 (wf_state_implies_wf_PSt 0
  (wf_state_implies_wf_PSt-1 nil 3388136206 3432903853
   ("" (skosimp*)
    (("" (expand "wf_PSt")
      (("" (skosimp*)
        (("" (typepred "mp!1")
          (("" (expand "compatible")
            (("" (skosimp*)
              (("" (expand "MVA_prog_vars_are_fields")
                (("" (expand "var_names")
                  (("" (skosimp*)
                    (("" (inst -4 "f!1")
                      (("" (assert)
                        (("" (skosimp*)
                          (("" (expand "wf_state")
                            (("" (inst -7 "name(f!1)")
                              (("" (expand "is_field")
                                (("" (flatten)
                                  (("" (expand "var_names")
                                    (("" (inst?)
                                      ((""
                                        (expand "getFieldDecls")
                                        ((""
                                          (assert)
                                          ((""
                                            (inst?)
                                            (("" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_PSt const-decl "boolean" MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram nil))
   3992 7140 t shostak))
 (wf_state_vars_tricotomy 0
  (wf_state_vars_tricotomy-1 nil 3396777599 3432903857
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (expand "wf_state")
        (("" (expand "union")
          (("" (expand "member")
            (("" (flatten)
              (("" (expand "wf_state")
                (("" (expand "wf_ghoststate")
                  (("" (inst -2 "vn!1")
                    (("" (inst -3 "vn!1")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (member const-decl "bool" sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil))
   3675 3610 t shostak))
 (wf_state_ghost_not_local_or_field 0
  (wf_state_ghost_not_local_or_field-1 nil 3396777649 3432903861
   ("" (skosimp*)
    (("" (expand "wf_Program")
      (("" (expand "wf_program_variables_disjoint_def")
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (auto-rewrite "disjoint?" "intersection" "member" "empty?")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "wf_state")
                    (("" (expand "wf_ghoststate")
                      (("" (inst -3 "vn!1")
                        (("" (assert)
                          (("" (inst -5 "vn!1")
                            (("" (inst -5 "vn!1")
                              (("" (assert)
                                (("" (inst -2 "vn!1")
                                  (("" (flatten)
                                    (("" (split 3)
                                      (("1"
                                        (split -5)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (expand
                                           "wf_program_variables_not_reserved_words_def")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst -8 "vn!1")
                                              (("2"
                                                (expand "reserved_words")
                                                (("2"
                                                  (expand
                                                   "declared_var_names")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_program_variables_disjoint_def const-decl "boolean" WellFormedProgram
     nil))
   4476 4370 t shostak))
 (on_method_MVA_TCC1 0
  (on_method_MVA_TCC1-1 nil 3387174104 3428745608
   ("" (skosimp*) (("" (typepred "s!1") (("" (grind) nil nil)) nil)) nil)
   proved-complete
   ((get_monitored_class const-decl "Class" MonitoredProgram nil)
    (choose const-decl "(p)" sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil) (lift type-decl nil lift_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_field const-decl "boolean" State nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_store const-decl "boolean" State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil))
   2287 2180 t nil))
 (on_method_MVA_TCC2 0
  (on_method_MVA_TCC2-1 nil 3387174104 3428745608
   ("" (skosimp*)
    (("" (expand "wf_PEvent")
      (("" (assert)
        (("" (use "wf_state_implies_wf_PSt")
          (("" (assert) (("" (expand "wf_state") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((wf_PEvent const-decl "boolean" MVACommonSemantics nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil))
   373 360 t nil))
 (on_method_entry_MP_TCC1 0
  (on_method_entry_MP_TCC1-1 nil 3387174104 3428745609
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_entry")
        (("" (assert)
          (("" (split -1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (skosimp*)
                (("2" (split -9)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "on_method_MVA")
                        (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   943 850 t nil))
 (on_method_exit_normal_MP_TCC1 0
  (on_method_exit_normal_MP_TCC1-1 nil 3387174104 3428745610
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_normal")
        (("" (split -1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (skosimp*)
              (("2" (assert)
                (("2" (split -7)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   337 290 t nil))
 (on_method_exit_normal_MP_TCC2 0
  (on_method_exit_normal_MP_TCC2-2 nil 3405932631 3428745610
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (expand "method_pred")
          (("" (flatten) (("" (inst? -5) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil))
   885 840 t nil)
  (on_method_exit_normal_MP_TCC2-1 nil 3401773402 3405932553
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   146 140 t nil))
 (on_method_exit_normal_MP_TCC3 0
  (on_method_exit_normal_MP_TCC3-1 nil 3401773402 3428745612
   ("" (subtype-tcc) nil nil) proved-complete
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   1572 1500 nil nil))
 (on_method_exit_normal_MP_TCC4 0
  (on_method_exit_normal_MP_TCC4-1 nil 3401773402 3428745615
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean" MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram nil)
    (MVA_events_correspond_to_methods const-decl "boolean" MonitoredProgram
     nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_store const-decl "boolean" State nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   2846 2640 nil nil))
 (on_method_exit_normal_MP_TCC5 0
  (on_method_exit_normal_MP_TCC5-1 nil 3401773402 3428745618
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean" MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram nil)
    (MVA_events_correspond_to_methods const-decl "boolean" MonitoredProgram
     nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_store const-decl "boolean" State nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   2944 2700 nil nil))
 (on_method_exit_normal_MP_TCC6 0
  (on_method_exit_normal_MP_TCC6-3 nil 3412316988 3428745619
   (";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
    (skosimp*)
    ((";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
      (typepred "md!1")
      ((";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
        (expand "wf_Expr")
        ((";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
          (expand "wf_Method")
          ((";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
            (expand "method_pred")
            ((";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
              (flatten)
              ((";;; Proof on_method_exit_normal_MP_TCC6-2 for formula MonitoredProgramSemantics.on_method_exit_normal_MP_TCC6"
                (inst? -2) nil))))))))))))
    ";;; developed with shostak decision procedures")
   proved-incomplete
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   904 840 nil nil)
  (on_method_exit_normal_MP_TCC6-2 nil 3405932645 3412316945
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_BoolExpr")
        (("" (expand "wf_Method")
          (("" (expand "method_pred")
            (("" (flatten) (("" (inst? -2) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil))
   347 310 t nil)
  (on_method_exit_normal_MP_TCC6-1 nil 3401773402 3405932557
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_BoolExpr")
        (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   152 150 t nil))
 (on_method_exit_normal_MP_TCC7 0
  (on_method_exit_normal_MP_TCC7-1 nil 3401773402 3428745621
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   1767 350 t nil))
 (on_method_exit_exceptional_MP_TCC1 0
  (on_method_exit_exceptional_MP_TCC1-1 nil 3387174104 3428745621
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (expand "on_method_exit_exceptional")
        (("" (split -1)
          (("1" (flatten)
            (("1" (skosimp*)
              (("1" (split -8)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (split -7)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (replace -2)
                              (("2" (typepred "update_PState")
                                (("2" (expand "update_PState_type")
                                  (("2" (inst?)
                                    (("2" (inst -1 "s_new!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "raise")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-complete
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   317 290 t nil))
 (on_method_exit_exceptional_MP_TCC2 0
  (on_method_exit_exceptional_MP_TCC2-2 nil 3405932656 3428745622
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method")
        (("" (expand "method_pred")
          (("" (flatten) (("" (inst? -6) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   proved-complete
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil))
   869 810 t nil)
  (on_method_exit_exceptional_MP_TCC2-1 nil 3401773402 3405932557
   ("" (skosimp*)
    (("" (typepred "md!1")
      (("" (expand "wf_Method") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   141 140 t nil))
 (on_method_exit_exceptional_MP_TCC3 0
  (on_method_exit_exceptional_MP_TCC3-1 nil 3401773402 3428745623
   ("" (subtype-tcc) nil nil) proved-complete
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   1561 1480 nil nil))
 (on_method_exit_exceptional_MP_TCC4 0
  (on_method_exit_exceptional_MP_TCC4-1 nil 3401773402 3428745626
   ("" (subtype-tcc) nil nil) proved-incomplete
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean" MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram nil)
    (MVA_events_correspond_to_methods const-decl "boolean" MonitoredProgram
     nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_store const-decl "boolean" State nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (choose const-decl "(p)" sets nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (catch const-decl "PState" State nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   2783 2600 nil nil))
 (on_method_exit_exceptional_MP_TCC5 0
  (on_method_exit_exceptional_MP_TCC5-1 nil 3401773402 3428745626
   ("" (expand "on_method_event_type")
    (("" (skosimp*)
      (("" (split -1)
        (("1" (skosimp*)
          (("1" (assert)
            (("1" (replace -9)
              (("1" (lift-if)
                (("1" (assert)
                  (("1" (split 2)
                    (("1" (propax) nil nil)
                     ("2" (expand "update_PState")
                      (("2" (expand "raise") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert) (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (raise const-decl "PState" State nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   390 360 t nil))
 (initial_MP_state_TCC1 0
  (initial_MP_state_TCC1-1 nil 3387174104 3428745627
   ("" (subtype-tcc) nil nil) proved-complete
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (MVA_events_correspond_to_methods const-decl "boolean" MonitoredProgram
     nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean" MonitoredProgram nil)
    (union const-decl "set" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   686 630 nil nil))
 (IMP_SemanticsProofs_TCC1 0
  (IMP_SemanticsProofs_TCC1-1 nil 3392371550 3428745629
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (skosimp*)
        (("" (expand "on_method_entry")
          (("" (split -2)
            (("1" (flatten)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (skosimp*)
                  (("2" (replace -3 :dir rl)
                    (("2" (replace -13)
                      (("2" (expand "check_assertion")
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2" (copy -13)
                              (("2"
                                (apply (repeat (inst? -1 :where (-6 -20))))
                                (("1" (assert)
                                  (("1" (flatten)
                                    (("1" (case-replace "tau1!1 = tau1!2")
                                      (("1"
                                        (copy -17)
                                        (("1"
                                          (apply
                                           (repeat
                                            (inst? -1 :where (-13 -27))))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case-replace
                                                 "tau2!1 = tau2!2")
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst?
                                                     -21
                                                     :where
                                                     (-18 -32))))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -21)
                                                        (("1"
                                                          (split -37)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -3)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (split -30)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (apply
                                                           (branch
                                                            (split -17)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -3)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (split -23)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (split -10)
                                              (("1"
                                                (flatten)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1812 1670 t nil))
 (IMP_SemanticsProofs_TCC2 0
  (IMP_SemanticsProofs_TCC2-2 nil 3392373362 3428745630
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (skosimp*)
              (("2" (expand "check_assertion")
                (("2" (flatten)
                  (("2" (skosimp*)
                    (("2" (replace -6 :dir rl)
                      (("2" (replace -20)
                        (("2" (copy -14)
                          (("2" (apply (repeat (inst? -1 :where (-4 -18))))
                            (("2" (assert)
                              (("2" (flatten)
                                (("2" (replace -1)
                                  (("2"
                                    (case-replace "tau2!1 = tau2!2" :hide? t)
                                    (("1" (copy -17)
                                      (("1"
                                        (apply
                                         (repeat (inst? -1 :where (-12 -26))))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case-replace
                                               "tau3!1 = tau3!2"
                                               :hide?
                                               t)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst?
                                                   -20
                                                   :where
                                                   (-17 -31))))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -34)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (split -18)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split 3)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -3)
                                                (("2"
                                                  (replace -29)
                                                  (("2"
                                                    (replace -15)
                                                    (("2"
                                                      (lift-if)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -22)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   1124 970 t nil)
  (IMP_SemanticsProofs_TCC2-1 nil 3392371550 3392371598
   ("" (assuming-tcc) nil nil) unfinished nil 2662 2380 nil nil))
 (IMP_SemanticsProofs_TCC3 0
  (IMP_SemanticsProofs_TCC3-2 nil 3392373370 3428745631
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert)
            (("1" (skosimp*)
              (("1" (expand "check_assertion")
                (("1" (flatten)
                  (("1" (skosimp*)
                    (("1" (replace -7 :dir rl)
                      (("1" (replace -19)
                        (("1" (copy -13)
                          (("1" (apply (repeat (inst? -1 :where (-5 -17))))
                            (("1" (assert)
                              (("1" (flatten)
                                (("1" (replace -1)
                                  (("1"
                                    (case-replace "tau2!1 = tau2!2" :hide? t)
                                    (("1"
                                      (apply
                                       (repeat (inst? -16 :where (-12 -24))))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -14)
                                            (("1"
                                              (case-replace "tau3!1 = tau3!2")
                                              (("1"
                                                (replace -29)
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (replace -13)
                                                (("2"
                                                  (replace -27)
                                                  (("2"
                                                    (replace -18)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -21)
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (split -4)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (catch const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   796 730 t nil)
  (IMP_SemanticsProofs_TCC3-1 nil 3392371550 3392371601
   ("" (assuming-tcc) nil nil) unfinished nil 2668 2370 nil nil))
 (IMP_SemanticsProofs_TCC4 0
  (IMP_SemanticsProofs_TCC4-1 nil 3392371550 3428745632
   ("" (skosimp*)
    (("" (expand "execute_CaseJML")
      (("" (expand* "extend" "id")
        (("" (lift-if)
          (("" (split -2)
            (("1" (flatten)
              (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (flatten)
                  (("2"
                    (inst -4
                     "IfThenElse(PROJ_1(car(branches!1)), PROJ_2(car(branches!1)),
                                   CaseJML(cdr(branches!1)))" "v1!1" "v2!1"
                     "s!1" "s1!1" "s2!1" "n1!1" "n2!1" "n1!1 - 1" "n2!1 - 1")
                    (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (extend const-decl "R" extend nil))
   556 480 t nil))
 (IMP_SemanticsProofs_TCC5 0
  (IMP_SemanticsProofs_TCC5-1 nil 3392371550 3428745632
   ("" (skosimp*)
    (("" (expand "execute_set")
      (("" (skosimp*)
        ((""
          (inst -1 "e!1" "v!1" "v!2" "s!1" "tau!1" "tau!2" "n1!1" "n2!1"
           "n1!1 - 1" "n2!1 - 1")
          (("1" (assert)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (replace -3)
                    (("1" (replace -6 :dir rl) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil) ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   438 410 t nil))
 (IMP_SemanticsProofs_TCC6 0
  (IMP_SemanticsProofs_TCC6-1 nil 3397385945 3428745633
   ("" (skosimp*)
    (("" (expand "execute_assert")
      (("" (split -2)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (assert)
            (("2" (expand "check_assertion")
              (("2" (skosimp*)
                (("2" (apply (repeat (inst? -5 :where (-2 -7))))
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (replace -5)
                        (("1" (replace -7)
                          (("1" (lift-if)
                            (("1" (split -3)
                              (("1" (flatten) (("1" (assert) nil nil)) nil)
                               ("2" (split -10)
                                (("1" (flatten) (("1" (assert) nil nil)) nil)
                                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   514 470 t nil))
 (determ_step_MP 0
  (determ_step_MP-1 nil 3396350156 3432903865
   ("" (skosimp*)
    (("" (lemma "derive_determ_step")
      ((""
        (inst -1 "p!1" "n1!1" "n2!1" "b!1" "v1!1" "v2!1" "sigma!1" "sigma1!1"
         "sigma2!1")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (derive_determ_step formula-decl nil SemanticsProofs nil))
   3422 3370 t shostak))
 (wf_initial_MP_state 0
  (wf_initial_MP_state-1 nil 3390055553 3432903869
   ("" (skosimp*)
    (("" (expand "wf_MP")
      (("" (flatten)
        (("" (expand "initial_MP_state")
          (("" (expand "wf_state")
            (("" (split 1)
              (("1" (use "wf_initial_MVA_state") (("1" (assert) nil nil)) nil)
               ("2" (use "wf_initial_Program_state") (("2" (assert) nil nil))
                nil)
               ("3" (use "wf_initial_ghost_state")
                (("1" (assert) nil nil)
                 ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (initial_MP_state const-decl "MPState" MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_initial_MVA_state formula-decl nil MVACommonSemantics nil)
    (wf_initial_Program_state formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil) nil
    (get_GhostDecl const-decl "lift[Decl]" ProgramFunctions nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (initial_MVA_state const-decl "AState" MVACommonSemantics nil)
    (FALSE const-decl "bool" booleans nil)
    (initial_Program_state const-decl "PState" State nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bottom adt-constructor-decl "(Bottom?)" Val_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (wf_initial_ghost_state formula-decl nil SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil))
   4154 4060 t shostak))
 (wf_update_PState 0
  (wf_update_PState-1 nil 3392375856 3432903873 ("" (grind) nil nil) unchecked
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_store const-decl "boolean" State nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_local const-decl "boolean" State nil) nil nil
    (wf_state const-decl "boolean" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil))
   4274 4140 nil nil))
 (wf_update_GhostVars 0
  (wf_update_GhostVars-1 nil 3392375867 3432903876
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (expand "update_GhostVars")
        (("" (flatten) (("" (assert) nil))))))))
    nil)
   unchecked
   ((wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil))
   3303 3230 nil nil))
 (wf_state_update_stack 0
  (wf_state_update_stack-2 nil 3428746298 3432903881
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                                                            ({x: [Name, Val[Name]] |
                                                                EXISTS (l: Decl[Name]):
                                                                  lvds!1(l) AND
                                                                   name(l) = PROJ_1(x) AND
                                                                    default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (expand "update_PState")
                      (("1" (expand "o" 1 2)
                        (("1" (expand "o")
                          (("1" (skosimp*)
                            (("1" (use "wf_state_update_local")
                              (("1"
                                (case "wf_state(program(p!1))
                                                                            (update_local(name(arg!1), param_val!1)
                                                                                         (update_locals({x: [Name, Val[Name]]
                                                                                                         |
                                                                                                         EXISTS
                                                                                                         (l: Decl[Name]):
                                                                                                         lvds!1(l)
                                                                                                         AND
                                                                                                         name(l) = PROJ_1(x)
                                                                                                         AND
                                                                                                         default_value(jtype(l))
                                                                                                         =
                                                                                                         PROJ_2(x)})
                                                                                                       (pstate(s!1))))")
                                (("1" (assert)
                                  (("1" (expand "wf_state" -1)
                                    (("1" (inst -1 "This")
                                      (("1" (flatten) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (assert)
                                  (("2" (hide 2)
                                    (("2" (use "wf_state_update_local")
                                      (("2"
                                        (case
                                         "wf_state(program(p!1))
                                                                                        (update_locals({x: [Name, Val[Name]] |
                                                                                                          EXISTS (l: Decl[Name]):
                                                                                                            lvds!1(l) AND
                                                                                                             name(l) = PROJ_1(x) AND
                                                                                                              default_value(jtype(l)) = PROJ_2(x)})
                                                                                                      (pstate(s!1)))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "arg!1")
                                            (("1"
                                              (expand "wf_state" -2)
                                              (("1"
                                                (inst -2 "name(arg!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand "var_names")
                                                      (("1" (inst?) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide -1 -2)
                                            (("2"
                                              (use "wf_state_update_locals")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (hide 2 3)
                                                    (("2"
                                                      (replace -3 :dir rl)
                                                      (("2"
                                                        (expand
                                                         "default_value")
                                                        (("2"
                                                          (hide -4)
                                                          (("2"
                                                            (hide -3)
                                                            (("2"
                                                              (expand
                                                               "wf_state"
                                                               -3)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "var_names")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                                                       EXISTS (l: Decl[Name]):
                                                         lvds!1(l) AND
                                                          name(l) = PROJ_1(x) AND
                                                           default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : Decl[Name] |
                                                         lvds!1(l) AND
                                                          name(l) = PROJ_1(x) AND
                                                           default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (apply-extensionality :hide? t) nil
                                  nil))
                                nil)
                               ("2" (rewrite "nonempty_exists")
                                (("2" (typepred "x2!1")
                                  (("2" (skosimp*)
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (rewrite "nonempty_exists")
                                (("3" (typepred "x1!1")
                                  (("3" (skosimp*)
                                    (("3" (inst?) (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2" (skosimp*)
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((update_stack const-decl "FullState" Semantics nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (wf_state_update_local formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_update_locals formula-decl nil State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" State nil)
    (update_locals def-decl "PState" State nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil) nil
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (This const-decl "Name" Program nil)
    (update_local const-decl "PState" State nil)
    (O const-decl "T3" function_props nil) (PSt type-eq-decl nil State nil)
    (lift type-decl nil lift_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil) nil nil
    nil (injective? const-decl "bool" functions nil) nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil))
   4510 4350 t nil)
  (wf_state_update_stack-1 nil 3392375879 3428745636
   ("" (skosimp*)
    (("" (expand "update_stack")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (lemma "wf_update_PState")
            (("1"
              (case "is_finite[[Name, Val[Name]]]
                                                   ({x: [Name, Val[Name]] |
                                                       EXISTS (l: LocalVarDecl[Name]):
                                                         lvds!1(l) AND
                                                          name(l) = PROJ_1(x) AND
                                                           default_value[Name](jtype(l)) = PROJ_2(x)})")
              (("1" (inst? -2 :where 1)
                (("1" (inst -2 "p!1")
                  (("1" (assert)
                    (("1" (hide 4)
                      (("1" (expand "update_PState")
                        (("1" (expand "o" 1 2)
                          (("1" (expand "o")
                            (("1" (skosimp*)
                              (("1" (use "wf_state_update_local")
                                (("1"
                                  (case "wf_state(program(p!1))
                                                                 (update_local(name(arg!1), param_val!1)
                                                                              (update_locals({x: [Name, Val[Name]]
                                                                                              |
                                                                                              EXISTS
                                                                                              (l: LocalVarDecl[Name]):
                                                                                              lvds!1(l)
                                                                                              AND
                                                                                              name(l) = PROJ_1(x)
                                                                                              AND
                                                                                              default_value(jtype(l))
                                                                                              =
                                                                                              PROJ_2(x)})
                                                                                            (pstate(s!1))))")
                                  (("1" (assert)
                                    (("1" (expand "wf_state" -1)
                                      (("1"
                                        (inst -1 "This")
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert)
                                    (("2" (hide 2)
                                      (("2"
                                        (use "wf_state_update_local")
                                        (("2"
                                          (case
                                           "wf_state(program(p!1))
                                                                           (update_locals({x: [Name, Val[Name]] |
                                                                                             EXISTS (l: LocalVarDecl[Name]):
                                                                                               lvds!1(l) AND
                                                                                                name(l) = PROJ_1(x) AND
                                                                                                 default_value(jtype(l)) = PROJ_2(x)})
                                                                                         (pstate(s!1)))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "arg!1")
                                              (("1"
                                                (expand "wf_state" -2)
                                                (("1"
                                                  (inst -2 "name(arg!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "var_names")
                                                        (("1"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (use "wf_state_update_locals")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (hide 2 3)
                                                      (("2"
                                                        (replace -3 :dir rl)
                                                        (("2"
                                                          (expand
                                                           "default_value")
                                                          (("2"
                                                            (hide -4)
                                                            (("2"
                                                              (hide -3)
                                                              (("2"
                                                                (expand
                                                                 "wf_state"
                                                                 -3)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "var_names")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "lvds!1")
                (("2" (hide 2 -2)
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1" "LAMBDA(x : ({x: [Name, Val[Name]] |
                                                 EXISTS (l: LocalVarDecl[Name]):
                                                   lvds!1(l) AND
                                                    name(l) = PROJ_1(x) AND
                                                     default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l : LocalVarDecl[Name] |
                                                   lvds!1(l) AND
                                                    name(l) = PROJ_1(x) AND
                                                     default_value[Name](jtype(l)) = PROJ_2(x)}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (apply-extensionality :hide? t) nil
                                  nil))
                                nil)
                               ("2" (rewrite "nonempty_exists")
                                (("2" (typepred "x2!1")
                                  (("2" (skosimp*)
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (rewrite "nonempty_exists")
                                (("3" (typepred "x1!1")
                                  (("3" (skosimp*)
                                    (("3" (inst?) (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "x!1")
                            (("2" (rewrite "nonempty_exists")
                              (("2" (skosimp*)
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*) nil nil))
        nil))
      nil))
    nil)
   unfinished
   ((update_stack const-decl "FullState" Semantics nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (defined? const-decl "boolean" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (JType type-decl nil JType_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (wf_state_update_local formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_update_locals formula-decl nil State nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" State nil)
    (update_locals def-decl "PState" State nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (Method type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (This const-decl "Name" Program nil)
    (update_local const-decl "PState" State nil)
    (O const-decl "T3" function_props nil) (PSt type-eq-decl nil State nil)
    (lift type-decl nil lift_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil))
   286 260 t nil))
 (on_method_MVA_yields_wf_AState 0
  (on_method_MVA_yields_wf_AState-1 nil 3402486501 3432903885
   ("" (skosimp)
    (("" (expand "on_method_MVA")
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (split 2)
            (("1" (skosimp*)
              (("1" (expand "step")
                (("1"
                  (name-replace "t" "choose(LAMBDA (t: Transition):
                                                ts(mva(mp!1))(t) AND scp(t) = cp(astate(s!1)) AND
                                                event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                guard(t)(stA(astate(s!1)), fvs(st(pstate(s!1))), arg!1))")
                  (("1" (lift-if)
                    (("1" (assert)
                      (("1" (split 1)
                        (("1" (hide -1)
                          (("1" (skosimp*)
                            (("1" (expand "wf_AState")
                              (("1" (typepred "t")
                                (("1" (typepred "mva(mp!1)")
                                  (("1" (expand* "wf_MVA" "wf_Trans")
                                    (("1" (flatten)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (use
                                             "execute_action_yields_wf_state")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "wf_state"
                                                 "wf_AState")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (use
                                                     "wf_state_implies_wf_PSt")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (assert)
                            (("2" (split -1)
                              (("1" (propax) nil nil) ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (rewrite "nonempty_exists")
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (skosimp*)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "wf_state") (("2" (flatten) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "wf_state") (("2" (flatten) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (list type-decl nil list_adt nil) (OneAction type-eq-decl nil MVA nil)
    (execute_action_yields_wf_state formula-decl nil MVACommonSemantics nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil nil nil nil
    (step const-decl "lift[AState]" MVAPartialSemantics nil))
   3669 3570 t shostak))
 (on_method_MVA_yields_wf_state 0
  (on_method_MVA_yields_wf_state-1 nil 3411989246 3432903888
   ("" (skosimp*)
    (("" (use "on_method_MVA_yields_wf_AState")
      (("" (assert)
        (("" (expand "wf_state")
          (("" (flatten)
            (("" (expand "on_method_MVA")
              (("" (lift-if)
                (("" (assert)
                  (("" (expand "wf_ghoststate")
                    (("" (expand "is_ghost")
                      (("" (split 1)
                        (("1" (skosimp*) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((on_method_MVA_yields_wf_AState formula-decl nil MonitoredProgramSemantics
     nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil))
   3488 3400 t shostak))
 (derive_yields_wf_state_MP 0
  (derive_yields_wf_state_MP-5 nil 3410271960 3432987344
   ("" (auto-rewrite "defined?")
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                 (sigma1, sigma2: MPState):
                            wf_MP(mp) IMPLIES
                             wf_state(mp)(sigma1) IMPLIES
                              derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2" (split -4)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (lemma "wf_Body_preserved_by_proper_subterm")
                          (("2" (inst -1 "program(mp!1)" "b!1" _)
                            (("2"
                              (apply (branch (split -2)
                                      ((then (flatten) (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -7 "m2!1")
                                  (("1" (inst -7 "m1!1")
                                    (("1" (assert)
                                      (("1"
                                        (apply (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                  (("1" (skosimp*)
                                    (("1" (inst -6 "x!1 - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -6 :where -3)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst-cp -7 "m1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (apply
                                             (repeat (inst? -8 :where -3)))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "check_for_exception"
                                                 "check_for_exception_final")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -4)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -10 "m2!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -10
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst-cp -7 "m2!1")
                                          (("1"
                                            (inst -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -7 :where -3)))
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst? -8 :where -4)))
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then (flatten) (assert)))))
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst -6 "x!1 - 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst? -6 :where -3)))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 9)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "update_PState")
                                                                        (("2"
                                                                          (use
                                                                           "wf_state_update")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "derive_bottom_iff_exception_step")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then (flatten) (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst-cp -7 "m2!1")
                                                  (("1"
                                                    (inst -7 "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -7
                                                           :where
                                                           -3)))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "check_for_exception")
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split -4)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split -2)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -10
                                                                       :where
                                                                       -2)))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -9
                                                                       :where
                                                                       -1)))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp -7 "m5!1")
                                                    (("1"
                                                      (inst-cp -7 "m4!1")
                                                      (("1"
                                                        (inst-cp -7 "m2!1")
                                                        (("1"
                                                          (inst-cp -7 "m1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -9
                                                                   :where
                                                                   -4)))
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -10
                                                                     :where
                                                                     -5)))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -11
                                                                       :where
                                                                       -5)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -5)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (use
                                                                             "wf_update_PState")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_state_raise")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("2"
                                                                              (auto-rewrite
                                                                               "id")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_arg_is_local"
                                                                                 ("s"
                                                                                  "pstate(tau3!1)"))
                                                                                (("2"
                                                                                  (use
                                                                                   "get_class_in_classes")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "lookup_mthd")
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -3)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "method_names")
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "m!1 = md!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "wf_state(mp!1)(tau3!1)")
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "wf_state(mp!1)(tau4!1)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "wf_state(mp!1)(tau6!1)")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "wf_state(mp!1)(tau7!1)")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -20)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "wf_update_PState")
                                                                                                                        (("1"
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           14)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "mp!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_state"
                                                                                                                                     (1
                                                                                                                                      -1
                                                                                                                                      -29))
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "wf_state"
                                                                                                                                         -30)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -30)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -13)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "is_local")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "is_field")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("4"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -17)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "on_method_exit_normal_MP")
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "check_assertion")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (inst-cp
                                                                                                                                     -37
                                                                                                                                     "m3!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (inst-cp
                                                                                                                                       -37
                                                                                                                                       "m2!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -37
                                                                                                                                         "m1!2")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (apply
                                                                                                                                             (repeat
                                                                                                                                              (inst?
                                                                                                                                               -37
                                                                                                                                               :where
                                                                                                                                               -3)))
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (repeat
                                                                                                                                                  (inst?
                                                                                                                                                   -38
                                                                                                                                                   :where
                                                                                                                                                   -8)))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -39
                                                                                                                                                       :where
                                                                                                                                                       -11)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -39)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -13)
                                                                                                                                                          (("1"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (split
                                                                                                                                                                   2)
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (split
                                                                                                                                                                   1)
                                                                                                                                                                  (skosimp*)))
                                                                                                                                                                (("1"
                                                                                                                                                                  (apply
                                                                                                                                                                   (then
                                                                                                                                                                    (use
                                                                                                                                                                     "wf_update_PState"
                                                                                                                                                                     ("s1"
                                                                                                                                                                      "tau1!4"))
                                                                                                                                                                    (assert)
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (expand
                                                                                                                                                                     "update_PState")))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_state_raise")
                                                                                                                                                                      (assert)))
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (apply
                                                                                                                                                                   (then
                                                                                                                                                                    (use
                                                                                                                                                                     "wf_update_PState"
                                                                                                                                                                     ("s1"
                                                                                                                                                                      "tau1!4"))
                                                                                                                                                                    (assert)
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (expand
                                                                                                                                                                     "update_PState")
                                                                                                                                                                    (use
                                                                                                                                                                     "wf_state_raise")
                                                                                                                                                                    (assert)))
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (split
                                                                                                                                                           -38)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -10)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (apply
                                                                                                                                                                   (then
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (skosimp*)))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                       ("s1"
                                                                                                                                                                        "tau1!3"))
                                                                                                                                                                      (assert)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_state_raise")
                                                                                                                                                                        (assert)))
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                       ("s1"
                                                                                                                                                                        "tau1!3"))
                                                                                                                                                                      (assert)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_state_raise")
                                                                                                                                                                      (assert)))
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -5)
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "on_method_MVA_yields_wf_AState")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_state")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "wf_ghoststate")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "is_ghost")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "on_method_MVA")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "on_method_exit_exceptional_MP")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "check_assertion")
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (inst-cp
                                                                                                                                       -34
                                                                                                                                       "m2!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -34
                                                                                                                                         "m1!2")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (apply
                                                                                                                                             (repeat
                                                                                                                                              (inst?
                                                                                                                                               -34
                                                                                                                                               :where
                                                                                                                                               -2)))
                                                                                                                                            (("1"
                                                                                                                                              (apply
                                                                                                                                               (repeat
                                                                                                                                                (inst?
                                                                                                                                                 -35
                                                                                                                                                 :where
                                                                                                                                                 -7)))
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -34)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (case
                                                                                                                                                       "wf_state(mp!1)(tau2!2)")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "wf_state(mp!1)(tau3!2)")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -12)
                                                                                                                                                            (("1"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (split
                                                                                                                                                                   3)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_update_PState"
                                                                                                                                                                         ("s1"
                                                                                                                                                                          "tau3!2"))
                                                                                                                                                                        (assert)
                                                                                                                                                                        (skosimp*)
                                                                                                                                                                        (expand
                                                                                                                                                                         "update_PState")))
                                                                                                                                                                      (("2"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (use
                                                                                                                                                                           "wf_state_raise")
                                                                                                                                                                          (assert)))
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (replace
                                                                                                                                                             -10)
                                                                                                                                                            (("2"
                                                                                                                                                              (lift-if)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (apply
                                                                                                                                                                   (then
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (skosimp*)))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                       ("s1"
                                                                                                                                                                        "tau1!3"))
                                                                                                                                                                      (assert)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (apply
                                                                                                                                                                       (then
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_state_raise")
                                                                                                                                                                        (assert)))
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (apply
                                                                                                                                                                     (then
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_update_PState"
                                                                                                                                                                       ("s1"
                                                                                                                                                                        "tau1!3"))
                                                                                                                                                                      (assert)
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")
                                                                                                                                                                      (use
                                                                                                                                                                       "wf_state_raise")
                                                                                                                                                                      (assert)))
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (use
                                                                                                                                                         "on_method_MVA_yields_wf_AState")
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -6)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "wf_state")
                                                                                                                                                              (("2"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_ghost")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "on_method_MVA")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (apply
                                                                                                                                                     (then
                                                                                                                                                      (use
                                                                                                                                                       "wf_update_PState"
                                                                                                                                                       ("s1"
                                                                                                                                                        "tau6!1"))
                                                                                                                                                      (assert)
                                                                                                                                                      (skosimp*)
                                                                                                                                                      (expand
                                                                                                                                                       "update_PState")))
                                                                                                                                                    (("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (use
                                                                                                                                                         "wf_state_catch")
                                                                                                                                                        (assert)))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "on_method_entry_MP")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "on_method_entry")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "check_assertion")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           -11)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst-cp
                                                                                                                             -34
                                                                                                                             "m3!2")
                                                                                                                            (("2"
                                                                                                                              (inst-cp
                                                                                                                               -34
                                                                                                                               "m2!2 - 1")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -34
                                                                                                                                 "m1!2 - 1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (apply
                                                                                                                                     (repeat
                                                                                                                                      (inst?
                                                                                                                                       -34
                                                                                                                                       :where
                                                                                                                                       -4)))
                                                                                                                                    (("1"
                                                                                                                                      (apply
                                                                                                                                       (repeat
                                                                                                                                        (inst?
                                                                                                                                         -35
                                                                                                                                         :where
                                                                                                                                         -7)))
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -36
                                                                                                                                           :where
                                                                                                                                           -9)))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -36)
                                                                                                                                            (("1"
                                                                                                                                              (apply
                                                                                                                                               (branch
                                                                                                                                                (split
                                                                                                                                                 -23)
                                                                                                                                                ((then
                                                                                                                                                  (flatten)
                                                                                                                                                  (assert)
                                                                                                                                                  (flatten)
                                                                                                                                                  (assert)))))
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "on_method_MVA_yields_wf_AState")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "wf_state")
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "is_ghost")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "on_method_MVA")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (split
                                                                                                                                               -35)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -9)
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (skosimp*)))
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (use
                                                                                                                                                           "wf_update_PState"
                                                                                                                                                           ("s1"
                                                                                                                                                            "tau1!4"))
                                                                                                                                                          (assert)
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")))
                                                                                                                                                        (("1"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (use
                                                                                                                                                             "wf_state_raise")
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (use
                                                                                                                                                           "wf_update_PState"
                                                                                                                                                           ("s1"
                                                                                                                                                            "tau1!4"))
                                                                                                                                                          (assert)
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")
                                                                                                                                                          (use
                                                                                                                                                           "wf_state_raise")
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (replace
                                                                                                                                                 -5)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (apply
                                                                                                                                                       (then
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (skosimp*)))
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (use
                                                                                                                                                           "wf_update_PState"
                                                                                                                                                           ("s1"
                                                                                                                                                            "tau1!3"))
                                                                                                                                                          (assert)
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")))
                                                                                                                                                        (("1"
                                                                                                                                                          (apply
                                                                                                                                                           (then
                                                                                                                                                            (use
                                                                                                                                                             "wf_state_raise")
                                                                                                                                                            (assert)))
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (apply
                                                                                                                                                         (then
                                                                                                                                                          (use
                                                                                                                                                           "wf_update_PState"
                                                                                                                                                           ("s1"
                                                                                                                                                            "tau1!3"))
                                                                                                                                                          (assert)
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")
                                                                                                                                                          (use
                                                                                                                                                           "wf_state_raise")
                                                                                                                                                          (assert)))
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (typepred
                                                                                                                                     "md!1")
                                                                                                                                    (expand
                                                                                                                                     "wf_Method")
                                                                                                                                    (expand
                                                                                                                                     "method_pred")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -9)
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "wf_state_update_stack")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "getLocalDecls")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "down(get_class(program(mp!1))(a!1))")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "md!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "getLocalDecls")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "down(get_class(program(mp!1))(a!1))")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "getLocalDecls")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (typepred
                                                                                                           "choose({m: Method[Name] |
                                                                                                                                                                                                                                                                                                                         classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                                                                                                                                                                                                                                          methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                                                                                                                                                                                                                                           name(m) = name(b!1)})")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "program(mp!1)")
                                                                                                              (("1"
                                                                                                                (expand*
                                                                                                                 "wf_Program"
                                                                                                                 "wf_Classes"
                                                                                                                 "wf_Class")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -4
                                                                                                                     "down(get_class(program(mp!1))(a!1))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -4
                                                                                                                           "m!1"
                                                                                                                           "md!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "nonempty_exists")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (typepred
                                                                         "md!1")
                                                                        (expand
                                                                         "wf_Method")
                                                                        (expand
                                                                         "method_pred")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (typepred
                                                                       "md!1")
                                                                      (expand
                                                                       "wf_Method")
                                                                      (expand
                                                                       "method_pred")
                                                                      (assert)))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (case
                                                       "    FORALL (
                                                                                                                                                                                                                               branches : (wf_Branches(program(mp!1))),
                                                                                                                                                                                                                               s1, s2 : MPState, v : Val, x : nat) :
                                                                                                                                                                                                                            execute_CaseJML(mp!1, branches, s1, s2, v, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                                                                                                                                                                                                                                                (b: (wf_Body(program(p))), sigma1: MPState,
                                                                                                                                                                                                                                                 v: Val[Name], sigma2: MPState)
                                                                                                                                                                                                                                                (m: below(k)):
                                                                                                                                                                                                                                           derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
                                                                                                                                                                                                                           y < x IMPLIES
                                                                                                                                                                                                                            (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                                                                                                                                                                                                                    (sigma1, sigma2: MPState):
                                                                                                                                                                                                                               wf_MP(mp) IMPLIES
                                                                                                                                                                                                                                wf_state(mp)(sigma1) IMPLIES
                                                                                                                                                                                                                                 derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
                                                                                                                                                                                                                                  wf_state(mp)(sigma2))) IMPLIES
                                                                                                                                                                                                                   wf_state(mp!1)(s2)")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (1 -7))
                                                        (("2"
                                                          (induct "branches")
                                                          (("1"
                                                            (typepred
                                                             "branches!1")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (expand
                                                               "execute_CaseJML")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "extend")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (expand
                                                               "execute_CaseJML"
                                                               -3)
                                                              (("3"
                                                                (expand*
                                                                 "extend"
                                                                 "id")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     "wf_Branches")
                                                                    (("3"
                                                                      (expand
                                                                       "every"
                                                                       -2)
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (rewrite
                                                                             "derive"
                                                                             -6)
                                                                            (("3"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "check_for_exception")
                                                                                    (("2"
                                                                                      (split
                                                                                       -4)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -15
                                                                                               "m1!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -15
                                                                                                     :where
                                                                                                     -6)))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau!1)")
                                                                                            (("1"
                                                                                              (split
                                                                                               -3)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -16
                                                                                                   "m2!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -16
                                                                                                         :where
                                                                                                         -2)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -8
                                                                                                   "tau!1"
                                                                                                   "s2!1"
                                                                                                   "v!2"
                                                                                                   "m2!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -18
                                                                                                           "y!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -18
                                                                                                                 :where
                                                                                                                 -4)))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "derive"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -14
                                                                                               "m1!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -14
                                                                                                     :where
                                                                                                     -5)))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (expand
                                                           "check_for_exception")
                                                          (("1"
                                                            (inst-cp
                                                             -8
                                                             "m2!1")
                                                            (("1"
                                                              (inst -8 "m1!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -8
                                                                     :where
                                                                     -4)))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -5)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -8
                                                             "m2!1")
                                                            (("1"
                                                              (inst -8 "m1!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -8
                                                                     :where
                                                                     -4)))
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -9
                                                                       :where
                                                                       -6)))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (expand
                                                             "execute_set")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -8
                                                                 "x!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -5)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               16)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (use
                                                                                   "wf_update_GhostVars")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (auto-rewrite
                                                                                         "id")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_ghoststate")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "is_ghost")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "update_GhostVars")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "update_store")
                                                                                                        (("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "b!1")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "wf_Body")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "b!1")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "subterm"
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (lemma
                                                                                                                                   "derive_bottom_iff_exception_step")
                                                                                                                                  (("1"
                                                                                                                                    (inst?
                                                                                                                                     -1
                                                                                                                                     :where
                                                                                                                                     -10)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (prop)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "x!1 - 1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -6
                                                                         :where
                                                                         -4)))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (replace -4)
                                                                  (("1"
                                                                    (use
                                                                     "wf_update_PState")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (expand
                                                                           "update_PState")
                                                                          (("1"
                                                                            (use
                                                                             "wf_state_raise")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -11
                                                                       "m3!1")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -11
                                                                         "m2!1")
                                                                        (("1"
                                                                          (inst
                                                                           -11
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -11
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "wf_state(mp!1)(tau2!1)")
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -14
                                                                                       :where
                                                                                       -8)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -14)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -11)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   20)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "wf_update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "update_PState")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_state"
                                                                                                           (1
                                                                                                            -1))
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "is_local")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "is_field")
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "wf_update_PState")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "wf_state_catch")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -6)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -15
                                                                                         :where
                                                                                         -3)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (use
                                                                                           "wf_update_PState")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "wf_state_catch")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (inst
                                                                       -6
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -6
                                                                             :where
                                                                             -4)))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "execute_assert")
                                                                      (("2"
                                                                        (expand
                                                                         "check_assertion")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (inst
                                                                             -7
                                                                             "x!1 - 1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -7
                                                                                   :where
                                                                                   -3)))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           22)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "wf_update_PState"
                                                                                                 ("s1"
                                                                                                  "tau1!1"))
                                                                                                (assert)
                                                                                                (skosimp*)
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (use
                                                                                                 "wf_state_raise")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unchecked
   ((wf_nat formula-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (check_for_exception_final const-decl "bool" SemanticsAuxiliaryFunctions
     nil)
    (check_for_exception const-decl "bool" SemanticsAuxiliaryFunctions nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil) nil
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_update formula-decl nil State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (update const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil) nil
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil) nil
    (check_assertion const-decl "boolean" SemanticsJML nil) nil
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (on_method_MVA_yields_wf_AState formula-decl nil MonitoredProgramSemantics
     nil)
    nil (wf_state_update_stack formula-decl nil MonitoredProgramSemantics nil)
    nil (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil) nil nil
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    nil (extend const-decl "R" extend nil)
    (list_induction formula-decl nil list_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (exc shared-adt-accessor-decl
     "[{x: Body | TryCatch?(x) OR Throw?(x)} -> Excpt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (update_store const-decl "Store" State nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   441210 57870 t nil)
  (derive_yields_wf_state_MP-4 nil 3406626437 3410271909
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                         (sigma1, sigma2: MPState):
                    wf_MP(mp) IMPLIES
                     wf_state(mp)(sigma1) IMPLIES
                      derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then (flatten) (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -7 "m2!1")
                                  (("1" (inst -7 "m1!1")
                                    (("1" (assert)
                                      (("1"
                                        (apply (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -8 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst -10 "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst? -7 :where -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -4)))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then (flatten) (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then (flatten) (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst -6 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split 13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -5 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp -7 "m2!1")
                                                          (("1"
                                                            (inst -7 "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -1)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("2"
                                                                                      (auto-rewrite
                                                                                       "id")
                                                                                      (("2"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("2"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "wf_state(mp!1)(tau3!1)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(mp!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   19)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "mp!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "wf_state"
                                                                                                                                             (1
                                                                                                                                              -1
                                                                                                                                              -29))
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state"
                                                                                                                                                 -30)
                                                                                                                                                (("1"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?
                                                                                                                                                       -30)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -13)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "is_local")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "is_field")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("4"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal_MP")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -37
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -37
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -37
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -37
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -38
                                                                                                                                                           :where
                                                                                                                                                           -8)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -39
                                                                                                                                                               :where
                                                                                                                                                               -11)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -39)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -13)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           2)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("s1"
                                                                                                                                                                              "tau1!4"))
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState"
                                                                                                                                                                             ("s1"
                                                                                                                                                                              "tau1!4"))
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_state_raise")
                                                                                                                                                                            (assert)))
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -38)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -10)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("s1"
                                                                                                                                                                                "tau1!3"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("s1"
                                                                                                                                                                                "tau1!3"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -5)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_state")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_ghoststate")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_ghost")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional_MP")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -34
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -34
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -34
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -35
                                                                                                                                                         :where
                                                                                                                                                         -7)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -34)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(mp!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(mp!1)(tau3!2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -12)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState"
                                                                                                                                                                                 ("s1"
                                                                                                                                                                                  "tau3!2"))
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -10)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("s1"
                                                                                                                                                                                "tau1!3"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState"
                                                                                                                                                                               ("s1"
                                                                                                                                                                                "tau1!3"))
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -6)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState"
                                                                                                                                                               ("s1"
                                                                                                                                                                "tau6!1"))
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "on_method_entry_MP")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "on_method_entry")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "check_assertion")
                                                                                                                            (("2"
                                                                                                                              (skosimp*)
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (branch
                                                                                                                                  (split
                                                                                                                                   -11)
                                                                                                                                  ((then
                                                                                                                                    (flatten)
                                                                                                                                    (assert)
                                                                                                                                    (flatten)
                                                                                                                                    (assert)))))
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (inst-cp
                                                                                                                                     -34
                                                                                                                                     "m3!2")
                                                                                                                                    (("2"
                                                                                                                                      (inst-cp
                                                                                                                                       -34
                                                                                                                                       "m2!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -34
                                                                                                                                         "m1!2 - 1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (apply
                                                                                                                                             (repeat
                                                                                                                                              (inst?
                                                                                                                                               -34
                                                                                                                                               :where
                                                                                                                                               -4)))
                                                                                                                                            (("1"
                                                                                                                                              (apply
                                                                                                                                               (repeat
                                                                                                                                                (inst?
                                                                                                                                                 -35
                                                                                                                                                 :where
                                                                                                                                                 -7)))
                                                                                                                                              (("1"
                                                                                                                                                (apply
                                                                                                                                                 (repeat
                                                                                                                                                  (inst?
                                                                                                                                                   -36
                                                                                                                                                   :where
                                                                                                                                                   -9)))
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -36)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (branch
                                                                                                                                                        (split
                                                                                                                                                         -23)
                                                                                                                                                        ((then
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)
                                                                                                                                                          (flatten)
                                                                                                                                                          (assert)))))
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (use
                                                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "wf_state")
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "wf_ghoststate")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "is_ghost")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (split
                                                                                                                                                       -35)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (split
                                                                                                                                                                 1)
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (split
                                                                                                                                                                 1)
                                                                                                                                                                (skosimp*)))
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                   ("s1"
                                                                                                                                                                    "tau1!4"))
                                                                                                                                                                  (assert)
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")))
                                                                                                                                                                (("1"
                                                                                                                                                                  (apply
                                                                                                                                                                   (then
                                                                                                                                                                    (use
                                                                                                                                                                     "wf_state_raise")
                                                                                                                                                                    (assert)))
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                   ("s1"
                                                                                                                                                                    "tau1!4"))
                                                                                                                                                                  (assert)
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (replace
                                                                                                                                                         -5)
                                                                                                                                                        (("2"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (split
                                                                                                                                                                 1)
                                                                                                                                                                (skosimp*)
                                                                                                                                                                (split
                                                                                                                                                                 1)
                                                                                                                                                                (skosimp*)))
                                                                                                                                                              (("1"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                   ("s1"
                                                                                                                                                                    "tau1!3"))
                                                                                                                                                                  (assert)
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")))
                                                                                                                                                                (("1"
                                                                                                                                                                  (apply
                                                                                                                                                                   (then
                                                                                                                                                                    (use
                                                                                                                                                                     "wf_state_raise")
                                                                                                                                                                    (assert)))
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (apply
                                                                                                                                                                 (then
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_update_PState"
                                                                                                                                                                   ("s1"
                                                                                                                                                                    "tau1!3"))
                                                                                                                                                                  (assert)
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (expand
                                                                                                                                                                   "update_PState")
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                  (assert)))
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (apply
                                                                                                                                           (then
                                                                                                                                            (typepred
                                                                                                                                             "md!1")
                                                                                                                                            (expand
                                                                                                                                             "wf_Method")
                                                                                                                                            (expand
                                                                                                                                             "method_pred")
                                                                                                                                            (assert)))
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -9)
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "wf_state_update_stack")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "getLocalDecls")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "down(get_class(program(mp!1))(a!1))")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "getLocalDecls")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "md!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "getLocalDecls")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "down(get_class(program(mp!1))(a!1))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                                                                                                                                                                     classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                                                                                                                                                                      methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                                                                                                                                                                       name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "program(mp!1)")
                                                                                                                      (("1"
                                                                                                                        (expand*
                                                                                                                         "wf_Program"
                                                                                                                         "wf_Classes"
                                                                                                                         "wf_Class")
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "down(get_class(program(mp!1))(a!1))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -4
                                                                                                                                   "m!1"
                                                                                                                                   "md!1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
                                                                                                                                                         branches : (wf_Branches(program(mp!1))),
                                                                                                                                                         s1, s2 : MPState, v : Val, x : nat) :
                                                                                                                                                      execute_CaseJML(mp!1, branches, s1, s2, v, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                                                                                                                                                                          (b: (wf_Body(program(p))), sigma1: MPState,
                                                                                                                                                                           v: Val[Name], sigma2: MPState)
                                                                                                                                                                          (m: below(k)):
                                                                                                                                                                     derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
                                                                                                                                                     y < x IMPLIES
                                                                                                                                                      (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                                                                                                                                              (sigma1, sigma2: MPState):
                                                                                                                                                         wf_MP(mp) IMPLIES
                                                                                                                                                          wf_state(mp)(sigma1) IMPLIES
                                                                                                                                                           derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
                                                                                                                                                            wf_state(mp)(sigma2))) IMPLIES
                                                                                                                                             wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "extend")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "execute_CaseJML"
                                                                         -3)
                                                                        (("3"
                                                                          (expand*
                                                                           "extend"
                                                                           "id")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Branches")
                                                                              (("3"
                                                                                (expand
                                                                                 "every"
                                                                                 -2)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "derive"
                                                                                       -6)
                                                                                      (("3"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_for_exception")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(tau!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -16
                                                                                                             "m2!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -16
                                                                                                                   :where
                                                                                                                   -2)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -8
                                                                                                             "tau!1"
                                                                                                             "s2!1"
                                                                                                             "v!2"
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -18
                                                                                                                     "y!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -18
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -14
                                                                                                         "m1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -14
                                                                                                               :where
                                                                                                               -5)))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -6)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -11
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -11
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -11
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -11
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -14
                                                                                                 :where
                                                                                                 -8)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -14)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             26)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_local")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "is_field")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -6)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "wf_update_PState"
                                                                                                           ("s1"
                                                                                                            "tau1!1"))
                                                                                                          (assert)
                                                                                                          (skosimp*)
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (use
                                                                                                           "wf_state_raise")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (on_method_MVA_yields_wf_AState formula-decl nil MonitoredProgramSemantics
     nil)
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   11840 10860 t nil)
  (derive_yields_wf_state_MP-3 nil 3405952143 3406611240
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                     (sigma1, sigma2: MPState):
                wf_MP(mp) IMPLIES
                 wf_state(mp)(sigma1) IMPLIES
                  derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then (flatten) (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -7 "m2!1")
                                  (("1" (inst -7 "m1!1")
                                    (("1" (assert)
                                      (("1"
                                        (apply (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -8 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst -10 "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst? -7 :where -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -4)))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then (flatten) (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then (flatten) (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst -6 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split 13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -5 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp -7 "m2!1")
                                                          (("1"
                                                            (inst -7 "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(mp!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(mp!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "mp!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal_MP")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -36
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -36
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -36
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -36
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -37
                                                                                                                                                           :where
                                                                                                                                                           -7)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -38
                                                                                                                                                               :where
                                                                                                                                                               -10)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -38)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -12)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -37)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_state")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_ghoststate")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_ghost")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional_MP")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -33
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -33
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -33
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -34
                                                                                                                                                         :where
                                                                                                                                                         -6)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(mp!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(mp!1)(tau3!2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -11)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState")
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                                                                                             classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                                                                                              methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                                                                                               name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "program(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry_MP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "on_method_entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -3)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -28
                                                                                                     "m3!2")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -28
                                                                                                       "m2!2 - 1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -28
                                                                                                         "m1!2 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -28
                                                                                                               :where
                                                                                                               -4)))
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -29
                                                                                                                 :where
                                                                                                                 -7)))
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -30
                                                                                                                   :where
                                                                                                                   -9)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -30)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -15)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_state")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_ghoststate")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -29)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("1"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
                                                                                                                      branches : (wf_Branches(program(mp!1))),
                                                                                                                      s1, s2 : MPState, v : Val, x : nat) :
                                                                                                                   execute_CaseJML(mp!1, branches, s1, s2, v, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                                                                                                                                       (b: (wf_Body(program(p))), sigma1: MPState,
                                                                                                                                        v: Val[Name], sigma2: MPState)
                                                                                                                                       (m: below(k)):
                                                                                                                                  derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
                                                                                                                  y < x IMPLIES
                                                                                                                   (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                                                                                                           (sigma1, sigma2: MPState):
                                                                                                                      wf_MP(mp) IMPLIES
                                                                                                                       wf_state(mp)(sigma1) IMPLIES
                                                                                                                        derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
                                                                                                                         wf_state(mp)(sigma2))) IMPLIES
                                                                                                          wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "extend")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "execute_CaseJML"
                                                                         -3)
                                                                        (("3"
                                                                          (expand*
                                                                           "extend"
                                                                           "id")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Branches")
                                                                              (("3"
                                                                                (expand
                                                                                 "every"
                                                                                 -2)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "derive"
                                                                                       -6)
                                                                                      (("3"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_for_exception")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(tau!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -16
                                                                                                             "m2!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -16
                                                                                                                   :where
                                                                                                                   -2)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -8
                                                                                                             "tau!1"
                                                                                                             "s2!1"
                                                                                                             "v!2"
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -18
                                                                                                                     "y!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -18
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -14
                                                                                                         "m1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -14
                                                                                                               :where
                                                                                                               -5)))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -6)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -11
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -11
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -11
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -11
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -14
                                                                                                 :where
                                                                                                 -8)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -14)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             26)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_local")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "is_field")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -6)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -15
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (on_method_MVA_yields_wf_AState formula-decl nil MonitoredProgramSemantics
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (Excpt type-decl nil Excpt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   10977 10220 t nil)
  (derive_yields_wf_state_MP-2 nil 3405932140 3405932535
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                 (sigma1, sigma2: MPState):
            wf_MP(mp) IMPLIES
             wf_state(mp)(sigma1) IMPLIES
              derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then (flatten) (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -7 "m2!1")
                                  (("1" (inst -7 "m1!1")
                                    (("1" (assert)
                                      (("1"
                                        (apply (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -8 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst -10 "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst? -7 :where -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -4)))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then (flatten) (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then (flatten) (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst -6 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split 13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -5 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp -7 "m2!1")
                                                          (("1"
                                                            (inst -7 "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(mp!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(mp!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "mp!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal_MP")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -36
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -36
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -36
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -36
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -37
                                                                                                                                                           :where
                                                                                                                                                           -7)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -38
                                                                                                                                                               :where
                                                                                                                                                               -10)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -38)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -12)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -37)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_state")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_ghoststate")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_ghost")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional_MP")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -33
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -33
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -33
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -34
                                                                                                                                                         :where
                                                                                                                                                         -6)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(mp!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(mp!1)(tau3!2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -11)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState")
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                                                         classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                                                          methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                                                           name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "program(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry_MP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "on_method_entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -3)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -27
                                                                                                     "m3!2")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -27
                                                                                                       "m2!2 - 1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -27
                                                                                                         "m1!2 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -27
                                                                                                               :where
                                                                                                               -4)))
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -28
                                                                                                                 :where
                                                                                                                 -7)))
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -29
                                                                                                                   :where
                                                                                                                   -9)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -29)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -14)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_state")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_ghoststate")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -28)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("1"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (expand
                                                                                 "method_pred")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (expand
                                                                               "method_pred")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
                                                branches : (wf_Branches(program(mp!1))),
                                                s1, s2 : MPState, x : nat) :
                                             execute_CaseJML(mp!1, branches, s1, s2, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                                                                 (b: (wf_Body(program(p))), sigma1: MPState,
                                                                  v: Val[Name], sigma2: MPState)
                                                                 (m: below(k)):
                                                            derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
                                            y < x IMPLIES
                                             (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                                     (sigma1, sigma2: MPState):
                                                wf_MP(mp) IMPLIES
                                                 wf_state(mp)(sigma1) IMPLIES
                                                  derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
                                                   wf_state(mp)(sigma2))) IMPLIES
                                    wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "extend")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "execute_CaseJML"
                                                                         -3)
                                                                        (("3"
                                                                          (expand*
                                                                           "extend"
                                                                           "id")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Branches")
                                                                              (("3"
                                                                                (expand
                                                                                 "every"
                                                                                 -2)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "derive"
                                                                                       -6)
                                                                                      (("3"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_for_exception")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(tau!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -16
                                                                                                             "m2!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -16
                                                                                                                   :where
                                                                                                                   -2)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -8
                                                                                                             "tau!1"
                                                                                                             "s2!1"
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -18
                                                                                                                     "y!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -18
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -14
                                                                                                         "m1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -14
                                                                                                               :where
                                                                                                               -5)))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -7
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -9
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -9
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -12
                                                                                                 :where
                                                                                                 -7)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             26)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_local")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "is_field")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -5)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -12
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (on_method_MVA_yields_wf_AState formula-decl nil MonitoredProgramSemantics
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (Excpt type-decl nil Excpt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   391365 34080 t nil)
  (derive_yields_wf_state_MP-1 nil 3402832608 3405925749
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_MP(mp) IMPLIES
         wf_state(mp)(sigma1) IMPLIES
          derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES wf_state(mp)(sigma2)")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2" (split -4)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (lemma "wf_Body_preserved_by_proper_subterm")
                        (("2" (inst -1 "program(mp!1)" "b!1" _)
                          (("2"
                            (apply (branch (split -2)
                                    ((then (flatten) (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then (flatten) (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -7 "m2!1")
                                  (("1" (inst -7 "m1!1")
                                    (("1" (assert)
                                      (("1"
                                        (apply (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (apply
                                           (repeat (inst? -8 :where -4)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then (flatten) (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -6 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -6 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then (flatten) (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -7 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -8 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "check_for_exception"
                                                     "check_for_exception_final")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -4)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (inst -10 "m2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 -3)))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then (flatten) (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -7 "m2!1")
                                              (("1"
                                                (inst -7 "m1!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (inst? -7 :where -3)))
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -4)))
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then (flatten) (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then (flatten) (assert)))))
                                              (("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)))))
                                                (("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst -6 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -6
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace -4)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split 13)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "wf_update_PState")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (use
                                                                                 "wf_state_update")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "derive_bottom_iff_exception_step")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "defined?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -5 "x!1 - 1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst-cp -7 "m2!1")
                                                          (("1"
                                                            (inst -7 "m1!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -4)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -2)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -10
                                                                               :where
                                                                               -2)))
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -9
                                                                               :where
                                                                               -1)))
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "m5!1")
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "m4!1")
                                                              (("1"
                                                                (inst-cp
                                                                 -7
                                                                 "m2!1")
                                                                (("1"
                                                                  (inst-cp
                                                                   -7
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -9
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -10
                                                                             :where
                                                                             -5)))
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -11
                                                                               :where
                                                                               -5)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (use
                                                                                             "wf_state_raise")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("2"
                                                                                    (auto-rewrite
                                                                                     "id")
                                                                                    (("2"
                                                                                      (case
                                                                                       "wf_state(mp!1)(tau3!1)")
                                                                                      (("1"
                                                                                        (use
                                                                                         "wf_state_arg_is_local"
                                                                                         ("s"
                                                                                          "pstate(tau3!1)"))
                                                                                        (("1"
                                                                                          (use
                                                                                           "get_class_in_classes")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "lookup_mthd")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "method_names")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (case-replace
                                                                                                                 "m!1 = md!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "wf_state(mp!1)(tau4!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "wf_state(mp!1)(tau6!1)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "wf_state(mp!1)(tau7!1)")
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "wf_update_PState")
                                                                                                                                (("1"
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   17)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "mp!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "wf_state_update_local")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (use
                                                                                                                                                   "wf_state_arg_is_local")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "is_local"
                                                                                                                                                 "lookup_local"
                                                                                                                                                 "defined?")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               -17)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "on_method_exit_normal_MP")
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "check_assertion")
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (inst-cp
                                                                                                                                             -36
                                                                                                                                             "m3!2 - 1")
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -36
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -36
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -36
                                                                                                                                                       :where
                                                                                                                                                       -3)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (repeat
                                                                                                                                                          (inst?
                                                                                                                                                           -37
                                                                                                                                                           :where
                                                                                                                                                           -7)))
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (apply
                                                                                                                                                             (repeat
                                                                                                                                                              (inst?
                                                                                                                                                               -38
                                                                                                                                                               :where
                                                                                                                                                               -10)))
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -38)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -12)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lift-if)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (apply
                                                                                                                                                                         (then
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (split
                                                                                                                                                                           1)
                                                                                                                                                                          (skosimp*)))
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (use
                                                                                                                                                                             "wf_update_PState")
                                                                                                                                                                            (assert)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (expand
                                                                                                                                                                             "update_PState")))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_state_raise")
                                                                                                                                                                              (assert)))
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (split
                                                                                                                                                                   -37)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -4)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (use
                                                                                                                                                                       "on_method_MVA_yields_wf_AState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_state")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_ghoststate")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "is_ghost")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "on_method_exit_exceptional_MP")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst-cp
                                                                                                                                               -33
                                                                                                                                               "m2!2 - 1")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -33
                                                                                                                                                 "m1!2")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (inst?
                                                                                                                                                       -33
                                                                                                                                                       :where
                                                                                                                                                       -2)))
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (inst?
                                                                                                                                                         -34
                                                                                                                                                         :where
                                                                                                                                                         -6)))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           -33)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "wf_state(mp!1)(tau2!2)")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "wf_state(mp!1)(tau3!2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -11)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           3)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_update_PState")
                                                                                                                                                                                (assert)
                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                (expand
                                                                                                                                                                                 "update_PState")))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (apply
                                                                                                                                                                                 (then
                                                                                                                                                                                  (use
                                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                                  (assert)))
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -9)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (lift-if)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (apply
                                                                                                                                                                           (then
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)
                                                                                                                                                                            (split
                                                                                                                                                                             1)
                                                                                                                                                                            (skosimp*)))
                                                                                                                                                                          (("2"
                                                                                                                                                                            (apply
                                                                                                                                                                             (then
                                                                                                                                                                              (use
                                                                                                                                                                               "wf_update_PState")
                                                                                                                                                                              (assert)
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (expand
                                                                                                                                                                               "update_PState")))
                                                                                                                                                                            (("2"
                                                                                                                                                                              (apply
                                                                                                                                                                               (then
                                                                                                                                                                                (use
                                                                                                                                                                                 "wf_state_raise")
                                                                                                                                                                                (assert)))
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "on_method_MVA_yields_wf_AState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "wf_state")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "wf_ghoststate")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "is_ghost")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (propax)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (apply
                                                                                                                                                             (then
                                                                                                                                                              (use
                                                                                                                                                               "wf_update_PState")
                                                                                                                                                              (assert)
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")))
                                                                                                                                                            (("2"
                                                                                                                                                              (apply
                                                                                                                                                               (then
                                                                                                                                                                (use
                                                                                                                                                                 "wf_state_catch")
                                                                                                                                                                (assert)))
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (split
                                                                                                                             -15)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "wf_state_update_stack")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "down(get_class(program(mp!1))(a!1))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "md!1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "getLocalDecls")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "getLocalDecls")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "wf_state"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "choose({m: Method[Name] |
                                                                                                     classes(program(mp!1))(down(get_class(program(mp!1))(a!1))) AND
                                                                                                      methods(down(get_class(program(mp!1))(a!1)))(m) AND
                                                                                                       name(m) = name(b!1)})")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "program(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "wf_Program"
                                                                                                                           "wf_Classes"
                                                                                                                           "wf_Class")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -4
                                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "m!1"
                                                                                                                                     "md!1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "nonempty_exists")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry_MP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "on_method_entry")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "check_assertion")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -3)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -27
                                                                                                     "m3!2")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -27
                                                                                                       "m2!2 - 1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -27
                                                                                                         "m1!2 - 1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -27
                                                                                                               :where
                                                                                                               -4)))
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -28
                                                                                                                 :where
                                                                                                                 -7)))
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -29
                                                                                                                   :where
                                                                                                                   -9)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -29)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -14)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (use
                                                                                                                           "on_method_MVA_yields_wf_AState")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "wf_state")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_ghoststate")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "is_ghost")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       -28)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -9)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("1"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (then
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (skosimp*)))
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (then
                                                                                                                                  (use
                                                                                                                                   "wf_update_PState")
                                                                                                                                  (assert)
                                                                                                                                  (skosimp*)
                                                                                                                                  (expand
                                                                                                                                   "update_PState")))
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (then
                                                                                                                                    (use
                                                                                                                                     "wf_state_raise")
                                                                                                                                    (assert)))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (typepred
                                                                                 "md!1")
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (typepred
                                                                               "md!1")
                                                                              (expand
                                                                               "wf_Method")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -3)))
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -5
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (case
                                                                 "    FORALL (
            branches : (wf_Branches(program(mp!1))), 
            s1, s2 : MPState, x : nat) :
         execute_CaseJML(mp!1, branches, s1, s2, x,  LAMBDA (k: upto(x))(p: MonitoredProgram[CP, Name])
                             (b: (wf_Body(program(p))), sigma1: MPState,
                              v: Val[Name], sigma2: MPState)
                             (m: below(k)):
                        derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES wf_state(mp!1)(s1) IMPLIES (FORALL (y: nat):
        y < x IMPLIES
         (FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                 (sigma1, sigma2: MPState):
            wf_MP(mp) IMPLIES
             wf_state(mp)(sigma1) IMPLIES
              derive(mp)(b, sigma1, v, sigma2)(y) IMPLIES
               wf_state(mp)(sigma2))) IMPLIES
wf_state(mp!1)(s2)")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 -7))
                                                                  (("2"
                                                                    (induct
                                                                     "branches")
                                                                    (("1"
                                                                      (typepred
                                                                       "branches!1")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "extend")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp*)
                                                                      (("3"
                                                                        (expand
                                                                         "execute_CaseJML"
                                                                         -3)
                                                                        (("3"
                                                                          (expand*
                                                                           "extend"
                                                                           "id")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (expand
                                                                               "wf_Branches")
                                                                              (("3"
                                                                                (expand
                                                                                 "every"
                                                                                 -2)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (rewrite
                                                                                       "derive"
                                                                                       -6)
                                                                                      (("3"
                                                                                        (split
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_for_exception")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       "wf_state(mp!1)(tau!1)")
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -16
                                                                                                             "m2!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -16
                                                                                                                   :where
                                                                                                                   -2)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -8
                                                                                                             "tau!1"
                                                                                                             "s2!1"
                                                                                                             "m2!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -18
                                                                                                                     "y!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -18
                                                                                                                           :where
                                                                                                                           -4)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (inst
                                                                                                         -14
                                                                                                         "m1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -14
                                                                                                               :where
                                                                                                               -5)))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (expand
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -8
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -8
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -8
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -5)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -2)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -11
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -10
                                                                                         :where
                                                                                         -1)))
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -7
                                                                       "m2!1")
                                                                      (("1"
                                                                        (inst
                                                                         -7
                                                                         "m1!1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -7
                                                                               :where
                                                                               -4)))
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "execute_set")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x!1 - 1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -8
                                                                                 :where
                                                                                 -4)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         22)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "wf_update_GhostVars")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "id")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "wf_ghoststate")
                                                                                                    (("2"
                                                                                                      (skosimp*)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "is_ghost")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "defined?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_GhostVars")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_store")
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "b!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "subterm"
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "derive_bottom_iff_exception_step")
                                                                                                                                            (("1"
                                                                                                                                              (inst?
                                                                                                                                               -1
                                                                                                                                               :where
                                                                                                                                               -10)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (prop)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -4)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (use
                                                                               "wf_update_PState")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_raise")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -9
                                                                                 "m3!1")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -9
                                                                                     "m1!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -9
                                                                                           :where
                                                                                           -4)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "wf_state(mp!1)(tau2!1)")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -12
                                                                                                 :where
                                                                                                 -7)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             26)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (skosimp*)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_state"
                                                                                                                     (1
                                                                                                                      -1))
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "is_local")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "is_field")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -5)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -12
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (inst
                                                                                 -6
                                                                                 "x!1 - 1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -6
                                                                                       :where
                                                                                       -4)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "execute_assert")
                                                                                (("2"
                                                                                  (expand
                                                                                   "check_assertion")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "x!1 - 1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -7
                                                                                             :where
                                                                                             -3)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     28)
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skosimp*)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "wf_update_PState")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "update_PState")
                                                                                                                  (("2"
                                                                                                                    (use
                                                                                                                     "wf_state_raise")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (NullPointer? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (NullPointer adt-constructor-decl "(NullPointer?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (wf_state_arg_is_local formula-decl nil State nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (catch const-decl "PState" State nil)
    (wf_state_catch formula-decl nil State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (on_method_MVA_yields_wf_AState formula-decl nil MonitoredProgramSemantics
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (wf_update_GhostVars formula-decl nil MonitoredProgramSemantics nil)
    (update_store const-decl "Store" State nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (update const-decl "PState" State nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_state_update formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (derive_bottom_iff_exception_step formula-decl nil SemanticsProofs nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (Excpt type-decl nil Excpt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   1686477 36250 t shostak))
 (on_method_MVA_never_leaves_halted 0
  (on_method_MVA_never_leaves_halted-1 nil 3406035341 3432903940
   ("" (skosimp*)
    (("" (expand* "complete" "trap_state" "total")
      (("" (flatten)
        (("" (expand "on_method_MVA")
          (("" (lift-if)
            (("" (assert)
              (("" (split 1)
                (("1" (skosimp*)
                  (("1" (expand "step")
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split 2)
                          (("1" (hide -4)
                            (("1" (skosimp*)
                              (("1" (inst?)
                                (("1" (assert) nil nil)
                                 ("2" (rewrite "nonempty_exists")
                                  (("2"
                                    (inst -10 "halted"
                                     "(# etype := etype!1, mname := name(md!1) #)"
                                     "stA(astate(s!1))" "st(pstate(s!1))"
                                     "arg!1")
                                    (("2" (assert)
                                      (("2"
                                        (skosimp*)
                                        (("2" (inst 1 "t!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (split -4)
                              (("1" (propax) nil nil) ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((trap_state const-decl "boolean" MVAProperties nil)
    (total const-decl "boolean" MVAProperties nil)
    (complete const-decl "boolean" MVAProperties nil)
    (on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil) nil nil
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil) nil
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil) nil
    (step const-decl "lift[AState]" MVAPartialSemantics nil))
   3491 3400 t shostak))
 (derive_never_leaves_halted 0
  (derive_never_leaves_halted-4 nil 3411997942 3432903964
   ("" (auto-rewrite "defined?")
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                 (sigma1, sigma2: MPState):
                            wf_and_complete_MP(mp) IMPLIES
                             cp(astate(sigma1)) = halted IMPLIES
                              derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
                               cp(astate(sigma2)) = halted")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2"
                  (apply (branch (split -4)
                          ((then (flatten) (assert) (flatten) (assert)))))
                  (("2" (lift-if)
                    (("2"
                      (apply (branch (split -1)
                              ((then (flatten) (assert) (flatten) (assert)))))
                      (("1"
                        (apply (then (skosimp*) (copy -6) (inst -1 "m1!1")
                                (inst -7 "m2!1") (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5))) (assert)
                                (flatten) (assert)))
                        nil nil)
                       ("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("1"
                            (apply (then (skosimp*) (inst -5 "x!1 - 1")
                                    (assert)
                                    (apply (repeat (inst? -5 :where -3)))
                                    (assert) (flatten) (assert)))
                            nil nil)
                           ("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1"
                              (apply (then (skosimp*) (inst-cp -6 "m1!1")
                                      (assert)
                                      (apply (repeat (inst? -7 :where -3)))
                                      (assert)))
                              (("1"
                                (expand* "check_for_exception"
                                 "check_for_exception_final")
                                (("1"
                                  (apply (branch
                                          (split -4)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1" (inst -9 "m2!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -9 :where -3)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply (then
                                        (skosimp*)
                                        (copy -6)
                                        (inst -1 "m1!1")
                                        (inst -7 "m2!1")
                                        (assert)
                                        (apply (repeat (inst? -1 :where -4)))
                                        (apply (repeat (inst? -7 :where -5)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                nil nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1"
                                      (apply
                                       (then
                                        (skosimp*)
                                        (inst -5 "x!1 - 1")
                                        (assert)
                                        (apply (repeat (inst? -5 :where -3)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (apply
                                           (branch
                                            (split -4)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (expand "update_PState")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (copy -6)
                                          (("1"
                                            (apply
                                             (then
                                              (inst -1 "m1!1")
                                              (assert)
                                              (apply
                                               (repeat (inst? -1 :where -4)))
                                              (assert)))
                                            (("1"
                                              (expand "check_for_exception")
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -5)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split -2)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst -9 "m2!1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -9
                                                           :where
                                                           -2)))
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (inst -8 "m2!1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -8
                                                           :where
                                                           -1)))
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (copy -6)
                                            (("1"
                                              (inst -1 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst? -1 :where -4)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (copy -7)
                                                      (("1"
                                                        (inst -1 "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -1
                                                               :where
                                                               -6)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split -7)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (replace -3)
                                                                  (("1"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("2"
                                                                      (case
                                                                       "cp(astate(tau3!1)) = halted")
                                                                      (("1"
                                                                        (case
                                                                         "cp(astate(tau4!1)) = halted")
                                                                        (("1"
                                                                          (copy
                                                                           -20)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m4!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -1
                                                                                   :where
                                                                                   -9)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "cp(astate(tau6!1)) = halted")
                                                                                    (("1"
                                                                                      (case
                                                                                       "cp(astate(tau7!1)) = halted")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (split
                                                                                         -13)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "on_method_exit_normal_MP")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -2)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   -30)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       -3)))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cp(astate(tau2!2)) = halted")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "check_assertion")
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -36)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "m2!2 - 1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -1
                                                                                                                       :where
                                                                                                                       -10)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "cp(astate(tau3!2)) = halted")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -38
                                                                                                                           "m3!2 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (repeat
                                                                                                                                (inst?
                                                                                                                                 -38
                                                                                                                                 :where
                                                                                                                                 -14)))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -15)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "update_PState")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -11)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "cp(astate(tau1!2)) = halted")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -6
                                                                                                             1
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "on_method_MVA_never_leaves_halted")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "wf_and_complete_MP")
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "check_assertion")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -3)))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "on_method_exit_exceptional_MP")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (copy
                                                                                                     -29)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "m1!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (inst?
                                                                                                             -1
                                                                                                             :where
                                                                                                             -3)))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "update_PState"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "cp(astate(tau2!2)) = halted")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau2!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "check_assertion")
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -34
                                                                                                                           "m2!2 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (repeat
                                                                                                                                (inst?
                                                                                                                                 -34
                                                                                                                                 :where
                                                                                                                                 -10)))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -12)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "update_PState")
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -11)
                                                                                                                                      (("1"
                                                                                                                                        (lift-if)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -5
                                                                                                                     1
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "on_method_MVA_never_leaves_halted")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_and_complete_MP")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -21
                                                                                       "m5!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -21
                                                                                             :where
                                                                                             -11)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand*
                                                                           "on_method_entry_MP"
                                                                           "on_method_entry")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "check_assertion")
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -6)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (copy
                                                                                     -30)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "m1!2 - 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             -5)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "cp(astate(tau1!2)) = halted")
                                                                                              (("1"
                                                                                                (copy
                                                                                                 -32)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m2!2 - 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -1
                                                                                                         :where
                                                                                                         -10)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "cp(astate(tau2!2)) = halted")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -34
                                                                                                             "m3!2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -34
                                                                                                                   :where
                                                                                                                   -13)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       -21)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "on_method_MVA_never_leaves_halted")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "wf_and_complete_MP")
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -11)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -6)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "update_stack")
                                                                        (("2"
                                                                          (expand
                                                                           "update_PState")
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (expand "execute_CaseJML")
                                              (("1"
                                                (expand "extend")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -3)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -2)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst -7 "x!1 - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -7
                                                               :where
                                                               -2)))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -7)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -8 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -5)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -6)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -4
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -4
                                                                   :where
                                                                   -2)))
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -3
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -3
                                                                   :where
                                                                   -1)))
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (apply
                                                   (then
                                                    (skosimp*)
                                                    (copy -7)
                                                    (inst -1 "m1!1")
                                                    (inst -8 "m2!1")
                                                    (assert)
                                                    (apply
                                                     (repeat
                                                      (inst? -1 :where -5)))
                                                    (apply
                                                     (repeat
                                                      (inst? -8 :where -7)))
                                                    (assert)
                                                    (flatten)
                                                    (assert)))
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (expand "execute_set")
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (skosimp*)
                                                        (inst -7 "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -7
                                                           :where
                                                           -4)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -5)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (expand
                                                             "update_GhostVars")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (then
                                                          (skosimp*)
                                                          (inst -5 "x!1 - 1")
                                                          (assert)
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -4)))
                                                          (assert)
                                                          (flatten)
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (expand
                                                           "update_PState")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (copy -10)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -5)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "cp(astate(tau2!1)) = halted")
                                                                        (("1"
                                                                          (inst
                                                                           -12
                                                                           "m3!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -12
                                                                                 :where
                                                                                 -9)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split
                                                                             -7)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -14
                                                                                 "m2!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -14
                                                                                       :where
                                                                                       -3)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -4)))
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "execute_assert")
                                                              (("2"
                                                                (expand
                                                                 "check_assertion")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst
                                                                     -6
                                                                     "x!1 - 1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -6
                                                                           :where
                                                                           -3)))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   22)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (extend const-decl "R" extend nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil) nil
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (catch const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil) nil
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (on_method_MVA_never_leaves_halted formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil) nil
    (update_stack const-decl "FullState" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (check_for_exception const-decl "bool" SemanticsAuxiliaryFunctions nil)
    (check_for_exception_final const-decl "bool" SemanticsAuxiliaryFunctions
     nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (halted const-decl "CP" MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   23879 17970 t nil)
  (derive_never_leaves_halted-3 nil 3410271974 3411988888
   ("" (auto-rewrite "defined?")
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                     (sigma1, sigma2: MPState):
                wf_MP(mp) IMPLIES
                 cp(astate(sigma1)) = halted IMPLIES
                  derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
                   cp(astate(sigma2)) = halted")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2"
                  (apply (branch (split -4)
                          ((then (flatten) (assert) (flatten) (assert)))))
                  (("2" (lift-if)
                    (("2"
                      (apply (branch (split -1)
                              ((then (flatten) (assert) (flatten) (assert)))))
                      (("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("1"
                          (apply (then (skosimp*) (copy -6) (inst -1 "m1!1")
                                  (inst -7 "m2!1") (assert)
                                  (apply (repeat (inst? -1 :where -4)))
                                  (apply (repeat (inst? -7 :where -5)))
                                  (assert) (flatten) (assert)))
                          nil nil)
                         ("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1"
                                  (apply (then
                                          (skosimp*)
                                          (inst -5 "x!1 - 1")
                                          (assert)
                                          (apply
                                           (repeat (inst? -5 :where -3)))
                                          (assert)
                                          (flatten)
                                          (assert)))
                                  nil nil)
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1"
                                    (apply (then
                                            (skosimp*)
                                            (inst-cp -6 "m1!1")
                                            (assert)
                                            (apply
                                             (repeat (inst? -7 :where -3)))
                                            (assert)))
                                    (("1"
                                      (expand*
                                       "check_for_exception"
                                       "check_for_exception_final")
                                      (("1"
                                        (apply
                                         (branch
                                          (split -4)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (inst -9 "m2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -9 :where -3)))
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1"
                                      (apply
                                       (then
                                        (skosimp*)
                                        (copy -6)
                                        (inst -1 "m1!1")
                                        (inst -7 "m2!1")
                                        (assert)
                                        (apply (repeat (inst? -1 :where -4)))
                                        (apply (repeat (inst? -7 :where -5)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                      nil nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (skosimp*)
                                                (inst -5 "x!1 - 1")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst? -5 :where -3)))
                                                (assert)
                                                (flatten)
                                                (assert)))
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -4)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (expand "update_PState")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (apply
                                                 (then
                                                  (inst -4 "x!1 - 1")
                                                  (assert)
                                                  (apply
                                                   (repeat
                                                    (inst? -4 :where -3)))
                                                  (assert)
                                                  (flatten)
                                                  (assert)))
                                                nil
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -6)
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst -1 "m1!1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -1
                                                           :where
                                                           -4)))
                                                        (assert)))
                                                      (("1"
                                                        (expand
                                                         "check_for_exception")
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -5)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split -2)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (inst
                                                                   -9
                                                                   "m2!1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -9
                                                                     :where
                                                                     -2)))
                                                                  (assert)))
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (inst
                                                                   -8
                                                                   "m2!1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -8
                                                                     :where
                                                                     -1)))
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (copy -6)
                                                      (("1"
                                                        (inst -1 "m1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -1
                                                               :where
                                                               -4)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (copy -7)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "m2!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         -6)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -7)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("2"
                                                                                (case
                                                                                 "cp(astate(tau3!1)) = halted")
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau4!1)) = halted")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -20)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "m4!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             -9)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "cp(astate(tau6!1)) = halted")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cp(astate(tau7!1)) = halted")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   -13)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "on_method_exit_normal_MP")
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (branch
                                                                                                          (split
                                                                                                           -2)
                                                                                                          ((then
                                                                                                            (flatten)
                                                                                                            (assert)
                                                                                                            (flatten)
                                                                                                            (assert)))))
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (copy
                                                                                                             -30)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -1
                                                                                                                 :where
                                                                                                                 -3)))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "cp(astate(tau2!2)) = halted")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "check_assertion")
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (copy
                                                                                                                         -36)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "m2!2 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (repeat
                                                                                                                                (inst?
                                                                                                                                 -1
                                                                                                                                 :where
                                                                                                                                 -10)))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "cp(astate(tau3!2)) = halted")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -38
                                                                                                                                     "m3!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -38
                                                                                                                                           :where
                                                                                                                                           -14)))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -15)
                                                                                                                                            (("1"
                                                                                                                                              (lift-if)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "update_PState")
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (replace
                                                                                                                                     -11)
                                                                                                                                    (("2"
                                                                                                                                      (lift-if)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "update_PState")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau1!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -6
                                                                                                                       1
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (expand*
                                                                                                                         "on_method_MVA"
                                                                                                                         "step")
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "mva(mp!1)")
                                                                                                                                  (("1"
                                                                                                                                    (expand*
                                                                                                                                     "complete"
                                                                                                                                     "trap_state"
                                                                                                                                     "total")
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (inst?)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (rewrite
                                                                                                                                           "nonempty_exists")
                                                                                                                                          (("2"
                                                                                                                                            (inst?
                                                                                                                                             -4
                                                                                                                                             :where
                                                                                                                                             -7)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -4
                                                                                                                                               "halted"
                                                                                                                                               "stA(astate(tau1!2))"
                                                                                                                                               "st(pstate(tau1!2))"
                                                                                                                                               "val(Const(w!1))")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "check_assertion")
                                                                                                                      (("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -1
                                                                                                                             :where
                                                                                                                             -3)))
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "on_method_exit_exceptional_MP")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -29)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "m1!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -1
                                                                                                                       :where
                                                                                                                       -3)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "cp(astate(tau2!2)) = halted")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "cp(astate(tau2!2)) = halted")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "check_assertion")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -34
                                                                                                                                     "m2!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -34
                                                                                                                                           :where
                                                                                                                                           -10)))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -12)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -11)
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -5
                                                                                                                               1
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("2"
                                                                                                                                (expand*
                                                                                                                                 "on_method_MVA"
                                                                                                                                 "step")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "mva(mp!1)")
                                                                                                                                          (("1"
                                                                                                                                            (expand*
                                                                                                                                             "complete"
                                                                                                                                             "trap_state"
                                                                                                                                             "total")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "nonempty_exists")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?
                                                                                                                                                     -4
                                                                                                                                                     :where
                                                                                                                                                     -7)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -4
                                                                                                                                                       "halted"
                                                                                                                                                       "stA(astate(tau1!2))"
                                                                                                                                                       "st(pstate(tau1!2))"
                                                                                                                                                       "excpt(down(ex(pstate(tau6!1))))")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -11)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -21
                                                                                                   "m5!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -21
                                                                                                         :where
                                                                                                         -1)))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand*
                                                                                     "on_method_entry_MP"
                                                                                     "on_method_entry")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "check_assertion")
                                                                                        (("2"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -6)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (copy
                                                                                               -30)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m1!2 - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       -5)))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cp(astate(tau1!2)) = halted")
                                                                                                        (("1"
                                                                                                          (copy
                                                                                                           -32)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m2!2 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -10)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau2!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -34
                                                                                                                       "m3!2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -34
                                                                                                                             :where
                                                                                                                             -13)))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 -21)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand*
                                                                                                                                     "on_method_MVA"
                                                                                                                                     "step")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           3)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "mva(mp!1)")
                                                                                                                                              (("1"
                                                                                                                                                (expand*
                                                                                                                                                 "complete"
                                                                                                                                                 "trap_state"
                                                                                                                                                 "total")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "nonempty_exists")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?
                                                                                                                                                         -4
                                                                                                                                                         :where
                                                                                                                                                         -7)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -4
                                                                                                                                                           "halted"
                                                                                                                                                           "stA(astate(s_new!1))"
                                                                                                                                                           "st(pstate(s_new!1))"
                                                                                                                                                           "val(Const(pv!1))")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -11)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "update_stack")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst -4 "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           -3)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (then
                                                          (inst -4 "x!1 - 1")
                                                          (assert)
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -4
                                                             :where
                                                             -3)))
                                                          (assert)
                                                          (flatten)
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (expand
                                                           "execute_CaseJML")
                                                          (("1"
                                                            (expand "extend")
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split -3)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split -2)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "x!1 - 1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -7
                                                                           :where
                                                                           -2)))
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (copy -7)
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (inst
                                                                   -8
                                                                   "m1!1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -8
                                                                     :where
                                                                     -5)))
                                                                  (assert)))
                                                                (("1"
                                                                  (expand
                                                                   "check_for_exception")
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -6)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -2)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (apply
                                                                           (then
                                                                            (inst
                                                                             -4
                                                                             "m2!1")
                                                                            (assert)
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -4
                                                                               :where
                                                                               -2)))
                                                                            (assert)))
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (inst
                                                                             -3
                                                                             "m2!1")
                                                                            (assert)
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -3
                                                                               :where
                                                                               -1)))
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (copy -7)
                                                                (inst
                                                                 -1
                                                                 "m1!1")
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -1
                                                                   :where
                                                                   -5)))
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -7)))
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (expand
                                                                 "execute_set")
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (skosimp*)
                                                                    (inst
                                                                     -7
                                                                     "x!1 - 1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -7
                                                                       :where
                                                                       -4)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -5)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (expand
                                                                         "update_GhostVars")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (apply
                                                                     (then
                                                                      (skosimp*)
                                                                      (inst
                                                                       -5
                                                                       "x!1 - 1")
                                                                      (assert)
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -5
                                                                         :where
                                                                         -4)))
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "update_PState")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (copy
                                                                           -10)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m1!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -1
                                                                                   :where
                                                                                   -5)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "cp(astate(tau2!1)) = halted")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -12
                                                                                       "m3!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -12
                                                                                             :where
                                                                                             -9)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split
                                                                                         -7)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -14
                                                                                             "m2!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -14
                                                                                                   :where
                                                                                                   -3)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (apply
                                                                           (then
                                                                            (skosimp*)
                                                                            (inst
                                                                             -5
                                                                             "x!1 - 1")
                                                                            (assert)
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -5
                                                                               :where
                                                                               -4)))
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "execute_assert")
                                                                          (("2"
                                                                            (expand
                                                                             "check_assertion")
                                                                            (("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -1)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (skosimp*)
                                                                                    (inst
                                                                                     -8
                                                                                     "x!1 - 1")
                                                                                    (assert)
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -8
                                                                                       :where
                                                                                       -5)))
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -6)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unfinished
   ((wf_nat formula-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (halted const-decl "CP" MVA nil) (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (catch const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (choose const-decl "(p)" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (update_stack const-decl "FullState" Semantics nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   31417 24680 t nil)
  (derive_never_leaves_halted-2 nil 3406626874 3410271920
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                 (sigma1, sigma2: MPState):
            wf_MP(mp) IMPLIES
             cp(astate(sigma1)) = halted IMPLIES
              derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
               cp(astate(sigma2)) = halted")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2"
                (apply (branch (split -4)
                        ((then (flatten) (assert) (flatten) (assert)))))
                (("2" (lift-if)
                  (("2"
                    (apply (branch (split -1)
                            ((then (flatten) (assert) (flatten) (assert)))))
                    (("2"
                      (apply (branch (split -1)
                              ((then (flatten) (assert) (flatten) (assert)))))
                      (("1"
                        (apply (then (skosimp*) (copy -6) (inst -1 "m1!1")
                                (inst -7 "m2!1") (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5))) (assert)
                                (flatten) (assert)))
                        nil nil)
                       ("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply (then
                                        (skosimp*)
                                        (inst -5 "x!1 - 1")
                                        (assert)
                                        (apply (repeat (inst? -5 :where -3)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                nil nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1"
                                  (apply (then
                                          (skosimp*)
                                          (inst-cp -6 "m1!1")
                                          (assert)
                                          (apply
                                           (repeat (inst? -7 :where -3)))
                                          (assert)))
                                  (("1"
                                    (expand* "check_for_exception"
                                     "check_for_exception_final")
                                    (("1"
                                      (apply
                                       (branch
                                        (split -4)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (inst -9 "m2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -9 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1"
                                    (apply (then
                                            (skosimp*)
                                            (copy -6)
                                            (inst -1 "m1!1")
                                            (inst -7 "m2!1")
                                            (assert)
                                            (apply
                                             (repeat (inst? -1 :where -4)))
                                            (apply
                                             (repeat (inst? -7 :where -5)))
                                            (assert)
                                            (flatten)
                                            (assert)))
                                    nil nil)
                                   ("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (apply
                                             (then
                                              (skosimp*)
                                              (inst -5 "x!1 - 1")
                                              (assert)
                                              (apply
                                               (repeat (inst? -5 :where -3)))
                                              (assert)
                                              (flatten)
                                              (assert)))
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -4)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (expand "update_PState")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (inst -4 "x!1 - 1")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst? -4 :where -3)))
                                                (assert)
                                                (flatten)
                                                (assert)))
                                              nil
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -6)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -1 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -1 :where -4)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -5)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -9
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -9
                                                                   :where
                                                                   -2)))
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -1)))
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -6)
                                                    (("1"
                                                      (inst -1 "m1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -1
                                                             :where
                                                             -4)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy -7)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -6)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -7)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("2"
                                                                              (case
                                                                               "cp(astate(tau3!1)) = halted")
                                                                              (("1"
                                                                                (case
                                                                                 "cp(astate(tau4!1)) = halted")
                                                                                (("1"
                                                                                  (copy
                                                                                   -20)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "m4!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           -9)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "cp(astate(tau6!1)) = halted")
                                                                                            (("1"
                                                                                              (case
                                                                                               "cp(astate(tau7!1)) = halted")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (split
                                                                                                 -13)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "on_method_exit_normal_MP")
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (branch
                                                                                                        (split
                                                                                                         -2)
                                                                                                        ((then
                                                                                                          (flatten)
                                                                                                          (assert)
                                                                                                          (flatten)
                                                                                                          (assert)))))
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (copy
                                                                                                           -30)
                                                                                                          (("1"
                                                                                                            (apply
                                                                                                             (repeat
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               -3)))
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "cp(astate(tau2!2)) = halted")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "check_assertion")
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (copy
                                                                                                                       -36)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "m2!2 - 1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -1
                                                                                                                               :where
                                                                                                                               -10)))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "cp(astate(tau3!2)) = halted")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -38
                                                                                                                                   "m3!2 - 1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (apply
                                                                                                                                       (repeat
                                                                                                                                        (inst?
                                                                                                                                         -38
                                                                                                                                         :where
                                                                                                                                         -14)))
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -15)
                                                                                                                                          (("1"
                                                                                                                                            (lift-if)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -11)
                                                                                                                                  (("2"
                                                                                                                                    (lift-if)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "update_PState")
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (case
                                                                                                                   "cp(astate(tau1!2)) = halted")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -6
                                                                                                                     1
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (expand*
                                                                                                                       "on_method_MVA"
                                                                                                                       "step")
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "mva(mp!1)")
                                                                                                                                (("1"
                                                                                                                                  (expand*
                                                                                                                                   "complete"
                                                                                                                                   "trap_state"
                                                                                                                                   "total")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (rewrite
                                                                                                                                         "nonempty_exists")
                                                                                                                                        (("2"
                                                                                                                                          (inst?
                                                                                                                                           -4
                                                                                                                                           :where
                                                                                                                                           -7)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -4
                                                                                                                                             "halted"
                                                                                                                                             "stA(astate(tau1!2))"
                                                                                                                                             "st(pstate(tau1!2))"
                                                                                                                                             "val(w!1)")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "check_assertion")
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -1
                                                                                                                           :where
                                                                                                                           -3)))
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "on_method_exit_exceptional_MP")
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (copy
                                                                                                             -29)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "m1!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (repeat
                                                                                                                    (inst?
                                                                                                                     -1
                                                                                                                     :where
                                                                                                                     -3)))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "update_PState"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "cp(astate(tau2!2)) = halted")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "cp(astate(tau2!2)) = halted")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "check_assertion")
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -34
                                                                                                                                   "m2!2 - 1")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (apply
                                                                                                                                       (repeat
                                                                                                                                        (inst?
                                                                                                                                         -34
                                                                                                                                         :where
                                                                                                                                         -10)))
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -12)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -11)
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (replace
                                                                                                                             -5
                                                                                                                             1
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("2"
                                                                                                                              (expand*
                                                                                                                               "on_method_MVA"
                                                                                                                               "step")
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("1"
                                                                                                                                        (typepred
                                                                                                                                         "mva(mp!1)")
                                                                                                                                        (("1"
                                                                                                                                          (expand*
                                                                                                                                           "complete"
                                                                                                                                           "trap_state"
                                                                                                                                           "total")
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "nonempty_exists")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?
                                                                                                                                                   -4
                                                                                                                                                   :where
                                                                                                                                                   -7)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -4
                                                                                                                                                     "halted"
                                                                                                                                                     "stA(astate(tau1!2))"
                                                                                                                                                     "st(pstate(tau1!2))"
                                                                                                                                                     "excpt(down(ex(pstate(tau6!1))))")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -11)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -21
                                                                                                 "m5!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -21
                                                                                                       :where
                                                                                                       -1)))
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand*
                                                                                   "on_method_entry_MP"
                                                                                   "on_method_entry")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "check_assertion")
                                                                                      (("2"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -6)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (copy
                                                                                             -30)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "m1!2 - 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -1
                                                                                                     :where
                                                                                                     -5)))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "cp(astate(tau1!2)) = halted")
                                                                                                      (("1"
                                                                                                        (copy
                                                                                                         -32)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "m2!2 - 1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (repeat
                                                                                                                (inst?
                                                                                                                 -1
                                                                                                                 :where
                                                                                                                 -10)))
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "cp(astate(tau2!2)) = halted")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -34
                                                                                                                     "m3!2")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (repeat
                                                                                                                          (inst?
                                                                                                                           -34
                                                                                                                           :where
                                                                                                                           -13)))
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (branch
                                                                                                                              (split
                                                                                                                               -21)
                                                                                                                              ((then
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)))))
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand*
                                                                                                                                   "on_method_MVA"
                                                                                                                                   "step")
                                                                                                                                  (("1"
                                                                                                                                    (lift-if
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         3)
                                                                                                                                        (("1"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "mva(mp!1)")
                                                                                                                                            (("1"
                                                                                                                                              (expand*
                                                                                                                                               "complete"
                                                                                                                                               "trap_state"
                                                                                                                                               "total")
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "nonempty_exists")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?
                                                                                                                                                       -4
                                                                                                                                                       :where
                                                                                                                                                       -7)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -4
                                                                                                                                                         "halted"
                                                                                                                                                         "stA(astate(s_new!1))"
                                                                                                                                                         "st(pstate(s_new!1))"
                                                                                                                                                         "val(pv!1)")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -11)
                                                                                                                    (("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "update_PState")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("2"
                                                                                                            (lift-if)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "update_stack")
                                                                                (("2"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -4 "x!1 - 1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -4 :where -3)))
                                                      (assert)
                                                      (flatten)
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst -4 "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           -3)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (expand
                                                         "execute_CaseJML")
                                                        (("1"
                                                          (expand "extend")
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -3)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split -2)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "x!1 - 1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -7
                                                                         :where
                                                                         -2)))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (copy -7)
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m1!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -5)))
                                                                (assert)))
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split -6)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -2)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -4
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -4
                                                                             :where
                                                                             -2)))
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -3
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             -1)))
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (apply
                                                             (then
                                                              (skosimp*)
                                                              (copy -7)
                                                              (inst -1 "m1!1")
                                                              (inst -8 "m2!1")
                                                              (assert)
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -1
                                                                 :where
                                                                 -5)))
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -7)))
                                                              (assert)
                                                              (flatten)
                                                              (assert)))
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "execute_set")
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (skosimp*)
                                                                  (inst
                                                                   -7
                                                                   "x!1 - 1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -4)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -5)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "update_GhostVars")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (skosimp*)
                                                                    (inst
                                                                     -5
                                                                     "x!1 - 1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (copy
                                                                         -10)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau2!1)) = halted")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -12
                                                                                     "m3!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -12
                                                                                           :where
                                                                                           -9)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (split
                                                                                       -7)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -14
                                                                                           "m2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -14
                                                                                                 :where
                                                                                                 -3)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (skosimp*)
                                                                          (inst
                                                                           -5
                                                                           "x!1 - 1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -5
                                                                             :where
                                                                             -4)))
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "execute_assert")
                                                                        (("2"
                                                                          (expand
                                                                           "check_assertion")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (skosimp*)
                                                                              (inst
                                                                               -6
                                                                               "x!1 - 1")
                                                                              (assert)
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -6
                                                                                 :where
                                                                                 -3)))
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -4)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (update_stack const-decl "FullState" Semantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (catch const-decl "PState" State nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (extend const-decl "R" extend nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (halted const-decl "CP" MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   11009 10520 t nil)
  (derive_never_leaves_halted-1 nil 3404128932 3406626763
   ("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
    (("1"
      (inst -1
       "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_MP(mp) IMPLIES
         cp(astate(sigma1)) = halted IMPLIES
          derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
           cp(astate(sigma2)) = halted")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "derive" -4)
              (("2"
                (apply (branch (split -4)
                        ((then (flatten) (assert) (flatten) (assert)))))
                (("2" (lift-if)
                  (("2"
                    (apply (branch (split -1)
                            ((then (flatten) (assert) (flatten) (assert)))))
                    (("2"
                      (apply (branch (split -1)
                              ((then (flatten) (assert) (flatten) (assert)))))
                      (("1"
                        (apply (then (skosimp*) (copy -6) (inst -1 "m1!1")
                                (inst -7 "m2!1") (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5))) (assert)
                                (flatten) (assert)))
                        nil nil)
                       ("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply (then
                                        (skosimp*)
                                        (inst -5 "x!1 - 1")
                                        (assert)
                                        (apply (repeat (inst? -5 :where -3)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                nil nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1"
                                  (apply (then
                                          (skosimp*)
                                          (inst-cp -6 "m1!1")
                                          (assert)
                                          (apply
                                           (repeat (inst? -7 :where -3)))
                                          (assert)))
                                  (("1"
                                    (expand* "check_for_exception"
                                     "check_for_exception_final")
                                    (("1"
                                      (apply
                                       (branch
                                        (split -4)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (inst -9 "m2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -9 :where -3)))
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1"
                                    (apply (then
                                            (skosimp*)
                                            (copy -6)
                                            (inst -1 "m1!1")
                                            (inst -7 "m2!1")
                                            (assert)
                                            (apply
                                             (repeat (inst? -1 :where -4)))
                                            (apply
                                             (repeat (inst? -7 :where -5)))
                                            (assert)
                                            (flatten)
                                            (assert)))
                                    nil nil)
                                   ("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (apply
                                             (then
                                              (skosimp*)
                                              (inst -5 "x!1 - 1")
                                              (assert)
                                              (apply
                                               (repeat (inst? -5 :where -3)))
                                              (assert)
                                              (flatten)
                                              (assert)))
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -4)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (expand "update_PState")
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply
                                               (then
                                                (inst -4 "x!1 - 1")
                                                (assert)
                                                (apply
                                                 (repeat
                                                  (inst? -4 :where -3)))
                                                (assert)
                                                (flatten)
                                                (assert)))
                                              nil
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -6)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -1 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -1 :where -4)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -5)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -9
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -9
                                                                   :where
                                                                   -2)))
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -1)))
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (copy -6)
                                                    (("1"
                                                      (inst -1 "m1!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -1
                                                             :where
                                                             -4)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (copy -7)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -6)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -7)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "cp(astate(tau3!1)) = halted")
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau4!1)) = halted")
                                                                                  (("1"
                                                                                    (copy
                                                                                     -20)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "m4!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             -9)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "cp(astate(tau6!1)) = halted")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "cp(astate(tau7!1)) = halted")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (split
                                                                                                   -13)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "on_method_exit_normal_MP")
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (branch
                                                                                                          (split
                                                                                                           -2)
                                                                                                          ((then
                                                                                                            (flatten)
                                                                                                            (assert)
                                                                                                            (flatten)
                                                                                                            (assert)))))
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (copy
                                                                                                             -29)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -3)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau2!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "check_assertion")
                                                                                                                      (("1"
                                                                                                                        (skosimp*)
                                                                                                                        (("1"
                                                                                                                          (copy
                                                                                                                           -35)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "m2!2 - 1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (apply
                                                                                                                                 (repeat
                                                                                                                                  (inst?
                                                                                                                                   -1
                                                                                                                                   :where
                                                                                                                                   -9)))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "cp(astate(tau3!2)) = halted")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -37
                                                                                                                                       "m3!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (apply
                                                                                                                                           (repeat
                                                                                                                                            (inst?
                                                                                                                                             -37
                                                                                                                                             :where
                                                                                                                                             -13)))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -14)
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "update_PState")
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -10)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "update_PState")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "cp(astate(tau1!2)) = halted")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -5
                                                                                                                         1
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (expand*
                                                                                                                           "on_method_MVA"
                                                                                                                           "step")
                                                                                                                          (("1"
                                                                                                                            (lift-if)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "mva(mp!1)")
                                                                                                                                    (("1"
                                                                                                                                      (expand*
                                                                                                                                       "complete"
                                                                                                                                       "trap_state"
                                                                                                                                       "total")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (rewrite
                                                                                                                                             "nonempty_exists")
                                                                                                                                            (("2"
                                                                                                                                              (inst?
                                                                                                                                               -4
                                                                                                                                               :where
                                                                                                                                               -7)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -4
                                                                                                                                                 "halted"
                                                                                                                                                 "stA(astate(tau1!2))"
                                                                                                                                                 "st(pstate(tau1!2))")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "check_assertion")
                                                                                                                        (("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -1
                                                                                                                               :where
                                                                                                                               -3)))
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "on_method_exit_exceptional_MP")
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -28)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "m1!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -1
                                                                                                                       :where
                                                                                                                       -3)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "update_PState"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "cp(astate(tau2!2)) = halted")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "cp(astate(tau2!2)) = halted")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "check_assertion")
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -33
                                                                                                                                     "m2!2 - 1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (inst?
                                                                                                                                           -33
                                                                                                                                           :where
                                                                                                                                           -9)))
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -11)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "update_PState")
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -10)
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (replace
                                                                                                                               -4
                                                                                                                               1
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("2"
                                                                                                                                (expand*
                                                                                                                                 "on_method_MVA"
                                                                                                                                 "step")
                                                                                                                                (("2"
                                                                                                                                  (lift-if)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "mva(mp!1)")
                                                                                                                                          (("1"
                                                                                                                                            (expand*
                                                                                                                                             "complete"
                                                                                                                                             "trap_state"
                                                                                                                                             "total")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "nonempty_exists")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?
                                                                                                                                                     -4
                                                                                                                                                     :where
                                                                                                                                                     -7)
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       -4
                                                                                                                                                       "halted"
                                                                                                                                                       "stA(astate(tau1!2))"
                                                                                                                                                       "st(pstate(tau1!2))")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -11)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -21
                                                                                                   "m5!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -21
                                                                                                         :where
                                                                                                         -1)))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "update_stack")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "update_PState")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lift-if)
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand*
                                                                                   "on_method_entry_MP"
                                                                                   "on_method_entry")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -3)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "check_assertion")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (copy
                                                                                               -29)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "m1!2 - 1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       -5)))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "cp(astate(tau1!2)) = halted")
                                                                                                        (("1"
                                                                                                          (copy
                                                                                                           -31)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "m2!2 - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -10)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "cp(astate(tau2!2)) = halted")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -33
                                                                                                                       "m3!2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (inst?
                                                                                                                             -33
                                                                                                                             :where
                                                                                                                             -13)))
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 -18)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand*
                                                                                                                                     "on_method_MVA"
                                                                                                                                     "step")
                                                                                                                                    (("1"
                                                                                                                                      (lift-if
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           3)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "mva(mp!1)")
                                                                                                                                              (("1"
                                                                                                                                                (expand*
                                                                                                                                                 "complete"
                                                                                                                                                 "trap_state"
                                                                                                                                                 "total")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "nonempty_exists")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?
                                                                                                                                                         -4
                                                                                                                                                         :where
                                                                                                                                                         -7)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -4
                                                                                                                                                           "halted"
                                                                                                                                                           "stA(astate(s_new!1))"
                                                                                                                                                           "st(pstate(s_new!1))")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (replace
                                                                                                                       -11)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -4 "x!1 - 1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -4 :where -3)))
                                                      (assert)
                                                      (flatten)
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst -4 "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -4
                                                           :where
                                                           -3)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (case
                                                         "FORALL(branches : (wf_Branches(program(mp!1))), sigma1, sigma2 : MPState, v : Val) : cp(astate(sigma1)) = halted IMPLIES execute_CaseJML(mp!1, branches, sigma1, sigma2, v, x!1, LAMBDA (k: upto(x!1))(p: MonitoredProgram[CP, Name])
                                                              (b: (wf_Body(program(p))), sigma1: MPState,
                                                               v: Val[Name], sigma2: MPState)
                                                              (m: below(k)):
                                                         derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES cp(astate(sigma2)) = halted")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 -5))
                                                          (("2"
                                                            (induct
                                                             "branches")
                                                            (("1"
                                                              (typepred
                                                               "branches!1")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand*
                                                                 "execute_CaseJML"
                                                                 "extend")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (expand*
                                                                   "execute_CaseJML"
                                                                   "extend")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "wf_Branches")
                                                                      (("3"
                                                                        (expand
                                                                         "every"
                                                                         -2)
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -8
                                                                               "x!1 - 1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (inst?
                                                                                     -8
                                                                                     :where
                                                                                     -6)))
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (copy -7)
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -8
                                                                 "m1!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -5)))
                                                                (assert)))
                                                              (("1"
                                                                (expand
                                                                 "check_for_exception")
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split -6)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -2)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -4
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -4
                                                                             :where
                                                                             -2)))
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (inst
                                                                           -3
                                                                           "m2!1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -3
                                                                             :where
                                                                             -1)))
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (apply
                                                             (then
                                                              (skosimp*)
                                                              (copy -7)
                                                              (inst -1 "m1!1")
                                                              (inst -8 "m2!1")
                                                              (assert)
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -1
                                                                 :where
                                                                 -5)))
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -7)))
                                                              (assert)
                                                              (flatten)
                                                              (assert)))
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "execute_set")
                                                              (("1"
                                                                (apply
                                                                 (then
                                                                  (skosimp*)
                                                                  (inst
                                                                   -7
                                                                   "x!1 - 1")
                                                                  (assert)
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -7
                                                                     :where
                                                                     -4)))
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -5)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (expand
                                                                       "update_GhostVars")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (skosimp*)
                                                                    (inst
                                                                     -5
                                                                     "x!1 - 1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (copy
                                                                         -10)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "m1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -1
                                                                                 :where
                                                                                 -5)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "cp(astate(tau2!1)) = halted")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -12
                                                                                     "m3!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -12
                                                                                           :where
                                                                                           -9)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "update_PState")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (split
                                                                                       -7)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -14
                                                                                           "m2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -14
                                                                                                 :where
                                                                                                 -3)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (then
                                                                          (skosimp*)
                                                                          (inst
                                                                           -5
                                                                           "x!1 - 1")
                                                                          (assert)
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -5
                                                                             :where
                                                                             -4)))
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "execute_assert")
                                                                        (("2"
                                                                          (expand
                                                                           "check_assertion")
                                                                          (("2"
                                                                            (apply
                                                                             (then
                                                                              (skosimp*)
                                                                              (inst
                                                                               -6
                                                                               "x!1 - 1")
                                                                              (assert)
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -6
                                                                                 :where
                                                                                 -3)))
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -4)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("2"
                                                                                  (expand
                                                                                   "update_PState")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_nat") nil nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (update_stack const-decl "FullState" Semantics nil)
    (catch const-decl "PState" State nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (list_induction formula-decl nil list_adt nil)
    (extend const-decl "R" extend nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil) (Excpt type-decl nil Excpt_adt nil)
    (halted const-decl "CP" MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   21665 17140 t shostak))
 (on_method_MVA_never_leaves_stuck 0
  (on_method_MVA_never_leaves_stuck-1 nil 3411998553 3432903968
   ("" (skosimp*) (("" (expand "on_method_MVA") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)) 3307
   3250 t shostak))
 (derive_never_leaves_stuck 0
  (derive_never_leaves_stuck-1 nil 3411999778 3432903991
   ("" (auto-rewrite "defined?")
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
                                     (sigma1, sigma2: MPState):
                                wf_MP(mp) IMPLIES
                                 stuck(sigma1) IMPLIES
                                  derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES
                                   stuck(sigma2)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2"
                  (apply (branch (split -4)
                          ((then (flatten) (assert) (flatten) (assert)))))
                  (("2" (lift-if)
                    (("2"
                      (apply (branch (split -1)
                              ((then (flatten) (assert) (flatten) (assert)))))
                      (("1"
                        (apply (then (skosimp*) (copy -6) (inst -1 "m1!1")
                                (inst -7 "m2!1") (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5))) (assert)
                                (flatten) (assert)))
                        nil nil)
                       ("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("1"
                            (apply (then (skosimp*) (inst -5 "x!1 - 1")
                                    (assert)
                                    (apply (repeat (inst? -5 :where -3)))
                                    (assert) (flatten) (assert)))
                            nil nil)
                           ("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1"
                              (apply (then (skosimp*) (inst-cp -6 "m1!1")
                                      (assert)
                                      (apply (repeat (inst? -7 :where -3)))
                                      (assert)))
                              (("1"
                                (expand* "check_for_exception"
                                 "check_for_exception_final")
                                (("1"
                                  (apply (branch
                                          (split -4)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1" (inst -9 "m2!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -9 :where -3)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply (then
                                        (skosimp*)
                                        (copy -6)
                                        (inst -1 "m1!1")
                                        (inst -7 "m2!1")
                                        (assert)
                                        (apply (repeat (inst? -1 :where -4)))
                                        (apply (repeat (inst? -7 :where -5)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                nil nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1"
                                      (apply
                                       (then
                                        (skosimp*)
                                        (inst -5 "x!1 - 1")
                                        (assert)
                                        (apply (repeat (inst? -5 :where -3)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (apply
                                           (branch
                                            (split -4)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (expand "update_PState")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (copy -6)
                                          (("1"
                                            (apply
                                             (then
                                              (inst -1 "m1!1")
                                              (assert)
                                              (apply
                                               (repeat (inst? -1 :where -4)))
                                              (assert)))
                                            (("1"
                                              (expand "check_for_exception")
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -5)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split -2)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (inst -9 "m2!1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -9
                                                           :where
                                                           -2)))
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (inst -8 "m2!1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -8
                                                           :where
                                                           -1)))
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (copy -6)
                                            (("1"
                                              (inst -1 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst? -1 :where -4)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (copy -7)
                                                      (("1"
                                                        (inst -1 "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -1
                                                               :where
                                                               -6)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split -7)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (replace -3)
                                                                  (("1"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("2"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -1)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("2"
                                                                      (case
                                                                       "stuck(tau3!1)")
                                                                      (("1"
                                                                        (case
                                                                         "stuck(tau4!1)")
                                                                        (("1"
                                                                          (copy
                                                                           -20)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m4!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -1
                                                                                   :where
                                                                                   -9)))
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case
                                                                                     "stuck(tau6!1)")
                                                                                    (("1"
                                                                                      (case
                                                                                       "stuck(tau7!1)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (split
                                                                                         -13)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "on_method_exit_normal_MP")
                                                                                            (("1"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -2)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (copy
                                                                                                   -30)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       -3)))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "stuck(tau2!2)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "check_assertion")
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -36)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "m2!2 - 1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -1
                                                                                                                       :where
                                                                                                                       -10)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "stuck(tau3!2)")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -38
                                                                                                                           "m3!2 - 1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (apply
                                                                                                                               (repeat
                                                                                                                                (inst?
                                                                                                                                 -38
                                                                                                                                 :where
                                                                                                                                 -14)))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -15)
                                                                                                                                  (("1"
                                                                                                                                    (lift-if)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "update_PState")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (replace
                                                                                                                           -11)
                                                                                                                          (("2"
                                                                                                                            (lift-if)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "update_PState")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "stuck(tau1!2)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -6
                                                                                                             1
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "on_method_MVA_never_leaves_stuck")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "check_assertion")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -1
                                                                                                                   :where
                                                                                                                   -3)))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "on_method_exit_exceptional_MP")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (copy
                                                                                                     -29)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "m1!2")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (inst?
                                                                                                             -1
                                                                                                             :where
                                                                                                             -3)))
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "update_PState"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "stuck(tau2!2)")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "check_assertion")
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -33
                                                                                                                         "m2!2 - 1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (inst?
                                                                                                                               -33
                                                                                                                               :where
                                                                                                                               -9)))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -11)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "update_PState")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -10)
                                                                                                                                    (("1"
                                                                                                                                      (lift-if)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (replace
                                                                                                                     -5
                                                                                                                     1
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("2"
                                                                                                                      (use
                                                                                                                       "on_method_MVA_never_leaves_stuck")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -21
                                                                                       "m5!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -21
                                                                                             :where
                                                                                             -11)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand*
                                                                           "on_method_entry_MP"
                                                                           "on_method_entry")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "check_assertion")
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -6)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (copy
                                                                                     -30)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "m1!2 - 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -1
                                                                                             :where
                                                                                             -5)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "stuck(tau1!2)")
                                                                                              (("1"
                                                                                                (copy
                                                                                                 -32)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "m2!2 - 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -1
                                                                                                         :where
                                                                                                         -10)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "stuck(tau2!2)")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -34
                                                                                                             "m3!2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (apply
                                                                                                                 (repeat
                                                                                                                  (inst?
                                                                                                                   -34
                                                                                                                   :where
                                                                                                                   -13)))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       -21)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "on_method_MVA_never_leaves_stuck")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -11)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -6)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "update_stack")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "update_stack")
                                                                        (("2"
                                                                          (expand
                                                                           "update_PState")
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (expand "execute_CaseJML")
                                              (("1"
                                                (expand "extend")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -3)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -2)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst -7 "x!1 - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -7
                                                               :where
                                                               -2)))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -7)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -8 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -5)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -6)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -4
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -4
                                                                   :where
                                                                   -2)))
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (inst
                                                                 -3
                                                                 "m2!1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -3
                                                                   :where
                                                                   -1)))
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (apply
                                                   (then
                                                    (skosimp*)
                                                    (copy -7)
                                                    (inst -1 "m1!1")
                                                    (inst -8 "m2!1")
                                                    (assert)
                                                    (apply
                                                     (repeat
                                                      (inst? -1 :where -5)))
                                                    (apply
                                                     (repeat
                                                      (inst? -8 :where -7)))
                                                    (assert)
                                                    (flatten)
                                                    (assert)))
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (expand "execute_set")
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (skosimp*)
                                                        (inst -7 "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -7
                                                           :where
                                                           -4)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -5)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (expand
                                                             "update_GhostVars")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (then
                                                          (skosimp*)
                                                          (inst -5 "x!1 - 1")
                                                          (assert)
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -4)))
                                                          (assert)
                                                          (flatten)
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (expand
                                                           "update_PState")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (copy -10)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -5)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "stuck(tau2!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -12
                                                                           "m3!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -12
                                                                                 :where
                                                                                 -9)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_PState")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (split
                                                                             -7)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (inst
                                                                                 -14
                                                                                 "m2!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -14
                                                                                       :where
                                                                                       -3)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -4)))
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "execute_assert")
                                                              (("2"
                                                                (expand
                                                                 "check_assertion")
                                                                (("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (apply
                                                                       (then
                                                                        (skosimp*)
                                                                        (inst
                                                                         -6
                                                                         "x!1 - 1")
                                                                        (assert)
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -6
                                                                           :where
                                                                           -3)))
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -4)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (extend const-decl "R" extend nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil) nil
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (update_stack const-decl "FullState" Semantics nil)
    (catch const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil) nil
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (on_method_MVA_never_leaves_stuck formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil) nil
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (check_for_exception const-decl "bool" SemanticsAuxiliaryFunctions nil)
    (check_for_exception_final const-decl "bool" SemanticsAuxiliaryFunctions
     nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   23539 17910 t shostak))
 (partial_MVA_never_in_halted_in_wf_state 0
  (partial_MVA_never_in_halted_in_wf_state-1 nil 3412488008 3432903995
   ("" (skosimp*)
    (("" (expand* "partial" "wf_state" "wf_AState")
      (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (partial const-decl "boolean" MVAProperties nil))
   3361 3300 t shostak))
 (complete_MVA_never_stuck_after_on_method_MVA 0
  (complete_MVA_never_stuck_after_on_method_MVA-2 nil 3428746451 3432903998
   ("" (skosimp*)
    (("" (expand "on_method_MVA")
      (("" (assert)
        (("" (split -3)
          (("1" (flatten)
            (("1" (split -3)
              (("1" (propax) nil nil)
               ("2" (expand "complete")
                (("2" (flatten)
                  (("2" (expand "total")
                    (("2" (expand "step")
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (propax) nil nil)
                             ("2"
                              (inst -6 "cp(astate(s!1))"
                               "(# etype := etype!1, mname := name(md!1) #)"
                               "stA(astate(s!1))" "fvs(st(pstate(s!1)))"
                               "arg!1")
                              (("2" (assert)
                                (("2" (expand* "wf_state" "wf_AState")
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (step const-decl "lift[AState]" MVAPartialSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Action type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (total const-decl "boolean" MVAProperties nil)
    (complete const-decl "boolean" MVAProperties nil))
   3465 3370 nil nil)
  (complete_MVA_never_stuck_after_on_method_MVA-1 nil 3411998567 3428745706
   ("" (skosimp*)
    (("" (expand "on_method_MVA")
      (("" (assert)
        (("" (split -3)
          (("1" (flatten)
            (("1" (split -3)
              (("1" (propax) nil nil)
               ("2" (expand "complete")
                (("2" (flatten)
                  (("2" (expand "total")
                    (("2" (expand "step")
                      (("2" (lift-if)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (propax) nil nil)
                             ("2"
                              (inst -6 "cp(astate(s!1))"
                               "(# etype := etype!1, mname := name(md!1) #)"
                               "stA(astate(s!1))" "st(pstate(s!1))" "arg!1")
                              (("2" (assert)
                                (("2" (expand* "wf_state" "wf_AState")
                                  (("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((on_method_MVA const-decl "MPState" MonitoredProgramSemantics nil)
    (step const-decl "lift[AState]" MVAPartialSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Action type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (PSt type-eq-decl nil State nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_AState const-decl "boolean" MVACommonSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (total const-decl "boolean" MVAProperties nil)
    (complete const-decl "boolean" MVAProperties nil))
   353 320 t shostak))
 (complete_MVA_never_stuck_after_derive 0
  (complete_MVA_never_stuck_after_derive-1 nil 3412318598 3432904033
   ("" (auto-rewrite "defined?")
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) :  FORALL (mp: MonitoredProgram, b: (wf_Body(program(mp))), v: Val)
             (sigma1, sigma2: MPState):
        wf_and_complete_MP(mp) IMPLIES
         NOT stuck(sigma1) IMPLIES
          wf_state(mp)(sigma1) IMPLIES
           derive(mp)(b, sigma1, v, sigma2)(n) IMPLIES NOT stuck(sigma2)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "derive" -4)
                (("2"
                  (apply (branch (split -4)
                          ((then (flatten) (assert) (flatten) (assert)))))
                  (("2" (lift-if)
                    (("2"
                      (apply (branch (split -1)
                              ((then (flatten) (assert) (flatten) (assert)))))
                      (("1"
                        (apply (then (skosimp*) (copy -6) (inst -1 "m1!1")
                                (inst -7 "m2!1") (assert)
                                (apply (repeat (inst? -1 :where -4)))
                                (apply (repeat (inst? -7 :where -5))) (assert)
                                (flatten) (assert)))
                        (("1" (use "derive_yields_wf_state_MP")
                          (("1" (assert)
                            (("1" (expand "wf_and_complete_MP")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("1"
                            (apply (then (skosimp*) (inst -5 "x!1 - 1")
                                    (assert)
                                    (apply (repeat (inst? -5 :where -3)))
                                    (assert) (flatten) (assert)))
                            nil nil)
                           ("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1"
                              (apply (then (skosimp*) (inst-cp -6 "m1!1")
                                      (assert)
                                      (apply (repeat (inst? -7 :where -3)))
                                      (assert)))
                              (("1"
                                (expand* "check_for_exception"
                                 "check_for_exception_final")
                                (("1"
                                  (apply (branch
                                          (split -4)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1" (inst -9 "m2!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -9 :where -3)))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "derive_yields_wf_state_MP")
                                              (("1"
                                                (inst? -1 :where -8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "wf_and_complete_MP")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1"
                                (apply (then
                                        (skosimp*)
                                        (copy -6)
                                        (inst -1 "m1!1")
                                        (inst -7 "m2!1")
                                        (assert)
                                        (apply (repeat (inst? -1 :where -4)))
                                        (apply (repeat (inst? -7 :where -5)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                (("1" (use "derive_yields_wf_state_MP")
                                  (("1" (assert)
                                    (("1" (expand "wf_and_complete_MP")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1"
                                      (apply
                                       (then
                                        (skosimp*)
                                        (inst -5 "x!1 - 1")
                                        (assert)
                                        (apply (repeat (inst? -5 :where -3)))
                                        (assert)
                                        (flatten)
                                        (assert)))
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (apply
                                           (branch
                                            (split -4)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (expand "update_PState")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (copy -6)
                                          (("1"
                                            (apply
                                             (then
                                              (inst -1 "m1!1")
                                              (assert)
                                              (apply
                                               (repeat (inst? -1 :where -4)))
                                              (assert)))
                                            (("1"
                                              (expand "check_for_exception")
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split -4)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lemma
                                                     "derive_yields_wf_state_MP")
                                                    (("1"
                                                      (inst? -1 :where -6)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "wf_and_complete_MP")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split -3)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply
                                                                   (then
                                                                    (inst
                                                                     -9
                                                                     "m2!1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -9
                                                                       :where
                                                                       -2)))
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (inst
                                                                     -8
                                                                     "m2!1")
                                                                    (assert)
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -1)))
                                                                    (assert)))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (copy -6)
                                            (("1"
                                              (inst -1 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst? -1 :where -4)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (copy -6)
                                                      (("1"
                                                        (inst -1 "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -1
                                                               :where
                                                               -5)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "derive_yields_wf_state_MP")
                                                                (("1"
                                                                  (expand
                                                                   "wf_and_complete_MP")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -6)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -1)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (apply
                                                                             (branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (flatten)
                                                                                (assert)
                                                                                (flatten)
                                                                                (assert)))))
                                                                            (("2"
                                                                              (case
                                                                               "NOT stuck(tau3!1) AND wf_state(mp!1)(tau3!1)")
                                                                              (("1"
                                                                                (case
                                                                                 "NOT stuck(tau4!1) AND wf_state(mp!1)(tau4!1)")
                                                                                (("1"
                                                                                  (copy
                                                                                   -19)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "m4!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           -9)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT stuck(tau6!1) AND wf_state(mp!1)(tau6!1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT stuck(tau7!1)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (split
                                                                                                 -14)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "on_method_exit_normal_MP")
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (branch
                                                                                                        (split
                                                                                                         -2)
                                                                                                        ((then
                                                                                                          (flatten)
                                                                                                          (assert)
                                                                                                          (flatten)
                                                                                                          (assert)))))
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "derive_yields_wf_state_MP")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst-cp
                                                                                                               -30
                                                                                                               "m1!2")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (repeat
                                                                                                                    (inst?
                                                                                                                     -31
                                                                                                                     :where
                                                                                                                     -3)))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "complete_MVA_never_stuck_after_on_method_MVA")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "check_assertion")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "on_method_MVA_yields_wf_state")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "NOT stuck(tau3!2) AND wf_state(mp!1)(tau3!2)")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -35
                                                                                                                                       "m3!2 - 1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (apply
                                                                                                                                           (repeat
                                                                                                                                            (inst?
                                                                                                                                             -35
                                                                                                                                             :where
                                                                                                                                             -12)))
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -13
                                                                                                                                                   -16)
                                                                                                                                                  (("1"
                                                                                                                                                    (lift-if)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (apply
                                                                                                                                                         (branch
                                                                                                                                                          (split
                                                                                                                                                           -16)
                                                                                                                                                          ((then
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)
                                                                                                                                                            (flatten)
                                                                                                                                                            (assert)))))
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "update_PState")
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (inst
                                                                                                                                       -34
                                                                                                                                       "m2!2 - 1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (apply
                                                                                                                                           (repeat
                                                                                                                                            (inst?
                                                                                                                                             -34
                                                                                                                                             :where
                                                                                                                                             -8)))
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "derive_yields_wf_state_MP")
                                                                                                                                              (("2"
                                                                                                                                                (inst?
                                                                                                                                                 -1
                                                                                                                                                 :where
                                                                                                                                                 -9)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -10)
                                                                                                                                                    (("2"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (split
                                                                                                                                                               2)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState")
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (use
                                                                                                                                                                 "wf_update_PState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (skosimp*)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "update_PState")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (use
                                                                                                                                                                         "wf_state_raise")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "on_method_exit_exceptional_MP")
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (branch
                                                                                                        (split
                                                                                                         -1)
                                                                                                        ((then
                                                                                                          (flatten)
                                                                                                          (assert)
                                                                                                          (flatten)
                                                                                                          (assert)))))
                                                                                                      (("2"
                                                                                                        (skosimp*)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "derive_yields_wf_state_MP")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               " wf_state(mp!1)(update_PState(tau6!1, catch))")
                                                                                                              (("1"
                                                                                                                (inst-cp
                                                                                                                 -31
                                                                                                                 "m1!2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?
                                                                                                                       -32
                                                                                                                       :where
                                                                                                                       -5)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -32)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "check_assertion")
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -33
                                                                                                                               "m2!2 - 1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (apply
                                                                                                                                   (repeat
                                                                                                                                    (inst?
                                                                                                                                     -33
                                                                                                                                     :where
                                                                                                                                     -10)))
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -33)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -12
                                                                                                                                         -14)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if
                                                                                                                                           -14)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "update_PState"
                                                                                                                                             -14)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -11
                                                                                                                                               -14)
                                                                                                                                              (("1"
                                                                                                                                                (lift-if)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "update_PState")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (use
                                                                                                                                         "on_method_MVA_yields_wf_state")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (use
                                                                                                                                         "complete_MVA_never_stuck_after_on_method_MVA")
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "update_PState")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (use
                                                                                                                 "wf_update_PState")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "update_PState")
                                                                                                                      (("2"
                                                                                                                        (use
                                                                                                                         "wf_state_catch")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -19
                                                                                                   "m5!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -19
                                                                                                         :where
                                                                                                         -10)))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "derive_yields_wf_state_MP")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "derive_yields_wf_state_MP")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -1
                                                                                                                 :where
                                                                                                                 -12)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "on_method_entry_MP")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (case
                                                                                       "NOT stuck(s_new!1) AND wf_state(mp!1)(s_new!1)")
                                                                                      (("1"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           -8)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("1"
                                                                                          (use
                                                                                           "on_method_MVA_yields_wf_state")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (use
                                                                                               "complete_MVA_never_stuck_after_on_method_MVA")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "on_method_entry")
                                                                                        (("2"
                                                                                          (apply
                                                                                           (branch
                                                                                            (split
                                                                                             -6)
                                                                                            ((then
                                                                                              (flatten)
                                                                                              (assert)
                                                                                              (flatten)
                                                                                              (assert)))))
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "check_assertion")
                                                                                              (("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "derive_yields_wf_state_MP")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "derive_yields_wf_state_MP")
                                                                                                      (("2"
                                                                                                        (inst?
                                                                                                         -1
                                                                                                         :where
                                                                                                         -9)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "derive_yields_wf_state_MP")
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -1
                                                                                                               :where
                                                                                                               -7)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -32
                                                                                                                   "m1!2 - 1")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (apply
                                                                                                                       (repeat
                                                                                                                        (inst?
                                                                                                                         -33
                                                                                                                         :where
                                                                                                                         -7)))
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (inst-cp
                                                                                                                           -32
                                                                                                                           "m2!2 - 1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (repeat
                                                                                                                                (inst?
                                                                                                                                 -33
                                                                                                                                 :where
                                                                                                                                 -10)))
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -32
                                                                                                                                   "m3!2")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (apply
                                                                                                                                       (repeat
                                                                                                                                        (inst?
                                                                                                                                         -32
                                                                                                                                         :where
                                                                                                                                         -12)))
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (case
                                                                                                                                           "wf_state(mp!1)(tau1!2)")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "wf_state(mp!1)(tau2!2)")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -13
                                                                                                                                                 -35)
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if
                                                                                                                                                   -35)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "update_PState"
                                                                                                                                                     -35)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -10
                                                                                                                                                         -36)
                                                                                                                                                        (("1"
                                                                                                                                                          (lift-if)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "update_PState")
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -12)
                                                                                                                                              (("2"
                                                                                                                                                (lift-if)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (split
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (skosimp*)
                                                                                                                                                        (("2"
                                                                                                                                                          (use
                                                                                                                                                           "wf_update_PState")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "update_PState")
                                                                                                                                                                (("2"
                                                                                                                                                                  (use
                                                                                                                                                                   "wf_state_raise")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (replace
                                                                                                                                             -8)
                                                                                                                                            (("2"
                                                                                                                                              (lift-if)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (split
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp*)
                                                                                                                                                    (("2"
                                                                                                                                                      (use
                                                                                                                                                       "wf_update_PState")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "update_PState")
                                                                                                                                                            (("2"
                                                                                                                                                              (use
                                                                                                                                                               "wf_state_raise")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -4)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_stack")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "update_PState")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "get_class_in_classes")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "lookup_mthd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -2)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("2"
                                                                                                (use
                                                                                                 "wf_state_update_stack")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "derive_yields_wf_state_MP")
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -1
                                                                                                       :where
                                                                                                       -20)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "getLocalDecls")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "down(get_class(program(mp!1))(a!1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "getLocalDecls")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "md!1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "getLocalDecls")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "down(get_class(program(mp!1))(a!1))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "getLocalDecls")
                                                                                                        (("2"
                                                                                                          (inst?)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "lookup_mthd_in_methods_class")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (expand "execute_CaseJML")
                                              (("1"
                                                (expand "extend")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -3)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split -2)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst -7 "x!1 - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -7
                                                               :where
                                                               -2)))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -7)
                                                  (("1"
                                                    (apply
                                                     (then
                                                      (inst -8 "m1!1")
                                                      (assert)
                                                      (apply
                                                       (repeat
                                                        (inst? -8 :where -5)))
                                                      (assert)))
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -6)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (use
                                                             "derive_yields_wf_state_MP")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "wf_and_complete_MP")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (apply
                                                                     (branch
                                                                      (split
                                                                       -3)
                                                                      ((then
                                                                        (flatten)
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))))
                                                                    (("1"
                                                                      (apply
                                                                       (then
                                                                        (inst
                                                                         -5
                                                                         "m2!1")
                                                                        (assert)
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -5
                                                                           :where
                                                                           -2)))
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (inst
                                                                         -4
                                                                         "m2!1")
                                                                        (assert)
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -4
                                                                           :where
                                                                           -1)))
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (apply
                                                   (then
                                                    (skosimp*)
                                                    (copy -7)
                                                    (inst -1 "m1!1")
                                                    (inst -8 "m2!1")
                                                    (assert)
                                                    (apply
                                                     (repeat
                                                      (inst? -1 :where -5)))
                                                    (apply
                                                     (repeat
                                                      (inst? -8 :where -7)))
                                                    (assert)
                                                    (flatten)
                                                    (assert)))
                                                  (("1"
                                                    (use
                                                     "derive_yields_wf_state_MP")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "wf_and_complete_MP")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (expand "execute_set")
                                                    (("1"
                                                      (apply
                                                       (then
                                                        (skosimp*)
                                                        (inst -7 "x!1 - 1")
                                                        (assert)
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -7
                                                           :where
                                                           -4)))
                                                        (assert)
                                                        (flatten)
                                                        (assert)))
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -5)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (expand
                                                             "update_GhostVars")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (then
                                                          (skosimp*)
                                                          (inst -5 "x!1 - 1")
                                                          (assert)
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -5
                                                             :where
                                                             -4)))
                                                          (assert)
                                                          (flatten)
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (expand
                                                           "update_PState")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (copy -10)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -1
                                                                       :where
                                                                       -5)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (use
                                                                         "derive_yields_wf_state_MP")
                                                                        (("1"
                                                                          (expand
                                                                           "wf_and_complete_MP")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "NOT stuck(tau2!1) AND wf_state(mp!1)(tau2!1)")
                                                                                (("1"
                                                                                  (inst
                                                                                   -12
                                                                                   "m3!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -12
                                                                                         :where
                                                                                         -9)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (split
                                                                                               -12)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (branch
                                                                                                      (split
                                                                                                       -11)
                                                                                                      (then
                                                                                                       (flatten)
                                                                                                       (assert)
                                                                                                       (flatten)
                                                                                                       (assert))))
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (use
                                                                                                 "wf_update_PState")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "update_PState")
                                                                                                      (("2"
                                                                                                        (use
                                                                                                         "wf_state_catch")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "update_PState")
                                                                                                (("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       -8)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -15
                                                                                           "m2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (inst?
                                                                                                 -15
                                                                                                 :where
                                                                                                 -3)))
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -15)
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "wf_update_PState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skosimp*)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "update_PState")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "wf_state_catch")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -7)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "derive_yields_wf_state_MP")
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -1
                                                                                           :where
                                                                                           -4)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (use
                                                                                               "wf_update_PState")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "wf_state_catch")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply
                                                               (then
                                                                (skosimp*)
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (assert)
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -5
                                                                   :where
                                                                   -4)))
                                                                (assert)
                                                                (flatten)
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "execute_assert")
                                                              (("2"
                                                                (expand
                                                                 "check_assertion")
                                                                (("2"
                                                                  (apply
                                                                   (branch
                                                                    (split -1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (apply
                                                                       (then
                                                                        (skosimp*)
                                                                        (inst
                                                                         -6
                                                                         "x!1 - 1")
                                                                        (assert)
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -6
                                                                           :where
                                                                           -3)))
                                                                        (assert)
                                                                        (flatten)
                                                                        (assert)))
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -4)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "update_PState")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (extend const-decl "R" extend nil)
    (tgt adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (catch const-decl "PState" State nil) nil
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (wf_state_catch formula-decl nil State nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (complete_MVA_never_stuck_after_on_method_MVA formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_raise formula-decl nil State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (raise const-decl "PState" State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (on_method_MVA_yields_wf_state formula-decl nil MonitoredProgramSemantics
     nil)
    (update_stack const-decl "FullState" Semantics nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (name adt-accessor-decl "[(MethodCall?) -> Name]" Body_adt nil)
    (lookup_mthd_in_methods_class formula-decl nil ProgramFunctions nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil) nil
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil nil nil
    (wf_state_update_stack formula-decl nil MonitoredProgramSemantics nil)
    (get_class_in_classes formula-decl nil ProgramFunctions nil)
    (arg adt-accessor-decl "[(MethodCall?) -> Expr]" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (check_for_exception const-decl "bool" SemanticsAuxiliaryFunctions nil)
    (check_for_exception_final const-decl "bool" SemanticsAuxiliaryFunctions
     nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   35170 29210 t shostak))
 (on_method_entry_yields_wf_state_MP 0
  (on_method_entry_yields_wf_state_MP-1 nil 3406554628 3432904038
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (skosimp*)
        (("" (expand "on_method_entry")
          ((""
            (apply (branch (split -3)
                    ((then (flatten) (assert) (flatten) (assert)))))
            (("" (skosimp*)
              (("" (expand "check_assertion")
                (("" (skosimp*)
                  (("" (use "derive_yields_wf_state_MP")
                    (("" (assert)
                      (("" (hide -11)
                        (("" (use "derive_yields_wf_state_MP")
                          (("" (assert)
                            (("" (hide -7)
                              (("" (use "derive_yields_wf_state_MP")
                                (("" (assert)
                                  (("" (split -3)
                                    (("1"
                                      (apply
                                       (branch
                                        (split -16)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (use
                                           "on_method_MVA_yields_wf_state")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (split -1)
                                      (("1"
                                        (replace -10)
                                        (("1"
                                          (apply
                                           (then
                                            (lift-if)
                                            (split 1)
                                            (skosimp*)
                                            (split 1)
                                            (skosimp*)
                                            (use "wf_update_PState")
                                            (assert)
                                            (skosimp*)
                                            (expand "update_PState")
                                            (use "wf_state_raise")
                                            (assert)))
                                          nil
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -6)
                                        (("2"
                                          (apply
                                           (then
                                            (lift-if)
                                            (split 1)
                                            (skosimp*)
                                            (split 1)
                                            (skosimp*)
                                            (use "wf_update_PState")
                                            (assert)
                                            (skosimp*)
                                            (expand "update_PState")
                                            (use "wf_state_raise")
                                            (assert)))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state_raise formula-decl nil State nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (raise const-decl "PState" State nil) (PSt type-eq-decl nil State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (on_method_MVA_yields_wf_state formula-decl nil MonitoredProgramSemantics
     nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   5110 4920 t shostak))
 (on_method_exit_normal_yields_wf_state_MP 0
  (on_method_exit_normal_yields_wf_state_MP-1 nil 3406554800 3432904043
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_yields_wf_state_MP")
                (("" (assert)
                  (("" (hide -4)
                    (("" (use "derive_yields_wf_state_MP")
                      (("" (assert)
                        (("" (hide -9)
                          (("" (use "derive_yields_wf_state_MP")
                            (("" (assert)
                              (("" (split -1)
                                (("1" (replace -13)
                                  (("1"
                                    (apply (then
                                            (lift-if)
                                            (split 2)
                                            (skosimp*)
                                            (split 1)
                                            (skosimp*)
                                            (use "wf_update_PState")
                                            (assert)
                                            (skosimp*)
                                            (expand "update_PState")
                                            (use "wf_state_raise")
                                            (assert)))
                                    nil nil))
                                  nil)
                                 ("2" (split -1)
                                  (("1" (replace -9)
                                    (("1"
                                      (apply
                                       (then
                                        (lift-if)
                                        (split 1)
                                        (skosimp*)
                                        (split 1)
                                        (skosimp*)
                                        (use "wf_update_PState")
                                        (assert)
                                        (skosimp*)
                                        (expand "update_PState")
                                        (use "wf_state_raise")
                                        (assert)))
                                      nil nil))
                                    nil)
                                   ("2" (replace -5)
                                    (("2"
                                      (use "on_method_MVA_yields_wf_state")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (on_method_MVA_yields_wf_state formula-decl nil MonitoredProgramSemantics
     nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil) (raise const-decl "PState" State nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   4792 4610 t shostak))
 (on_method_exit_exceptional_yields_wf_state_MP 0
  (on_method_exit_exceptional_yields_wf_state_MP-1 nil 3406554899 3432904050
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (use "derive_yields_wf_state_MP")
                (("" (assert)
                  (("" (hide -5)
                    (("" (use "derive_yields_wf_state_MP")
                      (("" (assert)
                        (("" (case "wf_state(mp!1)(tau3!1)")
                          (("1" (replace -13)
                            (("1"
                              (apply (then (lift-if) (split 2) (skosimp*)
                                      (split 1) (skosimp*)
                                      (use "wf_update_PState") (assert)
                                      (skosimp*) (expand "update_PState")
                                      (use "wf_state_raise") (assert)))
                              nil nil))
                            nil)
                           ("2" (split -1)
                            (("1" (replace -11)
                              (("1"
                                (apply (then
                                        (lift-if)
                                        (split 1)
                                        (skosimp*)
                                        (split 1)
                                        (skosimp*)
                                        (use "wf_update_PState")
                                        (assert)
                                        (skosimp*)
                                        (expand "update_PState")
                                        (use "wf_state_raise")
                                        (assert)))
                                nil nil))
                              nil)
                             ("2" (split -1)
                              (("1" (replace -6)
                                (("1" (use "on_method_MVA_yields_wf_state")
                                  (("1" (assert) nil nil)) nil))
                                nil)
                               ("2"
                                (apply (then
                                        (use "wf_update_PState")
                                        (assert)
                                        (skosimp*)
                                        (expand "update_PState")
                                        (use "wf_state_catch")
                                        (assert)))
                                nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (raise const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (on_method_MVA_yields_wf_state formula-decl nil MonitoredProgramSemantics
     nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (wf_state_catch formula-decl nil State nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (catch const-decl "PState" State nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   6455 4580 t shostak))
 (complete_MVA_never_stuck_after_on_method_entry_MP 0
  (complete_MVA_never_stuck_after_on_method_entry_MP-1 nil 3412666344
   3432904055
   ("" (skosimp*)
    (("" (expand "on_method_entry_MP")
      (("" (skosimp*)
        (("" (expand "on_method_entry")
          ((""
            (apply (branch (split -3)
                    ((then (flatten) (assert) (flatten) (assert)))))
            (("" (skosimp*)
              (("" (expand "check_assertion")
                (("" (skosimp*)
                  (("" (lemma "derive_yields_wf_state_MP")
                    (("" (copy -1)
                      (("" (copy -1)
                        (("" (inst? -1 :where -8)
                          (("1" (inst? -2 :where -11)
                            (("1" (inst? -3 :where -13)
                              (("1" (assert)
                                (("1"
                                  (lemma
                                   "complete_MVA_never_stuck_after_derive")
                                  (("1" (copy -1)
                                    (("1" (copy -1)
                                      (("1"
                                        (inst? -1 :where -11)
                                        (("1"
                                          (inst? -2 :where -14)
                                          (("1"
                                            (inst? -3 :where -16)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "wf_and_complete_MP")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "wf_state(mp!1)(tau1!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "wf_state(mp!1)(tau2!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -4)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split -22)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (use
                                                                   "complete_MVA_never_stuck_after_on_method_MVA")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace -16)
                                                                (("2"
                                                                  (replace
                                                                   -13)
                                                                  (("2"
                                                                    (expand
                                                                     "update_PState")
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace -15)
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split 1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (use
                                                                       "wf_update_PState")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "update_PState")
                                                                            (("2"
                                                                              (use
                                                                               "wf_state_raise")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -11)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "update_PState")
                                                                        (("2"
                                                                          (use
                                                                           "wf_state_raise")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    nil (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (complete_MVA_never_stuck_after_derive formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (complete_MVA_never_stuck_after_on_method_MVA formula-decl nil
     MonitoredProgramSemantics nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil) (raise const-decl "PState" State nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil) nil
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   4909 4740 t shostak))
 (complete_MVA_never_stuck_after_on_method_exit_normal_MP 0
  (complete_MVA_never_stuck_after_on_method_exit_normal_MP-1 nil 3412666630
   3432904059
   ("" (skosimp*)
    (("" (expand "on_method_exit_normal_MP")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (lemma "derive_yields_wf_state_MP")
                (("" (copy -1)
                  (("" (copy -1)
                    (("" (inst? -1 :where -6)
                      (("" (inst? -2 :where -11)
                        (("1" (inst? -3 :where -14)
                          (("1" (assert)
                            (("1"
                              (lemma "complete_MVA_never_stuck_after_derive")
                              (("1" (copy -1)
                                (("1" (copy -1)
                                  (("1" (inst? -1 :where -9)
                                    (("1" (inst? -2 :where -14)
                                      (("1"
                                        (inst? -3 :where -17)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "wf_and_complete_MP")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "wf_state(mp!1)(tau2!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "wf_state(mp!1)(tau3!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -4)
                                                          (("1"
                                                            (replace -18)
                                                            (("1"
                                                              (expand
                                                               "update_PState")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split -4)
                                                            (("1"
                                                              (replace -15)
                                                              (("1"
                                                                (expand
                                                                 "update_PState")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "complete_MVA_never_stuck_after_on_method_MVA")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -15)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (use
                                                                   "wf_update_PState")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "update_PState")
                                                                        (("2"
                                                                          (use
                                                                           "wf_state_raise")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "on_method_MVA_yields_wf_state")
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (v adt-accessor-decl "[(val?) -> Expr[Name]]" ValOrExcpt_adt nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (complete_MVA_never_stuck_after_derive formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (complete_MVA_never_stuck_after_on_method_MVA formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (PSt type-eq-decl nil State nil) (raise const-decl "PState" State nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (on_method_MVA_yields_wf_state formula-decl nil MonitoredProgramSemantics
     nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   4324 4180 t shostak))
 (complete_MVA_never_stuck_after_on_method_exit_exceptional_MP 0
  (complete_MVA_never_stuck_after_on_method_exit_exceptional_MP-1 nil
   3412666837 3432904063
   ("" (skosimp*)
    (("" (expand "on_method_exit_exceptional_MP")
      ((""
        (apply (branch (split -3)
                ((then (flatten) (assert) (flatten) (assert)))))
        (("" (skosimp*)
          (("" (expand "check_assertion")
            (("" (skosimp*)
              (("" (lemma "derive_yields_wf_state_MP")
                (("" (copy -1)
                  (("" (inst? -1 :where -6)
                    (("" (inst? -2 :where -11)
                      (("1" (assert)
                        (("1" (lemma "complete_MVA_never_stuck_after_derive")
                          (("1" (copy -1)
                            (("1" (copy -1)
                              (("1" (inst? -1 :where -9)
                                (("1" (inst? -2 :where -14)
                                  (("1" (assert)
                                    (("1" (expand "wf_and_complete_MP")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             "wf_state(mp!1)(update_PState(sigma1!1, catch))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "wf_state(mp!1)(tau2!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "update_PState"
                                                     -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (replace -15)
                                                          (("1"
                                                            (replace -16)
                                                            (("1"
                                                              (expand
                                                               "update_PState")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "complete_MVA_never_stuck_after_on_method_MVA")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "on_method_MVA_yields_wf_state")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use "wf_update_PState")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand "update_PState")
                                                    (("2"
                                                      (use "wf_state_catch")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil) nil
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (complete_MVA_never_stuck_after_derive formula-decl nil
     MonitoredProgramSemantics nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (wf_state_catch formula-decl nil State nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (on_method_MVA_yields_wf_state formula-decl nil MonitoredProgramSemantics
     nil)
    (complete_MVA_never_stuck_after_on_method_MVA formula-decl nil
     MonitoredProgramSemantics nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (catch const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (e adt-accessor-decl "[(excpt?) -> Excpt]" ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (Name formal-nonempty-type-decl nil MonitoredProgramSemantics nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   4311 4150 t shostak)))

