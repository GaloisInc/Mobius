(EventType)
(MVA)
(WellFormedMVA)
(MVASemantics
 (get_MVAVarDecl_TCC1 0
  (get_MVAVarDecl_TCC1-1 nil 3383053727 3390292705
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   389 260 nil nil))
 (initial_MVA_state_TCC1 0
  (initial_MVA_state_TCC1-1 nil 3383053727 3390292705
   ("" (subtype-tcc) nil nil) proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   414 290 nil nil))
 (execute_action_TCC1 0
  (execute_action_TCC1-1 nil 3389011015 3390292705
   ("" (subtype-tcc) nil nil) proved nil 39 40 nil nil))
 (execute_action_TCC2 0
  (execute_action_TCC2-1 nil 3389011015 3390292705
   ("" (termination-tcc) nil nil) proved
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   100 100 nil nil))
 (step_TCC1 0
  (step_TCC1-2 nil 3383053820 3390292706
   ("" (skosimp*)
    (("" (typepred "a!1")
      (("" (expand "total")
        (("" (typepred "s!1")
          (("" (expand "wf_MVA")
            (("" (flatten)
              (("" (expand "wf_AState")
                (("" (flatten)
                  ((""
                    (inst -8 "cp(s!1)" "event(pe!1)" "stA(s!1)"
                     "stP(pe!1)")
                    (("" (assert)
                      (("" (typepred "pe!1")
                        (("" (expand "wf_PEvent")
                          (("" (flatten)
                            (("" (assert)
                              ((""
                                (skosimp*)
                                ((""
                                  (rewrite "nonempty_exists")
                                  ((""
                                    (inst 1 "t!1")
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((total const-decl "boolean" MVASemantics nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (a!1 skolem-const-decl "(total)" MVASemantics nil)
    (t!1 skolem-const-decl "Transition[CP, Name]" MVASemantics nil)
    (s!1 skolem-const-decl "(wf_AState(a!1))" MVASemantics nil)
    (pe!1 skolem-const-decl "(wf_PEvent(a!1))" MVASemantics nil)
    (wf_PEvent const-decl "boolean" MVASemantics nil)
    (PEvent type-eq-decl nil MVASemantics nil)
    (PSt type-eq-decl nil State nil))
   485 230 t nil))
 (wf_initial_MVA_state 0
  (wf_initial_MVA_state-1 nil 3387787557 3390292709
   ("" (skosimp*)
    (("" (expand* "wf_AState" "initial_MVA_state" "wf_MVA")
      (("" (flatten)
        (("" (assert)
          (("" (expand "wf_Store")
            (("" (expand "wf_Store")
              (("" (skosimp*)
                (("" (lift-if)
                  (("" (assert)
                    (("" (expand "get_MVAVarDecl")
                      (("" (lift-if)
                        (("" (assert)
                          (("" (split 1)
                            (("1" (skosimp*) (("1" (grind) nil nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (split 2)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand "wf_vdsA")
                                    (("1"
                                      (expand "var_names" -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst
                                           -5
                                           "va!1"
                                           "choose({vd : MVAVarDecl | vdsA(a!1)(vd) AND name(vd) = n!1})")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -5 :dir rl)
                                              (("1"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (expand "var_names")
                                    (("2"
                                      (inst
                                       2
                                       "choose({vd : MVAVarDecl | vdsA(a!1)(vd) AND name(vd) = n!1})")
                                      (("1" (assert) nil nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 3075 2860 t shostak))
 (eval_yields_not_bottom 0
  (eval_yields_not_bottom-1 nil 3389011192 3389011218
   ("" (postpone) nil nil) unchecked nil 26400 10 t shostak))
 (execute_action_yields_wf_state 0
  (execute_action_yields_wf_state-2 nil 3389011040 3390292710
   ("" (induct "l")
    (("1" (skosimp)
      (("1" (expand "execute_action") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" 1)
        (("2" (inst?)
          (("2" (assert)
            (("2" (split)
              (("1" (hide -1 -2 2)
                (("1" (expand "wf_Action")
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (expand "member" -2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand* "wf_Store" "wf_Action")
                  (("2" (expand "wf_Store")
                    (("2" (skosimp)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (expand* "member" "update")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (use "eval_yields_not_bottom")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((eval const-decl "Val" MVASemantics nil)
    (update const-decl "Store" MVASemantics nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (member def-decl "bool" list_props nil)
    (eval_yields_not_bottom formula-decl nil MVASemantics nil)
    (wf_Store const-decl "boolean" WellFormedMVA nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (OneAction type-eq-decl nil MVA nil)
    (execute_action def-decl "Store" MVASemantics nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_PSt const-decl "boolean" WellFormedMVA nil)
    (wf_Store const-decl "boolean" WellFormedMVA nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Action type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   735 550 t nil)
  (execute_action_yields_wf_state-1 nil 3388233631 3388236856
   ("" (induct "l")
    (("1" (skosimp)
      (("1" (expand "execute_actions") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_actions" 1)
        (("2" (inst?)
          (("2" (assert)
            (("2" (split)
              (("1" (hide -1 -2 2)
                (("1" (expand "wf_Action")
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (expand "member" -2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand* "wf_Store" "wf_Action")
                  (("2" (expand "wf_Store")
                    (("2" (skosimp)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (expand "member")
                            (("2" (expand "update")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (use "eval_yields_not_bottom")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((eval const-decl "Val" MVASemantics nil)
    (update const-decl "Store" MVASemantics nil)
    (member def-decl "bool" list_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (eval_yields_not_bottom formula-decl nil MVASemantics nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (OneAction type-eq-decl nil MVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Action type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   903854 830 t shostak))
 (step_yields_wf_state 0
  (step_yields_wf_state-1 nil 3383053751 3390292710
   ("" (skolem-typepred)
    (("" (expand* "wf_AState" "wf_PEvent" "step")
      ((""
        (name "t1" "choose(LAMBDA (t: Transition):
                                      ts(a!1)(t) AND
                                      scp(t) = cp(s!1) AND
                                      event(t) = event(pe!1) AND
                                      guard(t)(stA(s!1), stP(pe!1)))")
        (("1" (replace -1)
          (("1" (assert)
            (("1" (expand "wf_MVA")
              (("1" (flatten -2)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (use "execute_action_yields_wf_state")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "step_TCC1") nil nil))
        nil))
      nil))
    nil)
   proved
   ((step const-decl "AState" MVASemantics nil)
    (step_TCC1 subtype-tcc nil MVASemantics nil)
    (execute_action_yields_wf_state formula-decl nil MVASemantics nil)
    (Expr type-decl nil Expr_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_PEvent const-decl "boolean" MVASemantics nil)
    (PEvent type-eq-decl nil MVASemantics nil)
    (PSt type-eq-decl nil State nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (total const-decl "boolean" MVASemantics nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   437 270 t nil)))
(MVACompletion
 (all_guards_TCC1 0
  (all_guards_TCC1-1 nil 3382264515 3390292710
   ("" (skolem-typepred)
    (("" (use "all_guards_finite[CP, Name]")
      (("" (lemma "all_guards_subset[CP, Name]")
        (("" (inst? -1)
          (("" (beta -1)
            (("" (use "finite_subset[Guard[CP, Name]]")
              (("" (prop) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((all_guards_finite formula-decl nil MVAFiniteProps nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil) (PSt type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (finite_subset formula-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (a!1 skolem-const-decl "MVA[CP, Name]" MVACompletion nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (all_guards_subset formula-decl nil MVAFiniteProps nil))
   330 250 t nil))
 (complete_trans_TCC1 0
  (complete_trans_TCC1-3 nil 3382265153 3390292712
   ("" (skosimp*)
    (("" (use "finite_union[Transition[CP, Name]]")
      (("1" (hide 2)
        (("1" (typepred "evs(a!1)")
          (("1" (expand "is_finite")
            (("1" (skosimp*)
              (("1"
                (inst 1 "N!1" "LAMBDA(t1 : ({t: Transition[CP, Name] |
                       scp(t) = halted[CP, Name] AND evs(a!1)(event(t))
                   AND guard(t) =
                        (LAMBDA (stA: Store[Name], stP: PSt[Name]): TRUE)
                   AND action(t) = skip[CP, Name]
                   AND tcp(t) = halted[CP, Name]})) : f!1(event(t1))")
                (("1" (expand "injective?")
                  (("1" (skosimp*)
                    (("1" (apply-extensionality :hide? t)
                      (("1" (inst -1 "event(x1!1)" "event(x2!1)")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "cps(a!1)")
          (("2" (typepred "evs(a!1)")
            (("2" (expand "is_finite")
              (("2" (skosimp*)
                (("2" (case "N!1 = 0")
                  (("1"
                    (inst 1 "N!2"
                     "LAMBDA(t : ({t: Transition[CP, Name] |
                          cps(a!1)(scp(t)) AND evs(a!1)(event(t))
                      AND guard(t) = build_guard(a!1)(scp(t), event(t))
                      AND action(t) = skip[CP, Name]
                      AND tcp(t) = halted[CP, Name]})) : f!2(scp(t))")
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (typepred "f!1(x2!1`event)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst 2 "N!1 + N!1 * N!2"
                     "LAMBDA(t : ({t: Transition[CP, Name] |
                              cps(a!1)(scp(t)) AND evs(a!1)(event(t))
                          AND guard(t) = build_guard(a!1)(scp(t), event(t))
                          AND action(t) = skip[CP, Name]
                          AND tcp(t) = halted[CP, Name]})) : f!1(event(t)) + N!1 * f!2(scp(t))")
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1"
                          (use "unique_quotient"
                               ("b"
                                "N!1"
                                "q1"
                                "f!2(scp(x1!1))"
                                "q2"
                                "f!2(scp(x2!1))"
                                "r1"
                                "f!1(event(x1!1))"
                                "r2"
                                "f!1(event(x2!1))"))
                          (("1" (assert)
                            (("1" (inst -2 "event(x1!1)" "event(x2!1)")
                              (("1"
                                (inst -3 "scp(x1!1)" "scp(x2!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (apply-extensionality 2 :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (typepred "f!1(event(t!1))")
                        (("2" (typepred "f!2(scp(t!1))")
                          (("2" (use "lt_plus_lt1")
                            (("2" (split -1)
                              (("1" (propax) nil nil)
                               ("2" (assert) nil nil)
                               ("3"
                                (use "both_sides_times_pos_lt2")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_union judgement-tcc nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (a!1 skolem-const-decl "MVA[CP, Name]" MVACompletion nil)
    (TRUE const-decl "bool" booleans nil)
    (halted const-decl "CP" MVA nil) (skip const-decl "Action" MVA nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (Expr type-decl nil Expr_adt nil)
    (build_guard const-decl "Guard" MVACompletion nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (lt_plus_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (unique_quotient formula-decl nil euclidean_division nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (N!1 skolem-const-decl "nat" MVACompletion nil)
    (f!1 skolem-const-decl "[(evs(a!1)) -> below[N!1]]" MVACompletion
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (N!2 skolem-const-decl "nat" MVACompletion nil)
    (f!2 skolem-const-decl "[(cps(a!1)) -> below[N!2]]" MVACompletion
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   1833 1380 t nil)
  (complete_trans_TCC1-2 nil 3382265133 nil ("" (skip) nil nil)
   unchecked nil nil nil nil nil)
  (complete_trans_TCC1-1 nil 3382264515 3382264991
   ("" (subtype-tcc) nil nil) unfinished nil 32426 31994 nil nil))
 (build_guard_yields_wf_guard 0
  (build_guard_yields_wf_guard-1 nil 3387785549 3390292723
   ("" (skosimp)
    (("" (expand* "wf_Guard" "wf_MVA" "build_guard" "all_guards")
      (("" (flatten)
        (("" (skosimp)
          (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_MVA const-decl "boolean" WellFormedMVA nil)
    (all_guards const-decl "finite_set[Guard]" MVACompletion nil)
    (build_guard const-decl "Guard" MVACompletion nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (Val type-decl nil Val_adt nil) (Store type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   10628 10040 t shostak))
 (complete_MVA_yields_wf_MVA 0
  (complete_MVA_yields_wf_MVA-1 nil 3387108138 3390292725
   ("" (skolem-typepred)
    (("" (expand "wf_MVA")
      (("" (prop)
        (("1"
          (expand* "complete_MVA" "init_cp" "add" "member"
           "complete_MVA_pre")
          (("1" (prop) nil nil)) nil)
         ("2" (expand* "wf_vdsA" "complete_MVA") nil nil)
         ("3" (expand* "wf_vdsP" "complete_MVA") nil nil)
         ("4" (expand "complete_MVA") (("4" (propax) nil nil)) nil)
         ("5" (skosimp)
          (("5" (inst? -6)
            (("5" (expand "complete_MVA" -1)
              (("5" (expand* "union" "member")
                (("5" (split -1)
                  (("1" (assert)
                    (("1" (flatten) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (expand* "complete_trans" "union" "member")
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (hide -7 -8 -9 -10)
                          (("1" (use "build_guard_yields_wf_guard")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -3 -4 -5 -6) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((skip const-decl "Action" MVA nil)
    (complete_trans const-decl "finite_set[Transition]" MVACompletion
     nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (member def-decl "bool" list_props nil)
    (build_guard const-decl "Guard" MVACompletion nil)
    (all_guards const-decl "finite_set[Guard]" MVACompletion nil)
    (build_guard_yields_wf_guard formula-decl nil MVACompletion nil)
    (union const-decl "set" sets nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (complete_MVA const-decl "MVA" MVACompletion nil)
    (complete_MVA_pre const-decl "boolean" MVACompletion nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1692 1450 t shostak))
 (complete_MVA_has_trap_state_TCC1 0
  (complete_MVA_has_trap_state_TCC1-1 nil 3382264515 3390292725
   ("" (use "complete_MVA_yields_wf_MVA") nil nil) proved
   ((complete_MVA_yields_wf_MVA formula-decl nil MVACompletion nil)) 11
   20 t nil))
 (complete_MVA_has_trap_state 0
  (complete_MVA_has_trap_state-2 nil 3383048645 3390292725
   ("" (skolem-typepred)
    (("" (expand* "trap_state" "complete_MVA")
      (("" (skosimp)
        ((""
          (expand* "complete_trans" "union" "member" "complete_MVA_pre"
           "wf_MVA")
          (("" (prop)
            (("" (inst?) (("" (prop) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((complete_MVA const-decl "MVA" MVACompletion nil)
    (trap_state const-decl "boolean" MVASemantics nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (complete_trans const-decl "finite_set[Transition]" MVACompletion
     nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (complete_MVA_pre const-decl "boolean" MVACompletion nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   252 170 t nil)
  (complete_MVA_has_trap_state-1 nil 3382270875 3382270880
   ("" (skolem-typepred)
    (("" (expand* "trap_state" "complete_MVA")
      (("" (skosimp)
        ((""
          (expand* "complete_trans" "union" "member" "complete_MVA_pre"
           "valid_MVA")
          (("" (prop)
            (("" (inst?) (("" (prop) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   295 42 t nil))
 (complete_MVA_is_deterministic 0
  (complete_MVA_is_deterministic-2 nil 3383048795 3390292749
   ("" (expand "deterministic")
    (("" (skolem-typepred)
      (("" (skosimp)
        (("" (expand "complete_MVA_pre")
          (("" (flatten)
            (("" (case* "ts(a!1)(t1!1)" "ts(a!1)(t2!1)")
              (("1" (expand "deterministic")
                (("1" (inst -4 "t1!1" "t2!1" "stA!1" "stP!1")
                  (("1"
                    (expand* "wf_Store" "wf_PSt" "complete_MVA"
                     "complete_trans" "union" "member")
                    (("1" (prop) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide -3 -6 -7)
                (("2" (expand "complete_MVA" -4)
                  (("2" (expand "complete_trans" -4)
                    (("2" (expand "union" -4)
                      (("2" (expand "member" -4)
                        (("2" (prop)
                          (("1" (hide -8 1) (("1" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide -3 -5)
                (("3" (expand "complete_MVA" -3)
                  (("3" (expand "complete_trans" -3)
                    (("3" (expand "union" -3)
                      (("3" (expand "member" -3)
                        (("3" (expand "wf_MVA")
                          (("3" (flatten)
                            (("3" (inst -6 "t2!1")
                              (("3"
                                (prop)
                                (("1"
                                  (expand*
                                   "complete_MVA"
                                   "complete_trans"
                                   "union"
                                   "member"
                                   "build_guard"
                                   "all_guards"
                                   "wf_Store"
                                   "wf_PSt"
                                   "extend")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (decompose-equality 4)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (complete_MVA_pre const-decl "boolean" MVACompletion nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (wf_Store const-decl "boolean" WellFormedMVA nil)
    (complete_MVA const-decl "MVA" MVACompletion nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (complete_trans const-decl "finite_set[Transition]" MVACompletion
     nil)
    (wf_PSt const-decl "boolean" WellFormedMVA nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (skip const-decl "Action" MVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (all_guards const-decl "finite_set[Guard]" MVACompletion nil)
    (build_guard const-decl "Guard" MVACompletion nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (wf_PSt const-decl "boolean" WellFormedMVA nil)
    (wf_Store const-decl "boolean" WellFormedMVA nil)
    (deterministic const-decl "boolean" MVASemantics nil))
   23957 22560 t nil)
  (complete_MVA_is_deterministic-1 nil 3382270657 3382270846
   ("" (skolem-typepred)
    (("" (expand* "deterministic" "complete_MVA")
      (("" (skosimp)
        (("" (expand "complete_MVA_pre")
          (("" (flatten -2)
            (("" (case* "ts(a!1)(t1!1)" "ts(a!1)(t2!1)")
              (("1" (expand "deterministic")
                (("1" (inst -4 "t1!1" "t2!1" "stA!1" "stP!1")
                  (("1" (prop)
                    (("1" (expand "valid_PSt") (("1" (propax) nil nil))
                      nil)
                     ("2" (expand "valid_Store")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (delete -3 -6 -7)
                (("2" (expand "complete_trans" -4)
                  (("2" (expand "union" -4)
                    (("2" (expand "member" -4)
                      (("2" (prop)
                        (("1" (delete -8 1)
                          (("1" (expand "valid_MVA")
                            (("1" (prop)
                              (("1"
                                (inst -9 "t1!1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (delete -4 -5)
                                    (("1"
                                      (grind)
                                      (("1" (postpone) nil nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (delete -3 -5 -6 -7)
                (("3" (expand* "complete_trans" "union" "member")
                  (("3" (prop)
                    (("1" (grind)
                      (("1" (postpone) nil nil)
                       ("2" (postpone) nil nil))
                      nil)
                     ("2" (expand "valid_MVA")
                      (("2" (prop)
                        (("2" (inst -9 "t2!1")
                          (("2" (prop)
                            (("2" (delete -4 -5)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (delete -1 -2 -5 -6)
                (("4" (grind)
                  (("1" (decompose-equality 4) nil nil)
                   ("2" (decompose-equality 4) nil nil)
                   ("3" (postpone) nil nil) ("4" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried nil 18669 3635 t nil))
 (complete_MVA_is_total 0
  (complete_MVA_is_total-2 nil 3383048587 3390293757
   ("" (skolem-typepred)
    (("" (expand* "total" "complete_MVA")
      (("" (skosimp)
        ((""
          (case "EXISTS (t: Transition[CP, Name]): ts(a!1)(t) AND scp(t) = q!1 AND event(t) = e!1 AND guard(t)(stA!1, stP!1)")
          (("1" (skolem!)
            (("1" (inst 1 "t!1")
              (("1" (expand* "union" "member") (("1" (prop) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "q!1 = halted")
            (("1" (hide 1)
              (("1"
                (inst +
                 "(# scp := halted, event := e!1, guard := (LAMBDA (stA: Store , stP: PSt): TRUE), action := skip, tcp := halted #)")
                (("1" (expand* "wf_MVA" "complete_MVA_pre")
                  (("1" (flatten)
                    (("1" (replace -1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete 2)
              (("2"
                (case "EXISTS (t: Transition): ts(a!1)(t) AND scp(t) = q!1 AND event(t) = e!1 AND guard(t)(stA!1, stP!1)")
                (("1" (skolem!)
                  (("1" (inst + "t!1") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2"
                  (inst 3
                   "(# scp := q!1, event := e!1, guard := build_guard(a!1)(q!1, e!1), action := skip, tcp := halted #)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((complete_MVA const-decl "MVA" MVACompletion nil)
    (total const-decl "boolean" MVASemantics nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (build_guard const-decl "Guard" MVACompletion nil)
    (all_guards const-decl "finite_set[Guard]" MVACompletion nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (complete_trans const-decl "finite_set[Transition]" MVACompletion
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_restrict application-judgement "finite_set[S]"
     restrict_set_props nil)
    (skip const-decl "Action" MVA nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (Expr type-decl nil Expr_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (halted const-decl "CP" MVA nil)
    (complete_MVA_pre const-decl "boolean" MVACompletion nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   902250 3590 t nil)
  (complete_MVA_is_total-1 nil 3382265612 3382270601
   ("" (skolem-typepred)
    (("" (expand "total")
      (("" (skosimp)
        (("" (expand "complete_MVA" 1)
          ((""
            (case "EXISTS (t: Transition[CP, Name]): ts(a!1)(t) AND scp(t) = q!1 AND event(t) = e!1 AND guard(t)(stA!1, stP!1)")
            (("1" (skolem!)
              (("1" (inst 1 "t!1")
                (("1" (expand "union" 1)
                  (("1" (expand "member" 1) (("1" (prop) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "q!1 = halted")
              (("1"
                (inst 2
                 "(# scp := halted, event := e!1, guard := (LAMBDA (stA: (valid_Store(vdsA(a!1))) , stP: (valid_PSt(vdsP(a!1)))): TRUE), action := skip, tcp := halted #)")
                (("1" (hide -6 -7 1) (("1" (postpone) nil nil)) nil))
                nil)
               ("2"
                (inst 3
                 "(# scp := q!1, event := e!1, guard := build_guard(q!1, e!1, ts(a!1), vdsA(a!1), vdsP(a!1)), action := skip, tcp := halted #)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried nil 46487 3476 t nil))
 (complete_MVA_is_complete 0
  (complete_MVA_is_complete-1 nil 3382265489 3390292753
   ("" (skolem-typepred)
    (("" (expand "complete")
      (("" (split)
        (("1" (use "complete_MVA_yields_wf_MVA") nil nil)
         ("2" (expand "complete_MVA")
          (("2" (expand "add") (("2" (propax) nil nil)) nil)) nil)
         ("3" (use "complete_MVA_has_trap_state") nil nil)
         ("4" (expand* "complete_MVA_pre" "complete_MVA" "wf_MVA")
          (("4" (prop)
            (("4" (delete -3 -4 -5 -6) (("4" (assert) nil nil)) nil))
            nil))
          nil)
         ("5" (use "complete_MVA_is_deterministic") nil nil)
         ("6" (use "complete_MVA_is_total") nil nil))
        nil))
      nil))
    nil)
   proved
   ((complete const-decl "boolean" MVASemantics nil)
    (complete_MVA_is_total formula-decl nil MVACompletion nil)
    (complete_MVA_is_deterministic formula-decl nil MVACompletion nil)
    (complete_MVA_has_trap_state formula-decl nil MVACompletion nil)
    (complete_MVA const-decl "MVA" MVACompletion nil)
    (add const-decl "(nonempty?)" sets nil)
    (complete_MVA_yields_wf_MVA formula-decl nil MVACompletion nil)
    (complete_MVA_pre const-decl "boolean" MVACompletion nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil MVACompletion nil)
    (Name formal-nonempty-type-decl nil MVACompletion nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   707 620 t nil)))

