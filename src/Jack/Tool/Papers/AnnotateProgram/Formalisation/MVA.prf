(EventType)
(MVA)
(WellFormedMVA)
(MVASemantics
 (get_MVAVarDecl_TCC1 0
  (get_MVAVarDecl_TCC1-1 nil 3383053727 3398145953
   ("" (subtype-tcc) nil nil) unchecked
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   4 4 nil nil))
 (initial_MVA_state_TCC1 0
  (initial_MVA_state_TCC1-1 nil 3383053727 3398145953
   ("" (subtype-tcc) nil nil) unchecked
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   24 25 nil nil))
 (guard_to_expression_TCC1 0
  (guard_to_expression_TCC1-1 nil 3396585244 3402740374
   ("" (inst 1 "LAMBDA(m : MVA)(g : Guard) : TT") nil nil) proved
   ((Name formal-nonempty-type-decl nil MVASemantics nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil) (Store type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (restrict const-decl "R" restrict nil)
    (TT adt-constructor-decl "(TT?)" Body_adt nil))
   90 30 t nil))
 (guard_to_expression_yields_wf_Expr_TCC1 0
  (guard_to_expression_yields_wf_Expr_TCC1-1 nil 3402740319 3402740456
   ("" (skosimp)
    (("" (expand* "wf_MVA" "wf_Trans")
      (("" (flatten) (("" (inst?) (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   proved
   ((wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (CP formal-nonempty-type-decl nil MVASemantics nil)
    (Name formal-nonempty-type-decl nil MVASemantics nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil))
   70669 90 t nil))
 (execute_action_TCC1 0
  (execute_action_TCC1-1 nil 3389011015 3398145953
   ("" (subtype-tcc) nil nil) unchecked nil 4 4 nil nil))
 (execute_action_TCC2 0
  (execute_action_TCC2-1 nil 3389011015 3398145953
   ("" (termination-tcc) nil nil) unchecked
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   24 23 nil nil))
 (update_yields_wf_Store 0
  (update_yields_wf_Store-1 nil 3390898573 3398145955
   ("" (skosimp*)
    (("" (expand* "wf_Store" "update")
      (("" (skolem!)
        (("" (lift-if)
          (("" (assert)
            (("" (expand "defined?")
              (("" (assert)
                (("" (split 1)
                  (("1" (skosimp*)
                    (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (skosimp*) (("2" (inst -1 "n!2") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked (nil nil nil nil nil) 171 171 t shostak))
 (step_TCC1 0
  (step_TCC1-2 nil 3383053820 3398145955
   ("" (skosimp*)
    (("" (typepred "a!1")
      (("" (expand "total")
        (("" (typepred "s!1")
          (("" (expand "wf_AState")
            (("" (flatten)
              ((""
                (inst -3 "cp(s!1)" "event(pe!1)" "stA(s!1)"
                 "stP(pe!1)")
                (("" (assert)
                  (("" (typepred "pe!1")
                    (("" (expand "wf_PEvent")
                      (("" (flatten)
                        (("" (assert)
                          (("" (skosimp*)
                            (("" (rewrite "nonempty_exists")
                              ((""
                                (inst 1 "t!1")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (set type-eq-decl nil sets nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil)
   8 8 t nil))
 (wf_initial_MVA_state 0
  (wf_initial_MVA_state-1 nil 3387787557 3398145958
   ("" (skosimp*)
    (("" (expand* "wf_AState" "initial_MVA_state" "wf_MVA")
      (("" (flatten)
        (("" (assert)
          (("" (expand "wf_Store")
            (("" (skosimp*)
              (("" (expand "defined?")
                (("" (lift-if)
                  (("" (assert)
                    (("" (split 2)
                      (("1" (skosimp*) (("1" (grind) nil nil)) nil)
                       ("2" (skosimp*)
                        (("2"
                          (typepred
                           "init_val(down(get_MVAVarDecl(n!1, a!1)))")
                          (("2" (expand "defined?")
                            (("2" (assert)
                              (("2"
                                (expand "get_MVAVarDecl" 2)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 2)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (expand "empty?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (expand "var_names")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil (boolean nonempty-type-decl nil booleans nil)
    nil nil (bool nonempty-type-eq-decl nil booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil
    (epsilon const-decl "T" epsilons nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil) nil nil nil nil
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil) nil nil nil nil nil
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil) nil nil nil
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil) nil nil)
   313 312 t shostak))
 (eval_yields_not_bottom 0
  (eval_yields_not_bottom-1 nil 3389011192 3389011218
   ("" (postpone) nil nil) unchecked nil 26400 10 t shostak))
 (execute_action_yields_wf_state 0
  (execute_action_yields_wf_state-2 nil 3389011040 3398145960
   ("" (induct "l")
    (("1" (skosimp)
      (("1" (expand "execute_action") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" 1)
        (("2" (inst?)
          (("2" (assert)
            (("2" (split)
              (("1" (hide -1 -2 2)
                (("1" (expand "wf_Action")
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (expand "member" -2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand* "wf_Store" "wf_Action")
                  (("2" (expand "wf_Store")
                    (("2" (skosimp)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (expand* "member" "update")
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1"
                                  (use "eval_yields_not_bottom")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil nil nil nil nil nil
    (member def-decl "bool" list_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil nil nil nil nil (list_induction formula-decl nil list_adt nil)
    nil nil nil nil (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) nil
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   181 181 t nil)
  (execute_action_yields_wf_state-1 nil 3388233631 3388236856
   ("" (induct "l")
    (("1" (skosimp)
      (("1" (expand "execute_actions") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_actions" 1)
        (("2" (inst?)
          (("2" (assert)
            (("2" (split)
              (("1" (hide -1 -2 2)
                (("1" (expand "wf_Action")
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (expand "member" -2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand* "wf_Store" "wf_Action")
                  (("2" (expand "wf_Store")
                    (("2" (skosimp)
                      (("2" (inst?)
                        (("2" (inst?)
                          (("2" (expand "member")
                            (("2" (expand "update")
                              (("2"
                                (lift-if)
                                (("2"
                                  (prop)
                                  (("1"
                                    (use "eval_yields_not_bottom")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (member def-decl "bool" list_props nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    nil (list_induction formula-decl nil list_adt nil) nil nil nil nil
    nil (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil
    nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   903854 830 t shostak))
 (step_yields_wf_state 0
  (step_yields_wf_state-1 nil 3383053751 3398145960
   ("" (skolem-typepred)
    (("" (expand* "wf_AState" "wf_PEvent" "step")
      ((""
        (name "t1" "choose(LAMBDA (t: Transition):
                                             ts(a!1)(t) AND
                                             scp(t) = cp(s!1) AND
                                             event(t) = event(pe!1) AND
                                             guard(t)(stA(s!1), stP(pe!1)))")
        (("1" (replace -1)
          (("1" (skosimp*)
            (("1" (assert)
              (("1" (expand "wf_MVA")
                (("1" (flatten)
                  (("1" (inst -11 "t1")
                    (("1" (assert)
                      (("1" (expand "wf_Trans")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (use "execute_action_yields_wf_state")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "step_TCC1") nil nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil (list type-decl nil list_adt nil) nil nil nil nil
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   60 60 t nil)))
(MVACompletion
 (all_guards_TCC1 0
  (all_guards_TCC1-1 nil 3382264515 3398145963
   ("" (skosimp*)
    (("" (typepred "ts(a!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(p : ({p: Guard[CP, Name] |
                     EXISTS (t: Transition[CP, Name]):
                       ts(a!1)(t) AND
                        scp(t) = cp!1 AND
                         event(t) = e!1 AND guard(t) = p})) : f!1(choose({t : Transition[CP, Name] | ts(a!1)(t) AND
                        scp(t) = cp!1 AND
                         event(t) = e!1 AND guard(t) = p}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (typepred "x2!1")
                    (("2" (rewrite "nonempty_exists")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (rewrite "nonempty_exists")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "p!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil (injective? const-decl "bool" functions nil) nil
    nil (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    nil nil nil (= const-decl "[T, T -> boolean]" equalities nil) nil
    nil (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   261 261 t nil))
 (complete_trans_TCC1 0
  (complete_trans_TCC1-3 nil 3382265153 3398145965
   ("" (skosimp*)
    (("" (use "finite_union[Transition[CP, Name]]")
      (("1" (hide 2)
        (("1" (typepred "evs(a!1)")
          (("1" (expand "is_finite")
            (("1" (skosimp*)
              (("1"
                (inst 1 "N!1" "LAMBDA(t1 : ({t: Transition[CP, Name] |
                       scp(t) = halted[CP, Name] AND evs(a!1)(event(t))
                   AND guard(t) =
                        (LAMBDA (stA: Store[Name], stP: PSt[Name]): TRUE)
                   AND action(t) = skip[CP, Name]
                   AND tcp(t) = halted[CP, Name]})) : f!1(event(t1))")
                (("1" (expand "injective?")
                  (("1" (skosimp*)
                    (("1" (apply-extensionality :hide? t)
                      (("1" (inst -1 "event(x1!1)" "event(x2!1)")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "cps(a!1)")
          (("2" (typepred "evs(a!1)")
            (("2" (expand "is_finite")
              (("2" (skosimp*)
                (("2" (case "N!1 = 0")
                  (("1"
                    (inst 1 "N!2"
                     "LAMBDA(t : ({t: Transition[CP, Name] |
                          cps(a!1)(scp(t)) AND evs(a!1)(event(t))
                      AND guard(t) = build_guard(a!1)(scp(t), event(t))
                      AND action(t) = skip[CP, Name]
                      AND tcp(t) = halted[CP, Name]})) : f!2(scp(t))")
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1" (typepred "f!1(x2!1`event)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst 2 "N!1 + N!1 * N!2"
                     "LAMBDA(t : ({t: Transition[CP, Name] |
                              cps(a!1)(scp(t)) AND evs(a!1)(event(t))
                          AND guard(t) = build_guard(a!1)(scp(t), event(t))
                          AND action(t) = skip[CP, Name]
                          AND tcp(t) = halted[CP, Name]})) : f!1(event(t)) + N!1 * f!2(scp(t))")
                    (("1" (expand "injective?")
                      (("1" (skosimp*)
                        (("1"
                          (use "unique_quotient"
                               ("b"
                                "N!1"
                                "q1"
                                "f!2(scp(x1!1))"
                                "q2"
                                "f!2(scp(x2!1))"
                                "r1"
                                "f!1(event(x1!1))"
                                "r2"
                                "f!1(event(x2!1))"))
                          (("1" (assert)
                            (("1" (inst -2 "event(x1!1)" "event(x2!1)")
                              (("1"
                                (inst -3 "scp(x1!1)" "scp(x2!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (apply-extensionality 2 :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (typepred "f!1(event(t!1))")
                        (("2" (typepred "f!2(scp(t!1))")
                          (("2" (use "lt_plus_lt1")
                            (("2" (split -1)
                              (("1" (propax) nil nil)
                               ("2" (assert) nil nil)
                               ("3"
                                (use "both_sides_times_pos_lt2")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil
    (list type-decl nil list_adt nil) nil nil nil
    (finite_union judgement-tcc nil finite_sets nil) nil nil nil nil
    nil nil nil (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (lt_plus_lt1 formula-decl nil real_props nil)
    (unique_quotient formula-decl nil euclidean_division nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil)
   179 179 t nil)
  (complete_trans_TCC1-2 nil 3382265133 nil ("" (skip) nil nil)
   unchecked nil nil nil nil nil)
  (complete_trans_TCC1-1 nil 3382264515 3382264991
   ("" (subtype-tcc) nil nil) unfinished nil 32426 31994 nil nil))
 (build_guard_yields_wf_guard 0
  (build_guard_yields_wf_guard-1 nil 3387785549 3398146008
   ("" (skosimp)
    (("" (expand* "wf_Guard" "wf_MVA" "build_guard" "all_guards")
      (("" (flatten)
        (("" (skosimp)
          (("" (split) (("1" (grind) nil nil) ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil nil (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil nil nil
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil) nil
    (member const-decl "bool" sets nil) nil nil
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    nil nil nil nil (boolean nonempty-type-decl nil booleans nil) nil
    nil nil)
   4279 4271 t shostak))
 (complete_MVA_yields_wf_MVA 0
  (complete_MVA_yields_wf_MVA-1 nil 3387108138 3398146253
   ("" (skolem-typepred)
    (("" (expand "wf_MVA")
      (("" (prop)
        (("1"
          (expand* "complete_MVA" "init_cp" "add" "member"
           "complete_MVA_pre")
          (("1" (prop) nil nil)) nil)
         ("2" (expand* "wf_vdsA" "complete_MVA") nil nil)
         ("3" (expand* "wf_vdsP" "complete_MVA") nil nil)
         ("4" (expand "complete_MVA") (("4" (propax) nil nil)) nil)
         ("5" (expand "complete_MVA") (("5" (propax) nil nil)) nil)
         ("6" (expand "wf_Trans")
          (("6" (skosimp)
            (("6" (inst? -6)
              (("6" (expand "complete_MVA" -1)
                (("6" (expand* "union" "member")
                  (("6" (split -1)
                    (("1" (assert)
                      (("1" (flatten) (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (expand* "complete_trans" "union" "member")
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (hide -7 -8 -9 -10)
                            (("1" (use "build_guard_yields_wf_guard")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide -3 -4 -5 -6)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil (union const-decl "set" sets nil) nil nil nil
    (member def-decl "bool" list_props nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    nil (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil) nil nil
    (subset? const-decl "bool" sets nil) nil nil nil nil nil nil
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   17238 396 t shostak))
 (complete_MVA_has_trap_state_TCC1 0
  (complete_MVA_has_trap_state_TCC1-1 nil 3382264515 3398146009
   ("" (use "complete_MVA_yields_wf_MVA") nil nil) unchecked (nil) 1 1
   t nil))
 (complete_MVA_has_trap_state 0
  (complete_MVA_has_trap_state-2 nil 3383048645 3398146010
   ("" (skolem-typepred)
    (("" (expand* "trap_state" "complete_MVA")
      (("" (skosimp)
        ((""
          (expand* "complete_trans" "union" "member" "complete_MVA_pre"
           "wf_MVA")
          (("" (prop)
            (("" (inst?)
              (("" (expand "wf_Trans")
                (("" (prop) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   93 93 t nil)
  (complete_MVA_has_trap_state-1 nil 3382270875 3382270880
   ("" (skolem-typepred)
    (("" (expand* "trap_state" "complete_MVA")
      (("" (skosimp)
        ((""
          (expand* "complete_trans" "union" "member" "complete_MVA_pre"
           "valid_MVA")
          (("" (prop)
            (("" (inst?) (("" (prop) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   295 42 t nil))
 (complete_MVA_is_deterministic 0
  (complete_MVA_is_deterministic-2 nil 3383048795 3398146045
   ("" (expand "deterministic")
    (("" (skolem-typepred)
      (("" (skosimp)
        (("" (expand "complete_MVA_pre")
          (("" (flatten)
            (("" (case* "ts(a!1)(t1!1)" "ts(a!1)(t2!1)")
              (("1" (expand "deterministic")
                (("1" (inst -4 "t1!1" "t2!1" "stA!1" "stP!1")
                  (("1"
                    (expand* "wf_Store" "wf_PSt" "complete_MVA"
                     "complete_trans" "union" "member")
                    (("1" (prop) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "complete_MVA" -5)
                (("2" (expand "complete_trans")
                  (("2" (expand "union")
                    (("2" (expand "member")
                      (("2" (assert)
                        (("2" (prop)
                          (("1" (assert)
                            (("1" (replace -3)
                              (("1"
                                (expand "build_guard")
                                (("1"
                                  (expand "all_guards")
                                  (("1"
                                    (inst? -13)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 3 "t1!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "complete_MVA" -4)
                (("3" (expand "complete_trans")
                  (("3" (expand "union")
                    (("3" (expand "member")
                      (("3" (assert)
                        (("3" (prop)
                          (("1" (replace -3)
                            (("1" (expand "build_guard")
                              (("1"
                                (inst? -12)
                                (("1"
                                  (expand "all_guards")
                                  (("1"
                                    (inst 3 "t2!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "wf_MVA")
                            (("2" (flatten)
                              (("2"
                                (inst -11 "t2!1")
                                (("2"
                                  (expand "wf_Trans")
                                  (("2"
                                    (flatten)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (apply-extensionality 4 :hide? t)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil) nil nil nil nil
    (subset? const-decl "bool" sets nil) nil nil nil nil
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil) nil nil nil
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil nil)
   3470 3467 t nil)
  (complete_MVA_is_deterministic-1 nil 3382270657 3382270846
   ("" (skolem-typepred)
    (("" (expand* "deterministic" "complete_MVA")
      (("" (skosimp)
        (("" (expand "complete_MVA_pre")
          (("" (flatten -2)
            (("" (case* "ts(a!1)(t1!1)" "ts(a!1)(t2!1)")
              (("1" (expand "deterministic")
                (("1" (inst -4 "t1!1" "t2!1" "stA!1" "stP!1")
                  (("1" (prop)
                    (("1" (expand "valid_PSt") (("1" (propax) nil nil))
                      nil)
                     ("2" (expand "valid_Store")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (delete -3 -6 -7)
                (("2" (expand "complete_trans" -4)
                  (("2" (expand "union" -4)
                    (("2" (expand "member" -4)
                      (("2" (prop)
                        (("1" (delete -8 1)
                          (("1" (expand "valid_MVA")
                            (("1" (prop)
                              (("1"
                                (inst -9 "t1!1")
                                (("1"
                                  (prop)
                                  (("1"
                                    (delete -4 -5)
                                    (("1"
                                      (grind)
                                      (("1" (postpone) nil nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (delete -3 -5 -6 -7)
                (("3" (expand* "complete_trans" "union" "member")
                  (("3" (prop)
                    (("1" (grind)
                      (("1" (postpone) nil nil)
                       ("2" (postpone) nil nil))
                      nil)
                     ("2" (expand "valid_MVA")
                      (("2" (prop)
                        (("2" (inst -9 "t2!1")
                          (("2" (prop)
                            (("2" (delete -4 -5)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (delete -1 -2 -5 -6)
                (("4" (grind)
                  (("1" (decompose-equality 4) nil nil)
                   ("2" (decompose-equality 4) nil nil)
                   ("3" (postpone) nil nil) ("4" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried nil 18669 3635 t nil))
 (complete_MVA_is_total 0
  (complete_MVA_is_total-2 nil 3383048587 3398146049
   ("" (skolem-typepred)
    (("" (expand* "total" "complete_MVA")
      (("" (skosimp)
        ((""
          (case "EXISTS (t: Transition[CP, Name]): ts(a!1)(t) AND scp(t) = q!1 AND event(t) = e!1 AND guard(t)(stA!1, stP!1)")
          (("1" (skolem!)
            (("1" (inst 1 "t!1")
              (("1" (expand* "union" "member") (("1" (prop) nil nil))
                nil))
              nil))
            nil)
           ("2" (case "q!1 = halted")
            (("1" (hide 1)
              (("1"
                (inst +
                 "(# scp := halted, event := e!1, guard := (LAMBDA (stA: Store , stP: PSt): TRUE), action := skip, tcp := halted #)")
                (("1" (expand* "wf_MVA" "complete_MVA_pre")
                  (("1" (flatten)
                    (("1" (replace -1) (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete 2)
              (("2"
                (case "EXISTS (t: Transition): ts(a!1)(t) AND scp(t) = q!1 AND event(t) = e!1 AND guard(t)(stA!1, stP!1)")
                (("1" (skolem!)
                  (("1" (inst + "t!1") (("1" (grind) nil nil)) nil))
                  nil)
                 ("2"
                  (inst 3
                   "(# scp := q!1, event := e!1, guard := build_guard(a!1)(q!1, e!1), action := skip, tcp := halted #)")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil (= const-decl "[T, T -> boolean]" equalities nil) nil
    nil (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil) nil nil nil nil nil
    (subset? const-decl "bool" sets nil) nil
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil (add const-decl "(nonempty?)" sets nil) nil nil nil
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil) nil nil nil
    (list type-decl nil list_adt nil) nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   469 469 t nil)
  (complete_MVA_is_total-1 nil 3382265612 3382270601
   ("" (skolem-typepred)
    (("" (expand "total")
      (("" (skosimp)
        (("" (expand "complete_MVA" 1)
          ((""
            (case "EXISTS (t: Transition[CP, Name]): ts(a!1)(t) AND scp(t) = q!1 AND event(t) = e!1 AND guard(t)(stA!1, stP!1)")
            (("1" (skolem!)
              (("1" (inst 1 "t!1")
                (("1" (expand "union" 1)
                  (("1" (expand "member" 1) (("1" (prop) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "q!1 = halted")
              (("1"
                (inst 2
                 "(# scp := halted, event := e!1, guard := (LAMBDA (stA: (valid_Store(vdsA(a!1))) , stP: (valid_PSt(vdsP(a!1)))): TRUE), action := skip, tcp := halted #)")
                (("1" (hide -6 -7 1) (("1" (postpone) nil nil)) nil))
                nil)
               ("2"
                (inst 3
                 "(# scp := q!1, event := e!1, guard := build_guard(q!1, e!1, ts(a!1), vdsA(a!1), vdsP(a!1)), action := skip, tcp := halted #)")
                (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried nil 46487 3476 t nil))
 (complete_MVA_is_complete 0
  (complete_MVA_is_complete-1 nil 3382265489 3398146291
   ("" (skolem-typepred)
    (("" (expand "complete")
      (("" (split)
        (("1" (use "complete_MVA_yields_wf_MVA") nil nil)
         ("2" (expand "complete_MVA")
          (("2" (expand "add") (("2" (propax) nil nil)) nil)) nil)
         ("3" (use "complete_MVA_has_trap_state") nil nil)
         ("4" (use "complete_MVA_is_deterministic") nil nil)
         ("5" (use "complete_MVA_is_total") nil nil))
        nil))
      nil))
    nil)
   unchecked
   (nil nil nil nil nil (add const-decl "(nonempty?)" sets nil) nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2492 284 t nil)))

