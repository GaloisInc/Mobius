(|EventType|)
(MVA)
(|MVA_Semantics|
 (|execute_actions_TCC1| 0
  (|execute_actions_TCC1-1| NIL 3379076141 3381833832
   ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED NIL 73 61 NIL NIL))
 (|execute_actions_TCC2| 0
  (|execute_actions_TCC2-1| NIL 3379076141 3381833832
   ("" (TERMINATION-TCC) NIL NIL) UNCHECKED
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   15 14 NIL NIL))
 (|step_TCC1| 0
  (|step_TCC1-1| NIL 3379076141 3381833843
   ("" (SKOSIMP*)
    (("" (TYPEPRED "a!1")
      (("" (EXPAND "nonempty?")
        (("" (EXPAND "empty?")
          (("" (EXPAND "member")
            (("" (EXPAND "total")
              (("" (FLATTEN)
                (("" (INST -2 "cp(x!1)" "event(p!1)" "stA(x!1)" "stP(p!1)")
                  (("" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Semantics| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Semantics| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVA_VarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Prog_VarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|valid_MVA| CONST-DECL "boolean" MVA NIL)
    (|total| CONST-DECL "boolean" MVA NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|the| CONST-DECL "(p)" |sets| NIL)
    (|singleton_elt| CONST-DECL "T" |sets| NIL)
    (|domain_set| CONST-DECL "X" |func_props| NIL)
    (|valid_Store| CONST-DECL "boolean" MVA NIL)
    (|lift_PSt| CONST-DECL "PState" |State| NIL)
    (|is_local| CONST-DECL "bool" |State| NIL)
    (|lookup_local| CONST-DECL "Val" |State| NIL)
    (|is_field| CONST-DECL "bool" |State| NIL)
    (|lookup_field| CONST-DECL "Val" |State| NIL)
    (|lookup_ghost| CONST-DECL "Val" |State| NIL)
    (|lookup| CONST-DECL "Val" |State| NIL)
    (|valid_PSt| CONST-DECL "boolean" MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|PEvent| TYPE-EQ-DECL NIL |MVA_Semantics| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVA_Semantics| NIL)
    (|Store| TYPE-EQ-DECL NIL MVA NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL))
   1067 1063 T NIL)))
(|MVA_Completion|
 (|all_guards_TCC1| 0
  (|all_guards_TCC1-1| NIL 3381054094 3381833844
   ("" (SKOLEM!)
    (("" (LEMMA "finite_subset[Guard[CP, Name]]")
      ((""
        (LEMMA "finite_subset[Guard[CP, Name]]"
         ("s"
          "{p: Guard[CP, Name] | EXISTS (t: Transition[CP, Name]): ts!1(t) AND t`scp = cp!1 AND t`event = e!1 AND t`guard = p}"
          "A"
          "{p: Guard[CP, Name] | EXISTS (t: Transition[CP, Name]): ts!1(t) AND t`guard = p}"))
        (("1" (SPLIT -1)
          (("1" (PROPAX) NIL NIL)
           ("2" (DELETE -1 2)
            (("2" (USE "all_guards_subset[CP, Name]") (("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL)
         ("2" (DELETE -1 2) (("2" (USE "all_guards_finite[CP, Name]") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|Store| TYPE-EQ-DECL NIL MVA NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|all_guards_finite| FORMULA-DECL NIL |MVA_Finite_Props| NIL)
    (|all_guards_subset| FORMULA-DECL NIL |MVA_Finite_Props| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   95 95 T NIL))
 (|MC_TCC2_subset1_is_finite| 0
  (|MC_TCC2_subset1_is_finite-4| NIL 3381830570 3381835757
   ("" (SKOLEM!)
    (("" (TYPEPRED "cps!1" "es!1")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          (("" (SKOLEM!)
            ((""
              (INST 1 "N!1 * N!2 + N!2 + 1"
               "LAMBDA (ts: {t: Transition[CP, Name] |
                                          cps!1(scp(t)) AND es!1(event(t)) AND action(t) = skip[CP, Name] AND tcp(t) = halted[CP, Name]
                                          AND guard(t) = build_guard(scp(t), event(t), ts!1)}):
                                            IF empty?(ts) THEN N!1*N!2+N!2
                                            ELSE f!1(scp(t)) * N!2 + f!2(event(t))
                                            ENDIF WHERE t=choose(ts)")
              (("1"
                (AUTO-REWRITE "injective?"
                              "nonempty?"
                              "empty?"
                              "member"
                              "singleton"
                              "choose"
                              "epsilon_singleton")
                (("1" (EXPAND "injective?")
                  (("1" (SKOSIMP)
                    (("1" (LIFT-IF -3)
                      (("1" (ASSERT)
                        (("1" (SPLIT -3)
                          (("1" (FLATTEN -1) (("1" (INST -1 "x1!1") NIL NIL))
                            NIL)
                           ("2" (FLATTEN -1)
                            (("2" (LIFT-IF -1)
                              (("2" (SPLIT -1)
                                (("1" (FLATTEN -1)
                                  (("1" (INST -1 "x2!1") NIL NIL)) NIL)
                                 ("2" (FLATTEN -1)
                                  (("2" (DELETE 1 2)
                                    (("2" (LEMMA "unique_division")
                                      (("2"
                                        (INST -1 "N!2" "f!1(scp(x1!1))"
                                         "f!1(scp(x2!1))" "f!2(event(x1!1))"
                                         "f!2(event(x2!1))")
                                        (("1" (PROP)
                                          (("1" (DELETE -3)
                                            (("1"
                                              (CASE "scp(x1!1)=scp(x2!1)"
                                                "event(x1!1)=event(x2!1)")
                                              (("1" (DECOMPOSE-EQUALITY 1) NIL
                                                NIL)
                                               ("2" (INST? -5)
                                                (("2" (SPLIT -5)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (INST? -3)
                                                (("3" (SPLIT -3)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (AUTO-REWRITE "epsilon_singleton")
                (("2" (SKOLEM!)
                  (("2" (LIFT-IF)
                    (("2" (SPLIT)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (DELETE -1 -2)
                        (("2" (GRIND)
                          (("2" (LEMMA "both_sides_times_pos_lt1")
                            (("2" (INST -1 "N!2" "f!1(scp(ts!2))" "N!1")
                              (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|epsilon_singleton| FORMULA-DECL NIL |Epsilon_Props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|mod| NONEMPTY-TYPE-EQ-DECL NIL |euclidean_division| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|unique_division| FORMULA-DECL NIL |euclidean_division| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cps!1| SKOLEM-CONST-DECL "finite_set[CP]" |MVA_Completion| NIL)
    (|es!1| SKOLEM-CONST-DECL "finite_set[Event[CP, Name]]" |MVA_Completion|
     NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|skip| CONST-DECL "Action" MVA NIL) (|halted| CONST-DECL "CP" MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Store| TYPE-EQ-DECL NIL MVA NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|build_guard| CONST-DECL "Guard" |MVA_Completion| NIL)
    (|ts!1| SKOLEM-CONST-DECL "finite_set[Transition]" |MVA_Completion| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (N!2 SKOLEM-CONST-DECL "nat" |MVA_Completion| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (N!1 SKOLEM-CONST-DECL "nat" |MVA_Completion| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|f!2| SKOLEM-CONST-DECL "[(es!1) -> below[N!2]]" |MVA_Completion| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|f!1| SKOLEM-CONST-DECL "[(cps!1) -> below[N!1]]" |MVA_Completion| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   668 648 T NIL)
  (|MC_TCC2_subset1_is_finite-3| NIL 3381830263 3381830558
   ("" (SKOLEM!)
    (("" (TYPEPRED "cps!1" "es!1")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          (("" (SKOLEM!)
            ((""
              (INST 1 "N!1 * N!2 * N!2 + 1"
               "LAMBDA (ts: {t: Transition[CP, Name] |
                                        cps!1(scp(t)) AND es!1(event(t)) AND action(t) = skip[CP, Name] AND tcp(t) = halted[CP, Name]
                                        AND guard(t) = build_guard(scp(t), event(t), ts!1)}):
                                          IF empty?(ts) THEN N!1*N!2+N!2
                                          ELSE f!1(scp(t)) * N!2 + f!2(event(t))
                                          ENDIF WHERE t=choose(ts)")
              (("1"
                (AUTO-REWRITE "injective?"
                              "nonempty?"
                              "empty?"
                              "member"
                              "singleton"
                              "choose"
                              "epsilon_singleton")
                (("1" (EXPAND "injective?")
                  (("1" (SKOSIMP)
                    (("1" (LIFT-IF -3)
                      (("1" (ASSERT)
                        (("1" (SPLIT -3)
                          (("1" (FLATTEN -1) (("1" (INST -1 "x1!1") NIL NIL))
                            NIL)
                           ("2" (FLATTEN -1)
                            (("2" (LIFT-IF -1)
                              (("2" (SPLIT -1)
                                (("1" (FLATTEN -1)
                                  (("1" (INST -1 "x2!1") NIL NIL)) NIL)
                                 ("2" (FLATTEN -1)
                                  (("2" (DELETE 1 2)
                                    (("2" (LEMMA "unique_division")
                                      (("2"
                                        (INST -1 "N!2" "f!1(scp(x1!1))"
                                         "f!1(scp(x2!1))" "f!2(event(x1!1))"
                                         "f!2(event(x2!1))")
                                        (("1" (PROP)
                                          (("1" (DELETE -3)
                                            (("1"
                                              (CASE "scp(x1!1)=scp(x2!1)"
                                                "event(x1!1)=event(x2!1)")
                                              (("1" (DECOMPOSE-EQUALITY 1) NIL
                                                NIL)
                                               ("2" (INST? -5)
                                                (("2" (SPLIT -5)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (INST? -3)
                                                (("3" (SPLIT -3)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (AUTO-REWRITE "epsilon_singleton")
                (("2" (SKOLEM!)
                  (("2" (LIFT-IF)
                    (("2" (SPLIT)
                      (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (DELETE -1 -2)
                        (("2" (GRIND)
                          (("2" (LEMMA "both_sides_times_pos_lt1")
                            (("2" (POSTPONE) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 3070 41 T NIL)
  (|MC_TCC2_subset1_is_finite-2| NIL 3381488569 3381830251
   ("" (SKOLEM!)
    (("" (TYPEPRED "cps!1" "es!1")
      (("" (EXPAND "is_finite")
        (("" (SKOLEM!)
          (("" (SKOLEM!)
            ((""
              (INST 1 "N!2 * (N!1 + 2) + 1"
               "LAMBDA (ts: {t: Transition[CP, Name] |
                                      cps!1(scp(t)) AND es!1(event(t)) AND action(t) = skip[CP, Name] AND tcp(t) = halted[CP, Name]
                                      AND guard(t) = build_guard(scp(t), event(t), ts!1)}):
                                        IF empty?(ts) THEN N!1*N!2+N!2
                                        ELSE f!1(scp(t)) * N!2 + f!2(event(t))
                                        ENDIF WHERE t=choose(ts)")
              (("1"
                (AUTO-REWRITE "injective?"
                              "nonempty?"
                              "empty?"
                              "member"
                              "singleton"
                              "choose"
                              "epsilon_singleton")
                (("1" (EXPAND "injective?")
                  (("1" (SKOSIMP)
                    (("1" (LIFT-IF -3)
                      (("1" (ASSERT)
                        (("1" (SPLIT -3)
                          (("1" (FLATTEN -1) (("1" (INST -1 "x1!1") NIL NIL))
                            NIL)
                           ("2" (FLATTEN -1)
                            (("2" (LIFT-IF -1)
                              (("2" (SPLIT -1)
                                (("1" (FLATTEN -1)
                                  (("1" (INST -1 "x2!1") NIL NIL)) NIL)
                                 ("2" (FLATTEN -1)
                                  (("2" (DELETE 1 2)
                                    (("2" (LEMMA "unique_division")
                                      (("2"
                                        (INST -1 "N!2" "f!1(scp(x1!1))"
                                         "f!1(scp(x2!1))" "f!2(event(x1!1))"
                                         "f!2(event(x2!1))")
                                        (("1" (PROP)
                                          (("1" (DELETE -3)
                                            (("1"
                                              (CASE "scp(x1!1)=scp(x2!1)"
                                                "event(x1!1)=event(x2!1)")
                                              (("1" (DECOMPOSE-EQUALITY 1) NIL
                                                NIL)
                                               ("2" (INST? -5)
                                                (("2" (SPLIT -5)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (INST? -3)
                                                (("3" (SPLIT -3)
                                                  (("1" (PROPAX) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (AUTO-REWRITE "epsilon_singleton")
                (("2" (SKOLEM!)
                  (("2" (LIFT-IF)
                    (("2" (SPLIT)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (DELETE -1 -2)
                        (("2" (GRIND) (("2" (POSTPONE) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 10702 5 T NIL)
  (|MC_TCC2_subset1_is_finite-1| NIL 3381488368 3381488533
   (";;; Proof subset2_is_finite-1 for formula MVA_Completion.subset2_is_finite"
    (SKOLEM-TYPEPRED)
    ((";;; Proof subset2_is_finite-1 for formula MVA_Completion.subset2_is_finite"
      (EXPAND "is_finite")
      ((";;; Proof subset2_is_finite-1 for formula MVA_Completion.subset2_is_finite"
        (SKOLEM!)
        ((";;; Proof subset2_is_finite-1 for formula MVA_Completion.subset2_is_finite"
          (AUTO-REWRITE "nonempty?" "empty?" "member" "choose" "singleton")
          ((";;; Proof subset2_is_finite-1 for formula MVA_Completion.subset2_is_finite"
            (INST + "N!1+1" "LAMBDA (ts: ({t: Transition[CP, Name] |
                                    scp(t) = halted[CP, Name] AND es!1(event(t))
                                AND guard(t) =
                                     (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]): TRUE)
                                AND action(t) = skip[CP, Name]
                                AND tcp(t) = halted[CP, Name]})):
                                  IF empty?(ts) THEN N!1
                                  ELSE f!1(event(choose(ts)))
                                  ENDIF")
            (("1" (EXPAND* "injective?" "singleton")
              (("1" (SKOSIMP)
                (("1" (LIFT-IF -2)
                  (("1" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (LIFT-IF -2)
                        (("1" (SPLIT -2)
                          (("1" (EXPAND* "empty?" "member")
                            (("1" (INST?) (("1" (INST?) NIL)))))
                           ("2" (FLATTEN)
                            (("2" (EXPAND* "empty?" "member")
                              (("2" (INST? -2)
                                (("2" (SKOLEM!)
                                  (("2" (ASSERT)
                                    (("2" (GRIND) NIL)))))))))))))))))
                     ("2" (ASSERT)
                      (("2"
                        (CASE "epsilon({y:
                                                             ({t: Transition[CP, Name] |
                                                                      scp(t) = halted[CP, Name]
                                                                  AND es!1(event(t))
                                                                  AND guard(t) =
                                                                       (LAMBDA (stA: Store[CP, Name],
                                                                                stP: PSt[Name]):
                                                                          TRUE)
                                                                  AND action(t) = skip[CP, Name]
                                                                  AND tcp(t) = halted[CP, Name]})
                                                             | y = x1!1}) = x1!1")
                        (("1" (REPLACE -1 -2)
                          (("1"
                            (CASE "epsilon({y_1:
                                                                   ({t: Transition[CP, Name] |
                                                                            scp(t) = halted[CP, Name]
                                                                        AND es!1(event(t))
                                                                        AND guard(t) =
                                                                             (LAMBDA (stA: Store[CP, Name],
                                                                                      stP: PSt[Name]):
                                                                                TRUE)
                                                                        AND action(t) = skip[CP, Name]
                                                                        AND tcp(t) = halted[CP, Name]})
                                                                   | y_1 = x2!1}) = x2!1")
                            (("1" (REPLACE -1 -3)
                              (("1" (DELETE -1 -2)
                                (("1" (FLATTEN)
                                  (("1" (SKOLEM!)
                                    (("1" (LIFT-IF -2)
                                      (("1" (SPLIT -2)
                                        (("1" (FLATTEN)
                                          (("1" (INST? -1)
                                            (("1"
                                              (INSTANTIATE -3
                                               ("event(x1!1)" "event(x2!1)"))
                                              (("1" (ASSERT) NIL)))))))
                                         ("2" (FLATTEN)
                                          (("2" (SKOLEM!)
                                            (("2"
                                              (INSTANTIATE -4
                                               ("event(x1!1)" "event(x2!1)"))
                                              (("2" (SPLIT -4)
                                                (("1" (DECOMPOSE-EQUALITY 1)
                                                  NIL)
                                                 ("2" (PROPAX)
                                                  NIL)))))))))))))))))))))
                             ("2" (HIDE-ALL-BUT 1)
                              (("2"
                                (LEMMA
                                 "epsilon_singleton[({t: Transition[CP, Name] |
                                                    scp(t) = halted[CP, Name] AND es!1(event(t))
                                                AND guard(t) =
                                                     (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]):
                                                        TRUE)
                                                AND action(t) = skip[CP, Name]
                                                AND tcp(t) = halted[CP, Name]})]")
                                (("2" (INST?)
                                  (("2" (EXPAND "singleton")
                                    (("2" (PROPAX) NIL)))))))))))))
                         ("2" (HIDE-ALL-BUT 1)
                          (("2"
                            (LEMMA
                             "epsilon_singleton[({t: Transition[CP, Name] |
                                                scp(t) = halted[CP, Name] AND es!1(event(t))
                                            AND guard(t) =
                                                 (LAMBDA (stA: Store[CP, Name], stP: PSt[Name]):
                                                    TRUE)
                                            AND action(t) = skip[CP, Name]
                                            AND tcp(t) = halted[CP, Name]})]")
                            (("2" (INST?)
                              (("2" (EXPAND "singleton")
                                (("2" (PROPAX) NIL)))))))))
                         ("3" (INST?) NIL)))))))))))))
             ("2" (SKOSIMP) (("2" (SKOLEM!) (("2" (ASSERT) NIL)))))
             ("3" (SKOSIMP) (("3" (ASSERT) NIL))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNFINISHED NIL 4475 3 T NIL))
 (|completeTrans_TCC1| 0
  (|completeTrans_TCC1-3| NIL 3381489148 3381833851
   ("" (SKOLEM!)
    (("" (USE "finite_union[Transition[CP, Name]]")
      (("1" (USE "MC_TCC2_subset2_is_finite[CP, Name]") NIL NIL)
       ("2" (USE "MC_TCC2_subset1_is_finite[CP, Name]") NIL NIL))
      NIL))
    NIL)
   UNCHECKED
   (NIL NIL NIL (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|skip| CONST-DECL "Action" MVA NIL) (|halted| CONST-DECL "CP" MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Store| TYPE-EQ-DECL NIL MVA NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|build_guard| CONST-DECL "Guard" |MVA_Completion| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MC_TCC2_subset2_is_finite| FORMULA-DECL NIL |MVA_Finite_Props| NIL)
    (|MC_TCC2_subset1_is_finite| FORMULA-DECL NIL |MVA_Completion| NIL))
   112 112 T NIL)
  (|completeTrans_TCC1-2| NIL 3381489024 3381489046
   (";;; Proof completeTrans_TCC1-1 for formula MVA_Completion.completeTrans_TCC1"
    (SKOLEM!)
    ((";;; Proof completeTrans_TCC1-1 for formula MVA_Completion.completeTrans_TCC1"
      (USE "finite_union[Transition[CP, Name]]")
      (("1" (USE "subset2_is_finite") NIL)
       ("2" (USE "subset1_is_finite") NIL))))
    ";;; developed with SHOSTAK decision procedures")
   UNFINISHED NIL 2042 35 T NIL)
  (|completeTrans_TCC1-1| NIL 3381054094 3381488966 ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL 12436 11384 T NIL))
 (|completeMVA_trap_TCC1| 0
  (|completeMVA_trap_TCC1-1| NIL 3381741221 3381833852
   ("" (SKOLEM-TYPEPRED) (("" (USE "completeMVA_valid") NIL NIL)) NIL)
   UNCHECKED
   ((|completeMVA_valid| FORMULA-DECL NIL |MVA_Completion| NIL)
    (|completeMVA_pre| CONST-DECL "boolean" |MVA_Completion| NIL)
    (|valid_MVA| CONST-DECL "boolean" MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|Prog_VarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVA_VarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   80 79 T NIL))
 (|completeMVA_trap| 0
  (|completeMVA_trap-1| NIL 3381645621 3381833852
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "trap_state" "completeMVA")
      (("" (SKOSIMP)
        ((""
          (EXPAND* "completeTrans" "union" "member" "completeMVA_pre"
           "valid_MVA")
          (("" (PROP)
            (("" (INST?) (("" (PROP) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|completeMVA| CONST-DECL "MVA" |MVA_Completion| NIL)
    (|trap_state| CONST-DECL "boolean" MVA NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|completeTrans| CONST-DECL "finite_set[Transition]" |MVA_Completion| NIL)
    (|completeMVA_pre| CONST-DECL "boolean" |MVA_Completion| NIL)
    (|valid_MVA| CONST-DECL "boolean" MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|Prog_VarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVA_VarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   37 37 T SHOSTAK))
 (|completeMVA_determ| 0
  (|completeMVA_determ-1| NIL 3381834130 3381844820
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "deterministic" "completeMVA")
      (("" (SKOSIMP)
        (("" (EXPAND "completeMVA_pre")
          (("" (FLATTEN -2)
            (("" (CASE* "ts(a!1)(t1!1)" "ts(a!1)(t2!1)")
              (("1" (EXPAND "deterministic")
                (("1" (INST -4 "t1!1" "t2!1" "stA!1" "stP!1")
                  (("1" (PROP)
                    (("1" (EXPAND "valid_PSt") (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (EXPAND "valid_Store") (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (DELETE -6 -7)
                (("2" (EXPAND* "union" "member" "completeTrans")
                  (("2" (EXPAND* "union" "member")
                    (("2" (GRIND :EXCLUDE ("valid_MVA" "deterministic"))
                      (("1" (CASE "NOT tcp(t1!1) = halted")
                        (("1" (HIDE-ALL-BUT (-1 -2 1 3))
                          (("1" (POSTPONE) NIL NIL)) NIL)
                         ("2" (HIDE-ALL-BUT (-1 -2 -3 2))
                          (("2" (GRIND) NIL NIL)) NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT (-1 -2 -9 2)) (("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 243910 7475 T SHOSTAK))
 (|completeMVA_is_complete| 0
  (|completeMVA_is_complete-1| NIL 3381494310 3381833854
   ("" (SKOLEM!)
    (("" (EXPAND "complete")
      (("" (SPLIT)
        (("1" (EXPAND "completeMVA")
          (("1" (EXPAND "add") (("1" (PROPAX) NIL NIL)) NIL)) NIL)
         ("2" (USE "completeMVA_trap") NIL NIL)
         ("3" (USE "completeMVA_determ") NIL NIL)
         ("4" (USE "completeMVA_total") NIL NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|complete| CONST-DECL "boolean" MVA NIL)
    (|completeMVA_total| FORMULA-DECL NIL |MVA_Completion| NIL)
    (|completeMVA_determ| FORMULA-DECL NIL |MVA_Completion| NIL)
    (|completeMVA_trap| FORMULA-DECL NIL |MVA_Completion| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |MVA_Completion| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVA_VarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Prog_VarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|valid_MVA| CONST-DECL "boolean" MVA NIL)
    (|completeMVA_pre| CONST-DECL "boolean" |MVA_Completion| NIL)
    (|completeMVA| CONST-DECL "MVA" |MVA_Completion| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL))
   238 238 T SHOSTAK)))

