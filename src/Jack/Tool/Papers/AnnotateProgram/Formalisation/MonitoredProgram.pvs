MonitoredProgram[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING Program[Name],
            MVA[CP, Name]

  MonitoredProgram : TYPE =
    [# mva : MVA[CP, Name],
       program : Program[Name]
    #]


END MonitoredProgram


WellFormedMonitoredProgram[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING MonitoredProgram[CP, Name],
            WellFormedMVA[CP, Name],
            WellFormedProgram[Name]

  
  % NOTE: We restrict to the case where the automaton monitors at least one of
  % classes of the program.
  % Notice that the program does not need to have ghost variables modelling the
  % automata
  % Requirements:
  % Variables in vdsP must be fields
  % Every method mentioned in the events must be in the class
  wf_MP(MP : MonitoredProgram) : boolean =
    LET a = mva(MP), p = program(MP) IN
    complete(a) AND
    wf_Program(p) AND
    EXISTS (c : Class) :
      classes(p)(c) AND 
      name(c) = class_name(a) AND
      (FORALL (v : ProgVarDecl) :
        vdsP(a)(v) IMPLIES
          EXISTS (fd : FieldDecl) : fields(c)(fd) AND name(v) = name(fd)) AND
      (FORALL (ev : Event, n : Name) :
        evs(a)(ev) IMPLIES
        mname(ev) = n IMPLIES
          EXISTS (m : Method) : methods(c)(m) AND name(m) = n)


END WellFormedMonitoredProgram


% The semantics of MonitoredPrograms assumes that the program is annotated, thus
% this can be thought as MonitoredAnnotatedProgramSemantics
MonitoredProgramSemantics[CP, Name : TYPE+] : THEORY
BEGIN

  IMPORTING WellFormedMonitoredProgram[CP, Name],
            MVASemantics[CP, Name]

  % Monitored Program State
  MPState : TYPE =
    [# astate : AState[CP, Name],
       pstate : PState[Name],
       gvs : Store
    #]

  is_ghost(vn : Name, sigma : MPState) : boolean =
    NOT Bottom?(gvs(sigma)(vn))

  wf_state(mp : MonitoredProgram)(sigma : MPState) : boolean =
    wf_AState(mva(mp))(astate(sigma)) AND
    wf_state(program(mp))(pstate(sigma)) AND
    FORALL (vn : Name) :
      is_ghost(vn, sigma) IFF is_declared_as_ghost(program(mp))(vn)


  IMPORTING SemanticsTypes[Name, MonitoredProgram, MPState, 
                           LAMBDA (s : MPState) : pstate(s)]

  update_state_MP : (update_FullState_type) =
    LAMBDA (upd : [PState -> PState], s : MPState) :
      s WITH [pstate := upd(pstate(s))]

  IMPORTING SemanticsCommon[Name, MonitoredProgram, MPState, 
                            LAMBDA (s : MPState) : pstate(s),
                            update_state_MP]

  % Instantiation of its semantics

  execute_set_MP : (execute_set_type) =
    LAMBDA (mp : MonitoredProgram, vn : Name, e : Expr, s1, s2 : MPState,
            n : nat,
            deriv_stmt : [MonitoredProgram -> [Stmt, MPState, MPState ->
                                              [below(n + 1) -> bool]]],
            deriv_expr : [MonitoredProgram -> [Expr, MPState, Val, MPState ->
                                              [below(n + 1) -> bool]]]) :
      EXISTS (tau : MPState, v : Val) :
        deriv_expr(mp)(e, s1, v, tau)(n - 1) AND
        s2 = IF up?(ex(pstate(tau)))
             THEN tau
             ELSE tau WITH [gvs := gvs(tau) WITH [vn := v]]
             ENDIF

  on_method_MVA(etype : EventType)
               (mp : MonitoredProgram, md : Method, s : MPState) : AState =
    IF (evs(mva(mp)))((# etype := etype, mname := name(md) #))
    THEN step(mva(mp))(astate(s), (# stP := st(pstate(s)),
                                     event := (# etype := etype,
                                                 mname := name(md) #)
                                  #))
    ELSE astate(s)
    ENDIF

  on_method_entry_MP : (on_method_entry_type) =
    LAMBDA (mp : MonitoredProgram, md : Method, a : Val, s1, s2 : MPState,
            n : nat,
            deriv_stmt : [MonitoredProgram -> [Stmt, MPState, MPState ->
                                     [below(n + 1) -> bool]]],
            deriv_expr : [MonitoredProgram -> [Expr, MPState, Val, MPState ->
                                     [below(n + 1) -> bool]]]) :
    astate(s2) = on_method_MVA(Entry)(mp, md, s1)  AND
    EXISTS (m1, m2, m3 : nat, tau1, tau2 : MPState, inv : Expr) :
      n = m1 + m2 + m3 AND
      inv = lookup_inv(program(mp), a) AND
      check_assertion(mp)(inv, s1, tau1)(m1)(deriv_expr) AND
      check_assertion(mp)(pre(md), tau1, tau2)(m2)(deriv_expr) AND
      deriv_stmt(mp)(pre_set(md), tau2, s2)(m3) AND
      st(pstate(s1)) = st(pstate(s2))
      
  on_method_exit_normal_MP : (on_method_exit_type) =
    LAMBDA (mp : MonitoredProgram, md : Method, a : Val, s1, s2 : MPState,
            n : nat,
            deriv_stmt : [MonitoredProgram -> [Stmt, MPState, MPState ->
                                     [below(n + 1) -> bool]]],
            deriv_expr : [MonitoredProgram -> [Expr, MPState, Val, MPState ->
                                     [below(n + 1) -> bool]]]) :
    astate(s2) = on_method_MVA(ExitNormal)(mp, md, s1)  AND
    EXISTS (m1, m2, m3 : nat, tau1, tau2 : MPState, inv : Expr) :
      n = m1 + m2 + m3 AND
      deriv_stmt(mp)(post_set(md), s1, tau1)(m1) AND
      check_assertion(mp)(post(md), tau1, tau2)(m1)(deriv_expr) AND
      inv = lookup_inv(program(mp), a) AND
      check_assertion(mp)(inv, tau2, s2)(m2)(deriv_expr) AND
      st(pstate(s1)) = st(pstate(s2))

  on_method_exit_exceptional_MP : (on_method_exit_type) =
    LAMBDA (mp : MonitoredProgram, md : Method, a : Val, s1, s2 : MPState,
            n : nat,
            deriv_stmt : [MonitoredProgram -> [Stmt, MPState, MPState ->
                                     [below(n + 1) -> bool]]],
            deriv_expr : [MonitoredProgram -> [Expr, MPState, Val, MPState ->
                                     [below(n + 1) -> bool]]]) :
    astate(s2) = on_method_MVA(ExitExceptional)(mp, md, s1)  AND
    EXISTS (m1, m2 : nat, tau1, tau2 : MPState, inv : Expr) :
      n = m1 + m2 AND
      deriv_stmt(mp)(exc_set(md), s1, tau1)(m1) AND
      inv = lookup_inv(program(mp), a) AND
      check_assertion(mp)(inv, tau1, s2)(m2)(deriv_expr) AND
      st(pstate(s1)) = st(pstate(s2))


  IMPORTING Semantics[Name, MonitoredProgram, MPState, 
                      LAMBDA (mp : MonitoredProgram) : program(mp),
                      LAMBDA (s : MPState) : pstate(s),
                      update_state_MP,
                      execute_set_MP,
                      execute_CaseJML,
                      on_method_entry_MP,
                      on_method_exit_normal_MP,
                      on_method_exit_exceptional_MP]


  initial_MP_state(mp : MonitoredProgram) : MPState =
    (# astate := initial_MVA_state(mva(mp)),
       pstate := initial_Program_state(mp),
       gvs := LAMBDA (n : Name) :
         LET gd = get_GhostVarDecl(n, program(mp)) IN
         IF bottom?(gd)
         THEN Bottom
         ELSE init_val(down(gd))
         ENDIF
    #)

  run_monitored_program(mp : MonitoredProgram)(main : Method, arg : int)
                      (s2 : MPState)(n : nat) : boolean =
    run_FullProgram(mp)(main, arg)(initial_MP_state(mp), s2)(n)


  % Well-formedness properties

  wf_update_state_MP : LEMMA % :-)
    FORALL (mp : MonitoredProgram, s1, s2 : MPState, 
            upd : [PState[Name] -> PState[Name]]) :
      wf_state(mp)(s1) IMPLIES
      update_state_MP(upd, s1) = s2 IMPLIES
      (FORALL (vn : Name) :
        (is_field(vn, s1) IFF is_field(vn, s2)) AND
        (is_local(vn, s1) IFF is_local(vn, s2)) AND
        (is_ghost(vn, s1) IFF is_ghost(vn, s2))) IMPLIES
        wf_state(mp)(s2)

  wf_initial_MP_state : LEMMA
    FORALL (mp : MonitoredProgram) :
      wf_MP(mp) IMPLIES wf_state(mp)(initial_MP_state(mp))

  deriv_expr_yields_wf_state_MP : LEMMA
    FORALL (mp : MonitoredProgram, e : Expr, v : Val)
           (sigma1, sigma2 : MPState, n : nat) :
      wf_MP(mp) IMPLIES
      wf_state(mp)(sigma1) IMPLIES
      deriv_expr(mp)(e, sigma1, v, sigma2)(n) IMPLIES
        wf_state(mp)(sigma2)

  deriv_stmt_yields_wf_state_MP : LEMMA
    FORALL (mp : MonitoredProgram, c : Stmt, sigma1, sigma2 : MPState, n : nat) :
      wf_MP(mp) IMPLIES
      wf_state(mp)(sigma1) IMPLIES
      deriv_stmt(mp)(c, sigma1, sigma2)(n) IMPLIES
        wf_state(mp)(sigma2)


END MonitoredProgramSemantics
