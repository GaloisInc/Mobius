(CompleteMonitorProgramPropertiesPreservation
 (IMP_LegalPartialMonitoredProgramRestriction_TCC1 0
  (IMP_LegalPartialMonitoredProgramRestriction_TCC1-1 nil 3413112202
   3414404121 ("" (use "CP_not_only_halted") nil nil) unchecked
   ((CP_not_only_halted formula-decl nil
     CompleteMonitorProgramPropertiesPreservation nil))
   1300 1250 t nil))
 (derive_equivalence_if_TCC1 0
  (derive_equivalence_if_TCC1-1 nil 3413112202 3414404124
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (skip const-decl "Action" MVA nil)
    (complete_trans const-decl "finite_set[Transition]" MVACompletion nil)
    (complete_MVA const-decl "MVA" MVACompletion nil))
   2539 2430 nil nil))
 (derive_equivalence_if 0
  (derive_equivalence_if-1 nil 3413112302 3414404158
   (";;; Proof derive_equivalence-1 for formula CompleteMonitorProgramPropertiesPreservation.derive_equivalence"
    (skolem 1 ("mp!1" _ _ _ _ _))
    ((";;; Proof derive_equivalence-1 for formula CompleteMonitorProgramPropertiesPreservation.derive_equivalence"
      (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (b: (wf_Body(program(mp!1))), sMP1, sMP2: MPState, v: Val) :
            contains_no_method_call(b) IMPLIES
             subset?(var_names(b), ext_declared_var_names(program(mp!1)))
              IMPLIES
              derive(complete_MP(mp!1))(b, sMP1, v, sMP2)(n) IMPLIES
               derive(mp!1)(b, sMP1, v, sMP2)(n)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil)))))
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (auto-rewrite "check_for_exception_final"
                              "check_for_exception")
                (("2" (expand "derive" (-4 1))
                  (("2"
                    (apply (branch (split -4)
                            ((then (flatten) (assert) (flatten) (assert)))))
                    (("2" (lift-if)
                      (("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("1" (skosimp*)
                          (("1" (inst-cp -6 "m2!1")
                            (("1" (inst -6 "m1!1")
                              (("1" (assert)
                                (("1" (apply (repeat (inst? -6 :where -3)))
                                  (("1" (apply (repeat (inst? -7 :where -4)))
                                    (("1" (assert)
                                      (("1"
                                        (split -6)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil)))))))
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b2(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b2(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil)))
                                         ("2"
                                          (apply
                                           (then
                                            (use
                                             "subterm_subset_of_var"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil)
                                         ("3"
                                          (apply
                                           (then
                                            (use
                                             "contains_no_method_call_preserved_by_proper_subterm"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil)))))
                                     ("2"
                                      (apply
                                       (then
                                        (use
                                         "wf_Body_preserved_by_proper_subterm"
                                         ("b2" "b2(b!1)" "b1" "b!1"))
                                        (assert)
                                        (expand "<<")
                                        (assert)))
                                      nil)))
                                   ("2"
                                    (apply (then
                                            (use
                                             "wf_Body_preserved_by_proper_subterm"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                    nil)))))))))))
                         ("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1" (skosimp*)
                              (("1" (inst -5 "x!1 - 1")
                                (("1" (assert)
                                  (("1" (apply (repeat (inst? -5 :where -3)))
                                    (("1" (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "check_for_exception")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil)))))))
                                         ("2"
                                          (apply
                                           (then
                                            (use
                                             "subterm_subset_of_var"
                                             ("b2" "b(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil)
                                         ("3"
                                          (apply
                                           (then
                                            (use
                                             "contains_no_method_call_preserved_by_proper_subterm"
                                             ("b2" "b(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil)))))
                                     ("2"
                                      (apply
                                       (then
                                        (use
                                         "wf_Body_preserved_by_proper_subterm"
                                         ("b2" "b(b!1)" "b1" "b!1"))
                                        (assert)
                                        (expand "<<")
                                        (assert)))
                                      nil)))))))))
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -6 "m1!1")
                                  (("1" (assert)
                                    (("1"
                                      (apply (repeat (inst? -7 :where -3)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (inst? 5)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "check_for_exception")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -5)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (inst? +)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -10 "m2!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -10
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -10)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "subterm_subset_of_var"
                                                                   ("b2"
                                                                    "b2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil)
                                                               ("3"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                   ("b2"
                                                                    "b2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil)))))
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "wf_Body_preserved_by_proper_subterm"
                                                               ("b2"
                                                                "b2(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand "<<")
                                                              (assert)))
                                                            nil)))))))
                                                     ("2"
                                                      (inst? +)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst? +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (apply
                                                               (branch
                                                                (split +)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              nil)))))))))))))))))))
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil)))))
                                       ("2"
                                        (apply
                                         (then
                                          (use
                                           "wf_Body_preserved_by_proper_subterm"
                                           ("b2" "b1(b!1)" "b1" "b!1"))
                                          (assert)
                                          (expand "<<")
                                          (assert)))
                                        nil)))))))))
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1" (skosimp*)
                                  (("1" (inst-cp -6 "m2!1")
                                    (("1" (inst -6 "m1!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -6 :where -3)))
                                          (("1"
                                            (apply
                                             (repeat (inst? -7 :where -4)))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -6)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (expand
                                                     "check_for_exception")
                                                    (("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "b2(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil)))
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "b2(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil)))
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "subterm_subset_of_var"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil)
                                                 ("3"
                                                  (apply
                                                   (then
                                                    (use
                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil)))))
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "wf_Body_preserved_by_proper_subterm"
                                                 ("b2" "b2(b!1)" "b1" "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil)))
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "wf_Body_preserved_by_proper_subterm"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil)))))))))))
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -5 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -5 :where -3)))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "source(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "source(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil)))))
                                               ("2"
                                                (apply
                                                 (then
                                                  (use
                                                   "wf_Body_preserved_by_proper_subterm"
                                                   ("b2"
                                                    "source(b!1)"
                                                    "b1"
                                                    "b!1"))
                                                  (assert)
                                                  (expand "<<")
                                                  (assert)))
                                                nil)))))))))
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -6 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -7 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -7)
                                                    (("1"
                                                      (inst? +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "check_for_exception")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split -5)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst? +)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -2)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -8)
                                                                            (("1"
                                                                              (propax)
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil)
                                                                             ("3"
                                                                              (lift-if)
                                                                              (("3"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   1)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "then_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "else_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil)))))
                                                                             ("4"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "then_expr(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp*)
                                                                              (("5"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "else_expr(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil)))))))))))
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "else_expr(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil)))
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "then_expr(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil)))))))))))))))))
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "test(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil)
                                                     ("3"
                                                      (apply
                                                       (then
                                                        (use
                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "test(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil)))))
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "wf_Body_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "test(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil)))))))))
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (expand "contains_no_method_call")
                                            (("1"
                                              (inst -4 "b!1")
                                              (("1"
                                                (expand "subterm")
                                                (("1" (propax) nil)))))))
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (expand "execute_CaseJML")
                                                (("1"
                                                  (expand "extend")
                                                  (("1"
                                                    (expand "return_of_stmt")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split +)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -4)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split 1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -8
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -8
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -8)
                                                                      (("1"
                                                                        (auto-rewrite
                                                                         "subset?"
                                                                         "union"
                                                                         "member")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (rewrite
                                                                               "var_names"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -10
                                                                                   "x!2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       16)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil)))))))))))))))))
                                                                       ("2"
                                                                        (expand
                                                                         "contains_no_method_call")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "subterm"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -10
                                                                                 "b1!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subterm"
                                                                                     15)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "some_is_exists")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         15)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)))
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil)))
                                                                                           ("3"
                                                                                            (expand
                                                                                             "subterm"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (rewrite
                                                                                               "some_is_exists")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -3)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("2"
                                                          (expand
                                                           "complete_MP")
                                                          (("2"
                                                            (propax)
                                                            nil)))))))))))))
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp -7 "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -8
                                                           :where
                                                           -4)))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -8)
                                                            (("1"
                                                              (inst? +)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst? +)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "check_for_exception")
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -6)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (inst
                                                                           -9
                                                                           "m2!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -2)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -9)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         1)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "then_stmt(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "else_stmt(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil)))))
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "then_stmt(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil)))
                                                                                   ("5"
                                                                                    (skosimp*)
                                                                                    (("5"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "else_stmt(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil)))))))
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "else_stmt(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil)))
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "then_stmt(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil)))))))))))))))))))))
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "subterm_subset_of_var"
                                                                 ("b2"
                                                                  "test(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil)
                                                             ("3"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "test(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil)))))
                                                         ("2"
                                                          (apply
                                                           (then
                                                            (use
                                                             "wf_Body_preserved_by_proper_subterm"
                                                             ("b2"
                                                              "test(b!1)"
                                                              "b1"
                                                              "b!1"))
                                                            (assert)
                                                            (expand "<<")
                                                            (assert)))
                                                          nil)))))))))
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst-cp -7 "m2!1")
                                                      (("1"
                                                        (inst -7 "m1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -7
                                                               :where
                                                               -4)))
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -6)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split -7)
                                                                  (("1"
                                                                    (split -8)
                                                                    (("1"
                                                                      (expand
                                                                       "return_of_stmt")
                                                                      (("1"
                                                                        (inst?
                                                                         +)
                                                                        (("1"
                                                                          (inst?
                                                                           +)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)))))))
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "s2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "s2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil)))
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "subterm_subset_of_var"
                                                                       ("b2"
                                                                        "s1(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil)
                                                                   ("3"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "s1(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil)))))
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                   ("b2"
                                                                    "s2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil)))
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "s1(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil)))))))))))
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (expand "execute_set")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -4)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split -7)
                                                                    (("1"
                                                                      (inst?
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "source(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "source(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil)))))
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "source(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil)))))))))))))
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand
                                                             "return_of_stmt")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (inst?)
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "subterm_subset_of_var"
                                                                             ("b2"
                                                                              "expr(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil)
                                                                         ("3"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "expr(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil)))))
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "expr(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil)))))))))))))
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "return_of_stmt")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst-cp
                                                                   -10
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -11
                                                                         :where
                                                                         -4)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -11)
                                                                          (("1"
                                                                            (inst?
                                                                             +)
                                                                            (("1"
                                                                              (inst?
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -7)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -14
                                                                                     "m2!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -15
                                                                                           :where
                                                                                           -3)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -15)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -15
                                                                                               "m3!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -15
                                                                                                     :where
                                                                                                     -12)))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -15)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         20
                                                                                                         "tau2!1"
                                                                                                         "tau3!1"
                                                                                                         "v1!1"
                                                                                                         "v2!1"
                                                                                                         "v3!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (branch
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    ((then
                                                                                                                      (flatten)
                                                                                                                      (assert)
                                                                                                                      (flatten)
                                                                                                                      (assert)))))
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           +)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        nil)))))
                                                                                                                   ("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           +)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        nil)))))))))))))))))
                                                                                                       ("2"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "subterm_subset_of_var"
                                                                                                           ("b2"
                                                                                                            "finally(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                           ("b2"
                                                                                                            "finally(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil)))))
                                                                                                   ("2"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (use
                                                                                                       "wf_Body_preserved_by_proper_subterm"
                                                                                                       ("b2"
                                                                                                        "finally(b!1)"
                                                                                                        "b1"
                                                                                                        "b!1"))
                                                                                                      (assert)
                                                                                                      (expand
                                                                                                       "<<")
                                                                                                      (assert)))
                                                                                                    nil)))))))
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "catch(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "catch(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "catch(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil)))))))
                                                                                   ("2"
                                                                                    (inst
                                                                                     -12
                                                                                     "m3!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -12
                                                                                           :where
                                                                                           -9)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -12)
                                                                                            (("1"
                                                                                              (inst
                                                                                               21
                                                                                               "tau2!1"
                                                                                               "tau3!1"
                                                                                               "v1!1"
                                                                                               "v2!1"
                                                                                               "v3!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "up?(ex(pstate(tau1!1)))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 +)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              nil)))))))
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 22)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              nil)))))))))))))))))
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "finally(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "finally(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "finally(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil)))))))))))))))
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b2"
                                                                                "try(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil)
                                                                           ("3"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "try(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil)))))
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "try(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil)))))))))))
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (auto-rewrite
                                                                           "subset?"
                                                                           "union"
                                                                           "member")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "var_names"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "While(test(b!1), body(b!1)) = b!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "var_names"
                                                                                             -2
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "emptyset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 22)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil)))))))))
                                                                                         ("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          nil)))))))))))))))))
                                                                         ("2"
                                                                          (expand
                                                                           "contains_no_method_call")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (inst
                                                                               -7
                                                                               "b1!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subterm"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "While(test(b!1), body(b!1)) = b!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subterm"
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           21)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil)))))))
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      nil)))))))))))))))))))))))
                                                               ("2"
                                                                (expand
                                                                 "execute_assert")
                                                                (("2"
                                                                  (expand
                                                                   "check_assertion")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "x!1 - 1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -6
                                                                               :where
                                                                               -3)))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -6)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil)))
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil)))))
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "expr(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
         ("2" (skosimp*)
          (("2" (expand "complete_MP") (("2" (propax) nil)))))))
       ("2" (use "wf_nat") nil))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (contains_no_method_call_preserved_by_proper_subterm formula-decl nil
     ContainsNoMethodCall nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   34151 31210 nil nil))
 (derive_equivalence_only_if 0
  (derive_equivalence_only_if-1 nil 3413112313 3414404194
   ("" (skolem 1 ("mp!1" _ _ _ _ _))
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (b: (wf_Body(program(mp!1))), sMP1, sMP2: MPState, v: Val) :
            contains_no_method_call(b) IMPLIES
             subset?(var_names(b), ext_declared_var_names(program(mp!1)))
              IMPLIES
              derive(mp!1)(b, sMP1, v, sMP2)(n) IMPLIES
               derive(complete_MP(mp!1))(b, sMP1, v, sMP2)(n) ")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (auto-rewrite "check_for_exception_final"
                              "check_for_exception")
                (("2" (expand "derive" (-4 1))
                  (("2"
                    (apply (branch (split -4)
                            ((then (flatten) (assert) (flatten) (assert)))))
                    (("2" (lift-if)
                      (("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("1" (skosimp*)
                          (("1" (inst-cp -6 "m2!1")
                            (("1" (inst -6 "m1!1")
                              (("1" (assert)
                                (("1" (apply (repeat (inst? -6 :where -3)))
                                  (("1" (apply (repeat (inst? -7 :where -4)))
                                    (("1" (assert)
                                      (("1"
                                        (split -6)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b2(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b2(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (then
                                            (use
                                             "subterm_subset_of_var"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil)
                                         ("3"
                                          (apply
                                           (then
                                            (use
                                             "contains_no_method_call_preserved_by_proper_subterm"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1" (skosimp*)
                              (("1" (inst -5 "x!1 - 1")
                                (("1" (assert)
                                  (("1" (apply (repeat (inst? -5 :where -3)))
                                    (("1" (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "check_for_exception")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (then
                                            (use
                                             "subterm_subset_of_var"
                                             ("b2" "b(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil)
                                         ("3"
                                          (apply
                                           (then
                                            (use
                                             "contains_no_method_call_preserved_by_proper_subterm"
                                             ("b2" "b(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -6 "m1!1")
                                  (("1" (assert)
                                    (("1"
                                      (apply (repeat (inst? -7 :where -3)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (inst? 5)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "check_for_exception")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -5)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (inst? +)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -10 "m2!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -10
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -10)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "subterm_subset_of_var"
                                                                   ("b2"
                                                                    "b2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                   ("b2"
                                                                    "b2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst? +)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst? +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (apply
                                                               (branch
                                                                (split +)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1" (skosimp*)
                                  (("1" (inst-cp -6 "m2!1")
                                    (("1" (inst -6 "m1!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -6 :where -3)))
                                          (("1"
                                            (apply
                                             (repeat (inst? -7 :where -4)))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -6)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "check_for_exception")
                                                    (("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "b2(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "b2(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "subterm_subset_of_var"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (apply
                                                   (then
                                                    (use
                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -5 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -5 :where -3)))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "source(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "source(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -6 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -7 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -7)
                                                    (("1"
                                                      (inst? +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "check_for_exception")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split -5)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst? +)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -2)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -8)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (lift-if)
                                                                              (("3"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   1)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "then_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "else_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "then_expr(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp*)
                                                                              (("5"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "else_expr(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "else_expr(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "then_expr(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "test(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (apply
                                                       (then
                                                        (use
                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "test(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (expand "contains_no_method_call")
                                            (("1"
                                              (inst -4 "b!1")
                                              (("1"
                                                (expand "subterm")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (expand "execute_CaseJML")
                                                (("1"
                                                  (expand "extend")
                                                  (("1"
                                                    (expand "return_of_stmt")
                                                    (("1"
                                                      (apply
                                                       (branch
                                                        (split +)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split -4)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split 1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (inst
                                                               -8
                                                               "x!1 - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?
                                                                     -8
                                                                     :where
                                                                     -3)))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -8)
                                                                      (("1"
                                                                        (auto-rewrite
                                                                         "subset?"
                                                                         "union"
                                                                         "member")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skosimp*)
                                                                            (("1"
                                                                              (rewrite
                                                                               "var_names"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -10
                                                                                   "x!2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       16)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "contains_no_method_call")
                                                                        (("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (expand
                                                                             "subterm"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -10
                                                                                 "b1!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "subterm"
                                                                                     15)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "some_is_exists")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         15)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (expand
                                                                                             "subterm"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (rewrite
                                                                                               "some_is_exists")
                                                                                              (("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst?)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -3)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("2"
                                                          (expand
                                                           "complete_MP")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst-cp -7 "m1!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (inst?
                                                           -8
                                                           :where
                                                           -4)))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -8)
                                                            (("1"
                                                              (inst? +)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst? +)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "check_for_exception")
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -6)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (inst
                                                                           -9
                                                                           "m2!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -9
                                                                                 :where
                                                                                 -2)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -9)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         1)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "then_stmt(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "subterm_subset_of_var"
                                                                                           ("b2"
                                                                                            "else_stmt(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "then_stmt(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (skosimp*)
                                                                                    (("5"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "else_stmt(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "else_stmt(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "then_stmt(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "subterm_subset_of_var"
                                                                 ("b2"
                                                                  "test(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "test(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst-cp -7 "m2!1")
                                                      (("1"
                                                        (inst -7 "m1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -7
                                                               :where
                                                               -4)))
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -6)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split -7)
                                                                  (("1"
                                                                    (split -8)
                                                                    (("1"
                                                                      (expand
                                                                       "return_of_stmt")
                                                                      (("1"
                                                                        (inst?
                                                                         +)
                                                                        (("1"
                                                                          (inst?
                                                                           +)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "s2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "s2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "subterm_subset_of_var"
                                                                       ("b2"
                                                                        "s1(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "s1(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (expand "execute_set")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "x!1 - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -7
                                                                   :where
                                                                   -4)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split -7)
                                                                    (("1"
                                                                      (inst?
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "source(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "source(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand
                                                             "return_of_stmt")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (inst?)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "subterm_subset_of_var"
                                                                             ("b2"
                                                                              "expr(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "expr(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "return_of_stmt")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst-cp
                                                                   -10
                                                                   "m1!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -11
                                                                         :where
                                                                         -4)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -11)
                                                                          (("1"
                                                                            (inst?
                                                                             +)
                                                                            (("1"
                                                                              (inst?
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     -7)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -14
                                                                                     "m2!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -15
                                                                                           :where
                                                                                           -3)))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -15)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -15
                                                                                               "m3!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (repeat
                                                                                                    (inst?
                                                                                                     -15
                                                                                                     :where
                                                                                                     -12)))
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -15)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         20
                                                                                                         "tau2!1"
                                                                                                         "tau3!1"
                                                                                                         "v1!1"
                                                                                                         "v2!1"
                                                                                                         "v3!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "update_PState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (branch
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    ((then
                                                                                                                      (flatten)
                                                                                                                      (assert)
                                                                                                                      (flatten)
                                                                                                                      (assert)))))
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           +)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (apply
                                                                                                                         (branch
                                                                                                                          (split
                                                                                                                           +)
                                                                                                                          ((then
                                                                                                                            (flatten)
                                                                                                                            (assert)
                                                                                                                            (flatten)
                                                                                                                            (assert)))))
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "subterm_subset_of_var"
                                                                                                           ("b2"
                                                                                                            "finally(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (apply
                                                                                                         (then
                                                                                                          (use
                                                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                           ("b2"
                                                                                                            "finally(b!1)"
                                                                                                            "b1"
                                                                                                            "b!1"))
                                                                                                          (assert)
                                                                                                          (expand
                                                                                                           "<<")
                                                                                                          (assert)))
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "catch(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "catch(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -12
                                                                                     "m3!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (inst?
                                                                                           -12
                                                                                           :where
                                                                                           -9)))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -12)
                                                                                            (("1"
                                                                                              (inst
                                                                                               21
                                                                                               "tau2!1"
                                                                                               "tau3!1"
                                                                                               "v1!1"
                                                                                               "v2!1"
                                                                                               "v3!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "update_PState")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "up?(ex(pstate(tau1!1)))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lift-if)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 +)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lift-if)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (apply
                                                                                                               (branch
                                                                                                                (split
                                                                                                                 22)
                                                                                                                ((then
                                                                                                                  (flatten)
                                                                                                                  (assert)
                                                                                                                  (flatten)
                                                                                                                  (assert)))))
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "finally(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "finally(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b2"
                                                                                "try(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "try(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (auto-rewrite
                                                                           "subset?"
                                                                           "union"
                                                                           "member")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "var_names"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "While(test(b!1), body(b!1)) = b!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "var_names"
                                                                                             -2
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "emptyset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 22)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "contains_no_method_call")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (inst
                                                                               -7
                                                                               "b1!1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "subterm"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "While(test(b!1), body(b!1)) = b!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subterm"
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           21)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "execute_assert")
                                                                (("2"
                                                                  (expand
                                                                   "check_assertion")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "x!1 - 1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -6
                                                                               :where
                                                                               -3)))
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -6)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "complete_MP") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (extend const-decl "R" extend nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (contains_no_method_call_preserved_by_proper_subterm formula-decl nil
     ContainsNoMethodCall nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil) (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   35999 26030 t shostak))
 (derive_equivalence 0
  (derive_equivalence-1 nil 3412503635 3414404196
   ("" (skosimp*)
    (("" (use "derive_equivalence_only_if")
      (("" (use "derive_equivalence_if")
        (("" (assert) (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((derive_equivalence_only_if formula-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (derive_equivalence_if formula-decl nil
     CompleteMonitorProgramPropertiesPreservation nil))
   1702 1650 t shostak))
 (contains_no_method_call_preserved_by_complete_MP 0
  (contains_no_method_call_preserved_by_complete_MP-1 nil 3412503365
   3414404197
   ("" (skosimp*) (("" (expand "complete_MP") (("" (propax) nil nil)) nil))
    nil)
   unchecked nil 1529 1480 t shostak))
 (wf_set_stmts_preserved_by_complete_MP 0
  (wf_set_stmts_preserved_by_complete_MP-1 nil 3412503375 3414404202
   ("" (skosimp*)
    (("" (expand "wf_set_stmts")
      (("" (typepred "program(mp!1)")
        (("" (expand* "wf_Program" "program_pred")
          (("" (flatten)
            (("" (hide -1 -2 -3 -4)
              (("" (expand "contains_no_method_call_in_sets_in_program")
                (("" (expand "program_method_pred")
                  (("" (skosimp*)
                    (("" (expand "complete_MP" -)
                      (("" (apply (repeat (inst?)))
                        (("" (assert)
                          (("" (flatten)
                            (("" (hide -1)
                              (("" (apply (repeat (inst?)))
                                (("" (assert)
                                  (("" (expand "wf_set_stmts")
                                    (("" (skosimp*)
                                      ((""
                                        (expand "complete_MP" -)
                                        ((""
                                          (assert)
                                          ((""
                                            (flatten)
                                            ((""
                                              (split 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (expand "only_JMLExc")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (use
                                                         "derive_equivalence"
                                                         ("mp" "mp!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "method_pred")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst? -6)
                                                                  (("2"
                                                                    (expand
                                                                     "wf_Body")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand*
                                                                         "subset?"
                                                                         "member")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "contains_no_method_call_in_sets")
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (inst? -8)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "method_pred")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst? -6)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst? -3)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "no_exc")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (hide -4 -6)
                                                          (("2"
                                                            (use
                                                             "derive_equivalence"
                                                             ("mp" "mp!1"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "method_pred")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (inst?
                                                                       -7)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "wf_Body")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand*
                                                                               "subset?"
                                                                               "member")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "contains_no_method_call_in_sets")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (inst?
                                                                       -7)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "method_pred")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst? -7)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (hide -2 -3)
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (expand "no_exc")
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (use
                                                           "derive_equivalence"
                                                           ("mp" "mp!1"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "method_pred")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst? -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Body")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand*
                                                                             "subset?"
                                                                             "member")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "contains_no_method_call_in_sets")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (inst? -8)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "method_pred")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst? -8)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (skosimp*)
                                                (("4"
                                                  (hide -2 -3 -4)
                                                  (("4"
                                                    (inst?)
                                                    (("4"
                                                      (expand "no_change")
                                                      (("4"
                                                        (skosimp*)
                                                        (("4"
                                                          (use
                                                           "derive_equivalence"
                                                           ("mp" "mp!1"))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -1)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "method_pred")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst? -7)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Body")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand*
                                                                             "subset?"
                                                                             "member")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "contains_no_method_call_in_sets")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (inst? -6)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "method_pred")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst? -7)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((program_pred const-decl "bool" ProgramRestriction nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (contains_no_method_call_in_sets const-decl "bool" ContainsNoMethodCall
     nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (derive_equivalence formula-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (only_JMLExc const-decl "bool" WfSetStmts nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (no_change const-decl "bool" WfSetStmts nil)
    (contains_no_method_call_in_sets_in_program const-decl "bool"
     ContainsNoMethodCall nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_partial_MP const-decl "boolean" MonitoredProgram nil))
   4462 4110 t shostak))
 (full_complete_MP_characterisation 0
  (full_complete_MP_characterisation-1 nil 3413191599 3414404204
   ("" (skosimp*)
    (("" (expand* "complete_MP" "full_partial_MP" "full_complete_MP") nil
      nil))
    nil)
   unchecked
   ((full_partial_MP const-decl "(wf_and_partial_MP)"
     LegalPartialMonitoredProgramRestriction nil)
    (full_complete_MP const-decl "(wf_and_complete_MP)"
     LegalCompleteMonitoredProgramRestriction nil))
   2212 2160 t shostak))
 (legal_Body_preserved_by_complete_MP 0
  (legal_Body_preserved_by_complete_MP-1 nil 3414388243 3414397940
   ("" (skosimp*)
    (("" (expand "legal_Body_partial_MP")
      (("" (expand "legal_Body_complete_MP")
        (("" (expand "legal_Body")
          (("" (auto-rewrite "full_complete_MP_characterisation")
            ((""
              (case "FORALL (b1: Body[Name]):
                                    subterm(b1, b!1) IMPLIES
                                     TryCatch?(b1) IMPLIES
                                      wf_Body(program(complete_MP(mp!1)))(b1) IMPLIES
                                       (FORALL (s1, s2, tau1, tau2: MPState[CP, Name])
                                               (v, v1, v2: Val[Name])(n, m1, m2: nat):
                                          wf_state(full_complete_MP(program(complete_MP(mp!1))))(s1)
                                           IMPLIES NOT stuck(s1) IMPLIES
                                           derive(full_complete_MP(program(complete_MP(mp!1))))
                                                 (b1, s1, v, s2)(n)
                                            IMPLIES
                                            derive(full_complete_MP(program(complete_MP(mp!1))))
                                                  (try(b1), s1, v1, tau1)(m1)
                                             IMPLIES
                                             up?(ex(pstate(tau1))) IMPLIES
                                              (down(ex(pstate(tau1))) = JMLExc OR
                                                (down(ex(pstate(tau1))) = exc(b1) AND
                                                  derive(full_complete_MP(program(complete_MP(mp!1))))
                                                        (catch(b1), update_PState(tau1, catch), v2,
                                                         tau2)
                                                        (m2)
                                                   AND
                                                   up?(ex(pstate(tau2))) AND
                                                    down(ex(pstate(tau2))) = JMLExc))
                                               IMPLIES
                                               up?(ex(pstate(s2))) AND down(ex(pstate(s2))) = JMLExc)")
              (("1" (hide -2)
                (("1" (skosimp*)
                  (("1" (inst -1 "b1!1")
                    (("1" (assert)
                      (("1" (lemma "derive_pstate_independent_of_MVA")
                        (("1"
                          (name-replace "MP"
                           "complete_MP(full_partial_MP(program(complete_MP(mp!1))))")
                          (("1" (copy -1)
                            (("1" (typepred "MP")
                              (("1" (expand "wf_and_complete_MP")
                                (("1" (flatten)
                                  (("1"
                                    (inst -4 _ _ _ _ _ _
                                     "s1!1 WITH [stuck := FALSE]" _)
                                    (("1"
                                      (apply (repeat (inst? -4 :where -11)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case "wf_Body(program(MP))(b1!1)")
                                          (("1"
                                            (case
                                             " wf_state(MP)(s1!1 WITH [stuck := FALSE])")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (copy -9)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     _
                                                     _
                                                     _
                                                     _
                                                     _
                                                     _
                                                     "s1!1 WITH [stuck := FALSE]"
                                                     _)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (inst?
                                                         -1
                                                         :where
                                                         -17)))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (inst
                                                               -13
                                                               "s1!1 WITH [stuck := FALSE]"
                                                               "tau2!2"
                                                               "tau2!3"
                                                               _)
                                                              (("1"
                                                                (case
                                                                 "FORALL (tau2: MPState[CP, Name], v, v1, v2: Val[Name],
                                                n, m1, m2: nat):
                                           wf_state(MP)(s1!1 WITH [stuck := FALSE]) IMPLIES
                                            NOT stuck(s1!1 WITH [stuck := FALSE]) IMPLIES
                                             derive(MP)(b1!1, s1!1 WITH [stuck := FALSE], v, tau2!2)(n)
                                              IMPLIES
                                              derive(MP)(try(b1!1), s1!1 WITH [stuck := FALSE], v1, tau2!3)
                                                    (m1)
                                               IMPLIES
                                               up?(ex(pstate(tau2!3))) IMPLIES
                                                (down(ex(pstate(tau2!3))) = JMLExc OR
                                                  (down(ex(pstate(tau2!3))) = exc(b1!1) AND
                                                    derive(MP)
                                                          (catch(b1!1), update_PState(tau2!3, catch), v2, tau2)
                                                          (m2)
                                                     AND
                                                     up?(ex(pstate(tau2))) AND
                                                      down(ex(pstate(tau2))) = JMLExc))
                                                 IMPLIES
                                                 up?(ex(pstate(tau2!2))) AND down(ex(pstate(tau2!2))) = JMLExc")
                                                                (("1"
                                                                  (hide -14)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     _
                                                                     "v!1"
                                                                     "v1!1"
                                                                     _
                                                                     "n2!1"
                                                                     "n2!2"
                                                                     _)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -21)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (apply
                                                                             (repeat
                                                                              (inst?
                                                                               -2)))
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (inst
                                                                             -17
                                                                             _
                                                                             _
                                                                             _
                                                                             _
                                                                             _
                                                                             _
                                                                             "update_PState(tau2!3, catch)"
                                                                             _)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -17
                                                                                 :where
                                                                                 -2)))
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -17)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "tau2!4"
                                                                                       "v2!1"
                                                                                       "n2!3")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand*
                                                                                     "update_PState"
                                                                                     "catch")
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand*
                                                                                     "update_PState"
                                                                                     "catch")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "update_PState")
                                                                                            (("1"
                                                                                              (use
                                                                                               "wf_state_catch")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "derive_yields_wf_state_MP"
                                                                                           ("sigma2"
                                                                                            "tau2!3"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (use
                                                                                     "wf_update_PState")
                                                                                    (("5"
                                                                                      (assert)
                                                                                      (("5"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (skosimp*)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "update_PState")
                                                                                            (("1"
                                                                                              (use
                                                                                               "wf_state_catch")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (use
                                                                                           "derive_yields_wf_state_MP"
                                                                                           ("sigma2"
                                                                                            "tau1!1"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "catch(b1!1)"
                                                                                      "b1"
                                                                                      "b1!1"))
                                                                                    (("6"
                                                                                      (expand
                                                                                       "<<")
                                                                                      (("6"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("7"
                                                                                    (use
                                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "catch(b1!1)"
                                                                                      "b1"
                                                                                      "b1!1"))
                                                                                    (("7"
                                                                                      (expand
                                                                                       "<<")
                                                                                      (("7"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1 -13))
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -6)))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (prop)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (use
                                                                     "wf_Body_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "catch(b1!1)"
                                                                      "b1"
                                                                      "b1!1"))
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (expand
                                                                         "<<")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "wf_Body_preserved_by_proper_subterm"
                                                             ("b2"
                                                              "try(b1!1)"
                                                              "b1"
                                                              "b1!1"))
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand "<<")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (use
                                                             "wf_Body_preserved_by_proper_subterm"
                                                             ("b2"
                                                              "try(b1!1)"
                                                              "b1"
                                                              "b1!1"))
                                                            (("3"
                                                              (expand "<<")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand*
                                               "wf_state"
                                               "wf_ghoststate"
                                               "is_ghost")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "MP")
                                            (("2"
                                              (expand "complete_MP" 1 1)
                                              (("2"
                                                (expand "full_partial_MP")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (case "wf_Body(program(mp!1))(b1!1) ")
                        (("1" (assert)
                          (("1"
                            (name-replace "MP"
                             "full_partial_MP(program(mp!1))")
                            (("1"
                              (case-replace
                               "full_partial_MP(program(complete_MP(mp!1))) = MP"
                               :hide? t)
                              (("1" (use "existence_state_partial_monitor")
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1"
                                      (use
                                       "monitor_related_states_implies_derive_converse")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (use
                                             "monitor_related_states_preserved_by_derive")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -9)
                                                (("1"
                                                  (use
                                                   "monitor_related_states_implies_derive_converse")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (use
                                                         "monitor_related_states_preserved_by_derive")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "FORALL (s1, s2, tau1, tau2: MPState[CP, Name], v, v1, v2: Val[Name],
                                               n, m1, m2: nat):
                                          wf_state(MP)(s1) IMPLIES
                                           derive(MP)(b1!1, s1, v, s2)(n) IMPLIES
                                            derive(MP)(try(b1!1), s1, v1, tau1)(m1) IMPLIES
                                             up?(ex(pstate(tau1))) IMPLIES
                                              (down(ex(pstate(tau1))) = JMLExc OR
                                                (down(ex(pstate(tau1))) = exc(b1!1) AND
                                                  derive(MP)
                                                        (catch(b1!1), update_PState(tau1, catch), v2, tau2)
                                                        (m2)
                                                   AND
                                                   up?(ex(pstate(tau2))) AND
                                                    down(ex(pstate(tau2))) = JMLExc))
                                               IMPLIES up?(ex(pstate(s2))) AND down(ex(pstate(s2))) = JMLExc")
                                                            (("1"
                                                              (hide -15)
                                                              (("1"
                                                                (case
                                                                 "wf_state(MP)(s1!2)")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "s1!2"
                                                                   "s2b!1"
                                                                   "s2b!2"
                                                                   _
                                                                   "v!1"
                                                                   "v1!1"
                                                                   _
                                                                   "n2!1"
                                                                   "n2!2"
                                                                   _)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -15)
                                                                      (("1"
                                                                        (expand
                                                                         "monitor_related_states")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?)))
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -8)
                                                                          (("2"
                                                                            (use
                                                                             "monitor_related_states_preserved_by_catch")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (use
                                                                                 "monitor_related_states_implies_derive_converse")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "s2b!3"
                                                                                       "v2!1"
                                                                                       "n2!3")
                                                                                      (("1"
                                                                                        (use
                                                                                         "monitor_related_states_preserved_by_derive")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "monitor_related_states")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "catch(b1!1) "
                                                                                    "b1"
                                                                                    "b1!1"))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "<<")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "MP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "full_partial_MP")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "monitor_related_states")
                                                                  (("2"
                                                                    (flatten)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 -14))
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (apply
                                                                   (repeat
                                                                    (inst?)))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skosimp*)
                                                              (("3"
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "catch(b1!1) "
                                                                  "b1"
                                                                  "b1!1"))
                                                                (("3"
                                                                  (expand
                                                                   "<<")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "MP")
                                                                      (("3"
                                                                        (expand
                                                                         "full_partial_MP")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "wf_Body_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "try(b1!1) "
                                                      "b1"
                                                      "b1!1"))
                                                    (("2"
                                                      (expand "MP")
                                                      (("2"
                                                        (expand
                                                         "full_partial_MP")
                                                        (("2"
                                                          (expand "<<")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "MP")
                                        (("2"
                                          (expand "full_partial_MP")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "complete_MP")
                                (("2" (expand "MP") (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "complete_MP") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2 -1)
                (("3" (skosimp*)
                  (("3" (expand "complete_MP" 3 1)
                    (("3" (expand "full_partial_MP" 3)
                      (("3"
                        (use "wf_Body_preserved_by_proper_subterm"
                             ("b2" "catch(b1!1)" "b1" "b1!1"))
                        (("3" (assert)
                          (("3" (expand "<<") (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2 -1) (("4" (skosimp*) nil nil)) nil)
               ("5" (hide 2 -1)
                (("5" (skosimp*)
                  (("5" (expand "complete_MP" 2 1)
                    (("5" (expand "full_partial_MP" 2)
                      (("5"
                        (use "wf_Body_preserved_by_proper_subterm"
                             ("b2" "try(b1!1)" "b1" "b1!1"))
                        (("5" (assert)
                          (("5" (expand "<<") (("5" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (skosimp*)
                (("6" (expand "complete_MP" 2 1)
                  (("6" (expand "full_partial_MP" 2) (("6" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((legal_Body_partial_MP const-decl "boolean"
     LegalPartialMonitoredProgramRestriction nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (exc shared-adt-accessor-decl
     "[{x: Body | TryCatch?(x) OR Throw?(x)} -> Excpt]" Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (JMLExc adt-constructor-decl "(JMLExc?)" Excpt_adt nil)
    (JMLExc? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (full_complete_MP const-decl "(wf_and_complete_MP)"
     LegalCompleteMonitoredProgramRestriction nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (full_partial_MP const-decl "(wf_and_partial_MP)"
     LegalPartialMonitoredProgramRestriction nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil)
    (full_complete_MP_characterisation formula-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (derive_yields_wf_state_MP formula-decl nil MonitoredProgramSemantics nil)
    (wf_state_catch formula-decl nil State nil)
    (wf_update_PState formula-decl nil MonitoredProgramSemantics nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (FALSE const-decl "bool" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (legal_Body_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil))
   3635835 154400 t nil))
 (legal_Program_preserved_by_complete_MP 0
  (legal_Program_preserved_by_complete_MP-2 nil 3414388258 3414404240
   (";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
    (skosimp*)
    ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
      (typepred "program(mp!1)")
      ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
        (expand "wf_Program")
        ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
          (flatten)
          ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
            (hide -1 -2 -3 -4)
            ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
              (expand* "legal_Program_complete_MP" "legal_Program_partial_MP"
               "legal_Program" "program_pred" "method_pred")
              ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
                (skosimp*)
                ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
                  (inst?)
                  ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
                    (inst?)
                    ((";;; Proof legal_Program_preserved_by_complete_MP-1 for formula CompleteMonitorProgramPropertiesPreservation.legal_Program_preserved_by_complete_MP"
                      (case "classes(program(mp!1))(c!1)")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (hide -3 -5)
                              (("1"
                                (use "legal_Body_preserved_by_complete_MP")
                                (("1"
                                  (expand* "legal_Body_partial_MP"
                                   "legal_Body_complete_MP")
                                  (("1" (assert) nil)))))))
                             ("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (use
                                             "legal_Body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -12) nil)))))
                                             ("2" (inst? -4) nil)))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (use
                                             "legal_Body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -13) nil)))))
                                             ("2" (inst? -5) nil)))))
                                         ("3"
                                          (use
                                           "legal_Body_preserved_by_complete_MP")
                                          (("3"
                                            (expand*
                                             "legal_Body_partial_MP"
                                             "legal_Body_complete_MP")
                                            (("3" (assert) nil)))))
                                         ("4"
                                          (skosimp*)
                                          (("4"
                                            (use
                                             "legal_Body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -15) nil)))))
                                             ("2"
                                              (assert)
                                              (("2" (inst? -7) nil)))))))
                                         ("5"
                                          (skosimp*)
                                          (("5"
                                            (use
                                             "legal_Body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -16) nil)))))
                                             ("2" (inst? -8) nil)))))
                                         ("6"
                                          (skosimp*)
                                          (("6"
                                            (use
                                             "legal_Body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -17) nil)))))
                                             ("2" (inst? -9) nil)))))
                                         ("7"
                                          (use
                                           "legal_Body_preserved_by_complete_MP")
                                          (("7"
                                            (expand*
                                             "legal_Body_partial_MP"
                                             "legal_Body_complete_MP")
                                            (("7"
                                              (assert)
                                              nil)))))))))))))))))))))))
                       ("2" (expand "complete_MP")
                        (("2" (propax) nil))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (legal_Program_partial_MP const-decl "boolean"
     LegalPartialMonitoredProgramRestriction nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (legal_Program_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (legal_Body_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil)
    (legal_Body_partial_MP const-decl "boolean"
     LegalPartialMonitoredProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (legal_Body_preserved_by_complete_MP formula-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil))
   35562 27450 nil nil)
  (legal_Program_preserved_by_complete_MP-1 nil 3413190727 3414328849
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (hide -1 -2 -3 -4)
            ((""
              (expand* "legal_Program_complete_MP" "legal_Program_partial_MP"
               "legal_Program" "program_pred" "method_pred")
              (("" (skosimp*)
                (("" (inst?)
                  (("" (inst?)
                    (("" (case "classes(program(mp!1))(c!1)")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (hide -3 -5)
                              (("1"
                                (use "legal_body_preserved_by_complete_MP")
                                (("1"
                                  (expand* "legal_Body_partial_MP"
                                   "legal_Body_complete_MP")
                                  (("1" (assert) nil nil)) nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (inst?)
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (use
                                             "legal_body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -12) nil nil))
                                                nil))
                                              nil)
                                             ("2" (inst? -4) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (use
                                             "legal_body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -13) nil nil))
                                                nil))
                                              nil)
                                             ("2" (inst? -5) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use
                                           "legal_body_preserved_by_complete_MP")
                                          (("3"
                                            (expand*
                                             "legal_Body_partial_MP"
                                             "legal_Body_complete_MP")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skosimp*)
                                          (("4"
                                            (use
                                             "legal_body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -15) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2" (inst? -7) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skosimp*)
                                          (("5"
                                            (use
                                             "legal_body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -16) nil nil))
                                                nil))
                                              nil)
                                             ("2" (inst? -8) nil nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (skosimp*)
                                          (("6"
                                            (use
                                             "legal_body_preserved_by_complete_MP")
                                            (("1"
                                              (expand*
                                               "legal_Body_partial_MP"
                                               "legal_Body_complete_MP")
                                              (("1"
                                                (assert)
                                                (("1" (inst? -17) nil nil))
                                                nil))
                                              nil)
                                             ("2" (inst? -9) nil nil))
                                            nil))
                                          nil)
                                         ("7"
                                          (use
                                           "legal_body_preserved_by_complete_MP")
                                          (("7"
                                            (expand*
                                             "legal_Body_partial_MP"
                                             "legal_Body_complete_MP")
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "complete_MP") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil
     CompleteMonitorProgramPropertiesPreservation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (legal_Program_partial_MP const-decl "boolean"
     LegalPartialMonitoredProgramRestriction nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (legal_Program_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (legal_Body_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil)
    (legal_Body_partial_MP const-decl "boolean"
     LegalPartialMonitoredProgramRestriction nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (complete_MP_wf_and_complete application-judgement "(wf_and_complete_MP)"
     CompleteMonitorProgramPropertiesPreservation nil))
   20876 20330 t shostak)))
(AnnotateProgramPropertiesPreservation
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3410161121 3413195209
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateProgramPropertiesPreservation
     nil))
   1289 1290 t nil))
 (IMP_Equivalence_TCC1 0
  (IMP_Equivalence_TCC1-1 nil 3410161121 3413195210
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateProgramPropertiesPreservation
     nil))
   1329 1280 t nil))
 (IMP_Equivalence_TCC2 0
  (IMP_Equivalence_TCC2-1 nil 3410161121 3413195211
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateProgramPropertiesPreservation
     nil))
   1308 1310 t nil))
 (IMP_Equivalence_TCC3 0
  (IMP_Equivalence_TCC3-1 nil 3430134814 nil ("" (assuming-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (IMP_Equivalence_TCC4 0
  (IMP_Equivalence_TCC4-1 nil 3430134814 nil ("" (assuming-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (IMP_Equivalence_TCC5 0
  (IMP_Equivalence_TCC5-1 nil 3430134814 nil ("" (assuming-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (IMP_Equivalence_TCC6 0
  (IMP_Equivalence_TCC6-1 nil 3430134814 nil ("" (existence-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (IMP_Equivalence_TCC7 0
  (IMP_Equivalence_TCC7-1 nil 3430134814 nil ("" (existence-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (IMP_Equivalence_TCC8 0
  (IMP_Equivalence_TCC8-1 nil 3430135667 nil ("" (assuming-tcc) nil nil) nil
   nil nil nil nil nil))
 (IMP_Equivalence_TCC9 0
  (IMP_Equivalence_TCC9-1 nil 3430135667 nil ("" (assuming-tcc) nil nil) nil
   nil nil nil nil nil))
 (IMP_Equivalence_TCC10 0
  (IMP_Equivalence_TCC10-1 nil 3430135667 nil ("" (assuming-tcc) nil nil) nil
   nil nil nil nil nil))
 (IMP_Equivalence_TCC11 0
  (IMP_Equivalence_TCC11-1 nil 3430135667 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (IMP_Equivalence_TCC12 0
  (IMP_Equivalence_TCC12-1 nil 3430135667 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (IMP_CompleteMonitorProgramPropertiesPreservation_TCC1 0
  (IMP_CompleteMonitorProgramPropertiesPreservation_TCC1-1 nil 3413189842
   3413195140 ("" (use "CP_not_only_halted") nil nil) unchecked
   ((CP_not_only_halted formula-decl nil AnnotateProgramPropertiesPreservation
     nil))
   5701 1290 t nil))
 (derive_equivalence_if_TCC1 0
  (derive_equivalence_if_TCC1-1 nil 3413189842 3413195166
   ("" (skosimp*)
    (("" (expand "id") (("" (use "ann_program_preserves_wf_body") nil nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (ann_program_preserves_wf_body formula-decl nil AnnotateProgramProperties
     nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Body type-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   15704 1930 t nil))
 (derive_equivalence_if 0
  (derive_equivalence_if-1 nil 3413193424 3429358481
   ("" (skolem 1 ("mp!1" _ _ _ _ _))
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) : FORALL (b : (wf_Body(program(mp!1))), sAP1, sAP2: APState, v: Val) :
                                    contains_no_method_call(b) IMPLIES
                         subset?(var_names(b), ext_declared_var_names(program(mp!1))) IMPLIES
                                     derive(ann_program(mp!1))(b, sAP1, v, sAP2)(n) IMPLIES
                                       derive(mp!1)(b, make_MPState(mp!1)(sAP1), v, make_MPState(mp!1)(sAP2))(n)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (auto-rewrite "make_MPState" "check_for_exception_final"
                              "check_for_exception")
                (("2" (expand "derive" (-4 1))
                  (("2"
                    (apply (branch (split -4)
                            ((then (flatten) (assert) (flatten) (assert)))))
                    (("1" (apply-extensionality :hide? t)
                      (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (lift-if)
                      (("2"
                        (apply (branch (split -1)
                                ((then (flatten) (assert) (flatten)
                                  (assert)))))
                        (("1" (skosimp*)
                          (("1" (inst-cp -6 "m2!1")
                            (("1" (inst -6 "m1!1")
                              (("1" (assert)
                                (("1" (apply (repeat (inst? -6 :where -3)))
                                  (("1" (apply (repeat (inst? -7 :where -4)))
                                    (("1" (assert)
                                      (("1"
                                        (split -6)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "check_for_exception")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b2(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b2(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (then
                                            (use
                                             "subterm_subset_of_var"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil)
                                         ("3"
                                          (apply
                                           (then
                                            (use
                                             "contains_no_method_call_preserved_by_proper_subterm"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (then
                                        (use
                                         "wf_Body_preserved_by_proper_subterm"
                                         ("b2" "b2(b!1)" "b1" "b!1"))
                                        (assert)
                                        (expand "<<")
                                        (assert)))
                                      nil nil))
                                    nil)
                                   ("2"
                                    (apply (then
                                            (use
                                             "wf_Body_preserved_by_proper_subterm"
                                             ("b2" "b1(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                    nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("1" (split 3)
                            (("1" (apply-extensionality :hide? t)
                              (("1" (lift-if) (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (expand "lookup")
                              (("2" (lift-if)
                                (("2"
                                  (apply (branch
                                          (split 1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("2"
                                    (apply (branch
                                            (split 2)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("2"
                                      (apply
                                       (branch
                                        (split 2)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("2" (postpone) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1" (skosimp*)
                              (("1" (inst -5 "x!1 - 1")
                                (("1" (assert)
                                  (("1" (apply (repeat (inst? -5 :where -3)))
                                    (("1" (assert)
                                      (("1"
                                        (split -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "check_for_exception")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (then
                                            (use
                                             "subterm_subset_of_var"
                                             ("b2" "b(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil)
                                         ("3"
                                          (apply
                                           (then
                                            (use
                                             "contains_no_method_call_preserved_by_proper_subterm"
                                             ("b2" "b(b!1)" "b1" "b!1"))
                                            (assert)
                                            (expand "<<")
                                            (assert)))
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (then
                                        (use
                                         "wf_Body_preserved_by_proper_subterm"
                                         ("b2" "b(b!1)" "b1" "b!1"))
                                        (assert)
                                        (expand "<<")
                                        (assert)))
                                      nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst-cp -6 "m1!1")
                                  (("1" (assert)
                                    (("1"
                                      (apply (repeat (inst? -7 :where -3)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (inst? 5)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "check_for_exception")
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split -5)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (inst? +)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst? 5)
                                                        (("1"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst -10 "m2!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (inst?
                                                             -10
                                                             :where
                                                             -3)))
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split -10)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "subterm_subset_of_var"
                                                                   ("b2"
                                                                    "b2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                   ("b2"
                                                                    "b2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (then
                                                              (use
                                                               "wf_Body_preserved_by_proper_subterm"
                                                               ("b2"
                                                                "b2(b!1)"
                                                                "b1"
                                                                "b!1"))
                                                              (assert)
                                                              (expand "<<")
                                                              (assert)))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst? +)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst? +)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (apply
                                                               (branch
                                                                (split +)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (then
                                          (use
                                           "wf_Body_preserved_by_proper_subterm"
                                           ("b2" "b1(b!1)" "b1" "b!1"))
                                          (assert)
                                          (expand "<<")
                                          (assert)))
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1" (skosimp*)
                                  (("1" (inst-cp -6 "m2!1")
                                    (("1" (inst -6 "m1!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (apply
                                           (repeat (inst? -6 :where -3)))
                                          (("1"
                                            (apply
                                             (repeat (inst? -7 :where -4)))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -6)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "check_for_exception")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "b2(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "b2(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "subterm_subset_of_var"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (apply
                                                   (then
                                                    (use
                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "b1(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "wf_Body_preserved_by_proper_subterm"
                                                 ("b2" "b2(b!1)" "b1" "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "wf_Body_preserved_by_proper_subterm"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1" (expand "lookup")
                                    (("1" (postpone) nil nil)) nil)
                                   ("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1" (expand "get_address")
                                      (("1"
                                        (expand "get_dynamic_type_name")
                                        (("1"
                                          (split 8)
                                          (("1"
                                            (apply-extensionality :hide? t)
                                            (("1"
                                              (lift-if)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -5 "x!1 - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (repeat (inst? -5 :where -3)))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split +)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "update_PState")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "source(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "source(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (then
                                                  (use
                                                   "wf_Body_preserved_by_proper_subterm"
                                                   ("b2"
                                                    "source(b!1)"
                                                    "b1"
                                                    "b!1"))
                                                  (assert)
                                                  (expand "<<")
                                                  (assert)))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst-cp -6 "m1!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -7 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -7)
                                                    (("1"
                                                      (inst? +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "check_for_exception")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split -5)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst? +)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -8
                                                                 "m2!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -2)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -8)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (lift-if)
                                                                              (("3"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   1)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "then_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "subterm_subset_of_var"
                                                                                     ("b2"
                                                                                      "else_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "then_expr(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil)
                                                                             ("5"
                                                                              (skosimp*)
                                                                              (("5"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "else_expr(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "else_expr(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "then_expr(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "test(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (apply
                                                       (then
                                                        (use
                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "test(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (then
                                                    (use
                                                     "wf_Body_preserved_by_proper_subterm"
                                                     ("b2"
                                                      "test(b!1)"
                                                      "b1"
                                                      "b!1"))
                                                    (assert)
                                                    (expand "<<")
                                                    (assert)))
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (expand "contains_no_method_call")
                                            (("1"
                                              (inst -4 "b!1")
                                              (("1"
                                                (expand "subterm")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (apply-extensionality :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (expand "execute_CaseJML")
                                                (("1"
                                                  (expand "extend")
                                                  (("1"
                                                    (expand "id")
                                                    (("1"
                                                      (expand
                                                       "return_of_stmt")
                                                      (("1"
                                                        (apply
                                                         (branch
                                                          (split +)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split -4)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split 1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -8
                                                                 "x!1 - 1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -8
                                                                       :where
                                                                       -3)))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         -8)
                                                                        (("1"
                                                                          (auto-rewrite
                                                                           "subset?"
                                                                           "union"
                                                                           "member")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "var_names"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -10
                                                                                     "x!2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "var_names"
                                                                                         16)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "contains_no_method_call")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (expand
                                                                               "subterm"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -10
                                                                                   "b1!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "subterm"
                                                                                       15)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "some_is_exists")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "member"
                                                                                           15)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               "subterm"
                                                                                               -1)
                                                                                              (("3"
                                                                                                (rewrite
                                                                                                 "some_is_exists")
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (inst?)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "wf_Branches"
                                                           1)
                                                          (("2"
                                                            (rewrite
                                                             "every_is_forall")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (expand
                                                                 "wf_Body")
                                                                (("2"
                                                                  (auto-rewrite
                                                                   "subset?"
                                                                   "member"
                                                                   "union")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (inst?
                                                                           -8)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "FORALL(b : list[[Expr, Stmt]], x : [Expr, Stmt], v : Name) : member(x, b) IMPLIES var_names(proj_1(x))(v) IMPLIES var_names(CaseJML(b))(v)")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "branches(b!1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "var_names"
                                                                                       (-1
                                                                                        14))
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (induct
                                                                                 "b")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "member")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      1))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -6)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("2"
                                                                            (expand
                                                                             "wf_Branches")
                                                                            (("2"
                                                                              (rewrite
                                                                               "every_is_forall")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "wf_Body")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "b1!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "ann_program_add_ghost_var_decls")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "var_names_union")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -13
                                                                                                       "target(b1!1)")
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -13)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "wf_new_vars")
                                                                                                          (("1"
                                                                                                            (auto-rewrite
                                                                                                             "disjoint?"
                                                                                                             "intersection"
                                                                                                             "empty?")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (inst?
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (inst?
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand*
                                                                                                                         "ext_declared_var_names"
                                                                                                                         "declared_var_names"
                                                                                                                         "reserved_words")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "subterm(b1!1, b!1)")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "subterm_subset_varnames2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "var_names")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "add")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "subterm_transitive"
                                                                                                             ("b1"
                                                                                                              "b1!1"
                                                                                                              "b2"
                                                                                                              "PROJ_1(x!2)"
                                                                                                              "b3"
                                                                                                              "b!1"))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subterm"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "some_is_exists")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "subterm")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (inst?
                                                                           -8)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (case
                                                                               "FORALL(b : list[[Expr, Stmt]], x : [Expr, Stmt], v : Name) : member(x, b) IMPLIES var_names(proj_2(x))(v) IMPLIES var_names(CaseJML(b))(v)")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "var_names"
                                                                                       (-1
                                                                                        14))
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (induct
                                                                                   "b")
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "member"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skosimp*)
                                                                        (("4"
                                                                          (apply
                                                                           (branch
                                                                            (split
                                                                             -6)
                                                                            ((then
                                                                              (flatten)
                                                                              (assert)
                                                                              (flatten)
                                                                              (assert)))))
                                                                          (("4"
                                                                            (expand
                                                                             "wf_Branches")
                                                                            (("4"
                                                                              (rewrite
                                                                               "every_is_forall")
                                                                              (("4"
                                                                                (inst?)
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (flatten)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "wf_Body")
                                                                                      (("4"
                                                                                        (flatten)
                                                                                        (("4"
                                                                                          (inst?
                                                                                           -4)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              (("4"
                                                                                                (rewrite
                                                                                                 "ann_program_add_ghost_var_decls"
                                                                                                 -4)
                                                                                                (("4"
                                                                                                  (rewrite
                                                                                                   "var_names_union")
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       -13
                                                                                                       "target(b1!1)")
                                                                                                      (("4"
                                                                                                        (split
                                                                                                         -13)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "wf_new_vars")
                                                                                                          (("1"
                                                                                                            (auto-rewrite
                                                                                                             "disjoint?"
                                                                                                             "intersection"
                                                                                                             "empty?")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand*
                                                                                                                 "declared_var_names"
                                                                                                                 "ext_declared_var_names"
                                                                                                                 "reserved_words")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (inst?
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst?
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "subterm(b1!1, b!1)")
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "subterm_subset_varnames2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "var_names")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "add")
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (use
                                                                                                             "subterm_transitive"
                                                                                                             ("b1"
                                                                                                              "b1!1"
                                                                                                              "b2"
                                                                                                              "proj_2(x!2)"
                                                                                                              "b3"
                                                                                                              "b!1"))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "subterm"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "some_is_exists")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subterm")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand "return_of_stmt")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst-cp -7 "m1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -8
                                                               :where
                                                               -4)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split -8)
                                                                (("1"
                                                                  (split +)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "check_for_exception")
                                                                            (("2"
                                                                              (apply
                                                                               (branch
                                                                                (split
                                                                                 -6)
                                                                                ((then
                                                                                  (flatten)
                                                                                  (assert)
                                                                                  (flatten)
                                                                                  (assert)))))
                                                                              (("1"
                                                                                (apply-extensionality
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -9
                                                                                 "m2!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (inst?
                                                                                       -9
                                                                                       :where
                                                                                       -2)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -9)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (lift-if)
                                                                                          (("3"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               1)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("1"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "then_stmt(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "subterm_subset_of_var"
                                                                                                 ("b2"
                                                                                                  "else_stmt(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skosimp*)
                                                                                          (("4"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "then_stmt(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (skosimp*)
                                                                                          (("5"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "else_stmt(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                           ("b2"
                                                                                            "else_stmt(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (apply
                                                                                         (then
                                                                                          (use
                                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                                           ("b2"
                                                                                            "then_stmt(b!1)"
                                                                                            "b1"
                                                                                            "b!1"))
                                                                                          (assert)
                                                                                          (expand
                                                                                           "<<")
                                                                                          (assert)))
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "test(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "test(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "test(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst-cp -7 "m2!1")
                                                      (("1"
                                                        (inst -7 "m1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -7
                                                               :where
                                                               -4)))
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -6)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split -7)
                                                                  (("1"
                                                                    (split -8)
                                                                    (("1"
                                                                      (expand
                                                                       "return_of_stmt")
                                                                      (("1"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "s2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "s2(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "subterm_subset_of_var"
                                                                       ("b2"
                                                                        "s1(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "s1(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (then
                                                                  (use
                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                   ("b2"
                                                                    "s2(b!1)"
                                                                    "b1"
                                                                    "b!1"))
                                                                  (assert)
                                                                  (expand
                                                                   "<<")
                                                                  (assert)))
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (then
                                                                (use
                                                                 "wf_Body_preserved_by_proper_subterm"
                                                                 ("b2"
                                                                  "s1(b!1)"
                                                                  "b1"
                                                                  "b!1"))
                                                                (assert)
                                                                (expand "<<")
                                                                (assert)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (expand
                                                       "return_of_stmt")
                                                      (("1"
                                                        (expand "execute_set")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split +)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "x!1 - 1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -7
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -7)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "update_GhostVars")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_store")
                                                                                    (("1"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         1)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   1)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     1)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "b!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "wf_Body")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "subterm")
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "subterm_subset_of_var"
                                                                             ("b2"
                                                                              "source(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "source(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "source(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (expand
                                                         "return_of_stmt")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (expand
                                                             "return_of_stmt")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split +)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -5
                                                                   "x!1 - 1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -5
                                                                         :where
                                                                         -4)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b2"
                                                                                "expr(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "expr(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "expr(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (expand
                                                             "return_of_stmt")
                                                            (("1"
                                                              (expand
                                                               "update_PState")
                                                              (("1"
                                                                (expand
                                                                 "raise")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "return_of_stmt")
                                                              (("1"
                                                                (split +)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -10
                                                                     "m1!1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -11
                                                                           :where
                                                                           -4)))
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -11)
                                                                            (("1"
                                                                              (inst?
                                                                               1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (apply
                                                                                     (branch
                                                                                      (split
                                                                                       -7)
                                                                                      ((then
                                                                                        (flatten)
                                                                                        (assert)
                                                                                        (flatten)
                                                                                        (assert)))))
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -14
                                                                                       "m2!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -15
                                                                                             :where
                                                                                             -3)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -15)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -15
                                                                                                 "m3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (repeat
                                                                                                      (inst?
                                                                                                       -15
                                                                                                       :where
                                                                                                       -12)))
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -15)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "make_MPState(mp!1)(tau2!1)"
                                                                                                           "make_MPState(mp!1)(tau3!1)"
                                                                                                           "v1!1"
                                                                                                           "v2!1"
                                                                                                           "v3!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "update_PState")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lift-if
                                                                                                                   -6)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       -6)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (branch
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            ((then
                                                                                                                              (flatten)
                                                                                                                              (assert)
                                                                                                                              (flatten)
                                                                                                                              (assert)))))
                                                                                                                          (("1"
                                                                                                                            (apply-extensionality
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (apply-extensionality
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (lift-if)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (apply
                                                                                                                           (branch
                                                                                                                            (split
                                                                                                                             2)
                                                                                                                            ((then
                                                                                                                              (flatten)
                                                                                                                              (assert)
                                                                                                                              (flatten)
                                                                                                                              (assert)))))
                                                                                                                          (("1"
                                                                                                                            (apply-extensionality
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("1"
                                                                                                                              (lift-if)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (apply-extensionality
                                                                                                                             :hide?
                                                                                                                             t)
                                                                                                                            (("2"
                                                                                                                              (lift-if)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "subterm_subset_of_var"
                                                                                                             ("b2"
                                                                                                              "finally(b!1)"
                                                                                                              "b1"
                                                                                                              "b!1"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")
                                                                                                            (assert)))
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (apply
                                                                                                           (then
                                                                                                            (use
                                                                                                             "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                             ("b2"
                                                                                                              "finally(b!1)"
                                                                                                              "b1"
                                                                                                              "b!1"))
                                                                                                            (assert)
                                                                                                            (expand
                                                                                                             "<<")
                                                                                                            (assert)))
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (apply
                                                                                                       (then
                                                                                                        (use
                                                                                                         "wf_Body_preserved_by_proper_subterm"
                                                                                                         ("b2"
                                                                                                          "finally(b!1)"
                                                                                                          "b1"
                                                                                                          "b!1"))
                                                                                                        (assert)
                                                                                                        (expand
                                                                                                         "<<")
                                                                                                        (assert)))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "catch(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                   ("b2"
                                                                                                    "catch(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "catch(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -12
                                                                                       "m3!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (inst?
                                                                                             -12
                                                                                             :where
                                                                                             -9)))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -12)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "make_MPState(mp!1)(tau2!1)"
                                                                                                 "make_MPState(mp!1)(tau3!1)"
                                                                                                 "v1!1"
                                                                                                 "v2!1"
                                                                                                 "v3!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "update_PState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "up?(ex(pstate(tau1!1)))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lift-if)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (apply
                                                                                                                   (branch
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    ((then
                                                                                                                      (flatten)
                                                                                                                      (assert)
                                                                                                                      (flatten)
                                                                                                                      (assert)))))
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (apply
                                                                                                                   (branch
                                                                                                                    (split
                                                                                                                     3)
                                                                                                                    ((then
                                                                                                                      (flatten)
                                                                                                                      (assert)
                                                                                                                      (flatten)
                                                                                                                      (assert)))))
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (split
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (apply-extensionality
                                                                                                                       :hide?
                                                                                                                       t)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "finally(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil)
                                                                                               ("3"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                   ("b2"
                                                                                                    "finally(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply
                                                                                             (then
                                                                                              (use
                                                                                               "wf_Body_preserved_by_proper_subterm"
                                                                                               ("b2"
                                                                                                "finally(b!1)"
                                                                                                "b1"
                                                                                                "b!1"))
                                                                                              (assert)
                                                                                              (expand
                                                                                               "<<")
                                                                                              (assert)))
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "subterm_subset_of_var"
                                                                                 ("b2"
                                                                                  "try(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "try(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "try(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "x!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (apply
                                                                     (repeat
                                                                      (inst?
                                                                       -5
                                                                       :where
                                                                       -4)))
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -5)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "return_of_stmt")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (auto-rewrite
                                                                           "subset?"
                                                                           "union"
                                                                           "member")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "var_names"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (case-replace
                                                                                         "While(test(b!1), body(b!1)) = b!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "var_names"
                                                                                             -2
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "emptyset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 22)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "contains_no_method_call")
                                                                          (("3"
                                                                            (skosimp*)
                                                                            (("3"
                                                                              (inst
                                                                               -7
                                                                               "b1!1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "subterm"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (case-replace
                                                                                     "While(test(b!1), body(b!1)) = b!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "subterm"
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           21)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "wf_Body")
                                                                      (("2"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (rewrite
                                                                             "var_names"
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (auto-rewrite
                                                                                 "subset?"
                                                                                 "union"
                                                                                 "member")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "While(test(b!1), body(b!1)) = b!1")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "var_names"
                                                                                             -2
                                                                                             2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "emptyset")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 22)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply-extensionality
                                                                                       :hide?
                                                                                       t)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skosimp*)
                                                                          (("2"
                                                                            (rewrite
                                                                             "subterm"
                                                                             -2)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case-replace
                                                                                 "While(test(b!1), body(b!1)) = b!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "b!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "wf_Body")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "subterm"
                                                                                               -4
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "subterm"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "execute_assert")
                                                                (("2"
                                                                  (expand
                                                                   "check_assertion")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (expand
                                                                       "return_of_stmt")
                                                                      (("2"
                                                                        (split
                                                                         +)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -6
                                                                           "x!1 - 1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (inst?
                                                                                 -6
                                                                                 :where
                                                                                 -3)))
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -6)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "update_PState")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 1)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -5)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   -5)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("2"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "subterm_subset_of_var"
                                                                                       ("b2"
                                                                                        "expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")
                                                                                      (assert)))
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                                                       ("b2"
                                                                                        "expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")
                                                                                      (assert)))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "wf_Body_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "expr(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "id")
          (("2" (skosimp*)
            (("2" (use "ann_program_preserves_wf_body") nil nil)) nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unfinished
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (ann_program_preserves_wf_body formula-decl nil AnnotateProgramProperties
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (extend const-decl "R" extend nil)
    (list_induction formula-decl nil list_adt nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (add const-decl "(nonempty?)" sets nil)
    (subterm_subset_varnames2 formula-decl nil ProgramFunctions nil)
    (subterm_transitive formula-decl nil ProgramFunctions nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (raise const-decl "PState" State nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (emptyset const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (update_store const-decl "Store" State nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (get_address const-decl "int" Semantics nil)
    (get_dynamic_type_name const-decl "Name" Semantics nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (initial_MVA_state const-decl "AState" MVACommonSemantics nil)
    (FALSE const-decl "bool" booleans nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (contains_no_method_call_preserved_by_proper_subterm formula-decl nil
     ContainsNoMethodCall nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (make_MPState const-decl "MPState" AnnotateProgramPropertiesPreservation
     nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil) (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   2464647 85040 t nil))
 (derive_equivalence_only_if 0
  (derive_equivalence_only_if-1 nil 3413195431 3414407384
   ("" (skolem 1 ("mp!1" _ _ _ _ _ _))
    (("" (lemma "wf_induction[nat, LAMBDA(i, j : nat) : i < j]")
      (("1"
        (inst -1
         "LAMBDA(n : nat) :  FORALL (b: (wf_Body(program(mp!1))), sMP1, sMP2: MPState, sAP : APState, v: Val) :
            contains_no_method_call(b) IMPLIES
             subset?(var_names(b), ext_declared_var_names(program(mp!1)))
              IMPLIES
              derive(mp!1)(b, sMP1, v, sMP2)(n) IMPLIES
               derive(ann_program(mp!1))
                     (b, make_APState(mp!1)(sMP1)(sAP), v, make_APState(mp!1)(sMP2)(sAP))(n)")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2"
                (auto-rewrite "make_APState" "check_for_exception_final"
                              "check_for_exception")
                (("2" (expand "derive" (-4 1))
                  (("2"
                    (apply (branch (split -4)
                            ((then (flatten) (assert) (flatten) (assert)))))
                    (("1" (apply-extensionality :hide? t)
                      (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (lift-if)
                      (("2"
                        (auto-rewrite "subterm_subset_of_var" "<<"
                                      "contains_no_method_call_preserved_by_proper_subterm")
                        (("2"
                          (apply (branch (split -1)
                                  ((then (flatten) (assert) (flatten)
                                    (assert)))))
                          (("1" (skosimp*)
                            (("1" (inst-cp -6 "m2!1")
                              (("1" (inst -6 "m1!1")
                                (("1" (assert)
                                  (("1" (apply (repeat (inst? -6 :where -3)))
                                    (("1"
                                      (apply (repeat (inst? -7 :where -4)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -6)
                                          (("1"
                                            (split -7)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "check_for_exception")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "subterm_subset_of_var"
                                                 ("b2" "b2(b!1)" "b1" "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil)
                                             ("3"
                                              (apply
                                               (then
                                                (use
                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                 ("b2" "b2(b!1)" "b1" "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b1(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (apply (branch (split -1)
                                    ((then (flatten) (assert) (flatten)
                                      (assert)))))
                            (("1" (expand "lookup")
                              (("1" (split 3)
                                (("1" (apply-extensionality :hide? t)
                                  (("1" (lift-if) (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (replace -4)
                                  (("2" (lift-if)
                                    (("2" (split 1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (split 2)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (use "wf_new_vars")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (-4 -5 -6 -13 -7))
                                                        (("1"
                                                          (auto-rewrite
                                                           "disjoint?"
                                                           "intersection"
                                                           "empty?"
                                                           "member"
                                                           "subset?"
                                                           "union")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand*
                                                                   "ext_declared_var_names"
                                                                   "declared_var_names"
                                                                   "reserved_words")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -3)
                                                                        ((assert))))
                                                                      (("1"
                                                                        (expand
                                                                         "var_names"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "singleton")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (apply (branch (split -1)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                              (("1" (skosimp*)
                                (("1" (inst -5 "x!1 - 1")
                                  (("1" (assert)
                                    (("1"
                                      (apply (repeat (inst? -5 :where -3)))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "check_for_exception")
                                              (("1"
                                                (inst?)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (then
                                              (use
                                               "subterm_subset_of_var"
                                               ("b2" "b(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil)
                                           ("3"
                                            (apply
                                             (then
                                              (use
                                               "contains_no_method_call_preserved_by_proper_subterm"
                                               ("b2" "b(b!1)" "b1" "b!1"))
                                              (assert)
                                              (expand "<<")
                                              (assert)))
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (apply (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                (("1" (skosimp*)
                                  (("1" (inst-cp -6 "m1!1")
                                    (("1" (assert)
                                      (("1"
                                        (apply (repeat (inst? -7 :where -3)))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -7)
                                            (("1"
                                              (inst? 5)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "check_for_exception")
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split -5)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst? +)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst? +)
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (inst -10 "m2!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (inst?
                                                               -10
                                                               :where
                                                               -3)))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (split -10)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "subterm_subset_of_var"
                                                                     ("b2"
                                                                      "b2(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (apply
                                                                   (then
                                                                    (use
                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                     ("b2"
                                                                      "b2(b!1)"
                                                                      "b1"
                                                                      "b!1"))
                                                                    (assert)
                                                                    (expand
                                                                     "<<")
                                                                    (assert)))
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst? +)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? +)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (apply
                                                                 (branch
                                                                  (split +)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (then
                                                (use
                                                 "subterm_subset_of_var"
                                                 ("b2" "b1(b!1)" "b1" "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil)
                                             ("3"
                                              (apply
                                               (then
                                                (use
                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                 ("b2" "b1(b!1)" "b1" "b!1"))
                                                (assert)
                                                (expand "<<")
                                                (assert)))
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (apply (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                  (("1" (skosimp*)
                                    (("1" (inst-cp -6 "m2!1")
                                      (("1"
                                        (inst -6 "m1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (apply
                                             (repeat (inst? -6 :where -3)))
                                            (("1"
                                              (apply
                                               (repeat (inst? -7 :where -4)))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (split -7)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "check_for_exception")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "b2(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (apply
                                                       (then
                                                        (use
                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "b2(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (then
                                                      (use
                                                       "subterm_subset_of_var"
                                                       ("b2"
                                                        "b1(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (apply
                                                     (then
                                                      (use
                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                       ("b2"
                                                        "b1(b!1)"
                                                        "b1"
                                                        "b!1"))
                                                      (assert)
                                                      (expand "<<")
                                                      (assert)))
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                    (("1" (expand "lookup")
                                      (("1"
                                        (split 7)
                                        (("1"
                                          (apply-extensionality :hide? t)
                                          (("1"
                                            (lift-if)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -4)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (use "wf_new_vars")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but
                                                         (-4 -5 -7 -8 -13))
                                                        (("2"
                                                          (auto-rewrite
                                                           "disjoint?"
                                                           "intersection"
                                                           "empty?"
                                                           "member"
                                                           "subset?"
                                                           "union"
                                                           "singleton")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (apply
                                                               (repeat
                                                                (inst?)))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand*
                                                                   "ext_declared_var_names"
                                                                   "declared_var_names"
                                                                   "reserved_words")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -3)
                                                                        ((assert))))
                                                                      (("2"
                                                                        (expand
                                                                         "var_names"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (expand "get_address")
                                        (("1"
                                          (expand "get_dynamic_type_name")
                                          (("1"
                                            (split 8)
                                            (("1"
                                              (apply-extensionality :hide? t)
                                              (("1"
                                                (lift-if)
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply
                                         (branch
                                          (split -1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (inst -5 "x!1 - 1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (apply
                                                 (repeat
                                                  (inst? -5 :where -3)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -5)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (branch
                                                                (split +)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (apply-extensionality
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "update_PState")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (apply-extensionality
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (then
                                                        (use
                                                         "subterm_subset_of_var"
                                                         ("b2"
                                                          "source(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (apply
                                                       (then
                                                        (use
                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                         ("b2"
                                                          "source(b!1)"
                                                          "b1"
                                                          "b!1"))
                                                        (assert)
                                                        (expand "<<")
                                                        (assert)))
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (branch
                                            (split -1)
                                            ((then
                                              (flatten)
                                              (assert)
                                              (flatten)
                                              (assert)))))
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst-cp -6 "m1!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (inst? -7 :where -3)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -7)
                                                      (("1"
                                                        (inst? +)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "check_for_exception")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split -5)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (inst? +)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -8
                                                                   "m2!1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -2)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -8)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (lift-if)
                                                                                (("3"
                                                                                  (apply
                                                                                   (branch
                                                                                    (split
                                                                                     1)
                                                                                    ((then
                                                                                      (flatten)
                                                                                      (assert)
                                                                                      (flatten)
                                                                                      (assert)))))
                                                                                  (("1"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "subterm_subset_of_var"
                                                                                       ("b2"
                                                                                        "then_expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")
                                                                                      (assert)))
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (apply
                                                                                     (then
                                                                                      (use
                                                                                       "subterm_subset_of_var"
                                                                                       ("b2"
                                                                                        "else_expr(b!1)"
                                                                                        "b1"
                                                                                        "b!1"))
                                                                                      (assert)
                                                                                      (expand
                                                                                       "<<")
                                                                                      (assert)))
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "then_expr(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (apply
                                                                                   (then
                                                                                    (use
                                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                                     ("b2"
                                                                                      "else_expr(b!1)"
                                                                                      "b1"
                                                                                      "b!1"))
                                                                                    (assert)
                                                                                    (expand
                                                                                     "<<")
                                                                                    (assert)))
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (apply
                                                                           (then
                                                                            (use
                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                             ("b2"
                                                                              "else_expr(b!1)"
                                                                              "b1"
                                                                              "b!1"))
                                                                            (assert)
                                                                            (expand
                                                                             "<<")
                                                                            (assert)))
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "wf_Body_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "then_expr(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (then
                                                          (use
                                                           "subterm_subset_of_var"
                                                           ("b2"
                                                            "test(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand "<<")
                                                          (assert)))
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (apply
                                                         (then
                                                          (use
                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                           ("b2"
                                                            "test(b!1)"
                                                            "b1"
                                                            "b!1"))
                                                          (assert)
                                                          (expand "<<")
                                                          (assert)))
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply
                                             (branch
                                              (split -1)
                                              ((then
                                                (flatten)
                                                (assert)
                                                (flatten)
                                                (assert)))))
                                            (("1"
                                              (expand
                                               "contains_no_method_call")
                                              (("1"
                                                (inst -4 "b!1")
                                                (("1"
                                                  (expand "subterm")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (branch
                                                (split -1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (lift-if)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply
                                                 (branch
                                                  (split -1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (expand "execute_CaseJML")
                                                  (("1"
                                                    (expand "extend")
                                                    (("1"
                                                      (expand "id")
                                                      (("1"
                                                        (expand
                                                         "return_of_stmt")
                                                        (("1"
                                                          (apply
                                                           (branch
                                                            (split +)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -4)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (apply
                                                                 (branch
                                                                  (split 1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (apply-extensionality
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -8
                                                                   "x!1 - 1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -8
                                                                         :where
                                                                         -3)))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -8)
                                                                          (("1"
                                                                            (auto-rewrite
                                                                             "subset?"
                                                                             "union"
                                                                             "member")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -10
                                                                                       "x!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           16)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "contains_no_method_call")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (expand
                                                                                 "subterm"
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -10
                                                                                     "b1!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "subterm"
                                                                                         15)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "some_is_exists")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "member"
                                                                                             15)
                                                                                            (("2"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "subterm"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (rewrite
                                                                                                   "some_is_exists")
                                                                                                  (("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (inst?)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -3)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("2"
                                                              (rewrite
                                                               "wf_Body_CaseJML"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (rewrite
                                                                 "wf_Body_CaseJML"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (use
                                                                   "ann_program_preserves_wf_body")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (expand
                                                       "return_of_stmt")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst-cp -7 "m1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -8
                                                                 :where
                                                                 -4)))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split -8)
                                                                  (("1"
                                                                    (split +)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "check_for_exception")
                                                                              (("2"
                                                                                (apply
                                                                                 (branch
                                                                                  (split
                                                                                   -6)
                                                                                  ((then
                                                                                    (flatten)
                                                                                    (assert)
                                                                                    (flatten)
                                                                                    (assert)))))
                                                                                (("1"
                                                                                  (apply-extensionality
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -9
                                                                                   "m2!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (inst?
                                                                                         -9
                                                                                         :where
                                                                                         -2)))
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -9)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lift-if)
                                                                                            (("3"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 1)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "then_stmt(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (apply
                                                                                                 (then
                                                                                                  (use
                                                                                                   "subterm_subset_of_var"
                                                                                                   ("b2"
                                                                                                    "else_stmt(b!1)"
                                                                                                    "b1"
                                                                                                    "b!1"))
                                                                                                  (assert)
                                                                                                  (expand
                                                                                                   "<<")
                                                                                                  (assert)))
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (skosimp*)
                                                                                            (("4"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "then_stmt(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (skosimp*)
                                                                                            (("5"
                                                                                              (apply
                                                                                               (then
                                                                                                (use
                                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                 ("b2"
                                                                                                  "else_stmt(b!1)"
                                                                                                  "b1"
                                                                                                  "b!1"))
                                                                                                (assert)
                                                                                                (expand
                                                                                                 "<<")
                                                                                                (assert)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "else_stmt(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp*)
                                                                                        (("3"
                                                                                          (apply
                                                                                           (then
                                                                                            (use
                                                                                             "wf_Body_preserved_by_proper_subterm"
                                                                                             ("b2"
                                                                                              "then_stmt(b!1)"
                                                                                              "b1"
                                                                                              "b!1"))
                                                                                            (assert)
                                                                                            (expand
                                                                                             "<<")
                                                                                            (assert)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "subterm_subset_of_var"
                                                                       ("b2"
                                                                        "test(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (apply
                                                                     (then
                                                                      (use
                                                                       "contains_no_method_call_preserved_by_proper_subterm"
                                                                       ("b2"
                                                                        "test(b!1)"
                                                                        "b1"
                                                                        "b!1"))
                                                                      (assert)
                                                                      (expand
                                                                       "<<")
                                                                      (assert)))
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply
                                                     (branch
                                                      (split -1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst-cp -7 "m2!1")
                                                        (("1"
                                                          (inst -7 "m1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -7
                                                                 :where
                                                                 -4)))
                                                              (("1"
                                                                (apply
                                                                 (repeat
                                                                  (inst?
                                                                   -8
                                                                   :where
                                                                   -6)))
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split -7)
                                                                    (("1"
                                                                      (split
                                                                       -8)
                                                                      (("1"
                                                                        (expand
                                                                         "return_of_stmt")
                                                                        (("1"
                                                                          (split
                                                                           +)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "subterm_subset_of_var"
                                                                           ("b2"
                                                                            "s2(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (apply
                                                                         (then
                                                                          (use
                                                                           "contains_no_method_call_preserved_by_proper_subterm"
                                                                           ("b2"
                                                                            "s2(b!1)"
                                                                            "b1"
                                                                            "b!1"))
                                                                          (assert)
                                                                          (expand
                                                                           "<<")
                                                                          (assert)))
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "subterm_subset_of_var"
                                                                         ("b2"
                                                                          "s1(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (apply
                                                                       (then
                                                                        (use
                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                         ("b2"
                                                                          "s1(b!1)"
                                                                          "b1"
                                                                          "b!1"))
                                                                        (assert)
                                                                        (expand
                                                                         "<<")
                                                                        (assert)))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (branch
                                                        (split -1)
                                                        ((then
                                                          (flatten)
                                                          (assert)
                                                          (flatten)
                                                          (assert)))))
                                                      (("1"
                                                        (expand
                                                         "return_of_stmt")
                                                        (("1"
                                                          (expand
                                                           "execute_set")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst
                                                                   -7
                                                                   "x!1 - 1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -7
                                                                         :where
                                                                         -4)))
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           -7)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "update_GhostVars")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "update_store")
                                                                                      (("1"
                                                                                        (apply
                                                                                         (branch
                                                                                          (split
                                                                                           1)
                                                                                          ((then
                                                                                            (flatten)
                                                                                            (assert)
                                                                                            (flatten)
                                                                                            (assert)))))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   1)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "wf_new_vars")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (lift-if)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (branch
                                                                                                            (split
                                                                                                             1)
                                                                                                            ((then
                                                                                                              (flatten)
                                                                                                              (assert)
                                                                                                              (flatten)
                                                                                                              (assert)))))
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-4
                                                                                                                -5
                                                                                                                -6
                                                                                                                -8
                                                                                                                -15))
                                                                                                              (("1"
                                                                                                                (auto-rewrite
                                                                                                                 "disjoint?"
                                                                                                                 "intersection"
                                                                                                                 "empty?"
                                                                                                                 "member"
                                                                                                                 "subset?"
                                                                                                                 "union"
                                                                                                                 "singleton"
                                                                                                                 "add")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (repeat
                                                                                                                      (inst?)))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand*
                                                                                                                         "ext_declared_var_names"
                                                                                                                         "declared_var_names"
                                                                                                                         "reserved_words")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (branch
                                                                                                                              (split
                                                                                                                               -3)
                                                                                                                              ((then
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)))))
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "subterm_subset_of_var"
                                                                               ("b2"
                                                                                "source(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (apply
                                                                             (then
                                                                              (use
                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                               ("b2"
                                                                                "source(b!1)"
                                                                                "b1"
                                                                                "b!1"))
                                                                              (assert)
                                                                              (expand
                                                                               "<<")
                                                                              (assert)))
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (apply
                                                         (branch
                                                          (split -1)
                                                          ((then
                                                            (flatten)
                                                            (assert)
                                                            (flatten)
                                                            (assert)))))
                                                        (("1"
                                                          (expand
                                                           "return_of_stmt")
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply
                                                           (branch
                                                            (split -1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("1"
                                                            (skosimp*)
                                                            (("1"
                                                              (expand
                                                               "return_of_stmt")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split +)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -5
                                                                     "x!1 - 1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (apply
                                                                         (repeat
                                                                          (inst?
                                                                           -5
                                                                           :where
                                                                           -4)))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "subterm_subset_of_var"
                                                                                 ("b2"
                                                                                  "expr(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (apply
                                                                               (then
                                                                                (use
                                                                                 "contains_no_method_call_preserved_by_proper_subterm"
                                                                                 ("b2"
                                                                                  "expr(b!1)"
                                                                                  "b1"
                                                                                  "b!1"))
                                                                                (assert)
                                                                                (expand
                                                                                 "<<")
                                                                                (assert)))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (branch
                                                              (split -1)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("1"
                                                              (expand
                                                               "return_of_stmt")
                                                              (("1"
                                                                (expand
                                                                 "update_PState")
                                                                (("1"
                                                                  (expand
                                                                   "raise")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (branch
                                                                (split -1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              (("1"
                                                                (expand
                                                                 "return_of_stmt")
                                                                (("1"
                                                                  (split +)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst-cp
                                                                       -10
                                                                       "m1!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (apply
                                                                           (repeat
                                                                            (inst?
                                                                             -11
                                                                             :where
                                                                             -4)))
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -11)
                                                                              (("1"
                                                                                (inst?
                                                                                 1)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -7)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -14
                                                                                         "m2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -15
                                                                                               :where
                                                                                               -3)))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -15)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -15
                                                                                                   "m3!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -15
                                                                                                         :where
                                                                                                         -12)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -15)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "make_APState(mp!1)(tau2!1)(sAP!1)"
                                                                                                             "make_APState(mp!1)(tau3!1)(sAP!1)"
                                                                                                             "v1!1"
                                                                                                             "v2!1"
                                                                                                             "v3!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "update_PState")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (branch
                                                                                                                        (split
                                                                                                                         -6)
                                                                                                                        ((then
                                                                                                                          (flatten)
                                                                                                                          (assert)
                                                                                                                          (flatten)
                                                                                                                          (assert)))))
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (branch
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              ((then
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)))))
                                                                                                                            (("1"
                                                                                                                              (apply-extensionality
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (apply-extensionality
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (apply
                                                                                                                             (branch
                                                                                                                              (split
                                                                                                                               2)
                                                                                                                              ((then
                                                                                                                                (flatten)
                                                                                                                                (assert)
                                                                                                                                (flatten)
                                                                                                                                (assert)))))
                                                                                                                            (("1"
                                                                                                                              (apply-extensionality
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (apply-extensionality
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "subterm_subset_of_var"
                                                                                                               ("b2"
                                                                                                                "finally(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (apply
                                                                                                             (then
                                                                                                              (use
                                                                                                               "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                               ("b2"
                                                                                                                "finally(b!1)"
                                                                                                                "b1"
                                                                                                                "b!1"))
                                                                                                              (assert)
                                                                                                              (expand
                                                                                                               "<<")
                                                                                                              (assert)))
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "catch(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")
                                                                                                    (assert)))
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                     ("b2"
                                                                                                      "catch(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")
                                                                                                    (assert)))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -12
                                                                                         "m3!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -12
                                                                                               :where
                                                                                               -9)))
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "make_APState(mp!1)(tau2!1)(sAP!1)"
                                                                                                   "make_APState(mp!1)(tau3!1)(sAP!1)"
                                                                                                   "v1!1"
                                                                                                   "v2!1"
                                                                                                   "v3!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "update_PState")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "up?(ex(pstate(tau1!1)))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lift-if)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (apply
                                                                                                                     (branch
                                                                                                                      (split
                                                                                                                       3)
                                                                                                                      ((then
                                                                                                                        (flatten)
                                                                                                                        (assert)
                                                                                                                        (flatten)
                                                                                                                        (assert)))))
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (split
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (lift-if)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "subterm_subset_of_var"
                                                                                                     ("b2"
                                                                                                      "finally(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")
                                                                                                    (assert)))
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (apply
                                                                                                   (then
                                                                                                    (use
                                                                                                     "contains_no_method_call_preserved_by_proper_subterm"
                                                                                                     ("b2"
                                                                                                      "finally(b!1)"
                                                                                                      "b1"
                                                                                                      "b!1"))
                                                                                                    (assert)
                                                                                                    (expand
                                                                                                     "<<")
                                                                                                    (assert)))
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "subterm_subset_of_var"
                                                                                   ("b2"
                                                                                    "try(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (apply
                                                                                 (then
                                                                                  (use
                                                                                   "contains_no_method_call_preserved_by_proper_subterm"
                                                                                   ("b2"
                                                                                    "try(b!1)"
                                                                                    "b1"
                                                                                    "b!1"))
                                                                                  (assert)
                                                                                  (expand
                                                                                   "<<")
                                                                                  (assert)))
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (apply
                                                                 (branch
                                                                  (split -1)
                                                                  ((then
                                                                    (flatten)
                                                                    (assert)
                                                                    (flatten)
                                                                    (assert)))))
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "x!1 - 1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (repeat
                                                                        (inst?
                                                                         -5
                                                                         :where
                                                                         -4)))
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "return_of_stmt")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (auto-rewrite
                                                                             "subset?"
                                                                             "union"
                                                                             "member")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "var_names"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "While(test(b!1), body(b!1)) = b!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "var_names"
                                                                                               -2
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "emptyset")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   22)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "contains_no_method_call")
                                                                            (("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (inst
                                                                                 -7
                                                                                 "b1!1")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "subterm"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (case-replace
                                                                                       "While(test(b!1), body(b!1)) = b!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           -2
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "subterm"
                                                                                             21)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (apply-extensionality
                                                                                         :hide?
                                                                                         t)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "execute_assert")
                                                                  (("2"
                                                                    (expand
                                                                     "check_assertion")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (expand
                                                                         "return_of_stmt")
                                                                        (("2"
                                                                          (split
                                                                           +)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -6
                                                                             "x!1 - 1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (apply
                                                                                 (repeat
                                                                                  (inst?
                                                                                   -6
                                                                                   :where
                                                                                   -3)))
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -6)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "update_PState")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (branch
                                                                                                  (split
                                                                                                   1)
                                                                                                  ((then
                                                                                                    (flatten)
                                                                                                    (assert)
                                                                                                    (flatten)
                                                                                                    (assert)))))
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (apply
                                                                                                   (branch
                                                                                                    (split
                                                                                                     -5)
                                                                                                    ((then
                                                                                                      (flatten)
                                                                                                      (assert)
                                                                                                      (flatten)
                                                                                                      (assert)))))
                                                                                                  (("2"
                                                                                                    (apply-extensionality
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "subterm_subset_of_var"
                                                                                         ("b2"
                                                                                          "expr(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (apply
                                                                                       (then
                                                                                        (use
                                                                                         "contains_no_method_call_preserved_by_proper_subterm"
                                                                                         ("b2"
                                                                                          "expr(b!1)"
                                                                                          "b1"
                                                                                          "b!1"))
                                                                                        (assert)
                                                                                        (expand
                                                                                         "<<")
                                                                                        (assert)))
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "id")
          (("2" (skosimp*)
            (("2" (use "ann_program_preserves_wf_body") nil nil)) nil))
          nil))
        nil)
       ("2" (use "wf_nat") nil nil))
      nil))
    nil)
   unchecked
   ((< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (b2 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (contains_no_method_call_preserved_by_proper_subterm formula-decl nil
     ContainsNoMethodCall nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (subterm_subset_of_var formula-decl nil ProgramFunctions nil)
    (b1 shared-adt-accessor-decl
     "[{x: Body | Eq?(x) OR Conj?(x) OR Plus?(x)} -> Expr]" Body_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (b adt-accessor-decl "[(Neg?) -> Expr]" Body_adt nil)
    (get_dynamic_type_name const-decl "Name" Semantics nil)
    (get_address const-decl "int" Semantics nil)
    (test shared-adt-accessor-decl
     "[{x: Body | While?(x) OR IfThenElse?(x) OR CondExpr?(x)} -> Expr]"
     Body_adt nil)
    (else_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (then_expr adt-accessor-decl "[(CondExpr?) -> Expr]" Body_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (wf_Body_preserved_by_proper_subterm formula-decl nil WellFormedProgram
     nil)
    (else_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (then_stmt adt-accessor-decl "[(IfThenElse?) -> Stmt]" Body_adt nil)
    (update_store const-decl "Store" State nil)
    (add const-decl "(nonempty?)" sets nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (expr shared-adt-accessor-decl
          "[{x: Body | Assert?(x) OR StmtExpr?(x)} -> Expr]" Body_adt nil)
    (try adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (finally adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (catch const-decl "PState" State nil)
    (catch adt-accessor-decl "[(TryCatch?) -> Stmt]" Body_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (Skip adt-constructor-decl "(Skip?)" Body_adt nil)
    (body adt-accessor-decl "[(While?) -> Stmt]" Body_adt nil)
    (While adt-constructor-decl "[[Expr, Stmt] -> (While?)]" Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (Body_While_extensionality formula-decl nil Body_adt nil)
    (raise const-decl "PState" State nil)
    (s1 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (s2 adt-accessor-decl "[(Sequence?) -> Stmt]" Body_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (branches adt-accessor-decl "[(CaseJML?) -> list[[Expr, Stmt]]]" Body_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IfThenElse adt-constructor-decl "[[Expr, Stmt, Stmt] -> (IfThenElse?)]"
     Body_adt nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (member def-decl "bool" list_props nil)
    (wf_Body_CaseJML formula-decl nil WellFormedProgram nil)
    (ann_program_preserves_wf_body formula-decl nil AnnotateProgramProperties
     nil)
    (extend const-decl "R" extend nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (source shared-adt-accessor-decl
     "[{x: Body | Set?(x) OR Assign?(x)} -> Expr]" Body_adt nil)
    (nonempty_singleton_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (varname shared-adt-accessor-decl
     "[{x: Body | RefVarEval?(x) OR BoolVarEval?(x) OR NumVarEval?(x)} -> Name]"
     Body_adt nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (singleton const-decl "(singleton?)" sets nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil) (disjoint? const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (make_APState const-decl "APState" AnnotateProgramPropertiesPreservation
     nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Body type-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" MonitoredProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     MonitoredProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil) (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   1922865 59650 t shostak))
 (ann_actions_contains_no_method_calls 0
  (ann_actions_contains_no_method_calls-1 nil 3410526069 3413195262
   ("" (induct "l")
    (("1" (expand "ann_action")
      (("1" (expand "contains_no_method_call")
        (("1" (skosimp*)
          (("1" (expand "subterm") (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "contains_no_method_call")
        (("2" (skosimp*)
          (("2" (expand "ann_action" -3)
            (("2" (rewrite "subterm" -3)
              (("2" (assert)
                (("2" (split -3)
                  (("1" (rewrite "subterm" -1)
                    (("1" (inst? -3)
                      (("1" (assert)
                        (("1" (expand "member")
                          (("1" (inst? -3) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "member" -5)
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]" Body_adt
     nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (OneAction type-eq-decl nil MVA nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (Body type-decl nil Body_adt nil) (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Action type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   6169 1830 t shostak))
 (contains_no_method_call_preserved_by_ann_program 0
  (contains_no_method_call_preserved_by_ann_program-1 nil 3410181070
   3413195271
   ("" (skosimp*)
    (("" (expand "contains_no_method_call_in_sets_in_program")
      (("" (expand "program_method_pred")
        (("" (skosimp*)
          (("" (expand "ann_program" -2)
            (("" (skosimp*)
              (("" (inst?)
                (("" (assert)
                  (("" (replace -3 :hide? t)
                    (("" (expand "ann_class" -3)
                      (("" (split -3)
                        (("1" (flatten)
                          (("1" (expand "ann_methods")
                            (("1" (skosimp*)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1"
                                    (expand "contains_no_method_call_in_sets")
                                    (("1" (replace -3)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "contains_no_method_call")
                                          (("1"
                                            (expand "ann_method" 1)
                                            (("1"
                                              (case "wf_MVA(mva(mp!1))")
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "subterm" -1)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "subterm"
                                                           -1)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "ann_event")
                                                              (("1"
                                                                (expand
                                                                 "subterm"
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "some_is_exists")
                                                                  (("1"
                                                                    (skosimp*)
                                                                    (("1"
                                                                      (use
                                                                       "set2list_same_elements")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (hide
                                                                               -8
                                                                               -9
                                                                               -10)
                                                                              (("1"
                                                                                (expand
                                                                                 "ann_event_set")
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -3
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "ann_trans_cp")
                                                                                      (("1"
                                                                                        (split
                                                                                         -3)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -1)))
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "is_finite[Transition[CP, Name]]
                             ({t: Transition[CP, Name] |
                                 filter_event[CP, Name](mva(mp!1))(Entry)(name(n!1))(t) AND
                                  scp(t) = q!1})")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "some_is_exists")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "ann_guard_actions")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "set2list_same_elements")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ann_guard_actions_set")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "guard_to_expression_contains_no_method_calls")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "contains_no_method_call")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "filter_event")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "update_vars")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "subterm"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (rewrite
                                                                                                                               "subterm"
                                                                                                                               -1)))
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "ann_actions_contains_no_method_calls")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "contains_no_method_call")
                                                                                                                                  (("1"
                                                                                                                                    (inst?)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (use
                                                                                                                                     "action_sources_contains_no_method_calls")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (expand
                                                                                                                                           "filter_event")
                                                                                                                                          (("2"
                                                                                                                                            (flatten)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "filter_event_cp_is_finite")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (apply
                                                               (repeat
                                                                (rewrite
                                                                 "subterm"
                                                                 -1)))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (rewrite "subterm" -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (inst? -8)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -8 -9 -10)
                                                          (("2"
                                                            (expand
                                                             "ann_event")
                                                            (("2"
                                                              (rewrite
                                                               "subterm"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "some_is_exists")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (use
                                                                     "set2list_same_elements")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (expand
                                                                             "ann_event_set")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ann_trans_cp")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -3)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -1)))
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "is_finite[Transition[CP, Name]]
                           ({t: Transition[CP, Name] |
                               filter_event[CP, Name](mva(mp!1))(ExitNormal)(name(n!1))(t)
                                AND scp(t) = q!1})")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "some_is_exists")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "ann_guard_actions")
                                                                                                  (("1"
                                                                                                    (use
                                                                                                     "set2list_same_elements")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "ann_guard_actions_set")
                                                                                                            (("1"
                                                                                                              (skosimp*)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "guard_to_expression_contains_no_method_calls")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "contains_no_method_call")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "filter_event")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "update_vars")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "subterm"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (rewrite
                                                                                                                               "subterm"
                                                                                                                               -1)))
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "ann_actions_contains_no_method_calls")
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "contains_no_method_call")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (use
                                                                                                                                   "action_sources_contains_no_method_calls")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst?)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (expand
                                                                                                                                         "filter_event")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "filter_event_cp_is_finite")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (rewrite "subterm" -1)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (split -1)
                                                        (("1"
                                                          (inst? -9)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -7 -8 -9)
                                                          (("2"
                                                            (expand
                                                             "ann_event")
                                                            (("2"
                                                              (rewrite
                                                               "subterm"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "some_is_exists")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (use
                                                                     "set2list_same_elements")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "member")
                                                                          (("2"
                                                                            (expand
                                                                             "ann_event_set")
                                                                            (("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (expand
                                                                                   "ann_trans_cp")
                                                                                  (("2"
                                                                                    (split
                                                                                     -3)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (rewrite
                                                                                         "subterm"
                                                                                         -1)))
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "is_finite[Transition[CP, Name]]
                           ({t: Transition[CP, Name] |
                               filter_event[CP, Name]
                                   (mva(mp!1))(ExitExceptional)(name(n!1))(t)
                                AND scp(t) = q!1})")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "subterm"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "some_is_exists")
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ann_guard_actions")
                                                                                              (("1"
                                                                                                (use
                                                                                                 "set2list_same_elements")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "ann_guard_actions_set")
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "filter_event")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (use
                                                                                                                       "guard_to_expression_contains_no_method_calls")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "contains_no_method_call")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "update_vars")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "subterm"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (apply
                                                                                                                             (repeat
                                                                                                                              (rewrite
                                                                                                                               "subterm"
                                                                                                                               -1)))
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (use
                                                                                                                             "ann_actions_contains_no_method_calls")
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "contains_no_method_call")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (use
                                                                                                                                   "action_sources_contains_no_method_calls")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "filter_event_cp_is_finite")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "mva(mp!1)")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "contains_no_method_call_in_sets")
                          (("2" (expand "contains_no_method_call")
                            (("2" (inst -2 "m!1")
                              (("2" (flatten) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((contains_no_method_call_in_sets_in_program const-decl "bool"
     ContainsNoMethodCall nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (contains_no_method_call const-decl "bool" ContainsNoMethodCall nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set2list def-decl "list[T]" set2list nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (action_sources_contains_no_method_calls formula-decl nil MVAMonitoring
     nil)
    (ann_actions_contains_no_method_calls formula-decl nil
     AnnotateProgramPropertiesPreservation nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]" Body_adt
     nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (guard_to_expression_contains_no_method_calls formula-decl nil
     MVAMonitoring nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent nil)
    (filter_event_cp_is_finite formula-decl nil AnnotateMethod nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}" VariableNames nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (member const-decl "bool" sets nil) (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (contains_no_method_call_in_sets const-decl "bool" ContainsNoMethodCall
     nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil))
   8387 7890 t shostak))
 (APStateToAStore_unchanged_by_completion 0
  (APStateToAStore_unchanged_by_completion-1 nil 3430134177 3430134192
   ("" (skosimp*)
    (("" (expand "APStateToAStore")
      (("" (expand "APStateToAStore")
        (("" (expand "complete_MP")
          (("" (expand "complete_MVA") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((APStateToAStore const-decl "[APState -> Store]"
     AnnotateProgramPropertiesPreservation nil)
    (complete_MP const-decl "MonitoredProgram" CompleteMonitor nil)
    (complete_MVA const-decl "MVA" MVACompletion nil)
    (APStateToAStore const-decl "Store" Equivalence nil))
   15308 430 t shostak))
 (well_behaved_MVA_appropriate_for_annot_gen_TCC1 0
  (well_behaved_MVA_appropriate_for_annot_gen_TCC1-1 nil 3413189842 3413195185
   ("" (skosimp*)
    (("" (typepred "mp!1")
      (("" (expand "wf_and_complete_MP") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unchecked
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   10200 1310 t nil))
 (well_behaved_MVA_appropriate_for_annot_gen 0
  (well_behaved_MVA_appropriate_for_annot_gen-1 nil 3414400907 3430136016
   ("" (skosimp*)
    (("" (expand "well_behaved_MVA_for_annot_gen")
      (("" (expand "well_behaved_MVA")
        (("" (flatten)
          (("" (split 1)
            (("1" (hide -2)
              (("1" (expand "guard_to_expression_behavior")
                (("1" (skosimp*)
                  (("1" (inst -5 "t!1" "ann_program(mp!1)" "sAP!1" "arg!1")
                    (("1" (assert)
                      (("1" (inst 2 "guard_to_expression(guard(t!1))" _ _)
                        (("1" (use "guard_to_expression_wf_Expr")
                          (("1" (assert)
                            (("1" (skosimp*)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (apply-extensionality :hide? t)
                                    (("1" (replace -7)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case-replace
                                           "stA(sMVA!1) = APStateToAStore(mp!1)(sAP!1)")
                                          (("1"
                                            (hide-all-but (-3 -4 1))
                                            (("1"
                                              (apply-extensionality :hide? t)
                                              (("1"
                                                (expand "MVA_vars_modeled?")
                                                (("1"
                                                  (expand "wf_store")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand
                                                         "APStateToAStore")
                                                        (("1"
                                                          (expand
                                                           "APStateToAStore")
                                                          (("1"
                                                            (expand
                                                             "complete_MP")
                                                            (("1"
                                                              (expand
                                                               "complete_MVA")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (apply
                                                                   (branch
                                                                    (split 1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  (("1"
                                                                    (expand
                                                                     "defined?")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "eval_action_behavior")
                (("2" (skosimp*)
                  (("2" (inst -7 "t!1" "oa!1" "ann_program(mp!1)" "sAP!1")
                    (("2" (assert)
                      (("2" (use "wf_Body_MVA_implies_wf_Body")
                        (("2" (expand "wf_Expr")
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (inst?)
                                (("2"
                                  (case-replace
                                   "stA(sMVA!1) = APStateToAStore(mp!1)(sAP!1)")
                                  (("2" (hide-all-but (-6 -7 1))
                                    (("2" (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "wf_store")
                                        (("2"
                                          (expand "MVA_vars_modeled?")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "APStateToAStore")
                                                (("2"
                                                  (expand "APStateToAStore")
                                                  (("2"
                                                    (expand "complete_MP")
                                                    (("2"
                                                      (expand "complete_MVA")
                                                      (("2"
                                                        (expand "defined?")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (apply
                                                               (branch
                                                                (split 1)
                                                                ((then
                                                                  (flatten)
                                                                  (assert)
                                                                  (flatten)
                                                                  (assert)))))
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((well_behaved_MVA const-decl "boolean" WellBehavedMVA nil)
    (guard_to_expression_behavior const-decl "boolean" WellBehavedMVA nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (EventType type-decl nil EventType_adt nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (guard_to_expression const-decl "[ValOrExcpt -> Expr]" MVAMonitoring nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (v!1 skolem-const-decl "Val[Name]" AnnotateProgramPropertiesPreservation
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (complete_MP const-decl "MonitoredProgram" CompleteMonitor nil)
    (complete_MVA const-decl "MVA" MVACompletion nil)
    (APStateToAStore const-decl "Store" Equivalence nil)
    (wf_store const-decl "boolean" State nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_and_partial_MP const-decl "boolean" MonitoredProgram nil)
    (APStateToAStore const-decl "[APState -> Store]"
     AnnotateProgramPropertiesPreservation nil)
    (guard_to_expression_wf_Expr formula-decl nil AnnotateProgramProperties
     nil)
    (eval_action_behavior const-decl "boolean" WellBehavedMVA nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (OneAction type-eq-decl nil MVA nil)
    (wf_Body_MVA_implies_wf_Body formula-decl nil AnnotateProgramProperties
     nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (well_behaved_MVA_for_annot_gen const-decl "boolean" Equivalence nil))
   348884 9470 t shostak))
 (wf_set_stmts_preserved_by_ann_program 0
  (wf_set_stmts_preserved_by_ann_program-2 nil 3413196193 3414152250
   ("" (skosimp*)
    (("" (use "well_behaved_MVA_appropriate_for_annot_gen")
      (("" (assert)
        (("" (hide -3)
          (("" (expand "wf_set_stmts")
            (("" (expand "id")
              (("" (expand "program_method_pred")
                (("" (skosimp*)
                  (("" (expand "ann_program" -4)
                    (("" (skosimp*)
                      (("" (inst?)
                        (("" (assert)
                          (("" (replace -5 :hide? t)
                            (("" (expand "ann_class")
                              (("" (split -5)
                                (("1" (flatten)
                                  (("1" (expand "wf_set_stmts")
                                    (("1" (expand "id")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "only_JMLExc")
                                          (("1"
                                            (expand "no_exc")
                                            (("1"
                                              (expand "no_change")
                                              (("1"
                                                (expand "ann_methods")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (replace -3 :hide? t)
                                                    (("1"
                                                      (inst -4 "n!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "program(mp!1)")
                                                          (("1"
                                                            (expand
                                                             "wf_Program")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (expand
                                                                   "program_pred")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -5)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (skosimp*)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -4
                                                                                         -5
                                                                                         -6)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "ann_method"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "derive"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (apply
                                                                                               (branch
                                                                                                (split
                                                                                                 -1)
                                                                                                ((then
                                                                                                  (flatten)
                                                                                                  (assert)
                                                                                                  (flatten)
                                                                                                  (assert)))))
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "derive_equivalence_if")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (apply
                                                                                                         (repeat
                                                                                                          (inst?
                                                                                                           -8
                                                                                                           :where
                                                                                                           -1)))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "make_MPState")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "up?(ex(pstate(tau!1)))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "derive"
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "derive"
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (skosimp*)
                                                                                                                        (("2"
                                                                                                                          (use
                                                                                                                           "ann_event_does_not_throw_exception")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "derive"
                                                                                                                                 -9)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "execute_assert")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "check_assertion")
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "derive"
                                                                                                                                           -11)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "derive"
                                                                                                                                               -12)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "derive"
                                                                                                                                                   -13)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "derive"
                                                                                                                                                     -14)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "check_for_exception_final")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "check_for_exception")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -19)
                                                                                                                                                              (("1"
                                                                                                                                                                (lift-if)
                                                                                                                                                                (("1"
                                                                                                                                                                  (apply
                                                                                                                                                                   (branch
                                                                                                                                                                    (split
                                                                                                                                                                     5)
                                                                                                                                                                    ((then
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (assert)
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (assert)))))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "update_PState")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "raise")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "wf_Method")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "method_pred")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -11)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "wf_Body")
                                                                                                              (("2"
                                                                                                                (expand*
                                                                                                                 "subset?"
                                                                                                                 "member")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (expand
                                                                                                         "contains_no_method_call_in_sets_in_program")
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "program_method_pred")
                                                                                                          (("3"
                                                                                                            (inst?
                                                                                                             -12)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (inst?
                                                                                                                 -12)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "contains_no_method_call_in_sets")
                                                                                                                    (("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (inst?
                                                                                                                         -12)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "method_pred")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst?
                                                                                                         -11)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -3
                                                                                         -5
                                                                                         -6)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "ann_method"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "derive"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "derive_equivalence_if")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -8
                                                                                                           :where
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "make_MPState")
                                                                                                              (("1"
                                                                                                                (use
                                                                                                                 "ann_event_does_not_throw_exception")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "wf_Method")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "method_pred")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               "subset?"
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -12)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "wf_Body")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "contains_no_method_call_in_sets_in_program")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "program_method_pred")
                                                                                                            (("3"
                                                                                                              (inst?
                                                                                                               -12)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (inst?
                                                                                                                   -12)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "contains_no_method_call_in_sets")
                                                                                                                      (("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (inst?
                                                                                                                           -13)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "method_pred")
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -12)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skosimp*)
                                                                                      (("3"
                                                                                        (hide
                                                                                         -3
                                                                                         -4
                                                                                         -6)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "ann_method"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "derive"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (flatten)
                                                                                                (("3"
                                                                                                  (skosimp*)
                                                                                                  (("3"
                                                                                                    (use
                                                                                                     "derive_equivalence_if")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -8
                                                                                                           :where
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "make_MPState")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "ann_event_does_not_throw_exception")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "wf_Method")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "method_pred")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (inst?
                                                                                                               -13)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "wf_Body")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     "subset?"
                                                                                                                     "member")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (expand
                                                                                                           "contains_no_method_call_in_sets_in_program")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "program_method_pred")
                                                                                                            (("3"
                                                                                                              (inst?
                                                                                                               -12)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (inst?
                                                                                                                   -12)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "contains_no_method_call_in_sets")
                                                                                                                      (("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (inst?
                                                                                                                           -14)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "method_pred")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -13)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (skosimp*)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "ann_method"
                                                                                         -1)
                                                                                        (("4"
                                                                                          (rewrite
                                                                                           "derive"
                                                                                           -1)
                                                                                          (("4"
                                                                                            (apply
                                                                                             (branch
                                                                                              (split
                                                                                               -1)
                                                                                              ((then
                                                                                                (flatten)
                                                                                                (assert)
                                                                                                (flatten)
                                                                                                (assert)))))
                                                                                            (("4"
                                                                                              (skosimp*)
                                                                                              (("4"
                                                                                                (use
                                                                                                 "derive_equivalence_if")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -11
                                                                                                         :where
                                                                                                         -1)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "make_MPState")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "up?(ex(pstate(tau!1)))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "derive"
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ann_event")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "derive"
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "execute_CaseJML")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "extend")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (apply
                                                                                                                               (branch
                                                                                                                                (split
                                                                                                                                 -5)
                                                                                                                                ((then
                                                                                                                                  (flatten)
                                                                                                                                  (assert)
                                                                                                                                  (flatten)
                                                                                                                                  (assert)))))
                                                                                                                              (("2"
                                                                                                                                (lift-if)
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (branch
                                                                                                                                    (split
                                                                                                                                     -2)
                                                                                                                                    ((then
                                                                                                                                      (flatten)
                                                                                                                                      (assert)
                                                                                                                                      (flatten)
                                                                                                                                      (assert)))))
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "method_pred")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -15)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "wf_Body")
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               "subset?"
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "contains_no_method_call_in_sets_in_program")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "program_method_pred")
                                                                                                        (("3"
                                                                                                          (inst?
                                                                                                           -15)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (inst?
                                                                                                               -15)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "contains_no_method_call_in_sets")
                                                                                                                  (("3"
                                                                                                                    (flatten)
                                                                                                                    (("3"
                                                                                                                      (inst?
                                                                                                                       -16)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -15)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "methods")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ann_program")
                                                                                      (("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -8
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ann_class")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (split
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "ann_methods")
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (flatten)
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (expand "wf_set_stmts")
                                        (("2"
                                          (expand "id")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (split -3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "only_JMLExc")
                                                  (("1"
                                                    (expand "no_exc")
                                                    (("1"
                                                      (typepred
                                                       "program(mp!1)")
                                                      (("1"
                                                        (expand "wf_Program")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (hide -1 -2 -3 -4)
                                                            (("1"
                                                              (expand
                                                               "program_pred")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "contains_no_method_call_in_sets_in_program")
                                                                            (("1"
                                                                              (expand
                                                                               "program_method_pred")
                                                                              (("1"
                                                                                (inst?
                                                                                 -8)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -8)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "contains_no_method_call_in_sets")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (split
                                                                                             2)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "derive_equivalence_if")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -5
                                                                                                       :where
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "make_MPState")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "method_pred")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           "subset?"
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "wf_Body")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (inst?
                                                                                                       -10)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -6)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp*)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "derive_equivalence_if")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -6
                                                                                                       :where
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "make_MPState")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "method_pred")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (inst?
                                                                                                           -7)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "wf_Body")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand*
                                                                                                                 "subset?"
                                                                                                                 "member")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (inst?
                                                                                                       -11)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -7)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (skosimp*)
                                                                                              (("3"
                                                                                                (use
                                                                                                 "derive_equivalence_if")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -13)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst?
                                                                                                         -7
                                                                                                         :where
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "make_MPState")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "method_pred")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -8)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "wf_Body")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (expand*
                                                                                                                     "subset?"
                                                                                                                     "member")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (skosimp*)
                                                                                              (("4"
                                                                                                (hide
                                                                                                 -2
                                                                                                 -3
                                                                                                 -4)
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "no_change")
                                                                                                  (("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (use
                                                                                                       "derive_equivalence_if")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst?
                                                                                                             -5
                                                                                                             :where
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "make_MPState")
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "method_pred")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst?
                                                                                                                 -7)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "wf_Body")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (expand*
                                                                                                                       "subset?"
                                                                                                                       "member")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (inst?
                                                                                                             -8)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "method_pred")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -7)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 3)
                                                (("2"
                                                  (expand "methods")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand "ann_program")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (replace
                                                           -6
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "ann_class")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (split -6)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "ann_methods")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((well_behaved_MVA_appropriate_for_annot_gen formula-decl nil
     AnnotateProgramPropertiesPreservation nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (only_JMLExc const-decl "bool" WfSetStmts nil)
    (no_change const-decl "bool" WfSetStmts nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (extend const-decl "R" extend nil)
    (id_preserves application-judgement "S" identity_props nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (derive_equivalence_if formula-decl nil
     AnnotateProgramPropertiesPreservation nil)
    (ann_event_does_not_throw_exception formula-decl nil
     AnnEventPreservesMPModeled nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (raise const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (make_MPState const-decl "MPState" AnnotateProgramPropertiesPreservation
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (contains_no_method_call_in_sets const-decl "bool" ContainsNoMethodCall
     nil)
    (contains_no_method_call_in_sets_in_program const-decl "bool"
     ContainsNoMethodCall nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (bijective? const-decl "bool" functions nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}" VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]" Body_adt
     nil)
    (derive def-decl "bool" Semantics nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil))
   902945 30220 t nil)
  (wf_set_stmts_preserved_by_ann_program-1 nil 3410541769 3413195356
   ("" (skosimp*)
    (("" (expand "wf_set_stmts")
      (("" (expand "id")
        (("" (expand "program_method_pred")
          (("" (skosimp*)
            (("" (expand "ann_program" -4)
              (("" (skosimp*)
                (("" (inst?)
                  (("" (assert)
                    (("" (replace -5 :hide? t)
                      (("" (expand "ann_class")
                        (("" (split -5)
                          (("1" (flatten)
                            (("1" (expand "wf_set_stmts")
                              (("1" (expand "id")
                                (("1" (skosimp*)
                                  (("1" (expand "only_JMLExc")
                                    (("1" (expand "no_exc")
                                      (("1"
                                        (expand "ann_methods")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (replace -3 :hide? t)
                                            (("1"
                                              (inst -3 "n!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "program(mp!1)")
                                                  (("1"
                                                    (expand "wf_Program")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1 -2 -3 -4)
                                                        (("1"
                                                          (expand
                                                           "program_pred")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (hide -1)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -4)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (skosimp*)
                                                                              (("1"
                                                                                (hide
                                                                                 -4
                                                                                 -5)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ann_method"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "derive"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (apply
                                                                                       (branch
                                                                                        (split
                                                                                         -1)
                                                                                        ((then
                                                                                          (flatten)
                                                                                          (assert)
                                                                                          (flatten)
                                                                                          (assert)))))
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (use
                                                                                           "derive_equivalence")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (apply
                                                                                                 (repeat
                                                                                                  (inst?
                                                                                                   -8
                                                                                                   :where
                                                                                                   -1)))
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "make_MPState")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "up?(ex(pstate(tau!1)))")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "derive"
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "derive"
                                                                                                             -5)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skosimp*)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "ann_event_does_not_throw_exception")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "derive"
                                                                                                                         -9)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "execute_assert")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "check_assertion")
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "derive"
                                                                                                                                   -11)
                                                                                                                                  (("1"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "derive"
                                                                                                                                       -12)
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "derive"
                                                                                                                                           -13)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "derive"
                                                                                                                                             -14)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "check_for_exception_final")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "check_for_exception")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -19)
                                                                                                                                                      (("1"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("1"
                                                                                                                                                          (apply
                                                                                                                                                           (branch
                                                                                                                                                            (split
                                                                                                                                                             5)
                                                                                                                                                            ((then
                                                                                                                                                              (flatten)
                                                                                                                                                              (assert)
                                                                                                                                                              (flatten)
                                                                                                                                                              (assert)))))
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "update_PState")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "raise")
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "wf_Method")
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (typepred
                                                                                                                     "mp!1")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "wf_and_complete_MP")
                                                                                                                      (("3"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "method_pred")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -11)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "wf_Body")
                                                                                                      (("2"
                                                                                                        (expand*
                                                                                                         "subset?"
                                                                                                         "member")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "contains_no_method_call_in_sets_in_program")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "program_method_pred")
                                                                                                  (("3"
                                                                                                    (inst?
                                                                                                     -12)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      (("3"
                                                                                                        (inst?
                                                                                                         -12)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "contains_no_method_call_in_sets")
                                                                                                            (("3"
                                                                                                              (flatten)
                                                                                                              (("3"
                                                                                                                (inst?
                                                                                                                 -12)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "method_pred")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -11)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (hide
                                                                                 -3
                                                                                 -5)
                                                                                (("2"
                                                                                  (expand
                                                                                   "ann_method"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "derive"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (use
                                                                                             "derive_equivalence")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -8
                                                                                                   :where
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_MPState")
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "ann_event_does_not_throw_exception")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "wf_Method")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (typepred
                                                                                                           "mp!1")
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "wf_and_complete_MP")
                                                                                                            (("3"
                                                                                                              (flatten)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       "subset?"
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (inst?
                                                                                                         -12)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "wf_Body")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "contains_no_method_call_in_sets_in_program")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "program_method_pred")
                                                                                                    (("3"
                                                                                                      (inst?
                                                                                                       -12)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (inst?
                                                                                                           -12)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "contains_no_method_call_in_sets")
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (inst?
                                                                                                                   -13)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "method_pred")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -12)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (hide
                                                                                 -3
                                                                                 -4)
                                                                                (("3"
                                                                                  (expand
                                                                                   "ann_method"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "derive"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (skosimp*)
                                                                                          (("3"
                                                                                            (use
                                                                                             "derive_equivalence")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -8
                                                                                                   :where
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_MPState")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (use
                                                                                                           "ann_event_does_not_throw_exception")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "wf_Method")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (typepred
                                                                                                             "mp!1")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "wf_and_complete_MP")
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -13)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "wf_Body")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             "subset?"
                                                                                                             "member")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "contains_no_method_call_in_sets_in_program")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "program_method_pred")
                                                                                                    (("3"
                                                                                                      (inst?
                                                                                                       -12)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (inst?
                                                                                                           -12)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "contains_no_method_call_in_sets")
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (inst?
                                                                                                                   -14)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "method_pred")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -13)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "methods")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (inst?)
                              (("2" (assert)
                                (("2" (expand "wf_set_stmts")
                                  (("2" (expand "id")
                                    (("2" (skosimp*)
                                      (("2"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "only_JMLExc")
                                            (("1"
                                              (expand "no_exc")
                                              (("1"
                                                (typepred "program(mp!1)")
                                                (("1"
                                                  (expand "wf_Program")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1 -2 -3 -4)
                                                      (("1"
                                                        (expand
                                                         "program_pred")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide -1)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "contains_no_method_call_in_sets_in_program")
                                                                      (("1"
                                                                        (expand
                                                                         "program_method_pred")
                                                                        (("1"
                                                                          (inst?
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst?
                                                                               -7)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "contains_no_method_call_in_sets")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (split
                                                                                       2)
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (use
                                                                                           "derive_equivalence")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -5
                                                                                                 :where
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "make_MPState")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "method_pred")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "subset?"
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "wf_Body")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (inst?
                                                                                                 -9)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "method_pred")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -6)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        (("2"
                                                                                          (use
                                                                                           "derive_equivalence")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -6
                                                                                                 :where
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "make_MPState")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "method_pred")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (inst?
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "wf_Body")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           "subset?"
                                                                                                           "member")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (inst?
                                                                                                 -10)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "method_pred")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -7)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skosimp*)
                                                                                        (("3"
                                                                                          (use
                                                                                           "derive_equivalence")
                                                                                          (("1"
                                                                                            (inst?
                                                                                             -12)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -7
                                                                                                   :where
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "make_MPState")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "method_pred")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "wf_Body")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               "subset?"
                                                                                                               "member")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "method_pred")
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -8)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 3)
                                          (("2"
                                            (expand "methods")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (expand "ann_program")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (replace -6 :hide? t)
                                                    (("2"
                                                      (expand "ann_class")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "ann_methods")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (replace -3)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((program_method_pred const-decl "bool" ProgramRestriction nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (no_exc const-decl "bool" WfSetStmts nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ann_event_does_not_throw_exception formula-decl nil
     AnnEventPreservesMPModeled nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (check_assertion const-decl "boolean" SemanticsJML nil)
    (raise const-decl "PState" State nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (make_MPState const-decl "MPState" AnnotateProgramPropertiesPreservation
     nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVACommonSemantics nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (contains_no_method_call_in_sets const-decl "bool" ContainsNoMethodCall
     nil)
    (contains_no_method_call_in_sets_in_program const-decl "bool"
     ContainsNoMethodCall nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (bijective? const-decl "bool" functions nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}" VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]" Body_adt
     nil)
    (derive def-decl "bool" Semantics nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (only_JMLExc const-decl "bool" WfSetStmts nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   85283 78700 t shostak))
 (ann_action_contains_no_TryCatch 0
  (ann_action_contains_no_TryCatch-1 nil 3414386341 nil
   (";;; Proof ann_actions_contains_no_TryCatch-1 for formula AnnotateProgramPropertiesPreservation.ann_actions_contains_no_TryCatch"
    (induct "l")
    (("1" (skosimp*)
      (("1" (expand* "ann_action" "subterm") (("1" (assert) nil)))))
     ("2" (skosimp*)
      (("2" (expand "ann_action" -3)
        (("2" (expand "subterm" -3)
          (("2" (assert)
            (("2" (split -3)
              (("1" (expand "subterm" -1)
                (("1" (inst? -3)
                  (("1" (assert)
                    (("1" (expand "member" 1) (("1" (propax) nil)))))))))
               ("2" (inst?)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "member" 1)
                          (("2" (propax) nil))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked nil nil nil nil nil))
 (legal_Body_preserved_by_ann_program 0
  (legal_Body_preserved_by_ann_program-1 nil 3414388232 3414389287
   ("" (skosimp*)
    (("" (expand "legal_Body_complete_MP")
      (("" (expand "legal_Body_AP")
        (("" (expand "legal_Body")
          (("" (skosimp*)
            (("" (inst?)
              (("" (assert)
                (("" (case "wf_Body(program(mp!1))(b1!1) ")
                  (("1" (assert)
                    (("1" (expand "id") (("1" (postpone) nil nil)) nil)) nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 205765 4980 t nil))
 (legal_Program_preserved_by_ann_program 0
  (legal_Program_preserved_by_ann_program-1 nil 3414314379 3414389056
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        (("" (flatten)
          (("" (hide -1 -2 -3 -4)
            ((""
              (expand* "legal_Program_complete_MP" "legal_Program_AP"
               "legal_Program" "program_pred" "method_pred")
              (("" (skosimp*)
                (("" (expand "ann_program" -3)
                  (("" (skosimp*)
                    (("" (inst -1 "c1!1")
                      (("" (inst -2 "c1!1")
                        (("" (assert)
                          (("" (flatten)
                            (("" (replace -6 :hide? t)
                              (("" (split 1)
                                (("1" (hide -2 -4)
                                  (("1" (expand "ann_class")
                                    (("1"
                                      (use
                                       "legal_Body_preserved_by_ann_program"
                                       ("b" "inv(c1!1)"))
                                      (("1"
                                        (expand*
                                         "legal_Body_complete_MP"
                                         "legal_Body_AP")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (hide -3)
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split 1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (expand "legal_Body")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (expand "subterm" -2)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (apply
                                                             (repeat
                                                              (rewrite
                                                               "subterm"
                                                               -1)))
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            (("3"
                                                              (apply
                                                               (repeat
                                                                (inst?
                                                                 -10
                                                                 :where
                                                                 (-6 -7 -9))))
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand*
                                               "wf_Body"
                                               "subset?"
                                               "member")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skosimp*)
                                  (("2" (expand "ann_class")
                                    (("2"
                                      (apply
                                       (branch
                                        (split -1)
                                        ((then
                                          (flatten)
                                          (assert)
                                          (flatten)
                                          (assert)))))
                                      (("1"
                                        (expand "ann_methods")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (replace -3 :hide? t)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (auto-rewrite-theory
                                                         "AnnotateMethod[CP, Name]")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (use
                                                                 "legal_Body_preserved_by_ann_program")
                                                                (("1"
                                                                  (expand*
                                                                   "legal_Body_complete_MP"
                                                                   "legal_Body_AP")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?
                                                                       -13)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst?
                                                                           -4)
                                                                          (("1"
                                                                            (expand*
                                                                             "wf_Body"
                                                                             "subset?"
                                                                             "member")
                                                                            (("1"
                                                                              (flatten)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (use
                                                                 "legal_Body_preserved_by_ann_program")
                                                                (("2"
                                                                  (expand*
                                                                   "legal_Body_complete_MP"
                                                                   "legal_Body_AP")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?
                                                                       -14)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst?
                                                                           -5)
                                                                          (("2"
                                                                            (expand*
                                                                             "wf_Body"
                                                                             "subset?"
                                                                             "member")
                                                                            (("2"
                                                                              (flatten)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (use
                                                               "legal_Body_preserved_by_ann_program")
                                                              (("3"
                                                                (expand*
                                                                 "legal_Body_complete_MP"
                                                                 "legal_Body_AP")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand*
                                                                     "wf_Body"
                                                                     "subset?"
                                                                     "member")
                                                                    (("3"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (skosimp*)
                                                              (("4"
                                                                (use
                                                                 "legal_Body_preserved_by_ann_program"
                                                                 ("b"
                                                                  "pre_set(n!1)(v!1)"))
                                                                (("4"
                                                                  (expand*
                                                                   "legal_Body_complete_MP"
                                                                   "legal_Body_AP")
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (inst?
                                                                       -16)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (1
                                                                              -1))
                                                                            (("1"
                                                                              (expand
                                                                               "legal_Body")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subterm"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -2
                                                                                               :where
                                                                                               (-6
                                                                                                -7
                                                                                                -9))))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subterm"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (hide-all-but
                                                                                               (-1
                                                                                                -3))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "ann_event")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "subterm")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "some_is_exists")
                                                                                                    (("1"
                                                                                                      (skosimp*)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "set2list_same_elements")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "member")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "ann_event_set")
                                                                                                                (("1"
                                                                                                                  (skosimp*)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "ann_trans_cp")
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -3)
                                                                                                                        (("1"
                                                                                                                          (apply
                                                                                                                           (repeat
                                                                                                                            (rewrite
                                                                                                                             "subterm"
                                                                                                                             -1)))
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "subterm")
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "some_is_exists")
                                                                                                                            (("1"
                                                                                                                              (skosimp*)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "ann_guard_actions")
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "set2list_same_elements")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "member")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "ann_guard_actions_set")
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -5
                                                                                                                                               :hide?
                                                                                                                                               t)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (split
                                                                                                                                                   -5)
                                                                                                                                                  (("1"
                                                                                                                                                    (use
                                                                                                                                                     "guard_to_expression_contains_no_TryCatch")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "update_vars")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "subterm"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (apply
                                                                                                                                                           (repeat
                                                                                                                                                            (rewrite
                                                                                                                                                             "subterm"
                                                                                                                                                             -1)))
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (use
                                                                                                                                                           "ann_action_contains_no_TryCatch")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (use
                                                                                                                                                                 "action_sources_contains_no_TryCatch")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (typepred
                                                                                                                                     "ts(mva(mp!1))")
                                                                                                                                    (("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (1
                                                                                                                                        -1))
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "is_finite")
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             1
                                                                                                                                             "N!1"
                                                                                                                                             "f!1")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "injective?")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "restrict")
                                                                                                                                                (("2"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "ts(mva(mp!1))")
                                                                                                                              (("2"
                                                                                                                                (hide-all-but
                                                                                                                                 (-1
                                                                                                                                  1))
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "is_finite")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "N!1"
                                                                                                                                       "f!1")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "injective?")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "restrict")
                                                                                                                                          (("2"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("2"
                                                                                                                                              (inst?)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (apply
                                                                                               (repeat
                                                                                                (rewrite
                                                                                                 "subterm"
                                                                                                 -1)))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -7)
                                                                            (("2"
                                                                              (expand*
                                                                               "wf_Body"
                                                                               "subset?"
                                                                               "member")
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (skosimp*)
                                                              (("5"
                                                                (use
                                                                 "legal_Body_preserved_by_ann_program"
                                                                 ("b"
                                                                  "post_set(n!1)(v!1)"))
                                                                (("5"
                                                                  (expand*
                                                                   "legal_Body_complete_MP"
                                                                   "legal_Body_AP")
                                                                  (("5"
                                                                    (assert)
                                                                    (("5"
                                                                      (inst?
                                                                       -17)
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (1
                                                                              -1))
                                                                            (("1"
                                                                              (expand
                                                                               "legal_Body")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subterm"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -2
                                                                                               :where
                                                                                               (-6
                                                                                                -7
                                                                                                -9))))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -3))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ann_event")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subterm")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "some_is_exists")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "set2list_same_elements")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ann_event_set")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ann_trans_cp")
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (repeat
                                                                                                                        (rewrite
                                                                                                                         "subterm")))
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "subterm")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "some_is_exists")
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ann_guard_actions")
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "set2list_same_elements")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "ann_guard_actions_set")
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -5
                                                                                                                                           :hide?
                                                                                                                                           t)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -5)
                                                                                                                                              (("1"
                                                                                                                                                (use
                                                                                                                                                 "guard_to_expression_contains_no_TryCatch")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_vars")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "subterm"
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (split
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (rewrite
                                                                                                                                                         "subterm"
                                                                                                                                                         -1)))
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (use
                                                                                                                                                       "ann_action_contains_no_TryCatch")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (use
                                                                                                                                                             "action_sources_contains_no_TryCatch")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "ts(mva(mp!1))")
                                                                                                                                (("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (1
                                                                                                                                    -1))
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "is_finite")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "N!1"
                                                                                                                                         "f!1")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "injective?")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "restrict")
                                                                                                                                            (("2"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (typepred
                                                                                                                           "ts(mva(mp!1))")
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             (1
                                                                                                                              -1))
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "is_finite")
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "N!1"
                                                                                                                                   "f!1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "injective?")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "restrict")
                                                                                                                                      (("2"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -8)
                                                                            (("2"
                                                                              (expand*
                                                                               "wf_Body"
                                                                               "subset?"
                                                                               "member")
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (skosimp*)
                                                              (("6"
                                                                (use
                                                                 "legal_Body_preserved_by_ann_program"
                                                                 ("b"
                                                                  "exc_set(n!1)(e!1)"))
                                                                (("6"
                                                                  (expand*
                                                                   "legal_Body_complete_MP"
                                                                   "legal_Body_AP")
                                                                  (("6"
                                                                    (assert)
                                                                    (("6"
                                                                      (inst?
                                                                       -18)
                                                                      (("6"
                                                                        (assert)
                                                                        (("6"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("1"
                                                                              (expand
                                                                               "legal_Body")
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "subterm"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (apply
                                                                                             (repeat
                                                                                              (inst?
                                                                                               -2
                                                                                               :where
                                                                                               (-6
                                                                                                -7
                                                                                                -9))))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -3))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ann_event")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "subterm")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "some_is_exists")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "set2list_same_elements")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "ann_event_set")
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -3
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "ann_trans_cp")
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -3)
                                                                                                                    (("1"
                                                                                                                      (apply
                                                                                                                       (repeat
                                                                                                                        (rewrite
                                                                                                                         "subterm"
                                                                                                                         -1)))
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "subterm")
                                                                                                                      (("2"
                                                                                                                        (rewrite
                                                                                                                         "some_is_exists")
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ann_guard_actions")
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "set2list_same_elements")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "ann_guard_actions_set")
                                                                                                                                      (("1"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -5
                                                                                                                                           :hide?
                                                                                                                                           t)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -5)
                                                                                                                                              (("1"
                                                                                                                                                (use
                                                                                                                                                 "guard_to_expression_contains_no_TryCatch")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand
                                                                                                                                                 "update_vars")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "subterm"
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (split
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (apply
                                                                                                                                                       (repeat
                                                                                                                                                        (rewrite
                                                                                                                                                         "subterm"
                                                                                                                                                         -1)))
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (use
                                                                                                                                                       "ann_action_contains_no_TryCatch")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (use
                                                                                                                                                             "action_sources_contains_no_TryCatch")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "ts(mva(mp!1))")
                                                                                                                                (("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   (1
                                                                                                                                    -1))
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "is_finite")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "N!1"
                                                                                                                                         "f!1")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "injective?")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "restrict")
                                                                                                                                            (("2"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (typepred
                                                                                                                           "ts(mva(mp!1))")
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             (1
                                                                                                                              -1))
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "is_finite")
                                                                                                                              (("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "N!1"
                                                                                                                                   "f!1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "injective?")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "restrict")
                                                                                                                                      (("2"
                                                                                                                                        (skosimp*)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst?
                                                                             -9)
                                                                            (("2"
                                                                              (expand*
                                                                               "wf_Body"
                                                                               "subset?"
                                                                               "member")
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (use
                                                               "legal_Body_preserved_by_ann_program")
                                                              (("7"
                                                                (expand*
                                                                 "legal_Body_AP"
                                                                 "legal_Body_complete_MP")
                                                                (("7"
                                                                  (assert)
                                                                  (("7"
                                                                    (expand*
                                                                     "wf_Body"
                                                                     "subset?"
                                                                     "member")
                                                                    (("7"
                                                                      (flatten)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst?)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (use
                                                     "legal_Body_preserved_by_ann_program")
                                                    (("1"
                                                      (expand*
                                                       "legal_Body_complete_MP"
                                                       "legal_Body_AP")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst? -12)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst? -3)
                                                              (("1"
                                                                (expand*
                                                                 "wf_Body"
                                                                 "subset?"
                                                                 "member")
                                                                (("1"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (use
                                                     "legal_Body_preserved_by_ann_program")
                                                    (("2"
                                                      (expand*
                                                       "legal_Body_complete_MP"
                                                       "legal_Body_AP")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst? -13)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst? -4)
                                                              (("2"
                                                                (expand*
                                                                 "wf_Body"
                                                                 "subset?"
                                                                 "member")
                                                                (("2"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (use
                                                   "legal_Body_preserved_by_ann_program")
                                                  (("3"
                                                    (expand*
                                                     "legal_Body_complete_MP"
                                                     "legal_Body_AP")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand*
                                                         "wf_Body"
                                                         "subset?"
                                                         "member")
                                                        (("3"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skosimp*)
                                                  (("4"
                                                    (use
                                                     "legal_Body_preserved_by_ann_program")
                                                    (("4"
                                                      (expand*
                                                       "legal_Body_complete_MP"
                                                       "legal_Body_AP")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (inst? -15)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (inst? -6)
                                                              (("4"
                                                                (expand*
                                                                 "wf_Body"
                                                                 "subset?"
                                                                 "member")
                                                                (("4"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (skosimp*)
                                                  (("5"
                                                    (use
                                                     "legal_Body_preserved_by_ann_program")
                                                    (("5"
                                                      (expand*
                                                       "legal_Body_complete_MP"
                                                       "legal_Body_AP")
                                                      (("5"
                                                        (assert)
                                                        (("5"
                                                          (inst? -16)
                                                          (("5"
                                                            (assert)
                                                            (("5"
                                                              (inst? -7)
                                                              (("5"
                                                                (expand*
                                                                 "wf_Body"
                                                                 "subset?"
                                                                 "member")
                                                                (("5"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (skosimp*)
                                                  (("6"
                                                    (use
                                                     "legal_Body_preserved_by_ann_program")
                                                    (("6"
                                                      (expand*
                                                       "legal_Body_complete_MP"
                                                       "legal_Body_AP")
                                                      (("6"
                                                        (assert)
                                                        (("6"
                                                          (inst? -17)
                                                          (("6"
                                                            (assert)
                                                            (("6"
                                                              (inst? -8)
                                                              (("6"
                                                                (expand*
                                                                 "wf_Body"
                                                                 "subset?"
                                                                 "member")
                                                                (("6"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (use
                                                   "legal_Body_preserved_by_ann_program")
                                                  (("7"
                                                    (expand*
                                                     "legal_Body_complete_MP"
                                                     "legal_Body_AP")
                                                    (("7"
                                                      (assert)
                                                      (("7"
                                                        (expand*
                                                         "wf_Body"
                                                         "subset?"
                                                         "member")
                                                        (("7"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramPropertiesPreservation
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (legal_Program_AP const-decl "boolean" LegalAnnotatedProgramRestriction
     nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (legal_Program const-decl "bool" LegalProgramRestriction nil)
    (legal_Program_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)" EventType_adt
     nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (guard_to_expression_contains_no_TryCatch formula-decl nil MVAMonitoring
     nil)
    (ann_action_contains_no_TryCatch formula-decl nil
     AnnotateProgramPropertiesPreservation nil)
    (OneAction type-eq-decl nil MVA nil)
    (action_sources_contains_no_TryCatch formula-decl nil MVAMonitoring nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (restrict const-decl "R" restrict nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (is_finite const-decl "bool" finite_sets nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (Body type-decl nil Body_adt nil)
    (legal_Body_preserved_by_ann_program formula-decl nil
     AnnotateProgramPropertiesPreservation nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (legal_Body const-decl "bool" LegalProgramRestriction nil)
    (id_preserves application-judgement "S" identity_props nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}" VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (legal_Body_complete_MP const-decl "boolean"
     LegalCompleteMonitoredProgramRestriction nil)
    (legal_Body_AP const-decl "boolean" LegalAnnotatedProgramRestriction nil)
    (ann_class const-decl "Class" AnnotateClass nil))
   575649 77320 t nil)))

