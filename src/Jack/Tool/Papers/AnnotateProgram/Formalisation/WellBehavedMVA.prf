(WellBehavedMVA
 (guard_to_expression_behavior_TCC1 0
  (guard_to_expression_behavior_TCC1-2 nil 3430036977 3433242256
   (";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
    (skosimp*)
    ((";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
      (expand "id")
      ((";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
        (expand "wf_Expr")
        ((";;; Proof eval_action_behavior_TCC1-1 for formula WellBehavedMVA.eval_action_behavior_TCC1"
          (propax) nil))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   86 90 nil nil)
  (guard_to_expression_behavior_TCC1-1 nil 3413185312 3430036930
   ("" (skosimp*) (("" (expand "wf_Expr") (("" (propax) nil nil)) nil)) nil)
   unfinished ((wf_Expr const-decl "boolean" WellFormedProgram nil)) 99 100 t
   nil))
 (eval_action_behavior_TCC1 0
  (eval_action_behavior_TCC1-1 nil 3413185312 3433242256
   ("" (skosimp*)
    (("" (expand "id") (("" (expand "wf_Expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   85 90 t nil))
 (collect_set_TCC1 0
  (collect_set_TCC1-1 nil 3430585918 3433242257 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   652 610 nil nil))
 (collect_set_TCC2 0
  (collect_set_TCC2-1 nil 3430585918 3433242260 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (injective? const-decl "bool" functions nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   2950 2790 nil nil))
 (collect_set 0
  (collect_set-1 nil 3430585960 3433242287
   ("" (skosimp*)
    ((""
      (inst 1
       "{c : [[Expr, (Bool?), nat]] | wf_Expr(p!1)(proj_1(c)) AND E!1(proj_1(c)) AND proj_2(c) = choose({v : (Bool?) | EXISTS(n : nat) : derive(p!1)(proj_1(c), s!1, v, s!1)(n)}) AND proj_3(c) = choose({n : nat | EXISTS (v : Val) : derive(p!1)(proj_1(c), s!1, v, s!1)(n)}) }")
      (("1" (skosimp*)
        (("1" (inst?)
          (("1" (assert)
            (("1" (skosimp*)
              (("1"
                (inst 1 "(e!1, choose({v: (Bool?) |
                                    EXISTS (n: nat):
                                      derive(p!1)(e!1, s!1, v, s!1)(n)}), choose({n: nat |
                                    EXISTS (v: Val):
                                      derive(p!1)(e!1, s!1, v, s!1)(n)}))")
                (("1" (assert)
                  (("1"
                    (typepred "choose({v: (Bool?) |
                                   EXISTS (n: nat): derive(p!1)(e!1, s!1, v, s!1)(n)})")
                    (("1" (skosimp*)
                      (("1" (lemma "derive_determ_step")
                        (("1"
                          (inst -1 "p!1" "n!1" "n!2" "e!1" "v!1"
                           "choose({v: (Bool?) |
                                       EXISTS (n: nat): derive(p!1)(e!1, s!1, v, s!1)(n)})"
                           "s!1" "s!1" "s!1")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1" (replace -1 :dir rl :hide? t)
                                (("1" (hide -1 -3)
                                  (("1"
                                    (typepred "(choose({n: nat |
                                           EXISTS (v: Val): derive(p!1)(e!1, s!1, v, s!1)(n)}))")
                                    (("1" (skosimp*)
                                      (("1"
                                        (lemma "derive_determ_step")
                                        (("1"
                                          (inst
                                           -1
                                           "p!1"
                                           "n!1"
                                           "(choose({n: nat |
                                                EXISTS (v: Val):
                                                  derive(p!1)(e!1, s!1, v, s!1)(n)}))"
                                           "e!1"
                                           "v!1"
                                           "v!2"
                                           "s!1"
                                           "s!1"
                                           "s!1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (rewrite "nonempty_exists")
                                            (("2"
                                              (inst 1 "n!1")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (rewrite "nonempty_exists")
                                      (("2"
                                        (inst?)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "nonempty_exists")
                            (("2" (inst 1 "v!1") (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "nonempty_exists")
                      (("2" (inst?) (("2" (inst?) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (rewrite "nonempty_exists")
                  (("2" (inst 1 "n!1") (("2" (inst?) nil nil)) nil)) nil)
                 ("3" (rewrite "nonempty_exists")
                  (("3" (inst 1 "v!1")
                    (("3" (assert) (("3" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "E!1")
        (("2" (hide -2)
          (("2" (expand "is_finite")
            (("2" (skosimp*)
              (("2"
                (inst 1 "N!1"
                 "LAMBDA(c : ({c: [[Expr[Name], (Bool?[Name]), nat]] |
                                 wf_Expr(p!1)(proj_1(c)) AND E!1(PROJ_1(c)) AND
                                  PROJ_2(c) =
                                   choose[(Bool?)]
                                       ({v: (Bool?[Name]) |
                                           EXISTS (n: nat):
                                             derive
                                                 [Name,
                                                  Program[Name],
                                                  APState[Name],
                                                  id,
                                                  LAMBDA (s: APState[Name]): pstate(s),
                                                  lookup,
                                                  update_PState,
                                                  execute_set,
                                                  execute_assert,
                                                  execute_CaseJML,
                                                  on_method_entry,
                                                  on_method_exit_normal,
                                                  on_method_exit_exceptional]
                                                 (p!1)(PROJ_1(c), s!1, v, s!1)(n)})
                                   AND
                                   PROJ_3(c) =
                                    choose[nat]
                                        ({n: nat |
                                            EXISTS (v: Val[Name]):
                                              derive
                                                  [Name,
                                                   Program[Name],
                                                   APState[Name],
                                                   id,
                                                   LAMBDA
                                                   (s: APState[Name]):
                                                   pstate(s),
                                                   lookup,
                                                   update_PState,
                                                   execute_set,
                                                   execute_assert,
                                                   execute_CaseJML,
                                                   on_method_entry,
                                                   on_method_exit_normal,
                                                   on_method_exit_exceptional]
                                                  (p!1)
                                                  (PROJ_1(c), s!1, v, s!1)
                                                  (n)})})) : f!1(proj_1(c))")
                (("2" (expand "injective?")
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (apply-extensionality :hide? t) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skosimp*)
        (("3" (rewrite "nonempty_exists")
          (("1" (assert)
            (("1" (inst? -4)
              (("1" (assert)
                (("1" (skosimp*) (("1" (inst?) (("1" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "id")
            (("2" (expand "wf_Expr") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (skosimp*) (("4" (expand* "id" "wf_Expr") nil nil)) nil)
       ("5" (skosimp*)
        (("5" (inst? -3)
          (("5" (assert)
            (("5" (rewrite "nonempty_exists")
              (("1" (skosimp*)
                (("1" (inst?) (("1" (assert) (("1" (inst?) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand* "id" "wf_Expr") nil nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (skosimp*) (("6" (expand* "id" "wf_Expr") nil nil)) nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil) nil
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil) nil
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Val type-decl nil Val_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil) nil
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil
    (derive_determ_step formula-decl nil SemanticsProofs nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (id_preserves application-judgement "S" identity_props nil) nil nil nil
    nil)
   26922 24610 t shostak))
 (count_sum_TCC1 0
  (count_sum_TCC1-1 nil 3433158822 3433242287 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   104 110 nil nil))
 (count_sum_TCC2 0
  (count_sum_TCC2-1 nil 3433158822 3433242287
   ("" (skosimp*)
    (("" (use "card_rest[[Expr, (Bool?), nat]]") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((card_rest formula-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   288 260 t nil))
 (big_conj_TCC1 0
  (big_conj_TCC1-1 nil 3433232369 3433242287 ("" (subtype-tcc) nil nil)
   unchecked
   ((member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (defined? const-decl "boolean" ValProp nil))
   100 100 nil nil))
 (big_conj_wf_Expr 0
  (big_conj_wf_Expr-1 nil 3433155604 3433242288
   ("" (skolem 1 "p!1" _)
    (("" (use "finite_set_induction_rest[Expr]")
      (("" (assert)
        (("" (split -1)
          (("1" (propax) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (split -1)
                (("1" (expand "big_conj" 1)
                  (("1" (expand "wf_Expr")
                    (("1" (inst -2 "choose(SS!1)")
                      (("1" (assert)
                        (("1" (expand "wf_Body")
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1" (hide -2 -4)
                                (("1" (skosimp*)
                                  (("1" (inst?)
                                    (("1" (inst?)
                                      (("1"
                                        (expand "var_names" -1)
                                        (("1"
                                          (auto-rewrite "union" "member")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -1 -3)
                                (("2" (skosimp*)
                                  (("2" (inst?)
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subterm" -2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (auto-rewrite "rest" "remove" "member")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (big_conj def-decl "Expr" MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (TRUE const-decl "bool" booleans nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (union const-decl "set" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil) nil nil
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (emptyset const-decl "set" sets nil) (rest const-decl "set" sets nil)
    (remove const-decl "set" sets nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    nil (finite_emptyset name-judgement "finite_set" finite_sets nil) nil)
   1248 1170 t shostak))
 (big_conj_wf_Expr_components 0
  (big_conj_wf_Expr_components-1 nil 3433238551 3433242290
   ("" (skolem 1 "p!1")
    (("" (use "finite_set_induction_rest[Expr]")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (split -1)
              (("1" (inst -1 "e!1")
                (("1" (assert)
                  (("1" (expand* "rest" "remove" "member")
                    (("1" (expand "/=")
                      (("1" (replace -1 :dir rl :hide? t)
                        (("1" (expand "wf_Expr")
                          (("1" (expand "wf_Body")
                            (("1" (flatten)
                              (("1" (expand "big_conj")
                                (("1" (split 1)
                                  (("1" (skosimp*)
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "var_names" 2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "union")
                                              (("1"
                                                (expand "member")
                                                (("1" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skosimp*)
                                    (("2" (inst? -4)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subterm" 2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "wf_Expr")
                  (("2" (expand "wf_Body")
                    (("2" (expand "big_conj" -1)
                      (("2" (flatten)
                        (("2" (split 1)
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "var_names" 2)
                                  (("1" (expand "union")
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst? -4)
                              (("2" (assert)
                                (("2" (expand "subterm" 2)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (big_conj def-decl "Expr" MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) nil (/= const-decl "boolean" notequal nil)
    (rest const-decl "set" sets nil) (remove const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil) nil
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   1104 1020 t shostak))
 (big_conj_wf_Expr_collected 0
  (big_conj_wf_Expr_collected-1 nil 3433244468 3433244624
   ("" (skolem 1 "p!1" _)
    (("" (use "finite_set_induction_rest[[Expr, (Bool?), nat]]")
      (("" (assert)
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2) (("2" (hide -1) (("2" (grind) nil nil)) nil)) nil)
           ("3" (hide 2)
            (("3" (skosimp*)
              (("3" (split -1)
                (("1" (expand "big_conj" 1)
                  (("1" (expand "wf_Expr")
                    (("1" (inst -2 "proj_1(choose(SS!1))")
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (expand "wf_Body")
                            (("1" (flatten)
                              (("1" (split 1)
                                (("1" (hide -2 -4)
                                  (("1" (skosimp*)
                                    (("1" (inst?)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand "var_names" -1)
                                          (("1"
                                            (auto-rewrite "union" "member")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide -1 -3)
                                  (("2" (skosimp*)
                                    (("2" (inst?)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "subterm" -2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (auto-rewrite "rest" "remove" "member")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (big_conj def-decl "Expr" WellBehavedMVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (TRUE const-decl "bool" booleans nil) (rest const-decl "set" sets nil)
    (remove const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set[[Expr, (Bool?), nat]]"
     WellBehavedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (finite_rest application-judgement "finite_set[[Expr, (Bool?), nat]]"
     WellBehavedMVA nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_emptyset name-judgement "finite_set[[Expr, (Bool?), nat]]"
     WellBehavedMVA nil))
   155446 1940 t shostak))
 (big_conj_wf_Expr_components_collected 0
  (big_conj_wf_Expr_components_collected-1 nil 3433244634 3433244723
   ("" (skolem 1 "p!1")
    (("" (use "finite_set_induction_rest[[Expr, (Bool?), nat]]")
      (("" (split -1)
        (("1" (propax) nil nil) ("2" (hide 2) (("2" (grind) nil nil)) nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (split -1)
              (("1" (inst -1 "e!1")
                (("1" (assert)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand* "rest" "remove" "member")
                        (("1" (expand "/=")
                          (("1" (replace -1 :dir rl :hide? t)
                            (("1" (expand "wf_Expr")
                              (("1" (expand "wf_Body")
                                (("1" (flatten)
                                  (("1" (expand "big_conj")
                                    (("1" (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "var_names" 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "union")
                                                  (("1"
                                                    (expand "member")
                                                    (("1" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst? -4)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "subterm" 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "wf_Expr")
                  (("2" (expand "wf_Body")
                    (("2" (expand "big_conj" -1)
                      (("2" (flatten)
                        (("2" (split 1)
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "var_names" 2)
                                  (("1" (expand "union")
                                    (("1" (expand "member")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (inst? -4)
                              (("2" (assert)
                                (("2" (expand "subterm" 2)
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((finite_set_induction_rest formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (big_conj def-decl "Expr" WellBehavedMVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_rest application-judgement "finite_set[[Expr, (Bool?), nat]]"
     WellBehavedMVA nil)
    (/= const-decl "boolean" notequal nil) (rest const-decl "set" sets nil)
    (remove const-decl "set" sets nil) (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (finite_emptyset name-judgement "finite_set[[Expr, (Bool?), nat]]"
     WellBehavedMVA nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   89351 1730 t shostak))
 (derivation_steps_unique_TCC1 0
  (derivation_steps_unique_TCC1-1 nil 3433244345 nil
   ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
 (derivation_steps_unique 0
  (derivation_steps_unique-1 nil 3433244345 3433244450
   ("" (skosimp*)
    (("" (expand "exists1")
      (("" (split 1)
        (("1" (inst?) nil nil)
         ("2" (expand "unique?")
          (("2" (skosimp*)
            (("2" (use "derive_determ_step")
              (("2" (lemma "derive_determ_step")
                (("2"
                  (inst -1 "p!1" "x!1" "y!1" "b!1" "v!1" "v!1" "s1!1" "s2!1"
                   "s2!1")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((exists1 const-decl "bool" exists1 nil)
    (unique? const-decl "bool" exists1 nil)
    (derive_determ_step formula-decl nil SemanticsProofs nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   104949 790 t shostak))
 (collect_combine_TCC1 0
  (collect_combine_TCC1-1 nil 3430585918 3433242290 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   645 610 nil nil))
 (collect_combine_TCC2 0
  (collect_combine_TCC2-1 nil 3430585918 3433242293 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Val type-decl nil Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   2754 2660 nil nil))
 (collect_combine 0
  (collect_combine-1 nil 3433139255 3433243473
   ("" (lemma "finite_set_induction_rest[[Expr, (Bool?), nat]]")
    ((""
      (inst -1
       "LAMBDA(C: finite_set[[Expr, (Bool?), nat]]) : FORALL(p: Program, s: APState):
          (FORALL (c: [Expr, (Bool?), nat]):
             wf_Expr(p)(PROJ_1(c)) IMPLIES
              C(c) IMPLIES derive(p)(PROJ_1(c), s, PROJ_2(c), s)(PROJ_3(c)))
           IMPLIES NOT up?(ex(pstate(s))) IMPLIES
           LET E =
                 {e: Expr |
                    EXISTS (c: [Expr, (Bool?), nat]): C(c) AND PROJ_1(c) = e}
             IN
             LET V =
                   {v: Val |
                      EXISTS (c: [Expr, (Bool?), nat]):
                        C(c) AND PROJ_2(c) = v}
               IN
               LET N =
                     {n: nat |
                        EXISTS (c: [Expr, (Bool?), nat]):
                          C(c) AND PROJ_3(c) = n}
                 IN
                 derive(p)
                       (big_conj(E), s,
                        big_and(restrict[Val[Name], ((Bool?[Name])), boolean]
                                    (V)),
                        s)
                       (IF empty?(N) THEN 0 ELSE sum(N) + card(N) - 1 ENDIF)")
      (("1" (split -1)
        (("1" (skosimp*)
          (("1" (inst?)
            (("1" (assert)
              (("1"
                (apply (branch (split -1)
                        ((then (flatten) (assert) (flatten) (assert)))))
                nil nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (auto-rewrite "emptyset" "empty?" "member")
              (("2" (assert)
                (("2" (expand* "big_conj" "big_and")
                  (("2" (assert)
                    (("2" (expand "restrict")
                      (("2" (expand "derive" 2) (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (assert)
              (("3"
                (apply (branch (split 2)
                        ((then (flatten) (assert) (flatten) (assert)))))
                (("1" (hide -2)
                  (("1" (case-replace "empty?(SS!1)")
                    (("1" (expand "big_conj")
                      (("1" (expand "big_and") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (auto-rewrite "empty?" "member")
                        (("2" (assert)
                          (("2" (skosimp*)
                            (("2" (inst -2 "proj_3(x!1)")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "p!1" "s!1")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (postpone) nil nil) ("2" (postpone) nil nil)
                       ("3" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (skosimp*) (("2" (assert) (("2" (postpone) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skosimp*)
          (("3" (expand "id")
            (("3" (use "big_conj_wf_Expr") (("3" (postpone) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (assert)
        (("4" (skosimp*) (("4" (assert) (("4" (postpone) nil nil)) nil)) nil))
        nil)
       ("5" (hide 2)
        (("5" (skosimp*)
          (("5" (use "nonempty_card[nat]")
            (("5" (expand "nonempty?") (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("6" (hide 2) (("6" (skosimp*) (("6" (postpone) nil nil)) nil)) nil)
       ("7" (hide 2)
        (("7" (expand "id")
          (("7" (skosimp*)
            (("7" (expand "wf_Expr") (("7" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 474 470 t shostak))
 (big_conj_unfold_TCC1 0
  (big_conj_unfold_TCC1-1 nil 3433232369 3433242296 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil) nil nil
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   2778 2690 nil nil))
 (big_conj_unfold_TCC2 0
  (big_conj_unfold_TCC2-1 nil 3433232369 3433243464
   ("" (use "finite_set_induction_gen[Expr]")
    (("" (expand "id")
      ((""
        (inst -1
         "LAMBDA(E : finite_set[Expr]) : FORALL(p: Program[Name], s: APState[Name]):
          (wf_Expr(p)(big_conj(E)) AND
            NOT up?(ex(pstate(s))) AND
             (FORALL (e: Expr):
                wf_Expr(p)(e) IMPLIES
                 E(e) IMPLIES
                  (EXISTS (v1: (Bool?), n1: nat):
                     derive(p)(e, s, v1, s)(n1))))
           IMPLIES
           (FORALL (e1: Expr[Name]):
              E(e1) IMPLIES
               wf_Body[Name]
                   (p)
                   (Conj[Name]
                        (e1, big_conj[CP, Name](remove[Expr[Name]](e1, E)))))")
        (("1" (split -1)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (assert)
                (("1" (split -1)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (inst -1 "remove(e1!1, S!1)")
                (("2" (rewrite "card_remove[Expr]")
                  (("2" (assert)
                    (("2" (inst -1 "p!1" "s!1")
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (expand "big_conj" 2)
                            (("1"
                              (case "empty?(remove[Expr[Name]](e1!1, S!1))")
                              (("1" (assert)
                                (("1" (use "big_conj_wf_Expr_components")
                                  (("1" (assert)
                                    (("1" (expand "wf_Expr")
                                      (("1"
                                        (inst -1 "e1!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-1 2))
                                            (("1"
                                              (expand "wf_Body")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "var_names"
                                                             -1)
                                                            (("1"
                                                              (auto-rewrite
                                                               "union"
                                                               "member")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (rewrite
                                                                   "var_names"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "emptyset")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst? -4)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "subterm"
                                                           -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (rewrite
                                                               "subterm"
                                                               -2)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert)
                                (("2" (inst - "choose(remove(e1!1, S!1))")
                                  (("2" (use "big_conj_wf_Expr_components")
                                    (("2" (assert)
                                      (("2"
                                        (inst -1 "e1!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (-1 -2 3))
                                            (("2"
                                              (expand "wf_Expr")
                                              (("2"
                                                (expand "wf_Body")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst? -2)
                                                        (("1"
                                                          (inst? -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "var_names"
                                                               -1)
                                                              (("1"
                                                                (auto-rewrite
                                                                 "union"
                                                                 "member")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "var_names"
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "var_names"
                                                                         3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "rest")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "subterm"
                                                                 -2)
                                                                (("2"
                                                                  (expand
                                                                   "subterm"
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "subterm"
                                                                     3)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "rest")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "big_conj_wf_Expr")
                            (("2" (assert)
                              (("2" (lemma "big_conj_wf_Expr_components")
                                (("2" (inst -1 "p!1" "S!1")
                                  (("2" (assert)
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "remove")
                                            (("2"
                                              (expand "member")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (inst? -4)
                              (("3" (assert)
                                (("3" (expand* "remove" "member")
                                  (("3" (assert)
                                    (("3" (flatten) (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "id")
            (("2" (expand "wf_Expr") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set_induction_gen formula-decl nil finite_sets_inductions
     "finite_sets/")
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil) nil
    (bijective? const-decl "bool" functions nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (big_conj def-decl "Expr" MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil) (pred type-eq-decl nil defined_types nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (list type-decl nil list_adt nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (derive def-decl "bool" Semantics nil)
    (Conj adt-constructor-decl "[[Expr, Expr] -> (Conj?)]" Body_adt nil)
    (remove const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (big_conj_wf_Expr formula-decl nil WellBehavedMVA nil) nil
    (rest const-decl "set" sets nil) (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (big_conj_wf_Expr_components formula-decl nil WellBehavedMVA nil)
    (empty? const-decl "bool" sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   310925 4560 t nil))
 (big_conj_equivalence_TCC1 0
  (big_conj_equivalence_TCC1-1 nil 3433232369 3433243473
   ("" (skosimp*)
    (("" (expand "id") (("" (expand "wf_Expr") (("" (propax) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil))
   118 90 t nil))
 (big_conj_equivalence_TCC2 0
  (big_conj_equivalence_TCC2-1 nil 3433232369 3433243476
   ("" (skosimp*)
    (("" (typepred "C!1")
      (("" (replace -4 :hide? t)
        (("" (hide-all-but (-1 1))
          (("" (expand "is_finite")
            (("" (skosimp*)
              ((""
                (inst 1 "N!1" "LAMBDA(e : ({e: Expr |
                     EXISTS (c: [Expr, (Bool?), nat]):
                       C!1(c) AND PROJ_1(c) = e})) : f!1(choose({c: [Expr, (Bool?), nat]|
                       C!1(c) AND PROJ_1(c) = e}))")
                (("1" (expand "injective?")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "proj_1(choose({c: [Expr, (Bool?), nat] | C!1(c) AND PROJ_1(c) = x1!1})) = proj_1(choose({c: [Expr, (Bool?), nat] | C!1(c) AND PROJ_1(c) = x2!1}))")
                          (("1"
                            (case-replace
                             " PROJ_1(choose({c: [Expr, (Bool?), nat] |
                       C!1(c) AND PROJ_1(c) = x1!1})) = x1!1")
                            (("1"
                              (case-replace
                               "PROJ_1(choose({c: [Expr, (Bool?), nat] |
                        C!1(c) AND PROJ_1(c) = x2!1})) = x2!1")
                              (("1" (assert) nil nil)
                               ("2" (rewrite "nonempty_exists")
                                (("2" (typepred "x2!1")
                                  (("2" (skosimp*)
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "choose({c: [Expr, (Bool?), nat] |
                       C!1(c) AND PROJ_1(c) = x1!1})")
                                (("1" (propax) nil nil)
                                 ("2" (rewrite "nonempty_exists")
                                  (("2" (typepred "x1!1")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (rewrite "nonempty_exists")
                              (("3" (typepred "x1!1")
                                (("3" (skosimp*)
                                  (("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (rewrite "nonempty_exists")
                            (("3" (typepred "x2!1")
                              (("3" (skosimp*)
                                (("3" (inst?) (("3" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "nonempty_exists")
                            (("4" (typepred "x1!1")
                              (("4" (skosimp*)
                                (("4" (inst?) (("4" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "nonempty_exists")
                        (("2" (typepred "x2!1")
                          (("2" (skosimp*)
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil)
                       ("3" (rewrite "nonempty_exists")
                        (("3" (typepred "x1!1")
                          (("3" (skosimp*)
                            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (typepred "e!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Val type-decl nil Val_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil
    (injective? const-decl "bool" functions nil) nil nil nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil nil
    (choose const-decl "(p)" sets nil) (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   2844 1620 t nil))
 (big_conj_equivalence_TCC3 0
  (big_conj_equivalence_TCC3-1 nil 3433232369 3433244148
   ("" (expand "id")
    (("" (skosimp*)
      (("" (use "big_conj_wf_Expr_components_collected")
        (("" (assert)
          (("" (replace -4 :hide? t)
            (("" (hide -2 -3)
              (("" (use "big_conj_wf_Expr")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (expand "wf_Expr") (("1" (propax) nil nil)) nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred "C!1")
                    (("2" (expand "is_finite")
                      (("2" (skosimp*)
                        (("2"
                          (inst 1 "N!1" "LAMBDA(e : (LAMBDA (e: Expr[Name]):
                    EXISTS (c: [Expr[Name], (Bool?[Name]), nat]):
                      C!1(c) AND PROJ_1(c) = e)) : f!1(choose({c: [Expr[Name], (Bool?[Name]), nat]|
                      C!1(c) AND PROJ_1(c) = e}))")
                          (("1" (expand "injective?")
                            (("1" (skosimp*)
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1"
                                    (case "proj_1(choose({c: [Expr[Name], (Bool?[Name]), nat] |
                 C!1(c) AND PROJ_1(c) = x1!1})) = x1!1")
                                    (("1" (replace -1 1 :dir rl)
                                      (("1"
                                        (case
                                         "proj_1(choose({c: [Expr[Name], (Bool?[Name]), nat] |
                  C!1(c) AND PROJ_1(c) = x2!1})) = x2!1")
                                        (("1"
                                          (replace -1 1 :dir rl)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "choose({c: [Expr[Name], (Bool?[Name]), nat] |
                       C!1(c) AND PROJ_1(c) = x2!1})")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (rewrite "nonempty_exists")
                                          (("3"
                                            (typepred "x2!1")
                                            (("3"
                                              (skosimp*)
                                              (("3"
                                                (inst?)
                                                (("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred
                                       "choose({c: [Expr[Name], (Bool?[Name]), nat] |
                       C!1(c) AND PROJ_1(c) = x1!1})")
                                      (("2" (propax) nil nil)) nil)
                                     ("3" (rewrite "nonempty_exists")
                                      (("3"
                                        (typepred "x1!1")
                                        (("3"
                                          (skosimp*)
                                          (("3"
                                            (inst?)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "nonempty_exists")
                                  (("2" (typepred "x2!1")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (rewrite "nonempty_exists")
                                  (("3" (typepred "x1!1")
                                    (("3" (skosimp*)
                                      (("3"
                                        (inst?)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists")
                              (("2" (typepred "e!1")
                                (("2" (skosimp*)
                                  (("2" (inst?) (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nonempty? const-decl "bool" sets nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil) (choose const-decl "(p)" sets nil)
    nil nil nil (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil
    (injective? const-decl "bool" functions nil) nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (big_conj_wf_Expr formula-decl nil WellBehavedMVA nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (big_conj_wf_Expr_components_collected formula-decl nil WellBehavedMVA
     nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   449202 3130 t nil))
 (well_behaved_MVA_preserved_by_complete_TCC1 0
  (well_behaved_MVA_preserved_by_complete_TCC1-1 nil 3430036855 3433243502
   ("" (skosimp*) (("" (use "complete_MVA_yields_wf_MVA") nil nil)) nil)
   unchecked
   ((partial const-decl "boolean" MVAProperties nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (complete_MVA_yields_wf_MVA formula-decl nil MVACompletion nil)
    (CP formal-nonempty-type-decl nil WellBehavedMVA nil)
    (Name formal-nonempty-type-decl nil WellBehavedMVA nil))
   244 240 t nil))
 (well_behaved_MVA_preserved_by_complete 0
  (well_behaved_MVA_preserved_by_complete-1 nil 3430123744 3433243538
   ("" (skosimp*)
    (("" (expand "well_behaved_MVA")
      (("" (flatten)
        (("" (split 1)
          (("1" (hide -2)
            (("1" (expand "guard_to_expression_behavior")
              (("1" (skosimp*)
                (("1" (expand "complete_MVA" -1)
                  (("1" (auto-rewrite "union" "member")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (inst? -4) (("1" (assert) nil nil)) nil)
                         ("2" (expand "complete_trans")
                          (("2" (assert)
                            (("2" (split -1)
                              (("1" (flatten)
                                (("1" (replace -3 :hide? t)
                                  (("1"
                                    (use "guard_to_expression_build_guard")
                                    (("1" (replace -1 :hide? t)
                                      (("1"
                                        (expand "build_guard")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             " is_finite[(Bool?[Name])]
                       ({v: (Bool?[Name]) |
                           EXISTS (p: Guard[CP, Name]):
                             all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(p) AND
                              v =
                               Bool[Name]
                                   (NOT p(stA!1(s!1), fvs(st(pstate(s!1))), arg!1))})")
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (case-replace
                                                 "          Bool(b(big_and({v: (Bool?) |
                                      EXISTS (p: Guard[CP, Name]):
                                        all_guards(mva!1)(scp(t!1), event(t!1))(p)
                                         AND
                                         v =
                                          Bool(NOT
                                               p
                                               (stA!1(s!1),
                                                fvs(st(pstate(s!1))),
                                                arg!1))}))) = big_and({v: (Bool?) |
                              EXISTS (p: Guard[CP, Name]):
                                all_guards(mva!1)(scp(t!1), event(t!1))(p) AND
                                 v =
                                  Bool(NOT p(stA!1(s!1), fvs(st(pstate(s!1))),
                                             arg!1))})"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (case
                                                   "is_finite[Expr[Name]]
                           ({expr: Expr[Name] |
                               EXISTS (g: Guard[CP, Name]):
                                 all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g) AND
                                  expr = Neg[Name](guard_to_expression[CP, Name](g)(arg!1))})")
                                                  (("1"
                                                    (use
                                                     "collect_set"
                                                     ("E"
                                                      "{expr: Expr[Name] |
                                              EXISTS (g: Guard[CP, Name]):
                                                all_guards(mva!1)(scp(t!1), event(t!1))(g) AND
                                                 expr = Neg(guard_to_expression(g)(arg!1))}"))
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (lemma
                                                           "collect_combine")
                                                          (("1"
                                                            (auto-rewrite
                                                             "id")
                                                            (("1"
                                                              (case
                                                               " is_finite[[Expr[Name], (Bool?[Name]), nat]]
                                                                                              ({c: [Expr[Name], (Bool?[Name]), nat] |
                                                                                                  EXISTS (g: Guard[CP, Name]):
                                                                                                         all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g)
                                                                                                     AND PROJ_1(c) =
                                                                                                          Neg[Name](guard_to_expression[CP, Name](g)(arg!1))
                                                                                                     AND PROJ_2(c) =
                                                                                                          Bool[Name]
                                                                                                              (NOT g(stA!1(s!1), fvs(st(pstate(s!1))), arg!1))
                                                                                                     AND wf_Body[Name](p!1)(PROJ_1(c))
                                                                                                     AND derive
                                                                                                             [Name, Program[Name], APState[Name], id,
                                                                                                              LAMBDA (s: APState[Name]): pstate(s), lookup,
                                                                                                              update_PState, execute_set, execute_assert,
                                                                                                              execute_CaseJML, on_method_entry,
                                                                                                              on_method_exit_normal, on_method_exit_exceptional]
                                                                                                             (p!1)(PROJ_1(c), s!1, PROJ_2(c), s!1)(PROJ_3(c))})")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "{c : [Expr, (Bool?), nat]|EXISTS (g : Guard[CP, Name]) : all_guards(mva!1)(scp(t!1), event(t!1))(g) AND proj_1(c) = Neg(guard_to_expression(g)(arg!1)) AND proj_2(c) = Bool(NOT g(stA!1(s!1), fvs(st(pstate(s!1))), arg!1)) AND wf_Body(p!1)(proj_1(c)) AND derive(p!1)(proj_1(c), s!1, proj_2(c), s!1)(proj_3(c))}"
                                                                 "p!1"
                                                                 "s!1")
                                                                (("1"
                                                                  (split -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "big_conj_equivalence")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (case-replace
                                                                               "{e: Expr |
                                                   EXISTS (c_1: [Expr, (Bool?), nat]):
                                                     (EXISTS (g: Guard[CP, Name]):
                                                             all_guards(mva!1)
                                                                       (scp(t!1), event(t!1))
                                                                       (g)
                                                         AND PROJ_1(c_1) =
                                                              Neg(guard_to_expression(g)(arg!1))
                                                         AND PROJ_2(c_1) =
                                                              Bool
                                                              (NOT
                                                               g
                                                               (stA!1(s!1),
                                                                fvs(st(pstate(s!1))),
                                                                arg!1))
                                                         AND wf_Body(p!1)(PROJ_1(c_1))
                                                         AND derive(p!1)
                                                                   (PROJ_1(c_1),
                                                                    s!1,
                                                                    PROJ_2(c_1),
                                                                    s!1)
                                                                   (PROJ_3(c_1)))
                                                      AND PROJ_1(c_1) = e} = {expr: Expr[Name] |
                                                     EXISTS (g: Guard[CP, Name]):
                                                       all_guards(mva!1)(scp(t!1), event(t!1))(g) AND
                                                        expr = Neg(guard_to_expression(g)(arg!1))}"
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (case-replace
                                                                                 "Bool(FORALL (c_1: [Expr, (Bool?), nat]):
                                                (EXISTS (g: Guard[CP, Name]):
                                                        all_guards(mva!1)(scp(t!1), event(t!1))(g)
                                                    AND PROJ_1(c_1) = Neg(guard_to_expression(g)(arg!1))
                                                    AND PROJ_2(c_1) =
                                                         Bool(NOT g
                                                                  (stA!1(s!1),
                                                                   fvs(st(pstate(s!1))),
                                                                   arg!1))
                                                    AND wf_Body(p!1)(PROJ_1(c_1))
                                                    AND derive(p!1)(PROJ_1(c_1), s!1, PROJ_2(c_1), s!1)
                                                              (PROJ_3(c_1)))
                                                 IMPLIES b(PROJ_2(c_1))) = big_and({v: ((Bool?)) |
                                                      EXISTS (p: Guard[CP, Name]):
                                                        all_guards(mva!1)(scp(t!1), event(t!1))(p) AND
                                                         v =
                                                          Bool(NOT p
                                                                   (stA!1(s!1),
                                                                    fvs(st(pstate(s!1))),
                                                                    arg!1))})"
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (inst?
                                                                                   2)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   3)
                                                                                  (("2"
                                                                                    (use
                                                                                     "Val_Bool_extensionality")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         2)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "big_and_is_forall")
                                                                                          (("1"
                                                                                            (iff)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "wf_Body(p!1)(Neg(guard_to_expression(p!2)(arg!1)))")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "( Neg(guard_to_expression(p!2)(arg!1)), v!1,  choose({n : nat | derive(p!1)(Neg(guard_to_expression(p!2)(arg!1)), s!1, v!1, s!1)(n)}))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (rewrite
                                                                                                         "nonempty_exists")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "all_guards")
                                                                                                          (("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -17
                                                                                                               "t!2"
                                                                                                               "p!1"
                                                                                                               "s!1"
                                                                                                               "arg!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -17)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "n!1 + 1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "derive"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "v!2")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "check_for_exception_final")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "check_for_exception")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -7)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "wf_Expr")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (1
                                                                                                                          -1))
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_Body")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "var_names"
                                                                                                                                       2)
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst?
                                                                                                                                   -4)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "subterm"
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (use
                                                                                                       "big_conj_wf_Expr_components")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "Neg(guard_to_expression(p!2)(arg!1))")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "wf_Expr")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "proj_2(c!1)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skosimp*)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skosimp*)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 3
                                                                                 -1)
                                                                                (("2"
                                                                                  (case
                                                                                   "FORALL(x : Expr) : {e: Expr |
                                           EXISTS (c_1: [Expr, (Bool?), nat]):
                                             (EXISTS (g: Guard[CP, Name]):
                                                     all_guards(mva!1)(scp(t!1), event(t!1))(g)
                                                 AND PROJ_1(c_1) = Neg(guard_to_expression(g)(arg!1))
                                                 AND PROJ_2(c_1) =
                                                      Bool(NOT g(stA!1(s!1), fvs(st(pstate(s!1))), arg!1))
                                                 AND wf_Body(p!1)(PROJ_1(c_1))
                                                 AND derive(p!1)(PROJ_1(c_1), s!1, PROJ_2(c_1), s!1)
                                                           (PROJ_3(c_1)))
                                              AND PROJ_1(c_1) = e}(x) = {expr: Expr[Name] |
                                            EXISTS (g: Guard[CP, Name]):
                                              all_guards(mva!1)(scp(t!1), event(t!1))(g) AND
                                               expr = Neg(guard_to_expression(g)(arg!1))}(x)")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      -1))
                                                                                    (("1"
                                                                                      (use
                                                                                       "extensionality[Expr, boolean]")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skosimp*)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (iff)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (copy
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "all_guards"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -17
                                                                                                     "t!2"
                                                                                                     "p!1"
                                                                                                     "s!1"
                                                                                                     "arg!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "wf_Expr(p!1)(Neg(guard_to_expression(guard(t!2))(arg!1)))")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -18)
                                                                                                          (("1"
                                                                                                            (skosimp*)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "(Neg(guard_to_expression(g!1)(arg!1)), Bool(NOT b(v!1)), n!1 + 1)")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "wf_Expr")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (expand
                                                                                                                           "derive"
                                                                                                                           1)
                                                                                                                          (("3"
                                                                                                                            (inst?)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "check_for_exception_final")
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "check_for_exception")
                                                                                                                                  (("3"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "wf_Expr")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "wf_Body")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (skosimp*)
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "var_names"
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst?
                                                                                                                         -4)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "subterm"
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (use
                                                                                                           "big_conj_wf_Expr_components")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp*)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skosimp*)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skosimp*)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (skosimp*)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skosimp*)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (skosimp*)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (replace
                                                           -3
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (expand
                                                             "derive"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "check_for_exception_final")
                                                                (("2"
                                                                  (expand
                                                                   "check_for_exception")
                                                                  (("2"
                                                                    (expand
                                                                     "all_guards")
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (inst
                                                                         -14
                                                                         "t!2"
                                                                         "p!1"
                                                                         "s!1"
                                                                         "arg!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "guard_to_expression_yields_wf_Expr")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (split
                                                                                 -15)
                                                                                (("1"
                                                                                  (skosimp*)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "Bool(NOT b(v!1))"
                                                                                     "n!1 + 1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst?
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-2
                                                                                    1))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_Expr")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "wf_Body")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "subterm"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (typepred
                                                       "all_guards(mva!1)(scp(t!1), event(t!1))")
                                                      (("2"
                                                        (expand "is_finite")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "N!1"
                                                             "LAMBDA(expr : ({expr: Expr[Name] |
                     EXISTS (g: Guard[CP, Name]):
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g)
                        AND
                        expr =
                         Neg[Name]
                             (guard_to_expression[CP, Name](g)(arg!1))})) : f!1(choose({g: Guard[CP, Name]|
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(g)
                        AND
                        expr =
                         Neg[Name]
                             (guard_to_expression[CP, Name](g)(arg!1))}))")
                                                            (("1"
                                                              (expand
                                                               "injective?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "nonempty_exists")
                                                                    (("2"
                                                                      (typepred
                                                                       "x2!1")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (rewrite
                                                                     "nonempty_exists")
                                                                    (("3"
                                                                      (typepred
                                                                       "x1!1")
                                                                      (("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (rewrite
                                                                 "nonempty_exists")
                                                                (("2"
                                                                  (typepred
                                                                   "expr!1")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (typepred
                                                 "all_guards(mva!1)(scp(t!1), event(t!1))")
                                                (("2"
                                                  (expand "is_finite")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "N!1"
                                                       "LAMBDA(v : ({v: (Bool?[Name]) |
                     EXISTS (p: Guard[CP, Name]):
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(p)
                        AND
                        v =
                         Bool[Name]
                             (NOT p(stA!1(s!1),
                                    fvs(st(pstate(s!1))),
                                    arg!1))})) : f!1(choose({p: Guard[CP, Name]|
                       all_guards[CP, Name](mva!1)(scp(t!1), event(t!1))(p)
                        AND
                        v =
                         Bool[Name]
                             (NOT p(stA!1(s!1),
                                    fvs(st(pstate(s!1))),
                                    arg!1))}))")
                                                      (("1"
                                                        (expand "injective?")
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "nonempty_exists")
                                                              (("2"
                                                                (typepred
                                                                 "x2!1")
                                                                (("2"
                                                                  (skosimp*)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (rewrite
                                                               "nonempty_exists")
                                                              (("3"
                                                                (typepred
                                                                 "x1!1")
                                                                (("3"
                                                                  (skosimp*)
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (rewrite
                                                           "nonempty_exists")
                                                          (("2"
                                                            (typepred "v!1")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (replace -3)
                                  (("2" (assert)
                                    (("2"
                                      (rewrite
                                       "guard_to_expression_LAMBDA_true")
                                      (("2"
                                        (expand "derive" 2)
                                        (("2"
                                          (inst?)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (expand "eval_action_behavior")
              (("2" (skosimp*)
                (("2" (expand "complete_MVA" -1)
                  (("2" (auto-rewrite "union" "member")
                    (("2" (assert)
                      (("2" (split -1)
                        (("1" (inst?)
                          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                         ("2" (expand "complete_trans")
                          (("2" (assert)
                            (("2" (case-replace "action(t!1) = skip")
                              (("1" (expand "skip")
                                (("1" (expand "member")
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 36499 33800 t shostak)))

