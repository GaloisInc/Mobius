(State
 (initial_Program_state_TCC1 0
  (initial_Program_state_TCC1-1 nil 3390799294 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (initial_Program_state_TCC2 0
  (initial_Program_state_TCC2-1 nil 3390799294 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (wf_initial_Program_state 0
  (wf_initial_Program_state-1 nil 3390799316 3390799322
   ("" (skosimp*)
    (("" (expand "initial_Program_state")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (expand "is_field")
            (("" (expand "is_local")
              (("" (expand "defined?")
                (("" (expand "var_names")
                  (("" (expand "get_FieldDecl")
                    (("" (expand "get_LocalDecl")
                      (("" (split 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (rewrite "nonempty_exists")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (rewrite "nonempty_exists")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lift-if)
                          (("3" (assert)
                            (("3" (expand "default_value")
                              (("3"
                                (lift-if)
                                (("3"
                                  (assert)
                                  (("3"
                                    (split 1)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (rewrite "nonempty_exists")
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (typepred "x!1")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lift-if)
                          (("4" (assert)
                            (("4" (expand "default_value")
                              (("4"
                                (lift-if)
                                (("4"
                                  (assert)
                                  (("4"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (rewrite "nonempty_exists")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_state const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (defined? const-decl "boolean" ValProp nil)
    (get_FieldDecl const-decl "lift[FieldDecl]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil State nil)
    (JType type-decl nil JType_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (get_LocalDecl const-decl "lift[LocalVarDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (initial_Program_state const-decl "PState" State nil))
   5092 910 nil nil))
 (wf_state_vars_local_or_field 0
  (wf_state_vars_local_or_field-1 nil 3390798989 3390798997
   ("" (skosimp*)
    (("" (use "wf_program_variables_disjoint") (("" (grind) nil nil))
      nil))
    nil)
   unfinished
   ((wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil State nil)
    (wf_program_variables_disjoint formula-decl nil WellFormedProgram
     nil))
   6517 3330 nil nil))
 (wf_state_update 0
  (wf_state_update-1 nil 3390803416 3390822793
   ("" (skosimp*)
    (("" (expand "update")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (skosimp*)
            (("1" (inst-cp -2 "vn!1")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (expand "update_local")
                    (("1" (expand "is_field")
                      (("1" (expand "is_local")
                        (("1" (assert)
                          (("1" (inst -2 "vn!2")
                            (("1" (expand "defined?")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split 2)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (assert)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skosimp*)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case-replace
                                             "vn!2 = vn!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "v!1")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (split 2)
              (("1" (skosimp*)
                (("1" (inst-cp -2 "vn!1")
                  (("1" (inst -2 "vn!2")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "update_field")
                            (("1" (expand "is_field")
                              (("1"
                                (expand "is_local")
                                (("1"
                                  (expand "defined?")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 2)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case-replace
                                             "vn!2 = vn!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case-replace
                                             "vn!2 = vn!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "v!1")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil)
                                       ("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_state const-decl "boolean" State nil)
    (update_field const-decl "PState" State nil)
    (update_local const-decl "PState" State nil)
    (is_local const-decl "boolean" State nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (Name formal-nonempty-type-decl nil State nil)
    (update const-decl "PState" State nil))
   115651 6210 t shostak)))
(ProgramSemantics
 (execute_set_TCC1 0
  (execute_set_TCC1-1 nil 3385977480 3390735662
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil))
   264 240 nil nil))
 (execute_CaseJML_TCC1 0
  (execute_CaseJML_TCC1-1 nil 3385977480 3390735662
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil))
   228 150 nil nil))
 (on_method_event_TCC1 0
  (on_method_event_TCC1-1 nil 3390110778 3390735663
   ("" (subtype-tcc) nil nil) unchecked
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil))
   192 170 nil nil))
 (IMP_Semantics_TCC1 0
  (IMP_Semantics_TCC1-1 nil 3385977480 3390735663
   ("" (subtype-tcc) nil nil) unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PState type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil ProgramSemantics nil))
   82 80 nil nil)))

