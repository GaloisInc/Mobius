% Wellformedness condition on set annotations
% Pre-set annotations can only throw JMLexceptions
% Post-set and exc_set annotations can not throw exceptions
% Post-set cannot change program state (ie fields and local variables, and
% exception flag, it can change ghost variables)

% Necessary to prove correctness of steps 2 and 3

WfSetStmts[Name : TYPE+, 
                 FullProgram : TYPE,
                 FullState : TYPE,
                 (IMPORTING WellFormedProgram[Name]) program : [FullProgram -> Program],
                 (IMPORTING State[Name]) pstate : [FullState -> PState],
                 lookup : [Name, FullState -> Val],
                 (IMPORTING SemanticsTypes[Name, FullProgram, FullState,
                                           program, pstate])
                 update_PState : (update_PState_type),
                 execute_set : (execute_set_type),
                 execute_assert : (execute_assert_type),
                 execute_CaseJML : (execute_CaseJML_type),
                 on_method_entry : (on_method_event_type),
                 on_method_exit_normal : (on_method_event_type),
                 on_method_exit_exceptional : (on_method_event_type)] : THEORY
BEGIN

  IMPORTING ProgramRestriction[Name],
            Semantics[Name, FullProgram, FullState, program, pstate, lookup,
                      update_PState, execute_set, execute_assert, 
                      execute_CaseJML, on_method_entry, 
                      on_method_exit_normal, on_method_exit_exceptional]

  % Body b can only throw JML exception
  only_JMLExc(p : FullProgram)(b : (wf_Body(program(p)))) : bool =
    FORALL(s1, s2 : FullState, v : Val, n : nat) :
      NOT up?(ex(pstate(s1))) IMPLIES
      derive(p)(b, s1, v, s2)(n) IMPLIES
      up?(ex(pstate(s2))) IMPLIES down(ex(pstate(s2))) = JMLExc

  % Body b does not throw an exception
  no_exc(p : FullProgram)(b : (wf_Body(program(p)))) : bool =
    FORALL(s1, s2 : FullState, v : Val, n : nat) :
      NOT up?(ex(pstate(s1))) IMPLIES
      derive(p)(b, s1, v, s2)(n) IMPLIES
        NOT up?(ex(pstate(s2)))

  % Body b does not change program state (fields/local variables)
  no_change(p : FullProgram)(b : (wf_Body(program(p)))) : bool =
    FORALL(s1, s2 : FullState, v : Val, n : nat) :
      NOT up?(ex(pstate(s1))) IMPLIES
      derive(p)(b, s1, v, s2)(n) IMPLIES
        st(pstate(s1)) = st(pstate(s2))

  % Predicate wf_set_stmts for method m:
  % pre_set can only throw JML exception
  % post_set and exc_set cannot throw any exception
  % post_set cannot change pstate
  wf_set_stmts(p : FullProgram)(m : Method) : bool =
    methods(program(p))(m) IMPLIES
      (FORALL (v : Expr) : only_JMLExc(p)(pre_set(m)(v))) AND
      (FORALL (v : Expr) : no_exc(p)(post_set(m)(v))) AND
      (FORALL (e : Excpt) : no_exc(p)(exc_set(m)(e))) AND
      (FORALL (v : Expr) : no_change(p)(post_set(m)(v))) 

  % Predicate wf_set_stmts for program p: wf_set_stmts holds for any method m
  wf_set_stmts(p : FullProgram) : bool =
    program_method_pred(program(p))(wf_set_stmts(p))


END WfSetStmts


% Below we define several separate theories, to ensure that we can import
% these definitions for monitored and annotated programs at the same time
WfSetStmtsAP[Name : TYPE+] : THEORY
BEGIN

  IMPORTING AnnotatedProgramSemantics[Name],
            ProgramRestriction[Name]

  % Body b can only throw JML exception
  only_JMLExc(p : Program)(b : (wf_Body(p))) : bool =
    FORALL(s1, s2 : APState, v : Val, n : nat) :
      wf_state(p)(s1) IMPLIES
      NOT up?(ex(pstate(s1))) IMPLIES
      derive(p)(b, s1, v, s2)(n) IMPLIES
      up?(ex(pstate(s2))) IMPLIES down(ex(pstate(s2))) = JMLExc

  % Body b does not throw an exception
  no_exc(p : Program)(b : (wf_Body(p))) : bool =
    FORALL(s1, s2 : APState, v : Val, n : nat) :
      wf_state(p)(s1) IMPLIES
      NOT up?(ex(pstate(s1))) IMPLIES
      derive(p)(b, s1, v, s2)(n) IMPLIES
        NOT up?(ex(pstate(s2)))

  % Body b does not change program set
  no_change(p : Program)(b : (wf_Body(p))) : bool =
    FORALL(s1, s2 : APState, v : Val, n : nat) :
      wf_state(p)(s1) IMPLIES
      NOT up?(ex(pstate(s1))) IMPLIES
      derive(p)(b, s1, v, s2)(n) IMPLIES
        NOT pstate(s1) = pstate(s2)

  % Predicate wf_set_stmts for method m:
  % pre_set can only throw JML exception
  % post_set and exc_set cannot throw any exception
  % post_set cannot change pstate
  wf_set_stmts(p : Program)(m : Method) : bool =
    methods(p)(m) IMPLIES
      (FORALL (v : Expr) : only_JMLExc(p)(pre_set(m)(v))) AND
      (FORALL (v : Expr) : no_exc(p)(post_set(m)(v))) AND
      (FORALL (e : Excpt) : no_exc(p)(exc_set(m)(e))) AND
      (FORALL (v : Expr) : no_change(p)(post_set(m)(v))) 

  % Predicate wf_set_stmts for program p: wf_set_stmts holds for any method m
  wf_set_stmts_AP(p : Program) : bool =
    program_method_pred(p)(wf_set_stmts(p))


END WfSetStmtsAP
