(FunProp
 (nat2string_TCC1 0
  (nat2string_TCC1-1 nil 3390113818 3390113913
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   377 260 nil nil))
 (nat2string_TCC2 0
  (nat2string_TCC2-1 nil 3390113818 3390113913
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   474 380 nil nil))
 (nat2string_injective 0
  (nat2string_injective-1 nil 3390113998 3390119199
   ("" (expand "injective?")
    (("" (induct "x1")
      (("1" (skosimp*)
        (("1" (expand "nat2string")
          (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "nat2string" -2)
          (("2" (lift-if)
            (("2" (assert)
              (("2" (split -2)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2"
                    (case "cdr(cons(char(0), nat2string(j!1))) = cdr(cons(char(0), nat2string(x2!1 - 1)))")
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (replace -1) (("2" (propax) nil nil)) nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (character type-decl nil character_adt nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat2string def-decl "list[char]" FunProp nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (char adt-constructor-decl "[below[256] -> (char?)]" character_adt
          nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (injective? const-decl "bool" functions nil))
   88103 3050 t shostak))
 (list2finseq_injective 0
  (list2finseq_injective-1 nil 3390119317 3390119762
   ("" (expand "injective?")
    (("" (expand "list2finseq")
      (("" (induct "x1")
        (("1" (skosimp*)
          (("1" (expand "length")
            (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "length" -2)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (split -2)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (inst -2 "cdr(x2!1)")
                      (("2" (assert)
                        (("2" (split -2)
                          (("1"
                            (case "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(0)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(0)")
                            (("1" (assert)
                              (("1"
                                (expand "nth" -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (use "list_cons_eta[char]")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -3) (("2" (propax) nil nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (expand "length")
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (expand "length")
                              (("4" (assert) nil nil)) nil))
                            nil)
                           ("2" (apply-extensionality :hide? t)
                            (("1" (typepred "x!1")
                              (("1"
                                (case
                                 "(LAMBDA (x: below[length(cons(cons1_var!1, cons2_var!1))]):
         nth(cons(cons1_var!1, cons2_var!1), x))(x!1 + 1)
       = (LAMBDA (x: below[length(x2!1)]): nth(x2!1, x))(x!1 + 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -3)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "length" 1)
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (expand "length" 1)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skosimp*)
            (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (x2!1 skolem-const-decl "list[char]" FunProp nil)
    (cons2_var!1 skolem-const-decl "list[char]" FunProp nil)
    (list_induction formula-decl nil list_adt nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil))
   445298 9440 t shostak))
 (nat2string_injective_function_exists 0
  (nat2string_injective_function_exists-1 nil 3390113893 3390119313
   ("" (inst 1 "list2finseq o nat2string")
    (("" (use "composition_injective[nat,list[char],string]")
      (("1" (use "list2finseq_injective") nil nil)
       ("2" (use "nat2string_injective") nil nil))
      nil))
    nil)
   proved
   ((composition_injective judgement-tcc nil function_props nil)
    (injective? const-decl "bool" functions nil)
    (list2finseq_injective formula-decl nil FunProp nil)
    (nat2string_injective formula-decl nil FunProp nil)
    (nat2string def-decl "list[char]" FunProp nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (O const-decl "T3" function_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   106415 700 t shostak)))

