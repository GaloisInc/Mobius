% LegalProgramRestriction: JML-exceptions in try or catch-blocks are not
% hidden by another exception in finally block

% First a general formalisation for parametrised semantics, then
% instantiations for annotated and monitored programs (with total and partial
% monitors)

% Explicit instantiations are needed to avoid type checking confusion when
% stating that legal program restriction preserved by various translation
% steps

% Extra parameter needed: full_program that maps a core program to an
% annotated program (id) or monitored program (adding dummy monitor)
LegalProgramRestriction[Name : TYPE+,
          FullProgram : TYPE,
          FullState : TYPE,
          (IMPORTING WellFormedProgram[Name]) program : [FullProgram -> Program],
          (IMPORTING State[Name]) pstate : [FullState -> PState],
          lookup : [Name, FullState -> Val],
          (IMPORTING SemanticsTypes[Name, FullProgram, FullState,
                                    program, pstate])
          update_PState : (update_PState_type),
          execute_set : (execute_set_type),
          execute_assert : (execute_assert_type),
          execute_CaseJML : (execute_CaseJML_type),
          on_method_entry : (on_method_event_type),
          on_method_exit_normal : (on_method_event_type),
          on_method_exit_exceptional : (on_method_event_type)] : THEORY
BEGIN

  IMPORTING WellFormedProgram[Name],
            Semantics[Name, FullProgram, FullState, program, pstate,
                      lookup, update_PState, execute_set, execute_assert,
                      execute_CaseJML, on_method_entry, 
                      on_method_exit_normal, on_method_exit_exceptional]

  % b is legal_Body if  for any subterm b1 that 
  % is a try-catch statement, if derivation of the try block or the catch 
  %  block returns a JML-exception then derivation of the complete statement
  %  should also return  a JML-exception. 
  %  Besides, the catch and the finally block always terminate.
  % if it is a JML annotatios (Set, Assert or CaseJML), it terminates and
  % it does not change the program variables.
  legal_Body(p : FullProgram)(b : Body) : bool =
    FORALL(b1 : Body) :
      wf_Program(program(p)) IMPLIES
      wf_Body(program(p))(b1) IMPLIES
      subterm(b1, b) IMPLIES
        (TryCatch?(b1) IMPLIES
          FORALL (s1, tau1, tau2 : FullState)
                 (v1, v2 : Val)(m1, m2 : nat) :
            wf_state(program(p))(pstate(s1)) IMPLIES
            derive(p)(try(b1), s1, v1, tau1)(m1) IMPLIES
            up?(ex(pstate(tau1))) IMPLIES
              (down(ex(pstate(tau1))) = JMLExc
              OR
              (down(ex(pstate(tau1))) = exc(b1) AND
               derive(p)(catch(b1),
                         update_PState(tau1, catch), v2, tau2)(m2) AND
               up?(ex(pstate(tau2))) AND
               down(ex(pstate(tau2))) = JMLExc)) IMPLIES
               EXISTS (s2 : FullState, v : Val, n : nat) :
                 derive(p)(b1, s1, v, s2)(n) AND
                 up?(ex(pstate(s2))) AND down(ex(pstate(s2))) = JMLExc)
        AND
        (Set?(b1) OR Assert?(b1) OR CaseJML?(b1) IMPLIES
          FORALL (s1 : FullState) :
            wf_state(program(p))(pstate(s1)) IMPLIES
            EXISTS (s2 : FullState, v : Val, n : nat) :
              derive(p)(b1, s1, v, s2)(n) AND
              v = return_of_stmt(s2))

  % if b1 respects legal_Body, then so do any subterms of b1
  legal_Body_preserved_by_proper_subterm : LEMMA % :-)
    FORALL(p : FullProgram)(b1, b2 : Body) :
      legal_Body(p)(b1) IMPLIES
      b2 << b1 IMPLIES
        legal_Body(p)(b2)

  IMPORTING FullProgramRestriction[Name, FullProgram, program]

  % a program is a legal_Program if all bodies it contains are legal_Bodies
  legal_Program(p : FullProgram) : bool =
    program_pred(p)(legal_Body)

END LegalProgramRestriction


% Instantiation of LegalProgramRestriction for annotated programs
LegalAnnotatedProgramRestriction[Name : TYPE+] : THEORY
BEGIN

  IMPORTING AnnotatedProgramSemantics[Name],
            LegalProgramRestriction[Name, Program, APState, id,
                      LAMBDA (s : APState) : pstate(s),
                      lookup,
                      update_PState,
                      execute_set,
                      execute_assert,
                      execute_CaseJML,
                      on_method_entry,
                      on_method_exit_normal,
                      on_method_exit_exceptional]

  legal_Body_AP(p : Program)(b : Body) : boolean =
    legal_Body(p)(b)

  legal_Program_AP(p : Program) : boolean =
    legal_Program(p)

END LegalAnnotatedProgramRestriction
