(AnnGenerationLemmas
 (exists_MVAVarDecl 0
  (exists_MVAVarDecl-1 nil 3389947699 3389947845
   ("" (skosimp)
    (("" (expand* "wf_state" "wf_AState" "wf_Store")
      (("" (expand "wf_Store")
        (("" (flatten)
          (("" (inst? -)
            (("" (expand "var_names") (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_AState const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   146353 140 t shostak))
 (execute_action_correctness 0
  (execute_action_correctness-1 nil 3389679564 3390044056
   ("" (induct "a")
    (("1" (skosimp)
      (("1" (expand* "ann_action" "execute_action" "deriv_stmt")
        (("1" (expand* "related_states" "MP_modeled?" "MVA_modeled?")
          (("1" (flatten)
            (("1" (inst? -8) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" -9)
        (("2" (expand "ann_action" -8)
          (("2" (expand "deriv_stmt" -8)
            (("2" (assert)
              (("2" (skosimp*)
                (("2"
                  (name "stA2"
                        "update(stA(astate(sMP!1)))(target(cons1_var!1))
                                          (eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1))))")
                  (("2"
                    (inst - "mp!1" "ap!1" "c!1" "m!1" "vn!1" "m2!1"
                     "sMVA!1"
                     "sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]]"
                     "tau!1" "sAP2!1")
                    (("2" (expand "related_states")
                      (("2" (assert)
                        (("2" (prop)
                          (("1"
                            (case "stA2 = update(stA(astate(sMP!1)))(target(cons1_var!1))
                                       (eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1))))")
                            (("1" (replace -1 -2)
                              (("1"
                                (hide -1 -3 -13 -14 -16)
                                (("1"
                                  (expand*
                                   "update"
                                   "deriv_stmt"
                                   "execute_set_AP")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (lift-if -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand*
                                             "specification_requirements"
                                             "well_behaved_MP"
                                             "well_behaved_Program")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (use
                                                 "ann_program_preserves_side_effect_freedom")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide
                                                     -7
                                                     -17
                                                     -18
                                                     -20
                                                     -21)
                                                    (("1"
                                                      (expand
                                                       "assertions_have_no_side_effects")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand "id")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?
                                                               -2)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "Set(target(cons1_var!1), source(cons1_var!1))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "sAP1!1"
                                                                         "tau!2"
                                                                         "v!1"
                                                                         "m1!1 - 1")
                                                                        (("1"
                                                                          (expand
                                                                           "deriv_expr"
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -8
                                                                             -9
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -16
                                                                             -17
                                                                             -18)
                                                                            (("1"
                                                                              (expand*
                                                                               "well_behaved_MVA"
                                                                               "eval_action_behavior")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "source(cons1_var!1)"
                                                                                   "v!1"
                                                                                   "sMP!1"
                                                                                   "sMVA!1"
                                                                                   "st(pstate(sMP!1))")
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil)
                           ("4" (postpone) nil nil)
                           ("5" (postpone) nil nil)
                           ("6" (postpone) nil nil)
                           ("7" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 3694491 6530 t shostak))
 (stmt_subterm_is_transitive 0
  (stmt_subterm_is_transitive-1 nil 3389442366 3389592011
   ("" (induct "c3")
    (("1" (skosimp*)
      (("1" (expand "<<" (-3 1))
        (("1" (use "every_is_forall[[Expr, Stmt]] ")
          (("1" (lemma "some_is_exists[[Expr, Stmt]]")
            (("1"
              (inst-cp -1
               "(LAMBDA (t: [Expr, Stmt]): c2!1 = t`2 OR c2!1 << t`2)"
               "CaseJML1_var!1")
              (("1"
                (inst -1
                 "(LAMBDA (t: [Expr, Stmt]): c1!1 = t`2 OR c1!1 << t`2)"
                 "CaseJML1_var!1")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (hide (-1 -3 -5 -6 -8 2))
                      (("1" (skolem!)
                        (("1" (flatten)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "c1!1" "c2!1")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "<<" (-4 1))
        (("2" (inst?) (("2" (inst?) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*)
      (("3" (expand "<<" (-4 1))
        (("3" (inst?) (("3" (inst?) (("3" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skosimp*)
      (("4" (expand "<<" -2) (("4" (propax) nil nil)) nil)) nil)
     ("5" (skosimp*)
      (("5" (expand "<<" -2) (("5" (propax) nil nil)) nil)) nil)
     ("6" (skosimp*)
      (("6" (expand "<<" -2) (("6" (propax) nil nil)) nil)) nil)
     ("7" (skosimp*)
      (("7" (expand "<<" -2) (("7" (propax) nil nil)) nil)) nil)
     ("8" (skosimp*)
      (("8" (expand "<<" (-5 1))
        (("8" (inst?)
          (("8" (inst?) (("8" (inst?) (("8" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("9" (skosimp*)
      (("9" (expand "<<" (-3 1))
        (("9" (inst?) (("9" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished
   ((Stmt type-decl nil Stmt_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Stmt_induction formula-decl nil Stmt_adt nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (every_is_forall formula-decl nil listfuncs nil)
    (Expr type-decl nil Expr_adt nil))
   419212 670 t shostak))
 (sub_set_stmt_TCC1 0
  (sub_set_stmt_TCC1-1 nil 3389522735 3389599430
   ("" (induct "a")
    (("1" (assert) nil nil)
     ("2" (skosimp*)
      (("2" (expand "length" 2 2)
        (("2" (decompose-equality -2)
          (("2" (use "list_is_null_or_cons[OneAction]")
            (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_is_null_or_cons formula-decl nil listfuncs nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (length def-decl "nat" list_props nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Stmt type-decl nil Stmt_adt nil) (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   82344 310 t nil))
 (sub_set_stmt_ann_action_is_subterm 0
  (sub_set_stmt_ann_action_is_subterm-1 nil 3389592824 3389593066
   ("" (induct "a")
    (("1" (expand "sub_set_stmt") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" 1)
        (("2" (expand "sub_set_stmt" -2)
          (("2" (expand "<<" 1)
            (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (sub_set_stmt def-decl "boolean" AnnGenerationLemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Stmt type-decl nil Stmt_adt nil) (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   241911 210 t shostak))
 (non_interference_of_sets_in_ann_actions 0
  (non_interference_of_sets_in_ann_actions-1 nil 3389611307 3389614462
   ("" (induct "a")
    (("1" (expand* "sub_set_stmt" "ann_action" "deriv_stmt")
      (("1" (skosimp) (("1" (assert) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" -3)
        (("2" (expand "deriv_stmt" -3)
          (("2" (assert)
            (("2" (prop)
              (("2" (skosimp*)
                (("2" (expand "deriv_stmt" -2)
                  (("2" (expand "execute_set_AP")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2"
                          (inst-cp -9
                           "Set(target(cons1_var!1), source(cons1_var!1))")
                          (("2" (expand "sub_set_stmt" -10)
                            (("2" (flatten)
                              (("2"
                                (inst
                                 -10
                                 "s1!1"
                                 "tau!2"
                                 "v!1"
                                 "m1!1 -1")
                                (("1"
                                  (expand "deriv_expr" -10)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst
                                       -8
                                       "p!1"
                                       "tau!1"
                                       "s2!1"
                                       "m2!1"
                                       "vn!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (expand
                                               "sub_set_stmt"
                                               -10)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (source adt-accessor-decl "[(Set?) -> Expr[Name]]" Stmt_adt nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (on_method_exit_exceptional_AP const-decl "(on_method_event_type)"
     AnnotatedProgramSemantics nil)
    (on_method_exit_normal_AP const-decl "(on_method_event_type)"
     AnnotatedProgramSemantics nil)
    (on_method_entry_AP const-decl "(on_method_event_type)"
     AnnotatedProgramSemantics nil)
    (on_method_event_type const-decl "bool" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)"
     SemanticsCommon nil)
    (execute_CaseJML_type const-decl "bool" SemanticsTypes nil)
    (execute_set_AP const-decl "(execute_set_type)"
     AnnotatedProgramSemantics nil)
    (execute_set_type const-decl "bool" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (update_state_AP const-decl "(update_FullState_type)"
     AnnotatedProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lookup const-decl "Val" AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (sub_set_stmt def-decl "boolean" AnnGenerationLemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   121942 1430 t shostak))
 (ann_action_sets_mva_vars 0
  (ann_action_sets_mva_vars-1 nil 3389599475 3389609733
   ("" (induct "l")
    (("1" (expand "sub_set_stmt") (("1" (propax) nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "sub_set_stmt" -4)
        (("2" (split)
          (("1" (replace -1 -5)
            (("1" (beta)
              (("1" (hide -2)
                (("1" (expand "wf_Action")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "member") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -2 "vn!1" "c!1" "a!1")
            (("2" (assert)
              (("2" (expand "wf_Action")
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (Stmt type-decl nil Stmt_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (sub_set_stmt def-decl "boolean" AnnGenerationLemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (set type-eq-decl nil sets nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Expr type-decl nil Expr_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list_induction formula-decl nil list_adt nil)
    (member def-decl "bool" list_props nil))
   99445 390 t shostak))
 (sequence_of_sets_have_no_side_effects 0
  (sequence_of_sets_have_no_side_effects-1 nil 3389433630 3389502701
   ("" (skosimp*)
    (("" (expand "assertions_have_no_side_effects")
      (("" (inst?)
        (("" (expand "id")
          (("" (prop)
            (("" (inst? -2)
              (("" (prop)
                (("" (inst? -3)
                  (("" (assert)
                    (("" (hide -1 -2 -4 -5 -6 -9 1)
                      (("" (split)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (expand* "set_subterm_AP" "set_subterm")
                          (("2" (lemma "stmt_subterm_is_transitive")
                            (("2" (prop)
                              (("1"
                                (inst
                                 -
                                 "c!1"
                                 "update_vars(t!1)"
                                 "pre_set(m!1)")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (inst
                                 -
                                 "c!1"
                                 "update_vars(t!1)"
                                 "post_set(m!1)")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (inst
                                 -
                                 "c!1"
                                 "update_vars(t!1)"
                                 "exc_set(m!1)")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (stmt_subterm_is_transitive formula-decl nil AnnGenerationLemmas
     nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (set_subterm_AP const-decl "boolean" AnnotatedProgramSemantics nil)
    (set_subterm const-decl "boolean" Semantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (assertions_have_no_side_effects const-decl "boolean" Semantics
     nil))
   197378 1120 t shostak))
 (update_vars_correctness 0
  (update_vars_correctness-1 nil 3389614884 3390034996
   ("" (skosimp*)
    ((""
      (expand* "related_states" "MP_modeled?" "update_vars"
       "deriv_stmt")
      (("" (assert)
        (("" (skosimp*)
          (("" (lemma "non_interference_of_sets_in_ann_actions")
            (("" (case "cps(mva(mp!1))(tcp(t!1))")
              (("1" (expand "MVA_modeled?")
                (("1" (split)
                  (("1"
                    (inst - "ap!1" "action(t!1)" "tau!1" "sAP2!1"
                     "m2!1" "cp")
                    (("1" (assert)
                      (("1" (split)
                        (("1" (replace -14 1)
                          (("1" (beta)
                            (("1" (flatten)
                              (("1"
                                (inst - "tcp(t!1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but
                                     (-1 -2 -4 -7 -9 -18 1))
                                    (("1"
                                      (expand*
                                       "deriv_stmt"
                                       "execute_set_AP")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (expand "deriv_expr")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "Int(unique(tcp(t!1))) = gvs(tau!1)(cp)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replace -11 1)
                                                  (("2"
                                                    (beta)
                                                    (("2"
                                                      (expand*
                                                       "eval"
                                                       "lookup")
                                                      (("2"
                                                        (use
                                                         "ann_program_defines_MVA_vars")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "wf_state_ghost_not_local_or_field")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "ap!1"
                                                               "sAP1!1"
                                                               "name_of(tcp(t!1))")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "is_local"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "is_field"
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -8
                                                                         3)
                                                                        (("1"
                                                                          (replace
                                                                           -13
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "val2int")
                                                                            (("1"
                                                                              (apply-extensionality
                                                                               3)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?
                                                                   -)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (split +)
                            (("1" (use "ann_action_sets_mva_vars")
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (expand*
                                     "ann_program_pre"
                                     "disjoint_model_vars"
                                     "var_names")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (inst - "va!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand*
                                     "ann_program_pre"
                                     "wf_MP"
                                     "wf_MVA")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst - "t!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (lemma
                               "sequence_of_sets_have_no_side_effects")
                              (("2"
                                (inst
                                 -1
                                 "ap!1"
                                 "a!1"
                                 "m!1"
                                 "c!1"
                                 "t!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "update_vars")
                                      (("1"
                                        (expand "<<" 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (use
                                             "sub_set_stmt_ann_action_is_subterm")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand*
                                       "set_subterm_AP"
                                       "set_subterm"
                                       "update_vars")
                                      nil
                                      nil)
                                     ("3"
                                      (expand*
                                       "specification_requirements"
                                       "well_behaved_MP"
                                       "well_behaved_Program")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (use
                                           "ann_program_preserves_side_effect_freedom")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2"
                      (inst - "ap!1" "action(t!1)" "tau!1" "sAP2!1"
                       "m2!1" "name_of(q!1)")
                      (("2" (expand "deriv_stmt" -19)
                        (("2" (expand "execute_set_AP")
                          (("2" (skosimp*)
                            (("2" (expand "deriv_expr" -21)
                              (("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (replace -24 -1)
                                      (("1"
                                        (expand*
                                         "ann_program_pre"
                                         "disjoint_model_vars")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst -9 "q!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -15 "q!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp)
                                      (("2"
                                        (split)
                                        (("1"
                                          (use
                                           "ann_action_sets_mva_vars")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split)
                                              (("1"
                                                (expand "var_names")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (expand*
                                                     "ann_program_pre"
                                                     "disjoint_model_vars")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -14
                                                         "q!1"
                                                         "va!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand*
                                                 "ann_program_pre"
                                                 "wf_MP"
                                                 "wf_MVA")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst - "t!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use
                                           "sequence_of_sets_have_no_side_effects")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (expand "update_vars")
                                                (("1"
                                                  (expand "<<" 1)
                                                  (("1"
                                                    (use
                                                     "sub_set_stmt_ann_action_is_subterm")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand*
                                                 "set_subterm_AP"
                                                 "set_subterm"
                                                 "update_vars")
                                                nil
                                                nil)
                                               ("3"
                                                (expand*
                                                 "specification_requirements"
                                                 "well_behaved_MP"
                                                 "well_behaved_Program")
                                                (("3"
                                                  (use
                                                   "ann_program_preserves_side_effect_freedom")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skosimp)
                    (("3" (hide -2 -13 -14 -17)
                      (("3" (inst-cp -9 "n!2")
                        (("3"
                          (case "NOT Bottom?(stA(astate(sMP!1))(n!2))")
                          (("1" (assert)
                            (("1" (expand "deriv_stmt" -15)
                              (("1"
                                (expand* "execute_set_AP" "deriv_expr")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -17)
                                      (("1"
                                        (lemma
                                         "execute_action_correctness")
                                        (("1"
                                          (inst
                                           -
                                           "mp!1"
                                           "ap!1"
                                           "action(t!1)"
                                           "n!2"
                                           "m2!1"
                                           "sMVA!1"
                                           "sMP!1 WITH [astate := astate(sMP!1) WITH [cp := tcp(t!1)]]"
                                           "tau!1"
                                           "sAP2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide
                                               -16
                                               -17
                                               -19
                                               -23
                                               2
                                               4)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand*
                                                   "ann_program_pre"
                                                   "wf_MP"
                                                   "wf_MVA")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst - "t!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "MP_modeled?")
                                                  (("2"
                                                    (replace -17 1)
                                                    (("2"
                                                      (expand*
                                                       "MVA_modeled?"
                                                       "Program_modeled?")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand*
                                                           "eval"
                                                           "lookup")
                                                          (("1"
                                                            (lemma
                                                             "ann_program_defines_MVA_vars")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "mp!1"
                                                               "ap!1"
                                                               "sAP1!1")
                                                              (("1"
                                                                (lemma
                                                                 "wf_state_ghost_not_local_or_field")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "ap!1"
                                                                   "sAP1!1"
                                                                   "name_of(tcp(t!1))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "tcp(t!1)")
                                                                        (("1"
                                                                          (inst
                                                                           -12
                                                                           "tcp(t!1)")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (expand
                                                                               "is_local"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "is_field"
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "val2int")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -20
                                                                                       3)
                                                                                      (("1"
                                                                                        (case
                                                                                         "gvs(tau!2)(name_of(tcp(t!1))) = Int(unique(tcp(t!1)))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           3)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             3)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst? -)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -9)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (expand*
                                                                       "ann_program_pre"
                                                                       "disjoint_model_vars")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?
                                                                           -9)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skosimp)
                                                          (("3"
                                                            (inst
                                                             -9
                                                             "n!3")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (replace
                                                                 -9
                                                                 2)
                                                                (("3"
                                                                  (lift-if)
                                                                  (("3"
                                                                    (prop)
                                                                    (("3"
                                                                      (replace
                                                                       -18
                                                                       1)
                                                                      (("3"
                                                                        (use
                                                                         "exists_MVAVarDecl")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (skosimp)
                                                                            (("3"
                                                                              (expand*
                                                                               "ann_program_pre"
                                                                               "disjoint_model_vars")
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skosimp)
                                                          (("4"
                                                            (inst? -12)
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (replace
                                                                 -12
                                                                 2)
                                                                (("4"
                                                                  (expand
                                                                   "wf_state"
                                                                   -5)
                                                                  (("4"
                                                                    (flatten)
                                                                    (("4"
                                                                      (inst?
                                                                       -)
                                                                      (("4"
                                                                        (expand*
                                                                         "is_ghost"
                                                                         "is_declared_as_ghost")
                                                                        (("4"
                                                                          (skosimp)
                                                                          (("4"
                                                                            (expand*
                                                                             "ann_program_pre"
                                                                             "not_clashing_model_vars")
                                                                            (("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (inst
                                                                                 -
                                                                                 "c!1")
                                                                                (("4"
                                                                                  (prop)
                                                                                  (("4"
                                                                                    (inst?
                                                                                     -)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      (("4"
                                                                                        (lift-if)
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "wf_AState(mva(mp!1))(sMVA!1)")
                            (("1" (expand "wf_state" -7)
                              (("1"
                                (expand "wf_state" -7)
                                (("1"
                                  (expand* "wf_AState" "wf_Store")
                                  (("1"
                                    (expand "wf_Store")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst? -)
                                        (("1"
                                          (inst? -)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand* "wf_AState" "wf_Store")
                              (("2"
                                (replace -15 1)
                                (("2"
                                  (beta)
                                  (("2"
                                    (use
                                     "execute_action_yields_wf_state")
                                    (("2"
                                      (expand*
                                       "ann_program_pre"
                                       "wf_MP"
                                       "wf_MVA")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "wf_state" -17)
                                            (("2"
                                              (expand "wf_AState")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "wf_Store"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "wf_state"
                                                           -21)
                                                          (("2"
                                                            (expand
                                                             "wf_PSt")
                                                            (("2"
                                                              (expand
                                                               "wf_PSt")
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (expand
                                                                       "is_field"
                                                                       -24)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -15
                                                                            4))
                                                                          (("2"
                                                                            (expand
                                                                             "compatible")
                                                                            (("2"
                                                                              (skosimp)
                                                                              (("2"
                                                                                (expand*
                                                                                 "var_names"
                                                                                 "is_declared_as_field")
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* "ann_program_pre" "wf_MP" "wf_MVA")
                (("2" (flatten)
                  (("2" (inst -7 "t!1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((MP_modeled? const-decl "boolean" AnnGenerationLemmas nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (related_states const-decl "boolean" AnnGenerationLemmas nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (sequence_of_sets_have_no_side_effects formula-decl nil
     AnnGenerationLemmas nil)
    (well_behaved_MP const-decl "boolean" MonitoredProgramSemantics
     nil)
    (well_behaved_Program const-decl "boolean" Semantics nil)
    (specification_requirements const-decl "boolean"
     AnnGenerationLemmas nil)
    (ann_program_preserves_side_effect_freedom formula-decl nil
     AnnotateProgramProperties nil)
    (set_subterm_AP const-decl "boolean" AnnotatedProgramSemantics nil)
    (set_subterm const-decl "boolean" Semantics nil)
    (sub_set_stmt_ann_action_is_subterm formula-decl nil
     AnnGenerationLemmas nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (ann_action_sets_mva_vars formula-decl nil AnnGenerationLemmas nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (execute_set_AP const-decl "(execute_set_type)"
     AnnotatedProgramSemantics nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lookup const-decl "Val" AnnotatedProgramSemantics nil)
    (eval def-decl "int" Evaluation nil)
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (is_local const-decl "boolean" SemanticsCommon nil)
    (i adt-accessor-decl "[(Int?) -> int]" Val_adt nil)
    (Val_Int_extensionality formula-decl nil Val_adt nil)
    (val2int const-decl "int" State nil)
    (is_field const-decl "boolean" SemanticsCommon nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (unique const-decl "(injective?[CP, nat])" AnnotateProgram nil)
    (injective? const-decl "bool" functions nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cp const-decl "string" AnnotateProgram nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (ArgDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (GhostVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Program_modeled? const-decl "boolean" AnnGenerationLemmas nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (not_clashing_model_vars const-decl "boolean" AnnotateProgram nil)
    (is_ghost const-decl "boolean" MonitoredProgramSemantics nil)
    (is_declared_as_ghost const-decl "boolean" WellFormedProgram nil)
    (exists_MVAVarDecl formula-decl nil AnnGenerationLemmas nil)
    (execute_action_correctness formula-decl nil AnnGenerationLemmas
     nil)
    (is_field const-decl "boolean" State nil)
    (is_declared_as_field const-decl "boolean" WellFormedProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (PSt type-eq-decl nil State nil)
    (execute_action_yields_wf_state formula-decl nil MVASemantics nil)
    (wf_state const-decl "boolean" State nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (MVA_modeled? const-decl "boolean" AnnGenerationLemmas nil)
    (non_interference_of_sets_in_ann_actions formula-decl nil
     AnnGenerationLemmas nil))
   2970191 22860 t shostak))
 (guard_to_expr_exists 0
  (guard_to_expr_exists-1 nil 3387889632 3387889644
   ("" (postpone) nil nil) unchecked nil 11882 20 t shostak))
 (ann_guard_actions_not_empty_TCC1 0
  (ann_guard_actions_not_empty_TCC1-1 nil 3389433624 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (ann_guard_actions_not_empty 0
  (ann_guard_actions_not_empty-1 nil 3387878573 3387890701
   ("" (skosimp)
    ((""
      (expand* "wf_MP" "ann_guard_actions" "complete" "wf_MVA" "total")
      (("" (flatten)
        (("" (expand "set2list")
          (("" (lift-if)
            (("" (assert)
              (("" (prop)
                (("" (expand* "empty?" "member")
                  (("" (hide -2 -3 -4 -5 -7 -8 -9 -11 -12 1)
                    (("" (skolem 1 "t")
                      (("" (inst? -2)
                        (("" (replace -5 -4)
                          (("" (ground)
                            ((""
                              (name "e"
                                    "choose({e : Expr[string] | (FORALL (stA: (wf_Store(mva(mp!1))),
                                stP: (wf_PSt(mva(mp!1))))
                               (sMP1, sMP2: MPState[CP, string], v: Val, n: nat):
                          pstate(sMP1) = (# ex := bottom, st := stP #) IMPLIES
                           deriv_expr(mp!1)(e, sMP1, v, sMP2)(n) IMPLIES
                            Bool?(v) IMPLIES b(v) = guard(t)(stA, stP))})")
                              (("1"
                                (inst -7 "(e, upd_vars(t))")
                                (("1"
                                  (inst 1 "t")
                                  (("1"
                                    (split)
                                    (("1"
                                      (replace -9 1)
                                      (("1"
                                        (beta)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (typepred "e")
                                        (("2"
                                          (inst
                                           -1
                                           "stA!1"
                                           "stP!1"
                                           "sMP1!1"
                                           "sMP2!1"
                                           "v!1"
                                           "n!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "guard_to_expr_exists")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateProgram
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (set2list def-decl "list[T]" set2list nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (ArgDecl type-eq-decl nil Program nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)"
     SemanticsCommon nil)
    (execute_CaseJML_type const-decl "bool" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set_MP const-decl "(execute_set_type)"
     MonitoredProgramSemantics nil)
    (execute_set_type const-decl "bool" SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (Stmt type-decl nil Stmt_adt nil)
    (update_state_MP const-decl "(update_FullState_type)"
     MonitoredProgramSemantics nil)
    (update_FullState_type const-decl "bool" SemanticsTypes nil)
    (bottom adt-constructor-decl "(bottom?)" lift_adt nil)
    (bottom? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (PSt type-eq-decl nil State nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Store type-eq-decl nil State nil) (Val type-decl nil Val_adt nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Expr type-decl nil Expr_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (guard_to_expr_exists formula-decl nil AnnGenerationLemmas nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil))
   76800 1840 t shostak))
 (MP_modeled_preserved_by_ann_event_TCC1 0
  (MP_modeled_preserved_by_ann_event_TCC1-1 nil 3387890776 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (MP_modeled_preserved_by_ann_event_TCC2 0
  (MP_modeled_preserved_by_ann_event_TCC2-1 nil 3388218848 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (MP_modeled_preserved_by_ann_event_TCC3 0
  (MP_modeled_preserved_by_ann_event_TCC3-1 nil 3389014204 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (MP_modeled_preserved_by_ann_event_TCC4 0
  (MP_modeled_preserved_by_ann_event_TCC4-1 nil 3389433624 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (MP_modeled_preserved_by_ann_event 0
  (MP_modeled_preserved_by_ann_event-1 nil 3387890818 3388750034
   ("" (skosimp*)
    ((""
      (expand* "ann_event" "related_states" "on_method_MVA"
       "MP_modeled" "deriv_stmt")
      (("" (flatten)
        (("" (assert)
          (("" (flatten)
            (("" (lift-if)
              (("" (expand "execute_CaseJML")
                (("" (split)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (expand "set2list")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand* "step" "deriv_stmt")
                          (("2" (skosimp)
                            (("2"
                              (name "t1"
                                    "choose(LAMBDA (t: Transition[CP, string]):
                                                 ts(mva(mp!1))(t) AND
                                                  scp(t) = cp(astate(sMP1!1)) AND
                                                   event(t) =
                                                    (# etype := et!1, mname := name(m1!1) #)
                                                    AND
                                                    guard(t)
                                                        (stA(astate(sMP1!1)),
                                                         st(pstate(sMP1!1))))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "choose")
                                  (("1"
                                    (use "epsilon_ax[Transition]")
                                    (("1"
                                      (replace -2 -1)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -5 -6 -10 -19)
                                          (("1"
                                            (name "q1" "scp(t1)")
                                            (("1"
                                              (case
                                               "FORALL (q: CP): is_finite({t: Transition | ts!1(t) AND scp(t) = q})")
                                              (("1"
                                                (name
                                                 "C1"
                                                 "{c : [Expr, Stmt] | EXISTS (q : CP):
                                       cps(mva(mp!1))(q) AND
                                       nonempty?({t: Transition | ts!1(t) AND scp(t) = q}) AND
                                       c = ann_trans_cp(mp!1)(q, {t : Transition | ts!1(t) AND scp(t) = q})}")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "C1(ann_trans_cp(mp!1)(q1, {t : Transition | ts!1(t) AND scp(t) = q1}))")
                                                    (("1"
                                                      (name
                                                       "brT"
                                                       "ann_trans_cp(mp!1)(q1, {t: Transition | ts!1(t) AND scp(t) = q1})")
                                                      (("1"
                                                        (case
                                                         "EXISTS (tau : APState, n : nat): deriv_stmt(ap!1)(PROJ_2(brT), sAP1!1, tau)(n)")
                                                        (("1"
                                                          (skolem!)
                                                          (("1"
                                                            (lemma
                                                             "CaseJML_exclusive_branches_semantics")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "ap!1"
                                                               "set2list(C1)"
                                                               "sAP1!1"
                                                               "sAP2!1"
                                                               "tau!2"
                                                               "n!2"
                                                               "n!1"
                                                               "brT")
                                                              (("1"
                                                                (reveal
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (rewrite
                                                                       -1)
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -5
                                                                         -6
                                                                         -13
                                                                         -14
                                                                         -15
                                                                         -16
                                                                         1)
                                                                        (("1"
                                                                          (case
                                                                           "deriv_stmt(ap!1)(PROJ_2(ann_trans_cp(mp!1)(q1, {t: Transition | ts!1(t) AND scp(t) = q1})),
                              sAP1!1, tau!2)(n!2)")
                                                                          (("1"
                                                                            (hide
                                                                             -3
                                                                             -4)
                                                                            (("1"
                                                                              (expand*
                                                                               "deriv_stmt"
                                                                               "execute_CaseJML"
                                                                               "ann_trans_cp")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "ann_guard_actions_not_empty")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "mp!1"
                                                                                     "({t: Transition | ts!1(t) AND scp(t) = q1})"
                                                                                     "q1"
                                                                                     "(# etype := et!1, mname := name(m1!1) #)")
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "deriv_stmt")
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "ann_guard_actions")
                                                                                              (("1"
                                                                                                (name
                                                                                                 "C2"
                                                                                                 "{x: [Expr, Stmt] | EXISTS (t_1: Transition):
  (ts!1(t_1) AND scp(t_1) = q1) AND
  (FORALL (stA: (wf_Store(mva(mp!1))), stP: (wf_PSt(mva(mp!1))))
          (sMP1, sMP2: MPState, v: Val, n: nat):
    pstate(sMP1) = (# ex := bottom, st := stP #) IMPLIES
    deriv_expr(mp!1)(PROJ_1(x), sMP1, v, sMP2)(n) IMPLIES
    Bool?(v) IMPLIES
      b(v) = guard(t_1)(stA, stP)) AND
      PROJ_2(x) = Sequence(Set (\"cp\", NExpr(NumVarEval(name_of(tcp(t_1))))),
                           ann_action(action(t_1)))}")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "guard_to_expr_exists")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "mp!1"
                                                                                                       "t1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand*
                                                                                                           "nonempty?"
                                                                                                           "empty?"
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (skosimp)
                                                                                                            (("1"
                                                                                                              (postpone)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -16
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (apply-extensionality)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                (("2"
                                                                                                  (apply-extensionality)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand*
                                                                                         "empty?"
                                                                                         "member")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "t1")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (replace
                                                                                               -16
                                                                                               1)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "filter_event")
                                                                                                (("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (expand
                                                                                         "ann_program_pre")
                                                                                        (("4"
                                                                                          (flatten)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "q1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "deriv_stmt"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (expand
                                                                           "deriv_stmt"
                                                                           1)
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "m2!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skosimp)
                                                                      (("4"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (replace
                                                                       -4
                                                                       -5)
                                                                      (("5"
                                                                        (lemma
                                                                         "set2list_same_elements[[Expr, Stmt]]")
                                                                        (("5"
                                                                          (inst
                                                                           -1
                                                                           "C1"
                                                                           "brT")
                                                                          (("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (expand
                                                                               "member"
                                                                               -1
                                                                               1)
                                                                              (("5"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "CaseJML_evalueates_true_stmt")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "ap!1"
                                                             "set2list(C1)"
                                                             "sAP1!1"
                                                             "sAP2!1"
                                                             "n!1"
                                                             "brT")
                                                            (("2"
                                                              (reveal
                                                               -4)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "deriv_stmt"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "execute_CaseJML")
                                                                      (("2"
                                                                        (expand
                                                                         "deriv_stmt"
                                                                         1)
                                                                        (("2"
                                                                          (reveal
                                                                           -3)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "tau!1"
                                                                             "v!1"
                                                                             "m1!2"
                                                                             "m2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (postpone)
                                                                    nil
                                                                    nil)
                                                                   ("5"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "C1 = {c: [Expr, Stmt] | EXISTS (q: CP):
                                           cps(mva(mp!1))(q) AND
                                           nonempty?({t: Transition | ts!1(t) AND scp(t) = q}) AND
                                           c = ann_trans_cp(mp!1)(q, {t: Transition | ts!1(t) AND scp(t) = q})}")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "q1")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (expand*
                                                                 "ann_program_pre"
                                                                 "wf_MP"
                                                                 "complete"
                                                                 "wf_MVA")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst
                                                                     -18
                                                                     "t1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 "nonempty?"
                                                                 "empty?"
                                                                 "member"
                                                                 "filter_event")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "t1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -19
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "ann_program_pre")
                                                      (("3"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "ann_program_pre")
                                                  (("2"
                                                    (skosimp)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp)
                                                  (("3"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-16 1))
                                                (("2"
                                                  (lemma
                                                   "finite_subset[Transition]")
                                                  (("2"
                                                    (skolem!)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "ts(mva(mp!1))"
                                                       "{t: Transition | ts!1(t) AND scp(t) = q!1}")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand*
                                                           "subset?"
                                                           "member"
                                                           "filter_event")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (flatten)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 1 "t1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-6 -8 -10 1))
                                (("2"
                                  (use "wf_state_implies_wf_PSt")
                                  (("2"
                                    (expand "ann_program_pre")
                                    (("2"
                                      (expand "wf_state" -4)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             "wf_MP"
                                             "complete"
                                             "wf_MVA"
                                             "total"
                                             "wf_AState"
                                             "nonempty?"
                                             "empty?"
                                             "member")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst
                                                 -12
                                                 "cp(astate(sMP1!1))"
                                                 "(# etype := et!1, mname := name(m1!1) #)"
                                                 "stA(astate(sMP1!1))"
                                                 "st(pstate(sMP1!1))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skolem!)
                                                    (("2"
                                                      (inst? -2)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "empty?(ts!1)")
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (prop)
                          (("1" (hide-all-but (-2 1))
                            (("1"
                              (expand* "set2list" "empty?" "nonempty?"
                               "member")
                              (("1"
                                (lift-if)
                                (("1"
                                  (assert)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (expand* "empty?" "member")
                                        (("1"
                                          (skosimp)
                                          (("1" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand* "empty?" "member")
                      (("2" (skolem!)
                        (("2" (assert)
                          (("2" (hide-all-but (-1 -2 -3 -8))
                            (("2"
                              (expand* "ann_program_pre" "wf_MP"
                               "complete" "wf_MVA" "filter_event")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -7 "x!1")
                                  (("2"
                                    (replace -15 -1)
                                    (("2"
                                      (ground)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "event(x!1) = (# etype := et!1, mname := name(m1!1) #)")
                                          (("1"
                                            (replace -1 -4)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 19355222 13330 t shostak)))

