(AnnGenerationLemmas
 (IMP_Equivalence_TCC1 0
  (IMP_Equivalence_TCC1-1 nil 3390907940 3393582824
   ("" (lemma "CP_is_enumerable") (("" (propax) nil nil)) nil)
   unchecked
   ((CP_is_enumerable formula-decl nil AnnGenerationLemmas nil)) 240
   120 t nil))
 (execute_action_correctness 0
  (execute_action_correctness-2 nil 3391434568 3394455461
   ("" (induct "a")
    (("1" (skosimp)
      (("1"
        (expand* "ann_action" "execute_action" "deriv_stmt"
         "related_states" "MP_modeled?" "MVA_modeled?"
         "MVA_vars_modeled?")
        (("1" (skosimp)
          (("1" (inst -7 "n!2") (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" -8)
        (("2" (expand "ann_action" -7)
          (("2" (expand "deriv_stmt" -7)
            (("2" (assert)
              (("2" (skosimp*)
                (("2"
                  (name "stA2" "update(stA(astate(sMP!1)))
                                                                                                          (target(cons1_var!1))
                                                                                                          (eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1))))")
                  (("2"
                    (inst - "mp!1" "ap!1" "c!1" "m!1" "m2!1"
                     "sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]]"
                     "sMVA2!1" "tau!1" "sAP2!1")
                    (("2"
                      (case "defined?(eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1)))) AND
         MP_modeled?(mp!1)(sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]], tau!1)")
                      (("1" (expand "related_states")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (hide-all-but (-1 -15 1))
                              (("1"
                                (expand* "deriv_stmt" "execute_set")
                                (("1"
                                  (skosimp*)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "wf_Action")
                              (("2"
                                (skosimp)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "member" -13)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "ann_action" -11)
                              (("3"
                                (use
                                 "proper_subterm_set_clause_sequence[string]")
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (hide-all-but (-1 -3 -4 -6 -12 1))
                              (("4"
                                (expand "wf_state")
                                (("4"
                                  (replace -2 1 :dir rl)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (expand "wf_AState")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "wf_Store")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (hide -2 -4 -6 -7)
                                                (("1"
                                                  (expand "update")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (expand
                                                         "wf_Action")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "cons1_var!1")
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "wf_ghoststate")
                                      (("2"
                                        (skolem!)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "is_ghost")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (use "deriv_stmt_yields_wf_state_AP")
                              (("5"
                                (assert)
                                (("5"
                                  (expand*
                                   "specification_requirements"
                                   "wf_MP")
                                  (("5"
                                    (flatten)
                                    (("5"
                                      (use
                                       "ann_program_yields_wf_program")
                                      (("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 -8 -10 -11 3)
                        (("2"
                          (expand* "related_states"
                           "specification_requirements"
                           "well_behaved_MP" "deriv_stmt"
                           "execute_set")
                          (("2" (skosimp*)
                            (("2"
                              (use "ann_program_preserves_well_behaved_Program")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -4 -6 -16 -17)
                                  (("2"
                                    (expand "well_behaved_Program")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (expand "id")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst? -)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -
                                                   "Set(target(cons1_var!1), source(cons1_var!1))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -)
                                                      (("1"
                                                        (hide
                                                         -2
                                                         -3
                                                         -4
                                                         -13
                                                         -14
                                                         -15)
                                                        (("1"
                                                          (expand*
                                                           "expr_has_no_side_effects"
                                                           "well_behaved_MVA"
                                                           "eval_action_behavior")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "sAP1!1"
                                                             "tau!2"
                                                             "v!1"
                                                             "m1!1 - 1")
                                                            (("1"
                                                              (expand
                                                               "deriv_expr"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "source(cons1_var!1)"
                                                                   "v!1"
                                                                   "sAP1!1"
                                                                   "astate(sMP!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (case
                                                                               "st(pstate(sAP1!1)) = st(pstate(sMP!1))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -4)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "defined?(v!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "update_GhostVars"
                                                                                               "update_store")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -15
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -14
                                                                                                   -15)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "wf_Action"
                                                                                                     "var_names")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             "MP_modeled?"
                                                                                                             "MVA_modeled?"
                                                                                                             "Program_modeled?")
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     "ann_program_pre"
                                                                                                                     "wf_new_vars"
                                                                                                                     "disjoint_model_vars")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("2"
                                                                                                                          (expand*
                                                                                                                           "ann_program_pre"
                                                                                                                           "wf_new_vars"
                                                                                                                           "disjoint_model_vars")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -7
                                                                                                                               "q!1"
                                                                                                                               "f!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (expand
                                                                                                                 "MVA_vars_modeled?")
                                                                                                                (("3"
                                                                                                                  (skosimp)
                                                                                                                  (("3"
                                                                                                                    (expand
                                                                                                                     "update")
                                                                                                                    (("3"
                                                                                                                      (lift-if)
                                                                                                                      (("3"
                                                                                                                        (prop)
                                                                                                                        (("3"
                                                                                                                          (inst?
                                                                                                                           -11)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (expand
                                                                                                                 "halted_implies_JMLExc")
                                                                                                                (("4"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("5"
                                                                                                                (skosimp)
                                                                                                                (("5"
                                                                                                                  (lift-if)
                                                                                                                  (("5"
                                                                                                                    (inst?
                                                                                                                     -14)
                                                                                                                    (("5"
                                                                                                                      (prop)
                                                                                                                      (("5"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("5"
                                                                                                                          (expand
                                                                                                                           "wf_state"
                                                                                                                           -9)
                                                                                                                          (("5"
                                                                                                                            (flatten)
                                                                                                                            (("5"
                                                                                                                              (expand
                                                                                                                               "wf_ghoststate")
                                                                                                                              (("5"
                                                                                                                                (inst?)
                                                                                                                                (("5"
                                                                                                                                  (expand*
                                                                                                                                   "is_ghost"
                                                                                                                                   "var_names")
                                                                                                                                  (("5"
                                                                                                                                    (assert)
                                                                                                                                    (("5"
                                                                                                                                      (skosimp)
                                                                                                                                      (("5"
                                                                                                                                        (expand
                                                                                                                                         "getGhostDecls")
                                                                                                                                        (("5"
                                                                                                                                          (skosimp)
                                                                                                                                          (("5"
                                                                                                                                            (expand*
                                                                                                                                             "ann_program_pre"
                                                                                                                                             "wf_new_vars")
                                                                                                                                            (("5"
                                                                                                                                              (flatten)
                                                                                                                                              (("5"
                                                                                                                                                (inst?)
                                                                                                                                                (("5"
                                                                                                                                                  (split)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       1
                                                                                                                                                       3
                                                                                                                                                       4)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand*
                                                                                                                                                         "var_names"
                                                                                                                                                         "getGhostDecls")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           1
                                                                                                                                                           "f!2")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               1
                                                                                                                                                               "c!2")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand*
                                                                                                                                                     "new_gvds"
                                                                                                                                                     "var_names")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "f!1")
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?
                                                                                                                                                             3)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "deriv_expr_bottom_iff_exception_step_AP")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "deriv_expr"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "defined?"
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand*
                                                                                 "MP_modeled?"
                                                                                 "Program_modeled?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -12)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               1
                                                                               "m1!1-1")
                                                                              (("2"
                                                                                (expand
                                                                                 "deriv_expr"
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand*
                                                                         "MP_modeled?"
                                                                         "MVA_modeled?")
                                                                        (("2"
                                                                          (flatten)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "ann_action")
                                                        (("2"
                                                          (use
                                                           "proper_subterm_set_clause_sequence[string]")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (related_states const-decl "boolean" Equivalence nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Excpt type-decl nil Excpt_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (execute_action def-decl "Store" MVASemantics nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Expr type-decl nil Expr_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list_induction formula-decl nil list_adt nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (well_behaved_Program const-decl "boolean" Semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_expr_bottom_iff_exception_step_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    nil (Program_modeled? const-decl "boolean" Equivalence nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (new_gvds const-decl "finite_set[FieldDecl]" AnnotateProgram nil)
    (halted_implies_JMLExc const-decl "boolean" Equivalence nil)
    (wf_new_vars const-decl "boolean" AnnotateProgram nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (update_store const-decl "Store" State nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (expr_has_no_side_effects const-decl "boolean" Semantics nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (ann_program_preserves_well_behaved_Program formula-decl nil
     AnnotateProgramProperties nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (proper_subterm_set_clause_sequence formula-decl nil
     APSemanticsProperties nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (deriv_stmt_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "Val" MVASemantics nil)
    (update const-decl "Store" MVASemantics nil))
   565996 13710 t nil)
  (execute_action_correctness-1 nil 3389679564 3391425731
   ("" (induct "a")
    (("1" (skosimp)
      (("1"
        (expand* "ann_action" "execute_action" "deriv_stmt"
         "related_states" "MP_modeled?" "MVA_modeled?")
        (("1" (flatten) (("1" (inst? -7) (("1" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" -8)
        (("2" (expand "ann_action" -7)
          (("2" (expand "deriv_stmt" -7)
            (("2" (assert)
              (("2" (skosimp*)
                (("2"
                  (name "stA2" "update(stA(astate(sMP!1)))
                                                    (target(cons1_var!1))
                                                    (eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1))))")
                  (("2"
                    (inst - "mp!1" "ap!1" "c!1" "m!1" "vn!1" "m2!1"
                     "sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]]"
                     "sMVA!1" "tau!1" "sAP2!1")
                    (("2"
                      (case "NOT Bottom?(eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1)))) AND
                   MP_modeled?(mp!1)(sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]], tau!1)")
                      (("1" (expand "related_states")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (replace -3 -1 rl)
                              (("1"
                                (expand "update" -1)
                                (("1"
                                  (lift-if)
                                  (("1" (prop) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2 -3 -12 -13 -15 -16 1 3 4)
                              (("2"
                                (expand* "deriv_stmt" "execute_set")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (expand*
                                     "specification_requirements"
                                     "well_behaved_MP")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (use
                                         "ann_program_preserves_well_bahaved_Program")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "wf_Action")
                              (("3"
                                (skosimp)
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "member" -12)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (expand "ann_action" -10)
                              (("4"
                                (expand "set_subterm_AP")
                                (("4"
                                  (use "sequence_subterm")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("5"
                              (hide -1 -6 -8 -9 -10 -12 -13 -14 -15 3 4
                               5)
                              (("5"
                                (expand "wf_state")
                                (("5"
                                  (replace -1 1 :dir rl)
                                  (("5"
                                    (prop)
                                    (("1"
                                      (expand "wf_AState")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "wf_Store")
                                          (("1"
                                            (expand "wf_Store")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (hide -1 -4 -6 -7)
                                                  (("1"
                                                    (expand "update")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (expand
                                                           "wf_Action")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "cons1_var!1")
                                                            (("1"
                                                              (expand
                                                               "member")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skolem!)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand "update" 1)
                                          (("2"
                                            (expand "is_ghost")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (use "deriv_stmt_yields_wf_state_AP")
                              (("6"
                                (assert)
                                (("6"
                                  (expand*
                                   "specification_requirements"
                                   "wf_MP")
                                  (("6"
                                    (flatten)
                                    (("6"
                                      (use
                                       "ann_program_yields_wf_program")
                                      (("6" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 -8 -10 -11 3 4)
                        (("2"
                          (expand* "related_states" "deriv_stmt"
                           "execute_set")
                          (("2" (skosimp*)
                            (("2"
                              (expand* "specification_requirements"
                               "well_behaved_MP")
                              (("2"
                                (flatten)
                                (("2"
                                  (use
                                   "ann_program_preserves_well_bahaved_Program")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -4 -5 -7 -17 -18)
                                      (("2"
                                        (expand "well_behaved_Program")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "id")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst? -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -4
                                                       "Set(target(cons1_var!1), source(cons1_var!1))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "sAP1!1"
                                                             "tau!2"
                                                             "v!1"
                                                             "m1!1 - 1")
                                                            (("1"
                                                              (expand
                                                               "deriv_expr"
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -13
                                                                 -14
                                                                 -15)
                                                                (("1"
                                                                  (expand*
                                                                   "well_behaved_MVA"
                                                                   "eval_action_behavior")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "source(cons1_var!1)"
                                                                       "v!1"
                                                                       "sAP1!1"
                                                                       "astate(sMP!1)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (split
                                                                             -7)
                                                                            (("1"
                                                                              (case
                                                                               "st(pstate(sAP1!1)) = st(pstate(sMP!1))")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -4)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "NOT Bottom?(v!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -4
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (expand*
                                                                                               "update_GhostVars"
                                                                                               "update_store")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -15
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4
                                                                                                   -8
                                                                                                   -14
                                                                                                   -15)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "wf_Action"
                                                                                                     "var_names")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (skosimp)
                                                                                                          (("1"
                                                                                                            (expand*
                                                                                                             "MP_modeled?"
                                                                                                             "MVA_modeled?"
                                                                                                             "Program_modeled?")
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (lift-if)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (expand*
                                                                                                                       "ann_program_pre"
                                                                                                                       "disjoint_model_vars")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (skosimp)
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (prop)
                                                                                                                        (("2"
                                                                                                                          (expand*
                                                                                                                           "ann_program_pre"
                                                                                                                           "disjoint_model_vars")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -6
                                                                                                                               "q!1"
                                                                                                                               "f!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (skosimp)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "update")
                                                                                                                  (("3"
                                                                                                                    (lift-if)
                                                                                                                    (("3"
                                                                                                                      (prop)
                                                                                                                      (("3"
                                                                                                                        (inst?
                                                                                                                         -9)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (skosimp)
                                                                                                                (("4"
                                                                                                                  (lift-if)
                                                                                                                  (("4"
                                                                                                                    (inst?
                                                                                                                     -11)
                                                                                                                    (("4"
                                                                                                                      (prop)
                                                                                                                      (("4"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           "wf_state"
                                                                                                                           -7)
                                                                                                                          (("4"
                                                                                                                            (flatten)
                                                                                                                            (("4"
                                                                                                                              (inst?)
                                                                                                                              (("4"
                                                                                                                                (expand*
                                                                                                                                 "is_ghost"
                                                                                                                                 "var_names")
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  (("4"
                                                                                                                                    (skosimp)
                                                                                                                                    (("4"
                                                                                                                                      (expand
                                                                                                                                       "getGhostDecls")
                                                                                                                                      (("4"
                                                                                                                                        (skosimp)
                                                                                                                                        (("4"
                                                                                                                                          (expand*
                                                                                                                                           "ann_program_pre"
                                                                                                                                           "not_clashing_model_vars")
                                                                                                                                          (("4"
                                                                                                                                            (flatten)
                                                                                                                                            (("4"
                                                                                                                                              (inst?)
                                                                                                                                              (("4"
                                                                                                                                                (prop)
                                                                                                                                                (("4"
                                                                                                                                                  (inst
                                                                                                                                                   -3
                                                                                                                                                   "f!1"
                                                                                                                                                   "f!2")
                                                                                                                                                  (("4"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "deriv_expr_bottom_iff_exception_step")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "deriv_expr"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand*
                                                                                 "MP_modeled?"
                                                                                 "Program_modeled?")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -12)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand*
                                                                               "MP_modeled?"
                                                                               "MVA_modeled?")
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "deriv_expr"
                                                                               1)
                                                                              (("3"
                                                                                (inst?)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand*
                                                             "set_subterm_AP"
                                                             "ann_action")
                                                            (("2"
                                                              (use
                                                               "sequence_subterm")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((update const-decl "Store" MVASemantics nil)
    (eval const-decl "Val" MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_stmt_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (member def-decl "bool" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (update_store const-decl "Store" State nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (deriv_expr_bottom_iff_exception_step formula-decl nil
     SemanticsProofs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (well_behaved_Program const-decl "boolean" Semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (execute_action def-decl "Store" MVASemantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (related_states const-decl "boolean" Equivalence nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   7581 6430 t shostak))
 (set_stmt_of_ann_action_TCC1 0
  (set_stmt_of_ann_action_TCC1-1 nil 3391490864 3394348209
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   218 150 nil nil))
 (set_stmt_of_ann_action_proper_subterm 0
  (set_stmt_of_ann_action_proper_subterm-1 nil 3391493942 3394348538
   ("" (induct "a")
    (("1" (expand "set_stmt_of_ann_action") (("1" (propax) nil nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "set_stmt_of_ann_action" -2)
        (("2" (expand "ann_action" 1)
          (("2" (expand "<<" 1)
            (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Stmt type-decl nil Stmt_adt nil) (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   227 160 t shostak))
 (set_stmt_of_ann_action_only_for_Set 0
  (set_stmt_of_ann_action_only_for_Set-1 nil 3394428141 3394429698
   ("" (induct "a")
    (("1" (skosimp)
      (("1" (expand "set_stmt_of_ann_action") (("1" (propax) nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "set_stmt_of_ann_action" -2)
        (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Stmt type-decl nil Stmt_adt nil) (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   97313 120 t shostak))
 (non_interference_of_sets_in_ann_actions_TCC1 0
  (non_interference_of_sets_in_ann_actions_TCC1-1 nil 3394429921 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (non_interference_of_sets_in_ann_actions 0
  (non_interference_of_sets_in_ann_actions-1 nil 3389611307 3394455726
   ("" (induct "a")
    (("1" (expand* "set_stmt_of_ann_action" "ann_action" "deriv_stmt")
      (("1" (skosimp) (("1" (assert) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" -3)
        (("2" (expand "deriv_stmt" -3)
          (("2" (ground)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -2)
                (("2" (expand "execute_set")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2"
                        (inst -8 "p!1" "tau!1" "s2!1" "m2!1" "vn!1")
                        (("2" (ground)
                          (("1"
                            (inst -9
                             "Set(target(cons1_var!1), source(cons1_var!1))")
                            (("1" (expand "set_stmt_of_ann_action" -9)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "expr_has_no_side_effects")
                                  (("1"
                                    (inst
                                     -
                                     "s1!1"
                                     "tau!2"
                                     "v!1"
                                     "m1!1 -1")
                                    (("1"
                                      (expand "deriv_expr" -9)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand*
                                           "update_GhostVars"
                                           "update_store")
                                          (("1"
                                            (replace -6 -1)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (inst?)
                              (("2"
                                (expand "set_stmt_of_ann_action" -9)
                                (("2" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (use "set_stmt_of_ann_action_only_for_Set")
        (("3" (assert) nil nil)) nil))
      nil)
     ("4" (skosimp)
      (("4" (use "set_stmt_of_ann_action_only_for_Set")
        (("4" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((set_stmt_of_ann_action_only_for_Set formula-decl nil
     AnnGenerationLemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (update_store const-decl "Store" State nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (source adt-accessor-decl "[(Set?) -> Expr[Name]]" Stmt_adt nil)
    (expr_has_no_side_effects const-decl "boolean" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (Stmt type-decl nil Stmt_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil))
   169121 4330 t shostak))
 (ann_action_sets_mva_vars 0
  (ann_action_sets_mva_vars-1 nil 3389599475 3394431210
   ("" (induct "l")
    (("1" (expand "set_stmt_of_ann_action") (("1" (propax) nil nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "set_stmt_of_ann_action" -3)
        (("2" (split)
          (("1" (hide -2)
            (("1" (expand "wf_Action")
              (("1" (inst?)
                (("1" (expand "member")
                  (("1" (replace -1)
                    (("1" (beta) (("1" (propax) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -2 "c!1" "a!1")
            (("2" (assert)
              (("2" (expand "wf_Action")
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (use "set_stmt_of_ann_action_only_for_Set")
        (("3" (assert) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((set_stmt_of_ann_action_only_for_Set formula-decl nil
     AnnGenerationLemmas nil)
    (member def-decl "bool" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Expr type-decl nil Expr_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (Stmt type-decl nil Stmt_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil))
   218355 440 t shostak))
 (sequence_of_sets_have_no_side_effects 0
  (sequence_of_sets_have_no_side_effects-1 nil 3389433630 3394456703
   ("" (skosimp*)
    (("" (expand "well_behaved_Program")
      (("" (inst?)
        (("" (expand "id")
          (("" (prop)
            (("" (inst?)
              (("" (prop)
                (("" (inst?)
                  (("" (assert)
                    (("" (hide-all-but (-6 -7 1))
                      (("" (expand "proper_subterm_set_clause")
                        ((""
                          (lemma
                           "stmt_proper_subterm_is_transitive[string]")
                          (("" (prop)
                            (("1"
                              (inst - "c!1" "update_vars(t!1)"
                               "pre_set(m!1)")
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (inst - "c!1" "update_vars(t!1)"
                               "post_set(m!1)")
                              (("2" (assert) nil nil)) nil)
                             ("3"
                              (inst - "c!1" "update_vars(t!1)"
                               "exc_set(m!1)")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (stmt_proper_subterm_is_transitive formula-decl nil
     APSemanticsProperties nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (well_behaved_Program const-decl "boolean" Semantics nil))
   337717 730 t shostak))
 (update_vars_preserves_MVA_modeled 0
  (update_vars_preserves_MVA_modeled-1 nil 3393662676 3394463233
   ("" (skosimp*)
    ((""
      (expand* "related_states" "MP_modeled?" "update_vars"
       "deriv_stmt")
      (("" (assert)
        (("" (skosimp*)
          ((""
            (case "wf_Action(mva(mp!1))(action(t!1)) AND cps(mva(mp!1))(tcp(t!1))")
            (("1" (flatten)
              (("1" (expand "MVA_modeled?")
                (("1" (split)
                  (("1"
                    (lemma "non_interference_of_sets_in_ann_actions")
                    (("1"
                      (inst - "ap!1" "action(t!1)" "tau!1" "sAP2!1"
                       "m2!1" "cp")
                      (("1" (assert)
                        (("1" (split)
                          (("1" (replace -15 1)
                            (("1" (beta)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst - "tcp(t!1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (hide-all-but
                                         (-1 -2 -3 -4 -5 -6 -19 1))
                                        (("1"
                                          (expand*
                                           "deriv_stmt"
                                           "execute_set")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (expand "deriv_expr")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   -1
                                                   1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand*
                                                     "update_GhostVars"
                                                     "update_store")
                                                    (("1"
                                                      (rewrite -11)
                                                      (("1"
                                                        (beta)
                                                        (("1"
                                                          (expand*
                                                           "eval"
                                                           "lookup")
                                                          (("1"
                                                            (use
                                                             "ann_program_defines_MVA_vars")
                                                            (("1"
                                                              (expand
                                                               "specification_requirements")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "wf_state_ghost_not_local_or_field")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "ap!1"
                                                                       "sAP1!1"
                                                                       "name_of(tcp(t!1))")
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (expand
                                                                           "val2int")
                                                                          (("1"
                                                                            (rewrite
                                                                             -16)
                                                                            (("1"
                                                                              (apply-extensionality
                                                                               3)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "wf_MP")
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (use
                                                                               "ann_program_yields_wf_program")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (split +)
                              (("1"
                                (use "ann_action_sets_mva_vars")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand*
                                     "specification_requirements"
                                     "ann_program_pre"
                                     "wf_new_vars"
                                     "disjoint_model_vars"
                                     "var_names")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "sequence_of_sets_have_no_side_effects")
                                (("2"
                                  (inst
                                   -1
                                   "ap!1"
                                   "a!1"
                                   "m!1"
                                   "c!1"
                                   "t!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (use
                                         "set_stmt_of_ann_action_only_for_Set")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (use
                                         "set_stmt_of_ann_action_only_for_Set")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (expand "update_vars")
                                        (("3"
                                          (expand "<<" 1)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (use
                                               "set_stmt_of_ann_action_proper_subterm")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand*
                                         "set_subterm"
                                         "proper_subterm_set_clause"
                                         "update_vars")
                                        nil
                                        nil)
                                       ("5"
                                        (expand*
                                         "specification_requirements"
                                         "well_behaved_MP")
                                        (("5"
                                          (flatten)
                                          (("5"
                                            (use
                                             "ann_program_preserves_well_behaved_Program")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2"
                      (lemma "non_interference_of_sets_in_ann_actions")
                      (("2"
                        (inst - "ap!1" "action(t!1)" "tau!1" "sAP2!1"
                         "m2!1" "name_of(q!1)")
                        (("2" (expand "deriv_stmt" -20)
                          (("2" (expand "execute_set")
                            (("2" (skosimp*)
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1"
                                    (replace -1 1 :dir rl)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -10)
                                          (("1"
                                            (expand "deriv_expr" -22)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -22 :dir rl)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand*
                                                     "update_GhostVars"
                                                     "update_store")
                                                    (("1"
                                                      (replace -25)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (expand*
                                                               "specification_requirements"
                                                               "ann_program_pre"
                                                               "wf_new_vars"
                                                               "disjoint_model_vars")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst?
                                                                   -12)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (split)
                                      (("1"
                                        (use
                                         "ann_action_sets_mva_vars")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "var_names")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (expand*
                                                 "specification_requirements"
                                                 "ann_program_pre"
                                                 "wf_new_vars"
                                                 "disjoint_model_vars")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst
                                                     -14
                                                     "q!1"
                                                     "f!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "sequence_of_sets_have_no_side_effects")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (prop)
                                            (("1"
                                              (use
                                               "set_stmt_of_ann_action_only_for_Set")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (use
                                               "set_stmt_of_ann_action_only_for_Set")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (expand "update_vars")
                                              (("3"
                                                (expand "<<" 1)
                                                (("3"
                                                  (use
                                                   "set_stmt_of_ann_action_proper_subterm")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand*
                                               "set_subterm"
                                               "proper_subterm_set_clause"
                                               "update_vars")
                                              nil
                                              nil)
                                             ("5"
                                              (expand*
                                               "specification_requirements"
                                               "well_behaved_MP")
                                              (("5"
                                                (use
                                                 "ann_program_preserves_well_behaved_Program")
                                                (("5"
                                                  (flatten)
                                                  (("5"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "MVA_vars_modeled?")
                    (("3" (skosimp)
                      (("3" (inst-cp -10 "n!2")
                        (("3"
                          (case "defined?(stA(astate(sMP!1))(n!2))")
                          (("1" (assert)
                            (("1" (expand "deriv_stmt" -21)
                              (("1"
                                (expand* "execute_set" "deriv_expr")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand*
                                       "update_GhostVars"
                                       "update_store")
                                      (("1"
                                        (lemma
                                         "execute_action_correctness")
                                        (("1"
                                          (inst
                                           -
                                           "mp!1"
                                           "ap!1"
                                           "a!1"
                                           "m!1"
                                           "action(t!1)"
                                           "m2!1"
                                           "sMP!1 WITH [astate := astate(sMP!1) WITH [cp := tcp(t!1)]]"
                                           "sMVA!1"
                                           "tau!1"
                                           "sAP2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (use
                                               "proper_subterm_set_clause_sequence[string]")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "MVA_vars_modeled?")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -11
                                                   -14
                                                   -17
                                                   -18
                                                   -19
                                                   -21
                                                   -22
                                                   -23
                                                   -24
                                                   -30
                                                   2)
                                                  (("2"
                                                    (rewrite -13)
                                                    (("2"
                                                      (rewrite -13)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "related_states")
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (hide -5)
                                                              (("1"
                                                                (expand
                                                                 "wf_state")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (expand*
                                                                     "wf_AState"
                                                                     "wf_Store")
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "wf_ghoststate")
                                                                    (("2"
                                                                      (skolem!)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (expand*
                                                                           "is_ghost"
                                                                           "var_names")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -11
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -4
                                                                 -11)
                                                                (("2"
                                                                  (expand*
                                                                   "wf_state"
                                                                   "wf_ghoststate")
                                                                  (("2"
                                                                    (prop)
                                                                    (("2"
                                                                      (skolem!)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (expand*
                                                                           "is_ghost"
                                                                           "var_names")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              (("1"
                                                                                (use
                                                                                 "ann_program_defines_MVA_vars2")
                                                                                (("1"
                                                                                  (expand
                                                                                   "specification_requirements")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "id")
                                                                                      (("1"
                                                                                        (skosimp)
                                                                                        (("1"
                                                                                          (skosimp)
                                                                                          (("1"
                                                                                            (inst?
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "getGhostDecls")
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "defined?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (replace
                                                               -11
                                                               :dir
                                                               rl)
                                                              (("3"
                                                                (expand*
                                                                 "MP_modeled?"
                                                                 "MVA_modeled?"
                                                                 "Program_modeled?")
                                                                (("3"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand*
                                                                     "eval"
                                                                     "lookup")
                                                                    (("1"
                                                                      (lemma
                                                                       "ann_program_defines_MVA_vars")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "mp!1"
                                                                         "ap!1"
                                                                         "sAP1!1")
                                                                        (("1"
                                                                          (lemma
                                                                           "wf_state_ghost_not_local_or_field")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "ap!1"
                                                                             "sAP1!1"
                                                                             "name_of(tcp(t!1))")
                                                                            (("1"
                                                                              (expand
                                                                               "specification_requirements")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "tcp(t!1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -12
                                                                                       "tcp(t!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           -12)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "val2int")
                                                                                            (("1"
                                                                                              (apply-extensionality
                                                                                               3)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (use
                                                                                     "ann_program_yields_wf_program")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (expand*
                                                                             "specification_requirements"
                                                                             "ann_program_pre"
                                                                             "wf_new_vars"
                                                                             "disjoint_model_vars")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst?
                                                                                 -10)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (expand
                                                                     "MVA_vars_modeled?")
                                                                    (("3"
                                                                      (skosimp)
                                                                      (("3"
                                                                        (inst
                                                                         -8
                                                                         "n!3")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (replace
                                                                             -8
                                                                             1)
                                                                            (("3"
                                                                              (lift-if)
                                                                              (("3"
                                                                                (prop)
                                                                                (("3"
                                                                                  (hide
                                                                                   -7)
                                                                                  (("3"
                                                                                    (expand*
                                                                                     "wf_state"
                                                                                     "wf_AState"
                                                                                     "wf_Store")
                                                                                    (("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (expand*
                                                                                           "var_names")
                                                                                          (("3"
                                                                                            (skosimp)
                                                                                            (("3"
                                                                                              (expand*
                                                                                               "specification_requirements"
                                                                                               "ann_program_pre"
                                                                                               "wf_new_vars"
                                                                                               "disjoint_model_vars")
                                                                                              (("3"
                                                                                                (flatten)
                                                                                                (("3"
                                                                                                  (inst?
                                                                                                   -)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (expand
                                                                     "halted_implies_JMLExc")
                                                                    (("4"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skosimp)
                                                                    (("5"
                                                                      (inst?
                                                                       -11)
                                                                      (("5"
                                                                        (assert)
                                                                        (("5"
                                                                          (lift-if)
                                                                          (("5"
                                                                            (prop)
                                                                            (("5"
                                                                              (expand
                                                                               "wf_state"
                                                                               -6)
                                                                              (("5"
                                                                                (flatten)
                                                                                (("5"
                                                                                  (expand
                                                                                   "wf_ghoststate")
                                                                                  (("5"
                                                                                    (inst?
                                                                                     -)
                                                                                    (("5"
                                                                                      (expand*
                                                                                       "is_ghost"
                                                                                       "var_names")
                                                                                      (("5"
                                                                                        (skosimp)
                                                                                        (("5"
                                                                                          (expand*
                                                                                           "specification_requirements"
                                                                                           "ann_program_pre"
                                                                                           "wf_new_vars")
                                                                                          (("5"
                                                                                            (flatten)
                                                                                            (("5"
                                                                                              (inst?)
                                                                                              (("5"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1
                                                                                                   3
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "var_names")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "var_names")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "(# name := cp, jtype := IntType, init_val := Int(unique(init_cp(mva(mp!1)))) #)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "defined?")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "wf_AState(mva(mp!1))(sMVA!1)")
                            (("1" (expand "wf_state" -7)
                              (("1"
                                (expand "wf_state" -7)
                                (("1"
                                  (expand* "wf_AState" "wf_Store")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst? -)
                                      (("1"
                                        (inst? -)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand* "wf_AState" "wf_Store")
                              (("2"
                                (replace -18 1)
                                (("2"
                                  (beta)
                                  (("2"
                                    (use
                                     "execute_action_yields_wf_state")
                                    (("2"
                                      (expand*
                                       "specification_requirements"
                                       "wf_MP"
                                       "wf_MVA")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "wf_state" -15)
                                            (("2"
                                              (expand "wf_AState")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "wf_Store"
                                                     -1)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "wf_state"
                                                         -16)
                                                        (("2"
                                                          (expand
                                                           "wf_PSt")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst?
                                                               -17)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "is_field"
                                                                   -18)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        5))
                                                                      (("2"
                                                                        (typepred
                                                                         "mp!1")
                                                                        (("2"
                                                                          (expand*
                                                                           "compatible"
                                                                           "var_names"
                                                                           "is_declared_as_field")
                                                                          (("2"
                                                                            (skosimp*)
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "getFieldDecls")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (expand* "specification_requirements" "wf_MP" "wf_MVA"
               "wf_Trans")
              (("2" (flatten)
                (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (Expr type-decl nil Expr_adt nil) (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (AState type-eq-decl nil MVASemantics nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Stmt_adt nil)
    (NumExpr type-decl nil NumExpr_adt nil)
    (NExpr? adt-recognizer-decl "[Expr -> boolean]" Expr_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Expr_adt nil)
    (VarEval? adt-recognizer-decl "[NumExpr -> boolean]" NumExpr_adt
     nil)
    (NumVarEval adt-constructor-decl "[Name -> (VarEval?)]" NumExpr_adt
     nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (unique const-decl "(injective?[CP, nat])" AnnotateProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]" AnnotateProgram nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (ann_program_defines_MVA_vars2 formula-decl nil
     AnnotateProgramProperties nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (execute_action_correctness formula-decl nil AnnGenerationLemmas
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_PSt const-decl "boolean" MVASemantics nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (execute_action_yields_wf_state formula-decl nil MVASemantics nil)
    (wf_state const-decl "boolean" State nil)
    (non_interference_of_sets_in_ann_actions formula-decl nil
     AnnGenerationLemmas nil)
    (sequence_of_sets_have_no_side_effects formula-decl nil
     AnnGenerationLemmas nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (ann_program_preserves_well_behaved_Program formula-decl nil
     AnnotateProgramProperties nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (set_stmt_of_ann_action_proper_subterm formula-decl nil
     AnnGenerationLemmas nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (ann_action_sets_mva_vars formula-decl nil AnnGenerationLemmas nil)
    (Set? adt-recognizer-decl "[Stmt -> boolean]" Stmt_adt nil)
    (target adt-accessor-decl "[(Set?) -> Name]" Stmt_adt nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (wf_new_vars const-decl "boolean" AnnotateProgram nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (update_store const-decl "Store" State nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (val2int const-decl "int" State nil)
    (Val_Int_extensionality formula-decl nil Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (i adt-accessor-decl "[(Int?) -> int]" Val_adt nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (eval def-decl "int" Evaluation nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (cp const-decl "string" AnnotateProgram nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (related_states const-decl "boolean" Equivalence nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (MP_modeled? const-decl "boolean" Equivalence nil))
   6449617 32490 t nil))
 (update_vars_proper_subterm_set_clause 0
  (update_vars_proper_subterm_set_clause-1 nil 3393316102 3394357647
   ("" (skosimp)
    (("" (expand "ann_program")
      (("" (skosimp*)
        (("" (case "name(c1!1) = class_name(mva(mp!1))")
          (("1" (replace -5 -6)
            (("1" (expand "ann_class" -6)
              (("1" (assert)
                (("1"
                  (expand* "ann_methods" "proper_subterm_set_clause")
                  (("1" (skosimp)
                    (("1" (replace -7)
                      (("1" (hide-all-but (-2 -8 -9 1 2 3))
                        (("1"
                          (case "wf_MP(mp!1) AND well_typed_Program(program(mp!1)) AND wf_MVA(mva(mp!1))")
                          (("1" (flatten)
                            (("1"
                              (case "FORALL (q : CP) : is_finite({t: Transition |
   filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = q})")
                              (("1"
                                (case
                                 "is_finite({c: [Expr, Stmt] |  EXISTS (q: CP): cps(mva(mp!1))(q) AND
   nonempty?({t: Transition | filter_event[CP](mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = q}) AND
   c = ann_trans_cp(mp!1)(q, {t: Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = q})})")
                                (("1"
                                  (case
                                   "is_finite({x: [Expr, Stmt] | EXISTS (t: Transition):
        filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = scp(t!1) AND
        x = (guard_to_expression(mva(mp!1))(guard(t)), update_vars(t))})")
                                  (("1"
                                    (case
                                     "update_vars(t!1) << ann_event(mp!1)(filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1)))")
                                    (("1"
                                      (case
                                       "etype(event(t!1)) = Entry")
                                      (("1"
                                        (hide 2 3)
                                        (("1"
                                          (expand "ann_method" 1)
                                          (("1"
                                            (expand "<<" 1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "etype(event(t!1)) = ExitNormal")
                                        (("1"
                                          (hide 1 2 4)
                                          (("1"
                                            (expand "ann_method" 1)
                                            (("1"
                                              (expand "<<" 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "etype(event(t!1)) = ExitExceptional")
                                          (("1"
                                            (hide 1 2 3 4)
                                            (("1"
                                              (expand "ann_method" 1)
                                              (("1"
                                                (expand "<<" 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 2 3))
                                            (("2"
                                              (use
                                               "EventType_inclusive")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2 3 4)
                                      (("2"
                                        (expand* "<<" "ann_event")
                                        (("2"
                                          (use
                                           "some_is_exists[[Expr, Stmt]]")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (inst
                                                 1
                                                 "ann_trans_cp(mp!1)(scp(t!1),
                                   {t : Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = scp(t!1)})")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "set2list_same_elements[[Expr, Stmt]]")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (inst
                                                             1
                                                             "scp(t!1)")
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (expand*
                                                                 "wf_MVA"
                                                                 "wf_Trans")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (inst?
                                                                     -10)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "nonempty_exists")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (expand
                                                                     "filter_event")
                                                                    (("2"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst?)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (skosimp)
                                                      (("3"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skosimp)
                                                      nil
                                                      nil)
                                                     ("5"
                                                      (skosimp)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide 1)
                                                      (("2"
                                                        (expand*
                                                         "ann_trans_cp"
                                                         "<<"
                                                         "ann_guard_actions")
                                                        (("2"
                                                          (use
                                                           "some_is_exists[[Expr, Stmt]]")
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "(guard_to_expression(mva(mp!1))(guard(t!1)), update_vars(t!1))")
                                                                (("2"
                                                                  (use
                                                                   "set2list_same_elements[[Expr, Stmt]]")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand*
                                                                             "filter_event"
                                                                             "ann_method")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2" (inst?) nil nil))
                                            nil)
                                           ("3" (skosimp) nil nil)
                                           ("4" (skosimp) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "ann_guard_actions_TCC1")
                                    (("2"
                                      (inst -1 "mp!1" "ts(mva(mp!1))")
                                      (("2"
                                        (lemma
                                         "finite_subset[[Expr, Stmt]]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             -
                                             "{x: [Expr, Stmt] | EXISTS (t: Transition):
                                                    ts(mva(mp!1))(t) AND
                                                    x = (guard_to_expression(mva(mp!1))(guard(t)), update_vars(t))}"
                                             "{x: [Expr, Stmt] | EXISTS (t: Transition):
                                                    filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND
                                                    scp(t) = scp(t!1) AND
                                                    x = (guard_to_expression(mva(mp!1))(guard(t)), update_vars(t))}")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand*
                                                   "subset?"
                                                   "member")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (skolem!)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (expand
                                                             "filter_event")
                                                            (("2"
                                                              (prop)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 3 4)
                                  (("2"
                                    (typepred "cps(mva(mp!1))")
                                    (("2"
                                      (expand "is_finite" -1)
                                      (("2"
                                        (expand "is_finite" 1)
                                        (("2"
                                          (skolem!)
                                          (("2"
                                            (inst
                                             1
                                             "N!1"
                                             "LAMBDA(c : ({c: [Expr, Stmt] | EXISTS (q: CP): cps(mva(mp!1))(q) AND
                         nonempty?({t: Transition |
                           filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = q}) AND
                         c = ann_trans_cp(mp!1)(q,
                           {t: Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                             AND scp(t) = q})})) :
                         f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                            nonempty?({t: Transition |
                              filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = q}) AND
                            c = ann_trans_cp(mp!1)(q,
                                {t: Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                      AND scp(t) = q})}))")
                                            (("1"
                                              (expand "injective?" -1)
                                              (("1"
                                                (expand "injective?" 1)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (name
                                                           "q1"
                                                           "choose({q: CP |
                                                       cps(mva(mp!1))(q) AND
                                                        nonempty?({t: Transition |
                                                                     filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                                                      AND scp(t) = q})
                                                         AND
                                                         x1!1 =
                                                          ann_trans_cp(mp!1)
                                                                      (q,
                                                                       {t: Transition |
                                                                          filter_event
                                                                          (mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                                                          AND
                                                                          scp(t) = q})})")
                                                          (("1"
                                                            (name
                                                             "q2"
                                                             "choose({q: CP |
                                                            cps(mva(mp!1))(q) AND
                                                             nonempty?({t: Transition |
                                                                          filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                                                           AND scp(t) = q})
                                                              AND
                                                              x2!1 =
                                                               ann_trans_cp(mp!1)
                                                                           (q,
                                                                            {t: Transition |
                                                                               filter_event
                                                                               (mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                                                               AND
                                                                               scp(t) = q})})")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (case
                                                                   "ann_trans_cp(mp!1)(q1, {t : Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                                                                                       AND scp(t) = q1}) = x1!1")
                                                                  (("1"
                                                                    (case
                                                                     "ann_trans_cp(mp!1)(q2, {t : Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t)
                                                                                                           AND scp(t) = q2}) = x2!1")
                                                                    (("1"
                                                                      (replace
                                                                       -5)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "x2!1")
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (rewrite
                                                                   "nonempty_exists"
                                                                   1)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "x1!1")
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (rewrite
                                                                 "nonempty_exists"
                                                                 1)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (typepred
                                                         "x2!1")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (rewrite
                                                             "nonempty_exists"
                                                             1)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "x1!1")
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (rewrite
                                                           "nonempty_exists"
                                                           1)
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skosimp)
                                                      (("4"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skosimp)
                                                      nil
                                                      nil)
                                                     ("6"
                                                      (skosimp)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (typepred "c!2")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (rewrite
                                                     "nonempty_exists"
                                                     1)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3" (inst?) nil nil))
                                              nil)
                                             ("4" (skosimp*) nil nil)
                                             ("5" (skosimp*) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skosimp)
                                  (("3" (inst?) nil nil))
                                  nil)
                                 ("4" (skosimp) nil nil)
                                 ("5" (skosimp) nil nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "filter_event")
                                    (("2"
                                      (typepred "ts(mva(mp!1))")
                                      (("2"
                                        (lemma
                                         "finite_subset[Transition]")
                                        (("2"
                                          (inst
                                           -1
                                           "ts(mva(mp!1))"
                                           "{t: Transition | ts(mva(mp!1))(t) AND etype(event(t)) = etype(event(t!1)) AND
                                                                mname(event(t)) = name(n!1) AND scp(t) = q!1}")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand*
                                               "subset?"
                                               "member")
                                              (("2" (skosimp) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (propax) nil nil))
                              nil))
                            nil)
                           ("2" (expand "ann_program_pre")
                            (("2" (prop)
                              (("2"
                                (expand "wf_MP")
                                (("2" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "ann_class")
            (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (nonempty? const-decl "bool" sets nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ann_guard_actions_TCC1 subtype-tcc nil AnnotateProgram nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Stmt])" Stmt_adt nil)
    (ann_event const-decl "Stmt" AnnotateProgram nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (EventType_inclusive formula-decl nil EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateProgram
     nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (set2list def-decl "list[T]" set2list nil)
    (list type-decl nil list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (guard_to_expression const-decl "Expr" MVASemantics nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (choose const-decl "(p)" sets nil)
    (injective? const-decl "bool" functions nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateProgram
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil))
   32190 7090 t shostak))
 (ann_event_preserves_MVA_modeled_TCC1 0
  (ann_event_preserves_MVA_modeled_TCC1-1 nil 3393653855 3394348231
   ("" (subtype-tcc) nil nil) unchecked
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (invariants_are_booleans const-decl "boolean" WellTypedProgram nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]" AnnotateProgram nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (reserved_words const-decl "finite_set[string]" AnnotateProgram
     nil)
    (wf_new_vars const-decl "boolean" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (well_behaved_Program const-decl "boolean" Semantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (related_states const-decl "boolean" Equivalence nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   21290 14560 nil nil))
 (ann_event_preserves_MVA_modeled_TCC2 0
  (ann_event_preserves_MVA_modeled_TCC2-1 nil 3393653855 3394348383
   ("" (subtype-tcc) nil nil) unchecked
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_local const-decl "boolean" State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (wf_state const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (invariants_are_booleans const-decl "boolean" WellTypedProgram nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (disjoint_model_vars const-decl "boolean" AnnotateProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]" AnnotateProgram nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (reserved_words const-decl "finite_set[string]" AnnotateProgram
     nil)
    (wf_new_vars const-decl "boolean" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (well_behaved_Program const-decl "boolean" Semantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (related_states const-decl "boolean" Equivalence nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   21459 14830 nil nil))
 (ann_event_preserves_MVA_modeled 0
  (ann_event_preserves_MVA_modeled-2 nil 3393662833 3394439234
   ("" (skosimp*)
    ((""
      (expand* "ann_event" "related_states" "on_method_MVA"
       "deriv_stmt" "execute_CaseJML")
      (("" (ground)
        (("" (lift-if)
          (("" (split -11)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand "set2list") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (expand* "step" "deriv_stmt")
                (("2" (skosimp*)
                  (("2"
                    (case "nonempty?({t: Transition |
                                         ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                         event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                         guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1)))})")
                    (("1"
                      (name "t1" "choose(LAMBDA (t: Transition):
                                                       ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                                       event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                       guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1))))")
                      (("1" (replace -1)
                        (("1" (expand "choose")
                          (("1" (use "epsilon_ax[Transition]")
                            (("1" (replace -2 -1)
                              (("1"
                                (prop)
                                (("1"
                                  (hide -5 -6)
                                  (("1"
                                    (name "q1" "scp(t1)")
                                    (("1"
                                      (case
                                       "ann_program_pre(mp!1) AND wf_Program(ap!1)")
                                      (("1"
                                        (case "cps(mva(mp!1))(q1)")
                                        (("1"
                                          (case
                                           "FORALL (q: CP): is_finite({t: Transition | ts!1(t) AND scp(t) = q})")
                                          (("1"
                                            (name
                                             "C1"
                                             "{c : [Expr, Stmt] | EXISTS (q : CP):
                                                                                                                                                                                                                                                             cps(mva(mp!1))(q) AND
                                                                                                                                                                                                                                                             nonempty?({t: Transition | ts!1(t) AND scp(t) = q}) AND
                                                                                                                                                                                                                                                             c = ann_trans_cp(mp!1)(q, {t : Transition | ts!1(t) AND scp(t) = q})}")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (case
                                                 "C1(ann_trans_cp(mp!1)(q1, {t : Transition | ts!1(t) AND scp(t) = q1}))")
                                                (("1"
                                                  (name
                                                   "brT"
                                                   "ann_trans_cp(mp!1)(q1, {t: Transition | ts!1(t) AND scp(t) = q1})")
                                                  (("1"
                                                    (case
                                                     "FORALL (b2: [Expr, Stmt], tau: APState, v: Val, m2: below(n!1)):
                                                                                                                                                                           member(b2, set2list(C1)) IMPLIES
                                                                                                                                                                           NOT brT = b2 IMPLIES
                                                                                                                                                                           deriv_expr(ap!1)(PROJ_1(b2), sAP1!1, v, tau)(m2) IMPLIES
                                                                                                                                                                              sAP1!1 = tau AND v = Bool(FALSE)")
                                                    (("1"
                                                      (case
                                                       "FORALL (tau: APState, v: Val, m1: below(n!1)):
                                                                                                                                                                                       deriv_expr(ap!1)(PROJ_1(brT), sAP1!1, v, tau)(m1) IMPLIES
                                                                                                                                                                                       sAP1!1 = tau AND v = Bool(TRUE)")
                                                      (("1"
                                                        (case
                                                         "member(brT, set2list(C1))")
                                                        (("1"
                                                          (case
                                                           "EXISTS (tau : APState, n : nat): deriv_stmt(ap!1)(PROJ_2(brT), sAP1!1, tau)(n)")
                                                          (("1"
                                                            (skolem!)
                                                            (("1"
                                                              (lemma
                                                               "CaseJML_exclusive_branches_semantics[string]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "ap!1"
                                                                 "set2list(C1)"
                                                                 "sAP1!1"
                                                                 "sAP2!1"
                                                                 "tau!2"
                                                                 "n!2"
                                                                 "n!1"
                                                                 "brT")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -7
                                                                         -17
                                                                         -18
                                                                         -19
                                                                         -20
                                                                         -24)
                                                                        (("1"
                                                                          (expand*
                                                                           "deriv_stmt"
                                                                           "execute_CaseJML"
                                                                           "ann_trans_cp")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "ann_guard_actions")
                                                                              (("1"
                                                                                (name
                                                                                 "C2"
                                                                                 "{x: [Expr, Stmt] | EXISTS (t: Transition): ts!1(t) AND scp(t) = q1 AND
                                                                                                                                                                                                                   x = (guard_to_expression(mva(mp!1))(guard(t)), update_vars(t))}")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (name
                                                                                     "bT"
                                                                                     "(guard_to_expression(mva(mp!1))(guard(t1)), update_vars(t1))")
                                                                                    (("1"
                                                                                      (case
                                                                                       "C2(bT)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "NOT null?(set2list(C2))")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL (b2: [Expr, Stmt], tau: APState, v: Val, m2: below(n!2)):
                                                                                                                                                                                                   member(b2, set2list(C2)) IMPLIES NOT bT = b2 IMPLIES
                                                                                                                                                                                                   deriv_expr(ap!1)(PROJ_1(b2), sAP1!1, v, tau)(m2) IMPLIES
                                                                                                                                                                                                   sAP1!1 = tau AND v = Bool(FALSE)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "FORALL (tau: APState, v: Val, m1: below(n!2)):
                                                                                                                                                                                                      deriv_expr(ap!1)(PROJ_1(bT), sAP1!1, v, tau)(m1) IMPLIES
                                                                                                                                                                                                      sAP1!1 = tau AND v = Bool(TRUE)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "EXISTS (tau : APState, n : nat): deriv_stmt(ap!1)(PROJ_2(bT), sAP1!1, tau)(n)")
                                                                                                (("1"
                                                                                                  (skolem!)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "CaseJML_exclusive_branches_semantics[string]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "ap!1"
                                                                                                       "set2list(C2)"
                                                                                                       "sAP1!1"
                                                                                                       "sAP2!1"
                                                                                                       "tau!3"
                                                                                                       "n!3"
                                                                                                       "n!2"
                                                                                                       "bT")
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -6
                                                                                                             -2
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (beta)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -3
                                                                                                                 -4
                                                                                                                 -5
                                                                                                                 -6
                                                                                                                 -7
                                                                                                                 -8
                                                                                                                 -9
                                                                                                                 -10
                                                                                                                 1
                                                                                                                 2
                                                                                                                 3)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "update_vars_preserves_MVA_modeled")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "mp!1"
                                                                                                                     "ap!1"
                                                                                                                     "c!1"
                                                                                                                     "m!1"
                                                                                                                     "t1"
                                                                                                                     "n!3"
                                                                                                                     "sMVA2!1"
                                                                                                                     "sMP1!1"
                                                                                                                     "sAP1!1"
                                                                                                                     "sAP2!1")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "related_states")
                                                                                                                      (("1"
                                                                                                                        (use
                                                                                                                         "update_vars_proper_subterm_set_clause")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "deriv_stmt"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "execute_CaseJML")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (use
                                                                                                           "set2list_same_elements[[Expr, Stmt]]")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "CaseJML_evaluates_true_stmt[string]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "ap!1"
                                                                                                     "set2list(C2)"
                                                                                                     "sAP1!1"
                                                                                                     "sAP2!1"
                                                                                                     "n!2"
                                                                                                     "bT")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "deriv_stmt"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "execute_CaseJML")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-2
                                                                                                          1))
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "b2!1"
                                                                                                             "tau!3"
                                                                                                             "v!2"
                                                                                                             "m2!2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (use
                                                                                                                 "before_distinct[[Expr, Stmt]]")
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (use
                                                                                                         "set2list_same_elements[[Expr, Stmt]]")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "member"
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "deriv_expr"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -4
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (beta)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         2
                                                                                                         3
                                                                                                         4)
                                                                                                        (("2"
                                                                                                          (expand*
                                                                                                           "specification_requirements"
                                                                                                           "well_behaved_MP"
                                                                                                           "well_behaved_MVA"
                                                                                                           "guard_to_expression_behavior")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "guard(t1)"
                                                                                                               "sAP1!1"
                                                                                                               "astate(sMP1!1)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -)
                                                                                                                  (("1"
                                                                                                                    (skosimp)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "expr_determ_step_AP")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "ap!1"
                                                                                                                           "n!3"
                                                                                                                           "m1!2"
                                                                                                                           "guard_to_expression(mva(mp!1))(guard(t1))"
                                                                                                                           "v!3"
                                                                                                                           "v!2"
                                                                                                                           "sAP1!1"
                                                                                                                           "sAP1!1"
                                                                                                                           "tau!3")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "deriv_expr"
                                                                                                                             -1
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -5)
                                                                                                                                  (("1"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand*
                                                                                                                                     "MP_modeled?"
                                                                                                                                     "Program_modeled?")
                                                                                                                                    (("2"
                                                                                                                                      (ground)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (lemma
                                                                                                                                   "stmt_determ_step_AP")
                                                                                                                                  (("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "t1")
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (expand
                                                                                                                     "MP_modeled?")
                                                                                                                    (("3"
                                                                                                                      (expand
                                                                                                                       "MVA_modeled?"
                                                                                                                       -20)
                                                                                                                      (("3"
                                                                                                                        (flatten)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skosimp)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "set2list_same_elements[[Expr, Stmt]]")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "member"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (skosimp)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -7
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "NOT t!1 = t1")
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -3
                                                                                                                 -4
                                                                                                                 -6
                                                                                                                 -7
                                                                                                                 -8
                                                                                                                 -9
                                                                                                                 -10
                                                                                                                 -11
                                                                                                                 -20
                                                                                                                 -28
                                                                                                                 -29
                                                                                                                 2
                                                                                                                 4
                                                                                                                 5
                                                                                                                 6)
                                                                                                                (("1"
                                                                                                                  (expand*
                                                                                                                   "specification_requirements"
                                                                                                                   "well_behaved_MP"
                                                                                                                   "well_behaved_MVA"
                                                                                                                   "guard_to_expression_behavior")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "guard(t!1)"
                                                                                                                       "sAP1!1"
                                                                                                                       "astate(sMP1!1)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -)
                                                                                                                          (("1"
                                                                                                                            (skosimp)
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               "mva(mp!1)")
                                                                                                                              (("1"
                                                                                                                                (expand*
                                                                                                                                 "complete"
                                                                                                                                 "deterministic")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "t1"
                                                                                                                                     "t!1"
                                                                                                                                     "stA(astate(sMP1!1))"
                                                                                                                                     "st(pstate(sAP1!1))")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       -33)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "filter_event")
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -4)
                                                                                                                                              (("1"
                                                                                                                                                (lemma
                                                                                                                                                 "expr_determ_step_AP")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "ap!1"
                                                                                                                                                   "n!3"
                                                                                                                                                   "m2!2"
                                                                                                                                                   "e!1"
                                                                                                                                                   "v!3"
                                                                                                                                                   "v!2"
                                                                                                                                                   "sAP1!1"
                                                                                                                                                   "sAP1!1"
                                                                                                                                                   "tau!3")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -)
                                                                                                                                                      (("1"
                                                                                                                                                        (ground)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (use
                                                                                                                                                             "deriv_boolean_expr_type_AP")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide-all-but
                                                                                                                                                                 (-1
                                                                                                                                                                  1
                                                                                                                                                                  4))
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "FORALL (v : Val) : Bool?(v) IMPLIES b(v) OR NOT b(v)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (prop)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (decompose-equality
                                                                                                                                                                         2)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (decompose-equality
                                                                                                                                                                         2)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skosimp)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (hide-all-but
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "stmt_determ_step_AP")
                                                                                                                                                          (("2"
                                                                                                                                                            (skosimp*)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (expand*
                                                                                                                                                 "MP_modeled?"
                                                                                                                                                 "Program_modeled?")
                                                                                                                                                (("2"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (decompose-equality
                                                                                                                                                 1)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "t!1")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -23
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "filter_event")
                                                                                                                                (("2"
                                                                                                                                  (flatten)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (expand*
                                                                                                                             "MP_modeled?"
                                                                                                                             "MVA_modeled?")
                                                                                                                            (("3"
                                                                                                                              (flatten)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-1
                                                                                            -2))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "set2list")
                                                                                            (("2"
                                                                                              (lift-if)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (prop)
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "empty?"
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (beta)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "t1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   -25)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "filter_event")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "deriv_stmt"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "execute_CaseJML")
                                                                      (("2"
                                                                        (expand
                                                                         "deriv_stmt"
                                                                         1)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "tau!1"
                                                                           "v!1"
                                                                           "m1!1"
                                                                           "m2!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "CaseJML_evaluates_true_stmt[string]")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "ap!1"
                                                               "set2list(C1)"
                                                               "sAP1!1"
                                                               "sAP2!1"
                                                               "n!1"
                                                               "brT")
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "deriv_stmt"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "execute_CaseJML")
                                                                    (("1"
                                                                      (expand
                                                                       "deriv_stmt"
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "tau!1"
                                                                         "v!1"
                                                                         "m1!1"
                                                                         "m2!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3
                                                                    1))
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "b2!1"
                                                                       "tau!2"
                                                                       "v!2"
                                                                       "m2!2")
                                                                      (("2"
                                                                        (use
                                                                         "before_distinct[[Expr, Stmt]]")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "set2list_same_elements[[Expr, Stmt]]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 -4)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (expand
                                                           "deriv_expr"
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -3
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "ann_trans_cp"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "deriv_expr"
                                                                 -1)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (expand
                                                                     "eval")
                                                                    (("2"
                                                                      (expand*
                                                                       "eval"
                                                                       "lookup")
                                                                      (("2"
                                                                        (use
                                                                         "ann_program_defines_MVA_vars")
                                                                        (("2"
                                                                          (lemma
                                                                           "wf_state_ghost_not_local_or_field")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "ap!1"
                                                                             "sAP1!1"
                                                                             "name_of(q1)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "q1")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "wf_state_ghost_not_local_or_field")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "ap!1"
                                                                                       "sAP1!1"
                                                                                       "cp")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -15
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -6
                                                                                             5)
                                                                                            (("2"
                                                                                              (apply-extensionality
                                                                                               5)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 (-12
                                                                                                  -17
                                                                                                  -32
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand*
                                                                                                   "MP_modeled?"
                                                                                                   "MVA_modeled?")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (use
                                                         "set2list_same_elements[[Expr, Stmt]]")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -6
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -1)
                                                              (("2"
                                                                (skosimp)
                                                                (("2"
                                                                  (replace
                                                                   -3)
                                                                  (("2"
                                                                    (replace
                                                                     -6
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (case
                                                                       "NOT q!1 = q1")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          -5
                                                                          -11
                                                                          -12
                                                                          -13
                                                                          -15
                                                                          -29
                                                                          -30
                                                                          1
                                                                          3))
                                                                        (("1"
                                                                          (expand*
                                                                           "ann_trans_cp"
                                                                           "deriv_expr")
                                                                          (("1"
                                                                            (expand
                                                                             "deriv_expr")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "eval")
                                                                                (("1"
                                                                                  (expand*
                                                                                   "eval"
                                                                                   "lookup")
                                                                                  (("1"
                                                                                    (use
                                                                                     "wf_state_ghost_not_local_or_field")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "wf_state_ghost_not_local_or_field")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "ap!1"
                                                                                         "sAP1!1"
                                                                                         "name_of(q!1)")
                                                                                        (("1"
                                                                                          (use
                                                                                           "ann_program_defines_MVA_vars")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "q!1")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "MP_modeled?"
                                                                                                     "MVA_modeled?")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (apply-extensionality
                                                                                                           5)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -15
                                                                                                             "q!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -15
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -14
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -12
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "val2int")
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "unique")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "injective?")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "q1"
                                                                                                                               "q!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -1
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst 1 "q1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand*
                                                           "nonempty?"
                                                           "empty?"
                                                           "member"
                                                           "filter_event")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "t1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -26
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "specification_requirements")
                                                  (("3"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4" (inst?) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp)
                                              (("2"
                                                (expand
                                                 "specification_requirements")
                                                (("2" (prop) nil nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp)
                                              (("3"
                                                (inst - "q!1")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-24 1))
                                            (("2"
                                              (lemma
                                               "finite_subset[Transition]")
                                              (("2"
                                                (skolem!)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "ts(mva(mp!1))"
                                                   "{t: Transition | ts!1(t) AND scp(t) = q!1}")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand*
                                                       "subset?"
                                                       "member"
                                                       "filter_event")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (replace
                                                           -3
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand*
                                           "specification_requirements"
                                           "wf_MP"
                                           "wf_MVA"
                                           "wf_Trans")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -20 "t1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand*
                                         "specification_requirements"
                                         "wf_MP")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (use
                                             "ann_program_yields_wf_program")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-2 1))
                                  (("2"
                                    (rewrite "nonempty_exists")
                                    (("2"
                                      (skolem -1 "x!1")
                                      (("2"
                                        (inst 1 "x!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil)
                     ("2" (hide-all-but (-6 -9 -11 1))
                      (("2" (use "wf_state_implies_wf_PSt")
                        (("2" (expand "specification_requirements")
                          (("2" (expand "wf_state" -4)
                            (("2" (ground)
                              (("2"
                                (typepred "mva(mp!1)")
                                (("2"
                                  (rewrite "nonempty_exists")
                                  (("2"
                                    (expand*
                                     "complete"
                                     "total"
                                     "wf_AState")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (inst
                                         -
                                         "cp(astate(sMP1!1))"
                                         "(# etype := et!1, mname := name(m!1) #)"
                                         "stA(astate(sMP1!1))"
                                         "st(pstate(sMP1!1))")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skolem!)
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "empty?(ts!1)")
              (("1" (assert)
                (("1" (prop)
                  (("1" (hide-all-but (-3 1))
                    (("1"
                      (expand* "set2list" "empty?" "nonempty?"
                       "member")
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (skosimp*)
                              (("1"
                                (expand* "empty?" "member")
                                (("1"
                                  (skosimp)
                                  (("1" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (expand* "empty?" "member" "specification_requirements"
                 "wf_MP" "wf_MVA" "wf_Trans" "filter_event")
                (("2" (skosimp)
                  (("2" (hide -4)
                    (("2" (inst?)
                      (("2" (replace -20 -1)
                        (("2" (ground)
                          (("2"
                            (case "event(x!1) = (# etype := et!1, mname := name(m!1) #)")
                            (("1" (replace -1 -4)
                              (("1" (propax) nil nil)) nil)
                             ("2" (apply-extensionality) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((related_states const-decl "boolean" Equivalence nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (ann_event const-decl "Stmt" AnnotateProgram nil)
    (set2list def-decl "list[T]" set2list nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (total const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics
     nil)
    (choose const-decl "(p)" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unique const-decl "(injective?[CP, nat])" AnnotateProgram nil)
    (TRUE const-decl "bool" booleans nil)
    (CaseJML_exclusive_branches_semantics formula-decl nil
     APSemanticsProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateProgram
     nil)
    (empty? const-decl "bool" sets nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateProgram
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (deriv_boolean_expr_type_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (deterministic const-decl "boolean" MVASemantics nil)
    (CaseJML_evaluates_true_stmt formula-decl nil APSemanticsProperties
     nil)
    (before_distinct formula-decl nil listfuncs nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (member const-decl "bool" sets nil)
    (update_vars_preserves_MVA_modeled formula-decl nil
     AnnGenerationLemmas nil)
    (update_vars_proper_subterm_set_clause formula-decl nil
     AnnGenerationLemmas nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (stmt_determ_step_AP formula-decl nil AnnotatedProgramSemantics
     nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (expr_determ_step_AP formula-decl nil AnnotatedProgramSemantics
     nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (guard_to_expression const-decl "Expr" MVASemantics nil)
    (eval def-decl "int" Evaluation nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (cp const-decl "string" AnnotateProgram nil)
    (val2int const-decl "int" State nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (eval def-decl "bool" Evaluation nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateProgram nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (Method type-eq-decl nil Program nil)
    (step const-decl "AState" MVASemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   1747436 53210 t nil)
  (ann_event_preserves_MVA_modeled-1 nil 3393653739 3393653811
   ("" (skosimp*)
    (("" (hide -2)
      ((""
        (expand* "ann_event" "related_states" "on_method_MVA"
         "deriv_stmt" "execute_CaseJML")
        (("" (ground)
          (("" (lift-if)
            (("" (split -10)
              (("1" (split)
                (("1" (flatten)
                  (("1" (expand "set2list") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand* "step" "deriv_stmt")
                  (("2" (skosimp*)
                    (("2"
                      (case "nonempty?({t: Transition |
                   ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                   event(t) = (# etype := et!1, mname := name(m!1) #) AND
                   guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1)))})")
                      (("1"
                        (name "t1" "choose(LAMBDA (t: Transition):
                             ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                             event(t) = (# etype := et!1, mname := name(m!1) #) AND
                             guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1))))")
                        (("1" (replace -1)
                          (("1" (expand "choose")
                            (("1" (use "epsilon_ax[Transition]")
                              (("1"
                                (replace -2 -1)
                                (("1"
                                  (prop)
                                  (("1"
                                    (hide -5 -6)
                                    (("1"
                                      (name "q1" "scp(t1)")
                                      (("1"
                                        (case
                                         "ann_program_pre(mp!1) AND wf_Program(ap!1)")
                                        (("1"
                                          (case "cps(mva(mp!1))(q1)")
                                          (("1"
                                            (case
                                             "FORALL (q: CP): is_finite({t: Transition | ts!1(t) AND scp(t) = q})")
                                            (("1"
                                              (name
                                               "C1"
                                               "{c : [Expr, Stmt] | EXISTS (q : CP):
                                                                                                                                                                                                               cps(mva(mp!1))(q) AND
                                                                                                                                                                                                               nonempty?({t: Transition | ts!1(t) AND scp(t) = q}) AND
                                                                                                                                                                                                               c = ann_trans_cp(mp!1)(q, {t : Transition | ts!1(t) AND scp(t) = q})}")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "C1(ann_trans_cp(mp!1)(q1, {t : Transition | ts!1(t) AND scp(t) = q1}))")
                                                  (("1"
                                                    (name
                                                     "brT"
                                                     "ann_trans_cp(mp!1)(q1, {t: Transition | ts!1(t) AND scp(t) = q1})")
                                                    (("1"
                                                      (case
                                                       "FORALL (b2: [Expr, Stmt], tau: APState, v: Val, m2: below(n!1)):
                                                                                                                     member(b2, set2list(C1)) IMPLIES
                                                                                                                     NOT brT = b2 IMPLIES
                                                                                                                     deriv_expr(ap!1)(PROJ_1(b2), sAP1!1, v, tau)(m2) IMPLIES
                                                                                                                        sAP1!1 = tau AND v = Bool(FALSE)")
                                                      (("1"
                                                        (case
                                                         "FORALL (tau: APState, v: Val, m1: below(n!1)):
                                                                                                                             deriv_expr(ap!1)(PROJ_1(brT), sAP1!1, v, tau)(m1) IMPLIES
                                                                                                                             sAP1!1 = tau AND v = Bool(TRUE)")
                                                        (("1"
                                                          (case
                                                           "member(brT, set2list(C1))")
                                                          (("1"
                                                            (case
                                                             "EXISTS (tau : APState, n : nat): deriv_stmt(ap!1)(PROJ_2(brT), sAP1!1, tau)(n)")
                                                            (("1"
                                                              (skolem!)
                                                              (("1"
                                                                (lemma
                                                                 "CaseJML_exclusive_branches_semantics[string]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ap!1"
                                                                   "set2list(C1)"
                                                                   "sAP1!1"
                                                                   "sAP2!1"
                                                                   "tau!2"
                                                                   "n!2"
                                                                   "n!1"
                                                                   "brT")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (rewrite
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -17
                                                                           -18
                                                                           -19
                                                                           -20
                                                                           -24)
                                                                          (("1"
                                                                            (expand*
                                                                             "deriv_stmt"
                                                                             "execute_CaseJML"
                                                                             "ann_trans_cp")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "ann_guard_actions")
                                                                                (("1"
                                                                                  (name
                                                                                   "C2"
                                                                                   "{x: [Expr, Stmt] | EXISTS (t: Transition): ts!1(t) AND scp(t) = q1 AND
                                                                                                                                                   x = (guard_to_expression(mva(mp!1))(guard(t)), update_vars(t))}")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (name
                                                                                       "bT"
                                                                                       "(guard_to_expression(mva(mp!1))(guard(t1)), update_vars(t1))")
                                                                                      (("1"
                                                                                        (case
                                                                                         "C2(bT)")
                                                                                        (("1"
                                                                                          (case
                                                                                           "NOT null?(set2list(C2))")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (case
                                                                                               "FORALL (b2: [Expr, Stmt], tau: APState, v: Val, m2: below(n!2)):
                                                                                                                           member(b2, set2list(C2)) IMPLIES NOT bT = b2 IMPLIES
                                                                                                                           deriv_expr(ap!1)(PROJ_1(b2), sAP1!1, v, tau)(m2) IMPLIES
                                                                                                                           sAP1!1 = tau AND v = Bool(FALSE)")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "FORALL (tau: APState, v: Val, m1: below(n!2)):
                                                                                                                          deriv_expr(ap!1)(PROJ_1(bT), sAP1!1, v, tau)(m1) IMPLIES
                                                                                                                          sAP1!1 = tau AND v = Bool(TRUE)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "EXISTS (tau : APState, n : nat): deriv_stmt(ap!1)(PROJ_2(bT), sAP1!1, tau)(n)")
                                                                                                  (("1"
                                                                                                    (skolem!)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "CaseJML_exclusive_branches_semantics[string]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "ap!1"
                                                                                                         "set2list(C2)"
                                                                                                         "sAP1!1"
                                                                                                         "sAP2!1"
                                                                                                         "tau!3"
                                                                                                         "n!3"
                                                                                                         "n!2"
                                                                                                         "bT")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -6
                                                                                                               -2
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (beta)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -5
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -8
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   1
                                                                                                                   2
                                                                                                                   3)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "update_vars_correctness")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "mp!1"
                                                                                                                       "ap!1"
                                                                                                                       "c!1"
                                                                                                                       "m!1"
                                                                                                                       "t1"
                                                                                                                       "n!3"
                                                                                                                       "astate(sMP2!1)"
                                                                                                                       "sMP1!1"
                                                                                                                       "sAP1!1"
                                                                                                                       "sAP2!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "related_states")
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -26)
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             "update_vars_proper_subterm_set_clause")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "deriv_stmt"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "execute_CaseJML")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (use
                                                                                                             "set2list_same_elements[[Expr, Stmt]]")
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "member"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "CaseJML_evaluates_true_stmt[string]")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "ap!1"
                                                                                                       "set2list(C2)"
                                                                                                       "sAP1!1"
                                                                                                       "sAP2!1"
                                                                                                       "n!2"
                                                                                                       "bT")
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "deriv_stmt"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "execute_CaseJML")
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (skosimp)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "b2!1"
                                                                                                               "tau!3"
                                                                                                               "v!2"
                                                                                                               "m2!2")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (use
                                                                                                                   "before_distinct[[Expr, Stmt]]")
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (use
                                                                                                           "set2list_same_elements[[Expr, Stmt]]")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "member"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skosimp)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "deriv_expr"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (beta)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -7
                                                                                                           -8
                                                                                                           2
                                                                                                           3
                                                                                                           4)
                                                                                                          (("2"
                                                                                                            (expand*
                                                                                                             "specification_requirements"
                                                                                                             "well_behaved_MP"
                                                                                                             "well_behaved_MVA"
                                                                                                             "guard_to_expression_behavior")
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "guard(t1)"
                                                                                                                 "sAP1!1"
                                                                                                                 "astate(sMP1!1)")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (skosimp)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "expr_determ_step_AP")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "ap!1"
                                                                                                                             "n!3"
                                                                                                                             "m1!2"
                                                                                                                             "guard_to_expression(mva(mp!1))(guard(t1))"
                                                                                                                             "v!3"
                                                                                                                             "v!2"
                                                                                                                             "sAP1!1"
                                                                                                                             "sAP1!1"
                                                                                                                             "tau!3")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "deriv_expr"
                                                                                                                               -1
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (ground)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand*
                                                                                                                                       "MP_modeled?"
                                                                                                                                       "Program_modeled?")
                                                                                                                                      (("2"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "stmt_determ_step_AP")
                                                                                                                                    (("2"
                                                                                                                                      (skosimp*)
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "t1")
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (expand
                                                                                                                       "MP_modeled?")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "MVA_modeled?"
                                                                                                                         -20)
                                                                                                                        (("3"
                                                                                                                          (flatten)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "set2list_same_elements[[Expr, Stmt]]")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -6
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "member"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (skosimp)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -7
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "NOT t!1 = t1")
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -8
                                                                                                                   -9
                                                                                                                   -10
                                                                                                                   -11
                                                                                                                   -20
                                                                                                                   -28
                                                                                                                   -29
                                                                                                                   2
                                                                                                                   4
                                                                                                                   5
                                                                                                                   6)
                                                                                                                  (("1"
                                                                                                                    (expand*
                                                                                                                     "specification_requirements"
                                                                                                                     "well_behaved_MP"
                                                                                                                     "well_behaved_MVA"
                                                                                                                     "guard_to_expression_behavior")
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "guard(t!1)"
                                                                                                                         "sAP1!1"
                                                                                                                         "astate(sMP1!1)")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (skosimp)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "mva(mp!1)")
                                                                                                                                (("1"
                                                                                                                                  (expand*
                                                                                                                                   "complete"
                                                                                                                                   "deterministic")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "t1"
                                                                                                                                       "t!1"
                                                                                                                                       "stA(astate(sMP1!1))"
                                                                                                                                       "st(pstate(sAP1!1))")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         -32)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "filter_event")
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "expr_determ_step_AP")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "ap!1"
                                                                                                                                                     "n!3"
                                                                                                                                                     "m2!2"
                                                                                                                                                     "e!1"
                                                                                                                                                     "v!3"
                                                                                                                                                     "v!2"
                                                                                                                                                     "sAP1!1"
                                                                                                                                                     "sAP1!1"
                                                                                                                                                     "tau!3")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -)
                                                                                                                                                        (("1"
                                                                                                                                                          (ground)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (use
                                                                                                                                                               "deriv_boolean_expr_type_AP")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-1
                                                                                                                                                                    1
                                                                                                                                                                    4))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (grind)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (case
                                                                                                                                                                       "FORALL (v : Val) : Bool?(v) IMPLIES b(v) OR NOT b(v)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (prop)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (decompose-equality
                                                                                                                                                                             2)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (decompose-equality
                                                                                                                                                                             2)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (skosimp)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "stmt_determ_step_AP")
                                                                                                                                                            (("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand*
                                                                                                                                                   "MP_modeled?"
                                                                                                                                                   "Program_modeled?")
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (decompose-equality
                                                                                                                                                   1)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "t!1")
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -22
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "filter_event")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (expand*
                                                                                                                               "MP_modeled?"
                                                                                                                               "MVA_modeled?")
                                                                                                                              (("3"
                                                                                                                                (flatten)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -2))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "set2list")
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("2"
                                                                                                      (expand*
                                                                                                       "empty?"
                                                                                                       "member")
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             1
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (beta)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "t1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     -24)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "filter_event")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "deriv_stmt"
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "execute_CaseJML")
                                                                        (("2"
                                                                          (expand
                                                                           "deriv_stmt"
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "tau!1"
                                                                             "v!1"
                                                                             "m1!1"
                                                                             "m2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "CaseJML_evaluates_true_stmt[string]")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "ap!1"
                                                                 "set2list(C1)"
                                                                 "sAP1!1"
                                                                 "sAP2!1"
                                                                 "n!1"
                                                                 "brT")
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "deriv_stmt"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "execute_CaseJML")
                                                                      (("1"
                                                                        (expand
                                                                         "deriv_stmt"
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "tau!1"
                                                                           "v!1"
                                                                           "m1!1"
                                                                           "m2!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-3
                                                                      1))
                                                                    (("2"
                                                                      (skosimp)
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "b2!1"
                                                                         "tau!2"
                                                                         "v!2"
                                                                         "m2!2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -4)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (use
                                                                               "before_distinct[[Expr, Stmt]]")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (use
                                                             "set2list_same_elements[[Expr, Stmt]]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   -4)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp)
                                                          (("2"
                                                            (expand
                                                             "deriv_expr"
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "ann_trans_cp"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "deriv_expr"
                                                                   -1)
                                                                  (("2"
                                                                    (ground)
                                                                    (("2"
                                                                      (expand
                                                                       "eval")
                                                                      (("2"
                                                                        (expand*
                                                                         "eval"
                                                                         "lookup")
                                                                        (("2"
                                                                          (use
                                                                           "ann_program_defines_MVA_vars")
                                                                          (("2"
                                                                            (lemma
                                                                             "wf_state_ghost_not_local_or_field")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "ap!1"
                                                                               "sAP1!1"
                                                                               "name_of(q1)")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "q1")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "wf_state_ghost_not_local_or_field")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "ap!1"
                                                                                         "sAP1!1"
                                                                                         "cp")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -15
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -6
                                                                                               5)
                                                                                              (("2"
                                                                                                (apply-extensionality
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-12
                                                                                                    -17
                                                                                                    -32
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (expand*
                                                                                                     "MP_modeled?"
                                                                                                     "MVA_modeled?")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst?)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp)
                                                        (("2"
                                                          (use
                                                           "set2list_same_elements[[Expr, Stmt]]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -6
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "member"
                                                                 -1)
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (replace
                                                                       -6
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (case
                                                                         "NOT q!1 = q1")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            -5
                                                                            -11
                                                                            -12
                                                                            -13
                                                                            -15
                                                                            -29
                                                                            -30
                                                                            1
                                                                            3))
                                                                          (("1"
                                                                            (expand*
                                                                             "ann_trans_cp"
                                                                             "deriv_expr")
                                                                            (("1"
                                                                              (expand
                                                                               "deriv_expr")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (expand
                                                                                   "eval")
                                                                                  (("1"
                                                                                    (expand*
                                                                                     "eval"
                                                                                     "lookup")
                                                                                    (("1"
                                                                                      (use
                                                                                       "wf_state_ghost_not_local_or_field")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "wf_state_ghost_not_local_or_field")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "ap!1"
                                                                                           "sAP1!1"
                                                                                           "name_of(q!1)")
                                                                                          (("1"
                                                                                            (use
                                                                                             "ann_program_defines_MVA_vars")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "q!1")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (expand*
                                                                                                       "MP_modeled?"
                                                                                                       "MVA_modeled?")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -7)
                                                                                                          (("1"
                                                                                                            (apply-extensionality
                                                                                                             5)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -15
                                                                                                               "q!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -15
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -14
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -12
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -11)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "val2int")
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "unique")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "injective?")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "q1"
                                                                                                                                 "q!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -1
                                                     1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst 1 "q1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand*
                                                             "nonempty?"
                                                             "empty?"
                                                             "member"
                                                             "filter_event")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "t1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -25
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "specification_requirements")
                                                    (("3"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (expand
                                                   "specification_requirements")
                                                  (("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp)
                                                (("3"
                                                  (inst - "q!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-23 1))
                                              (("2"
                                                (lemma
                                                 "finite_subset[Transition]")
                                                (("2"
                                                  (skolem!)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "ts(mva(mp!1))"
                                                     "{t: Transition | ts!1(t) AND scp(t) = q!1}")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand*
                                                         "subset?"
                                                         "member"
                                                         "filter_event")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (replace
                                                             -3
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand*
                                             "specification_requirements"
                                             "wf_MP"
                                             "wf_MVA"
                                             "wf_Trans")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -20 "t1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand*
                                           "specification_requirements"
                                           "wf_MP")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (use
                                               "ann_program_yields_wf_program")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (rewrite "nonempty_exists")
                                      (("2"
                                        (skolem -1 "x!1")
                                        (("2"
                                          (inst 1 "x!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (hide-all-but (-6 -9 -11 1))
                        (("2" (use "wf_state_implies_wf_PSt")
                          (("2" (expand "specification_requirements")
                            (("2" (expand "wf_state" -4)
                              (("2"
                                (ground)
                                (("2"
                                  (typepred "mva(mp!1)")
                                  (("2"
                                    (rewrite "nonempty_exists")
                                    (("2"
                                      (expand*
                                       "complete"
                                       "total"
                                       "wf_AState")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           -
                                           "cp(astate(sMP1!1))"
                                           "(# etype := et!1, mname := name(m!1) #)"
                                           "stA(astate(sMP1!1))"
                                           "st(pstate(sMP1!1))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skolem!)
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "empty?(ts!1)")
                (("1" (assert)
                  (("1" (prop)
                    (("1" (hide-all-but (-3 1))
                      (("1"
                        (expand* "set2list" "empty?" "nonempty?"
                         "member")
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (expand* "empty?" "member")
                                  (("1"
                                    (skosimp)
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (expand* "empty?" "member"
                   "specification_requirements" "wf_MP" "wf_MVA"
                   "wf_Trans" "filter_event")
                  (("2" (skosimp)
                    (("2" (hide -4)
                      (("2" (inst?)
                        (("2" (replace -19 -1)
                          (("2" (ground)
                            (("2"
                              (case "event(x!1) = (# etype := et!1, mname := name(m!1) #)")
                              (("1"
                                (replace -1 -4)
                                (("1" (propax) nil nil))
                                nil)
                               ("2" (apply-extensionality) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((related_states const-decl "boolean" Equivalence nil)
    (deriv_stmt def-decl "bool" Semantics nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (ann_event const-decl "Stmt" AnnotateProgram nil)
    (set2list def-decl "list[T]" set2list nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (total const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state_implies_wf_PSt formula-decl nil MonitoredProgramSemantics
     nil)
    (choose const-decl "(p)" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (is_finite const-decl "bool" finite_sets nil)
    (unique const-decl "(injective?[CP, nat])" AnnotateProgram nil)
    (TRUE const-decl "bool" booleans nil)
    (CaseJML_exclusive_branches_semantics formula-decl nil
     APSemanticsProperties nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateProgram
     nil)
    (empty? const-decl "bool" sets nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateProgram
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (deriv_boolean_expr_type_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (deterministic const-decl "boolean" MVASemantics nil)
    (CaseJML_evaluates_true_stmt formula-decl nil APSemanticsProperties
     nil)
    (before_distinct formula-decl nil listfuncs nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (member const-decl "bool" sets nil)
    (update_vars_proper_subterm_set_clause formula-decl nil
     AnnGenerationLemmas nil)
    (well_behaved_MP const-decl "boolean" Equivalence nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (specification_requirements const-decl "boolean" Equivalence nil)
    (stmt_determ_step_AP formula-decl nil AnnotatedProgramSemantics
     nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (expr_determ_step_AP formula-decl nil AnnotatedProgramSemantics
     nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (guard_to_expression const-decl "Expr" MVASemantics nil)
    (eval def-decl "int" Evaluation nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (cp const-decl "string" AnnotateProgram nil)
    (val2int const-decl "int" State nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (eval def-decl "bool" Evaluation nil)
    (deriv_expr def-decl "bool" Semantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (deriv_expr const-decl "bool" Semantics nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (FALSE const-decl "bool" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateProgram nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (pred type-eq-decl nil defined_types nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil) (Expr type-decl nil Expr_adt nil)
    (Method type-eq-decl nil Program nil)
    (step const-decl "AState" MVASemantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   66478 39380 nil nil)))

