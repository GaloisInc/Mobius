(AnnGenerationLemmas
 (IMP_Equivalence_TCC1 0
  (IMP_Equivalence_TCC1-1 nil 3390907940 3395037841
   ("" (lemma "CP_is_enumerable") (("" (propax) nil nil)) nil)
   unchecked
   ((CP_is_enumerable formula-decl nil AnnGenerationLemmas nil)) 53 30
   t nil))
 (IMP_Equivalence_TCC2 0
  (IMP_Equivalence_TCC2-1 nil 3395037817 3395037860
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnGenerationLemmas nil)) 12653 30
   t nil))
 (IMP_Equivalence_TCC3 0
  (IMP_Equivalence_TCC3-1 nil 3402244372 nil
   ("" (assuming-tcc) nil nil) unchecked nil nil nil nil nil))
 (execute_action_preserves_MVA_vars_modeled_TCC1 0
  (execute_action_preserves_MVA_vars_modeled_TCC1-1 nil 3402910973 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (execute_action_preserves_MVA_vars_modeled 0
  (execute_action_preserves_MVA_vars_modeled-1 nil 3402910988
   3402949905
   ("" (induct "a")
    (("1" (skosimp*)
      (("1"
        (expand* "ann_action" "execute_action" "derive" "MP_modeled?"
         "MVA_modeled?" "MVA_vars_modeled?")
        (("1" (skosimp)
          (("1" (inst - "n!2") (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "execute_action" -10)
        (("2" (expand "ann_action" -9)
          (("2" (expand "derive" -9)
            (("2" (assert)
              (("2" (skosimp*)
                (("2"
                  (case "wf_Action(mva(mp!1))(cons(cons1_var!1, cons2_var!1))")
                  (("1"
                    (name "stA2"
                          "update(stA(astate(sMP!1)))(target(cons1_var!1))
                                      (eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1))))")
                    (("1"
                      (inst - "mp!1" "t!1 WITH [action := cons2_var!1]"
                       "m2!1"
                       "sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]]"
                       "sMVA2!1" "tau!1" "sAP2!1")
                      (("1"
                        (case "defined?(eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sMP!1)))) AND
                                                        MP_modeled?(mp!1)(sMP!1 WITH [astate := astate(sMP!1) WITH [stA := stA2]], tau!1)")
                        (("1" (assert)
                          (("1" (prop)
                            (("1" (hide-all-but (-1 -15 1))
                              (("1"
                                (expand* "derive" "execute_set")
                                (("1"
                                  (skosimp*)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 1 "t1!1")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -9 :dir rl :hide? t)
                                  (("2"
                                    (hide-all-but (-10 1))
                                    (("2"
                                      (expand "suffix")
                                      (("2"
                                        (skolem!)
                                        (("2"
                                          (inst
                                           1
                                           "append(l3!1, (: cons1_var!1 :))")
                                          (("2"
                                            (use
                                             "append_assoc[OneAction]")
                                            (("2"
                                              (rewrite -1)
                                              (("2"
                                                (expand "append" 1 2)
                                                (("2"
                                                  (expand "append" 1 2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (use "derive_yields_wf_state_AP")
                              (("1" (assert) nil nil)
                               ("2"
                                (use "one_action_translation_wf_Body")
                                (("2"
                                  (expand "member" -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide-all-but (-1 -3 -4 -6 -8 1))
                              (("4"
                                (replace -2 1 :dir rl :hide? t)
                                (("4"
                                  (expand "wf_state")
                                  (("4"
                                    (prop)
                                    (("1"
                                      (expand "wf_AState")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "wf_Store")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (expand "update")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "wf_Action")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "member")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "wf_ghoststate")
                                      (("2"
                                        (skolem!)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "is_ghost")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3 -12 -14 -15 3)
                          (("2" (expand* "derive" "execute_set")
                            (("2" (skosimp*)
                              (("2"
                                (expand*
                                 "well_behaved_MVA"
                                 "actions_have_no_side_effects")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst - "t1!1" "cons1_var!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace
                                               -1
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("1"
                                                (expand
                                                 "eval_action_behavior")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "astate(sMP!1)")
                                                    (("1"
                                                      (split -)
                                                      (("1"
                                                        (case
                                                         "eval(source(cons1_var!1))(stA(astate(sMP!1)), st(pstate(sAP1!1))) = v!1")
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (case
                                                             "st(pstate(sAP1!1)) = st(pstate(sMP!1))")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (lemma
                                                                   "derive_bottom_iff_exception_step_AP")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "defined?")
                                                                        (("1"
                                                                          (expand*
                                                                           "update_GhostVars"
                                                                           "update_store")
                                                                          (("1"
                                                                            (replace
                                                                             -15
                                                                             2
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (expand*
                                                                               "wf_Action"
                                                                               "var_names")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       2
                                                                                       :dir
                                                                                       rl
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -5
                                                                                          -7
                                                                                          2))
                                                                                        (("1"
                                                                                          (expand*
                                                                                           "MP_modeled?"
                                                                                           "MVA_modeled?"
                                                                                           "Program_modeled?")
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "MVA_cp_modeled?")
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "mp!1")
                                                                                                    (("1"
                                                                                                      (use
                                                                                                       "wf_new_vars")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "MVA_cps_modeled?")
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (use
                                                                                                           "wf_new_vars")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "q!1"
                                                                                                               "f!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (expand
                                                                                               "MVA_vars_modeled?")
                                                                                              (("3"
                                                                                                (skosimp)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "update")
                                                                                                  (("3"
                                                                                                    (lift-if)
                                                                                                    (("3"
                                                                                                      (prop)
                                                                                                      (("3"
                                                                                                        (inst?
                                                                                                         -)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (expand
                                                                                               "Program_gvs_modeled?")
                                                                                              (("4"
                                                                                                (skosimp)
                                                                                                (("4"
                                                                                                  (inst?
                                                                                                   -)
                                                                                                  (("4"
                                                                                                    (lift-if)
                                                                                                    (("4"
                                                                                                      (prop)
                                                                                                      (("4"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("4"
                                                                                                          (expand*
                                                                                                           "wf_state"
                                                                                                           "wf_ghoststate")
                                                                                                          (("4"
                                                                                                            (flatten)
                                                                                                            (("4"
                                                                                                              (inst?)
                                                                                                              (("4"
                                                                                                                (expand*
                                                                                                                 "is_ghost"
                                                                                                                 "var_names")
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (skosimp)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       "getGhostDecls")
                                                                                                                      (("4"
                                                                                                                        (skosimp)
                                                                                                                        (("4"
                                                                                                                          (typepred
                                                                                                                           "mp!1")
                                                                                                                          (("4"
                                                                                                                            (use
                                                                                                                             "wf_new_vars")
                                                                                                                            (("4"
                                                                                                                              (flatten)
                                                                                                                              (("4"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4)
                                                                                                                                (("4"
                                                                                                                                  (expand*
                                                                                                                                   "disjoint?"
                                                                                                                                   "empty?"
                                                                                                                                   "intersection"
                                                                                                                                   "member"
                                                                                                                                   "declared_var_names")
                                                                                                                                  (("4"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "name(f!1)")
                                                                                                                                    (("4"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (use
                                                                                                                                         "new_vars_derived_from_mp")
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "f!1")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         1
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (expand*
                                                                                                                                           "var_names"
                                                                                                                                           "getGhostDecls")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             1
                                                                                                                                             "f!2")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "one_action_translation_wf_Body")
                                                                      (("2"
                                                                        (expand
                                                                         "member")
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (skosimp)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "var_names"
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand*
                                                                                         "add"
                                                                                         "member")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "<<"
                                                                                         2)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand*
                                                               "MP_modeled?"
                                                               "Program_modeled?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite -1)
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "wf_state"
                                                         -4)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "MP_modeled?"
                                                             -8)
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("4"
                                                        (expand
                                                         "wf_state"
                                                         -4)
                                                        (("4"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("6"
                                                        (expand
                                                         "wf_Action")
                                                        (("6"
                                                          (inst?)
                                                          (("6"
                                                            (expand
                                                             "member")
                                                            (("6"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace
                                           -8
                                           -10
                                           :dir
                                           rl
                                           :hide?
                                           t)
                                          (("2"
                                            (expand "suffix")
                                            (("2"
                                              (skolem!)
                                              (("2"
                                                (replace
                                                 -9
                                                 1
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (use
                                                   "append_member[OneAction]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "member"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-6 -7 -8 1))
                    (("2" (typepred "mp!1")
                      (("2" (expand* "wf_MP" "wf_MVA" "wf_Trans")
                        (("2" (flatten)
                          (("2" (inst?)
                            (("2" (prop)
                              (("2"
                                (expand "wf_Action")
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (split -)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (replace -11 :dir rl :hide? t)
                                        (("2"
                                          (expand "suffix")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (replace
                                               -12
                                               1
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("2"
                                                (use
                                                 "append_member[OneAction]")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skosimp)
        (("3" (expand "id")
          (("3" (skosimp)
            (("3" (replace -3 :hide? t)
              (("3" (case "wf_Action(mva(mp!1))(action(t!1))")
                (("1" (use "ann_action_yields_wf_Body")
                  (("1" (assert) nil nil)) nil)
                 ("2" (typepred "mp!1")
                  (("2" (expand* "wf_MP" "wf_MVA" "wf_Trans")
                    (("2" (flatten)
                      (("2" (inst - "t1!1")
                        (("2" (prop)
                          (("2" (expand "wf_Action")
                            (("2" (skosimp)
                              (("2"
                                (inst?)
                                (("2"
                                  (split -)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (expand "suffix")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (replace
                                         -12
                                         1
                                         :dir
                                         rl
                                         :hide?
                                         t)
                                        (("2"
                                          (use
                                           "append_member[OneAction]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ann_action_yields_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_member formula-decl nil listfuncs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (derive_bottom_iff_exception_step_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (add const-decl "(nonempty?)" sets nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (update_store const-decl "Store" State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (Program_gvs_modeled? const-decl "boolean" Equivalence nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (eval_action_behavior const-decl "boolean" Equivalence nil)
    (actions_have_no_side_effects const-decl "boolean" Equivalence nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (wf_Store const-decl "boolean" MVASemantics nil)
    (derive_yields_wf_state_AP formula-decl nil
     AnnotatedProgramSemantics nil)
    (cons1_var!1 skolem-const-decl "OneAction[CP, Name]"
     AnnGenerationLemmas nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (mp!1 skolem-const-decl "(wf_MP)" AnnGenerationLemmas nil)
    (member def-decl "bool" list_props nil)
    (one_action_translation_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval const-decl "Val" MVASemantics nil)
    (update const-decl "Store" MVASemantics nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (MVA_vars_modeled? const-decl "boolean" Equivalence nil)
    (execute_action def-decl "Store" MVASemantics nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (derive def-decl "bool" Semantics nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (suffix const-decl "boolean" listfuncs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (FieldDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil))
   1609838 15160 t shostak))
 (set_stmt_of_ann_action_TCC1 0
  (set_stmt_of_ann_action_TCC1-1 nil 3391490864 3394774872
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   423 250 nil nil))
 (set_stmt_of_ann_action_proper_subterm 0
  (set_stmt_of_ann_action_proper_subterm-1 nil 3391493942 3394775313
   ("" (induct "a")
    (("1" (expand "set_stmt_of_ann_action") (("1" (propax) nil nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "set_stmt_of_ann_action" -2)
        (("2" (expand "ann_action" 1)
          (("2" (expand "<<" 1)
            (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   337 230 t shostak))
 (set_stmt_of_ann_action_only_for_Set 0
  (set_stmt_of_ann_action_only_for_Set-1 nil 3394428141 3394774873
   ("" (induct "a")
    (("1" (skosimp)
      (("1" (expand "set_stmt_of_ann_action") (("1" (propax) nil nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "set_stmt_of_ann_action" -2)
        (("2" (ground) (("2" (inst?) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Action type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil))
   371 220 t shostak))
 (non_interference_of_sets_in_ann_actions_TCC1 0
  (non_interference_of_sets_in_ann_actions_TCC1-1 nil 3394429921
   3394782457
   ("" (use "set_stmt_of_ann_action_only_for_Set[string]")
    (("" (skosimp) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked
   ((Action type-eq-decl nil MVA nil) (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set_stmt_of_ann_action_only_for_Set formula-decl nil
     AnnGenerationLemmas nil))
   64312 1820 t nil))
 (non_interference_of_sets_in_ann_actions_TCC2 0
  (non_interference_of_sets_in_ann_actions_TCC2-1 nil 3402244372 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (non_interference_of_sets_in_ann_actions_TCC3 0
  (non_interference_of_sets_in_ann_actions_TCC3-1 nil 3402244372 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (non_interference_of_sets_in_ann_actions 0
  (non_interference_of_sets_in_ann_actions-1 nil 3389611307 3394775310
   ("" (induct "a")
    (("1" (expand* "set_stmt_of_ann_action" "ann_action" "deriv_stmt")
      (("1" (skosimp) (("1" (assert) nil nil)) nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" -3)
        (("2" (expand "deriv_stmt" -3)
          (("2" (ground)
            (("2" (skosimp*)
              (("2" (expand "deriv_stmt" -2)
                (("2" (expand "execute_set")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2"
                        (inst -8 "p!1" "tau!1" "s2!1" "m2!1" "vn!1")
                        (("2" (ground)
                          (("1"
                            (inst -9
                             "Set(target(cons1_var!1), source(cons1_var!1))")
                            (("1" (expand "set_stmt_of_ann_action" -9)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "expr_has_no_side_effects")
                                  (("1"
                                    (inst
                                     -
                                     "s1!1"
                                     "tau!2"
                                     "v!1"
                                     "m1!1 -1")
                                    (("1"
                                      (expand "deriv_expr" -9)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand*
                                           "update_GhostVars"
                                           "update_store")
                                          (("1"
                                            (replace -6 -1)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp)
                            (("2" (inst?)
                              (("2"
                                (expand "set_stmt_of_ann_action" -9)
                                (("2" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (use "set_stmt_of_ann_action_only_for_Set")
        (("3" (assert) nil nil)) nil))
      nil)
     ("4" (skosimp)
      (("4" (use "set_stmt_of_ann_action_only_for_Set")
        (("4" (assert) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((set_stmt_of_ann_action_only_for_Set formula-decl nil
     AnnGenerationLemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (update_store const-decl "Store" State nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas
     nil))
   5838 4750 t shostak))
 (ann_action_sets_mva_vars_TCC1 0
  (ann_action_sets_mva_vars_TCC1-1 nil 3402244372 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (ann_action_sets_mva_vars 0
  (ann_action_sets_mva_vars-1 nil 3389599475 3394774872
   ("" (induct "l")
    (("1" (expand "set_stmt_of_ann_action") (("1" (propax) nil nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "set_stmt_of_ann_action" -3)
        (("2" (split)
          (("1" (hide -2)
            (("1" (expand "wf_Action")
              (("1" (inst?)
                (("1" (expand "member")
                  (("1" (replace -1)
                    (("1" (beta) (("1" (propax) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -2 "c!1" "a!1")
            (("2" (assert)
              (("2" (expand "wf_Action")
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (use "set_stmt_of_ann_action_only_for_Set")
        (("3" (assert) nil nil)) nil))
      nil))
    nil)
   unfinished
   ((set_stmt_of_ann_action_only_for_Set formula-decl nil
     AnnGenerationLemmas nil)
    (member def-decl "bool" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (OneAction type-eq-decl nil MVA nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (list type-decl nil list_adt nil) (Action type-eq-decl nil MVA nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set_stmt_of_ann_action def-decl "boolean" AnnGenerationLemmas nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil))
   978 620 t shostak))
 (update_vars_proper_subterm_set_clause 0
  (update_vars_proper_subterm_set_clause-1 nil 3393316102 3402863402
   ("" (skosimp)
    (("" (expand "ann_class")
      (("" (use "get_monitored_class_in_classes")
        (("" (use "name_get_monitored_class")
          (("" (assert)
            (("" (expand* "ann_methods" "proper_subterm_set_clause")
              (("" (skosimp)
                (("" (replace -4 :hide? t)
                  (("" (hide -1 -2 -3)
                    (("" (case "wf_MVA(mva(mp!1))")
                      (("1"
                        (case "update_vars(mp!1)(t!1) << ann_event(mp!1)(filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1)))")
                        (("1" (case "etype(event(t!1)) = Entry")
                          (("1" (hide 2 3)
                            (("1" (expand "ann_method" 1)
                              (("1"
                                (expand "<<" 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "<<" 4)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "etype(event(t!1)) = ExitNormal")
                            (("1" (hide 1 2 4)
                              (("1"
                                (expand "ann_method" 1)
                                (("1"
                                  (expand "<<" 1)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "etype(event(t!1)) = ExitExceptional")
                              (("1"
                                (hide 1 2 3 4)
                                (("1"
                                  (expand "ann_method" 1)
                                  (("1"
                                    (expand "<<" 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (1 2 3))
                                (("2"
                                  (use "EventType_inclusive")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2 3 4)
                          (("2" (lemma "filter_event_cp_is_finite")
                            (("2"
                              (inst - "mp!1" "etype(event(t!1))"
                               "name(n!1)" "scp(t!1)")
                              (("2"
                                (expand* "<<" "ann_event")
                                (("2"
                                  (use
                                   "some_is_exists[[BoolExpr, Stmt]]")
                                  (("2"
                                    (replace -1 :hide? t)
                                    (("2"
                                      (inst
                                       1
                                       "ann_trans_cp(mp!1)(scp(t!1),
                                                 {t : Transition | filter_event(mva(mp!1))(etype(event(t!1)))(name(n!1))(t) AND scp(t) = scp(t!1)})")
                                      (("2"
                                        (split)
                                        (("1"
                                          (use
                                           "set2list_same_elements[[BoolExpr, Stmt]]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (expand*
                                                 "member"
                                                 "ann_event_set")
                                                (("1"
                                                  (inst 1 "scp(t!1)")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (typepred "mp!1")
                                                      (("1"
                                                        (expand*
                                                         "wf_MP"
                                                         "wf_MVA"
                                                         "wf_Trans")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "nonempty_exists")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand*
                                                           "filter_event"
                                                           "ann_method")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 1 2 3)
                                            (("2"
                                              (expand*
                                               "ann_trans_cp"
                                               "<<"
                                               "ann_guard_actions")
                                              (("2"
                                                (use
                                                 "some_is_exists[[BoolExpr, Stmt]]")
                                                (("2"
                                                  (replace -1 :hide? t)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "(guard_to_expression(mva(mp!1))(guard(t!1)), update_vars(mp!1)(t!1))")
                                                    (("2"
                                                      (use
                                                       "set2list_same_elements[[BoolExpr, Stmt]]")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand*
                                                             "member"
                                                             "ann_guard_actions_set")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (expand*
                                                                 "filter_event"
                                                                 "ann_method")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (propax) nil nil))
                        nil)
                       ("2" (typepred "mp!1")
                        (("2" (expand "wf_MP") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_class const-decl "Class" AnnotateClass nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (ann_event_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (set2list def-decl "list[T]" set2list nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (Store type-eq-decl nil State nil) (PSt type-eq-decl nil State nil)
    (guard_to_expression const-decl "BoolExpr" MVASemantics nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (filter_event_cp_is_finite formula-decl nil AnnotateMethod nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (EventType_inclusive formula-decl nil EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(well_founded?[Body])" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil))
   241628 4560 t shostak))
 (ann_action_no_side_effects_TCC1 0
  (ann_action_no_side_effects_TCC1-1 nil 3402873037 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (ann_action_no_side_effects_TCC2 0
  (ann_action_no_side_effects_TCC2-1 nil 3402873037 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (ann_action_no_side_effects 0
  (ann_action_no_side_effects-1 nil 3402873037 3402874808
   ("" (induct "a")
    (("1" (skosimp) (("1" (expand* "ann_action" "<<") nil nil)) nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" -3)
        (("2" (expand "<<" -3)
          (("2" (prop)
            (("1" (inst?)
              (("1" (assert)
                (("1" (prop)
                  (("1" (replace -1 3 :hide? t)
                    (("1" (expand "spec_expr_has_no_side_effects")
                      (("1" (skosimp) (("1" (postpone) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil)
             ("4" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil))
    nil)
   unfinished nil 910524 1270 t shostak))
 (sequence_of_sets_have_no_side_effects_TCC1 0
  (sequence_of_sets_have_no_side_effects_TCC1-1 nil 3402244372 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (sequence_of_sets_have_no_side_effects_TCC2 0
  (sequence_of_sets_have_no_side_effects_TCC2-1 nil 3402244372 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (sequence_of_sets_have_no_side_effects 0
  (sequence_of_sets_have_no_side_effects-1 nil 3389433630 3402872352
   ("" (skosimp*)
    (("" (hide -1)
      (("" (expand "update_vars")
        (("" (expand* "<<" "spec_expr_has_no_side_effects")
          (("" (skosimp)
            (("" (prop)
              (("1" (replace -1 -3 :hide? t)
                (("1" (apply (repeat (expand "derive")))
                  (("1" (prop) nil nil)) nil))
                nil)
               ("2" (apply (repeat (expand "<<")))
                (("2" (ground) nil nil)) nil)
               ("3" (expand "ann_action")
                (("3" (lift-if) (("3" (ground) nil nil)) nil)) nil)
               ("4" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (proper_subterm_set_clause const-decl "boolean" ProgramFunctions
     nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   993408 2610 t shostak))
 (update_vars_preserves_MP_modeled_TCC1 0
  (update_vars_preserves_MP_modeled_TCC1-1 nil 3402310657 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (update_vars_preserves_MP_modeled 0
  (update_vars_preserves_MP_modeled-1 nil 3402863606 3402866620
   ("" (skosimp*)
    ((""
      (expand* "related_states" "MP_modeled?" "update_vars" "derive")
      (("" (assert)
        (("" (skosimp*)
          ((""
            (case "wf_Action(mva(mp!1))(action(t!1)) AND cps(mva(mp!1))(tcp(t!1))")
            (("1" (flatten)
              (("1" (expand "MVA_modeled?")
                (("1" (split)
                  (("1" (expand "MVA_cp_modeled?")
                    (("1"
                      (lemma "non_interference_of_sets_in_ann_actions")
                      (("1"
                        (inst - "ann_program(mp!1)" "action(t!1)"
                         "tau!1" "sAP2!1" "m2!1" "cp(mp!1)")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (replace -12 1 :hide? t)
                              (("1"
                                (beta)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "MVA_cps_modeled?")
                                    (("1"
                                      (inst - "tcp(t!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -7 :hide? t)
                                          (("1"
                                            (hide-all-but
                                             (-1 -2 -3 -4 -15 1))
                                            (("1"
                                              (expand*
                                               "derive"
                                               "execute_set")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (expand "derive")))
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand*
                                                         "update_GhostVars"
                                                         "update_store")
                                                        (("1"
                                                          (replace
                                                           -11
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (beta)
                                                            (("1"
                                                              (expand*
                                                               "eval"
                                                               "lookup")
                                                              (("1"
                                                                (use
                                                                 "new_vars_ghost_in_ann_program")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "wf_state_ghost_not_local_or_field"
                                                                       ("p"
                                                                        "ann_program(mp!1)"))
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (expand
                                                                           "val2int")
                                                                          (("1"
                                                                            (rewrite
                                                                             -11)
                                                                            (("1"
                                                                              (apply-extensionality
                                                                               3)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "new_vars_derived_from_mp")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp)
                              (("2"
                                (split +)
                                (("1"
                                  (use "ann_action_sets_mva_vars")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names")
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (use "wf_new_vars")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst? -2)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "sequence_of_sets_have_no_side_effects")
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                   ("4" (postpone) nil nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 2509891 8060 t nil))
 (MP_modeled_lookup_correspondence 0
  (MP_modeled_lookup_correspondence-1 nil 3402786360 3402787202
   ("" (skosimp)
    ((""
      (use "wf_state_ghost_not_local_or_field"
           ("p" "ann_program(mp!1)"))
      ((""
        (lemma "wf_state_ghost_not_local_or_field"
         ("p" "ann_program(mp!1)" "s" "sAP!1" "vn"
          "name_of(mp!1)(q2!1)"))
        (("" (use "new_vars_ghost_in_ann_program")
          (("" (lemma "new_vars_ghost_in_ann_program")
            (("" (inst - "mp!1" "cp(mp!1)" "sAP!1")
              (("" (assert)
                (("" (split -1)
                  (("1" (split -2)
                    (("1" (expand "lookup")
                      (("1" (ground)
                        (("1"
                          (expand* "MP_modeled?" "MVA_modeled?"
                           "MVA_cps_modeled?")
                          (("1" (flatten)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "MVA_cp_modeled?")
                                  (("1"
                                    (replace -4 :dir rl :hide? t)
                                    (("1"
                                      (replace -4 :dir rl :hide? t)
                                      (("1"
                                        (expand "val2int")
                                        (("1"
                                          (typepred "unique")
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (inst - "q1!1" "q2!1")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "new_vars_derived_from_mp")
                      (("2" (flatten)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "new_vars_derived_from_mp")
                    (("2" (flatten) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (val2int const-decl "int" State nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (MVA_cp_modeled? const-decl "boolean" Equivalence nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (MVA_cps_modeled? const-decl "boolean" Equivalence nil)
    (MVA_modeled? const-decl "boolean" Equivalence nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil)
    (new_vars_ghost_in_ann_program formula-decl nil
     AnnotateProgramProperties nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Name formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil))
   606195 4200 t shostak))
 (ann_event_preserves_MP_modeled_TCC1 0
  (ann_event_preserves_MP_modeled_TCC1-1 nil 3402258002 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (ann_event_preserves_MP_modeled_TCC2 0
  (ann_event_preserves_MP_modeled_TCC2-1 nil 3402258002 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (ann_event_preserves_MP_modeled 0
  (ann_event_preserves_MP_modeled-3 nil 3402771737 3402829437
   ("" (skosimp*)
    ((""
      (expand* "related_states" "ann_event" "derive" "execute_CaseJML"
       "on_method_MVA")
      (("" (ground)
        (("" (lift-if)
          (("" (ground)
            (("1" (expand* "step" "derive")
              (("1" (skosimp*)
                (("1"
                  (name-replace "t1"
                   "choose(LAMBDA (t: Transition): ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                                                          event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                                          guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1))))")
                  (("1" (typepred "t1")
                    (("1" (case "cps(mva(mp!1))(scp(t1))")
                      (("1"
                        (name-replace "ts"
                         "filter_event(mva(mp!1))(et!1)(name(m!1))"
                         :hide? nil)
                        (("1" (case "ts(t1)")
                          (("1"
                            (case "FORALL (q: CP): is_finite({t: Transition | ts(t) AND scp(t) = q})")
                            (("1"
                              (name "brT"
                                    "ann_trans_cp(mp!1)(scp(t1), {t: Transition | ts(t) AND scp(t) = scp(t1)})")
                              (("1"
                                (lemma
                                 "CaseJML_exclusive_branches_semantics[Name]")
                                (("1"
                                  (inst
                                   -1
                                   "ann_program(mp!1)"
                                   "set2list(ann_event_set(mp!1)(ts))"
                                   "sAP1!1"
                                   "sAP2!1"
                                   "Unit"
                                   "n!1"
                                   "brT")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (skolem!)
                                      (("1"
                                        (replace
                                         -2
                                         -1
                                         :dir
                                         rl
                                         :hide?
                                         t)
                                        (("1"
                                          (hide
                                           -12
                                           -13
                                           -14
                                           -15
                                           -16
                                           -17
                                           -18
                                           -23
                                           1
                                           2)
                                          (("1"
                                            (expand*
                                             "derive"
                                             "execute_CaseJML"
                                             "ann_trans_cp"
                                             "ann_guard_actions")
                                            (("1"
                                              (name
                                               "bT"
                                               "(guard_to_expression(mva(mp!1))(guard(t1)), update_vars(mp!1)(t1))")
                                              (("1"
                                                (case
                                                 "ann_guard_actions_set(mp!1)({t:Transition | ts(t) AND scp(t) = scp(t1)})(bT)")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (lemma
                                                       "CaseJML_exclusive_branches_semantics[Name]")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "ann_program(mp!1)"
                                                         "set2list(ann_guard_actions_set(mp!1)({t:Transition | ts(t) AND scp(t) = scp(t1)}))"
                                                         "sAP1!1"
                                                         "sAP2!1"
                                                         "Unit"
                                                         "n1!1"
                                                         "bT")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (skolem!)
                                                            (("1"
                                                              (replace
                                                               -6
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (beta)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "update_vars_preserves_MP_modeled")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "mp!1"
                                                                       "ann_method(mp!1)(m!1)"
                                                                       "t1"
                                                                       "n1!2"
                                                                       "sMP1!1"
                                                                       "sMP2!1"
                                                                       "sAP1!1"
                                                                       "sAP2!1")
                                                                      (("1"
                                                                        (expand
                                                                         "related_states")
                                                                        (("1"
                                                                          (case
                                                                           "methods(ann_class(mp!1)(get_monitored_class(mp!1)))(ann_method(mp!1)(m!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "update_vars_proper_subterm_set_clause")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ann_method"
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8
                                                                                     1)
                                                                                    (("1"
                                                                                      (beta)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              -16))
                                                                            (("2"
                                                                              (expand
                                                                               "ann_class")
                                                                              (("2"
                                                                                (use
                                                                                 "get_monitored_class_in_classes")
                                                                                (("2"
                                                                                  (use
                                                                                   "name_get_monitored_class")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ann_methods")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "derive"
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "execute_CaseJML")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp)
                                                            (("3"
                                                              (use
                                                               "before_distinct[[BoolExpr, Stmt]]")
                                                              (("1"
                                                                (use
                                                                 "before_member[[BoolExpr, Stmt]]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "set2list_same_elements[[BoolExpr, Stmt]]")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "member"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "ann_guard_actions_set"
                                                                           -1)
                                                                          (("1"
                                                                            (skosimp)
                                                                            (("1"
                                                                              (replace
                                                                               -3
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (replace
                                                                                 -10
                                                                                 :dir
                                                                                 rl
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT t!1 = t1")
                                                                                  (("1"
                                                                                    (hide
                                                                                     -3
                                                                                     -4
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -19
                                                                                     -24
                                                                                     2
                                                                                     4
                                                                                     5
                                                                                     6)
                                                                                    (("1"
                                                                                      (expand*
                                                                                       "well_behaved_MVA"
                                                                                       "guard_to_expression_behavior")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "t!1"
                                                                                           "sAP1!1"
                                                                                           "astate(sMP1!1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -)
                                                                                              (("1"
                                                                                                (skosimp)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "mva(mp!1)")
                                                                                                  (("1"
                                                                                                    (expand*
                                                                                                     "complete"
                                                                                                     "deterministic")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "t1"
                                                                                                         "t!1"
                                                                                                         "stA(astate(sMP1!1))"
                                                                                                         "st(pstate(sAP1!1))")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -14
                                                                                                           :dir
                                                                                                           rl
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "filter_event")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "NOT v!2 = Bool(TRUE)")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "determ_step_AP")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "ann_program(mp!1)"
                                                                                                                         "n!2"
                                                                                                                         "m2!2"
                                                                                                                         "e!1"
                                                                                                                         "v!2"
                                                                                                                         "v!1"
                                                                                                                         "sAP1!1"
                                                                                                                         "sAP1!1"
                                                                                                                         "tau!2")
                                                                                                                        (("1"
                                                                                                                          (ground)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (use
                                                                                                                               "derive_boolean_expr_type"
                                                                                                                               ("p"
                                                                                                                                "ann_program(mp!1)"))
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    1
                                                                                                                                    2))
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "FORALL (v : Val) : Bool?(v) IMPLIES b(v) OR NOT b(v)")
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (prop)
                                                                                                                                        (("1"
                                                                                                                                          (decompose-equality
                                                                                                                                           2)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (decompose-equality
                                                                                                                                           2)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skosimp)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "id")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "wf_BoolExpr")
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand*
                                                                                                                     "MP_modeled?"
                                                                                                                     "Program_modeled?")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (decompose-equality
                                                                                                                     1)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -5
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "filter_event")
                                                                                                  (("2"
                                                                                                    (flatten)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (expand
                                                                                                 "MP_modeled?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (expand
                                                                                                 "wf_state"
                                                                                                 -13)
                                                                                                (("4"
                                                                                                  (flatten)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skosimp)
                                                            (("4"
                                                              (replace
                                                               -6
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("4"
                                                                (beta)
                                                                (("4"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   2
                                                                   3
                                                                   4)
                                                                  (("4"
                                                                    (expand*
                                                                     "well_behaved_MVA"
                                                                     "guard_to_expression_behavior")
                                                                    (("4"
                                                                      (flatten)
                                                                      (("4"
                                                                        (inst
                                                                         -
                                                                         "t1"
                                                                         "sAP1!1"
                                                                         "astate(sMP1!1)")
                                                                        (("4"
                                                                          (assert)
                                                                          (("4"
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (skosimp)
                                                                              (("1"
                                                                                (lemma
                                                                                 "determ_step_AP")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "ann_program(mp!1)"
                                                                                   "n!2"
                                                                                   "m1!2"
                                                                                   "e!1"
                                                                                   "v!2"
                                                                                   "v!1"
                                                                                   "sAP1!1"
                                                                                   "sAP1!1"
                                                                                   "tau!2")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (expand*
                                                                                       "MP_modeled?"
                                                                                       "Program_modeled?")
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "wf_BoolExpr")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "MP_modeled?")
                                                                              (("2"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "wf_state"
                                                                               -12)
                                                                              (("3"
                                                                                (flatten)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (use
                                                             "set2list_same_elements[[BoolExpr, Stmt]]")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (lemma
                                                             "ann_guard_actions_wf_Branches")
                                                            (("6"
                                                              (inst
                                                               -
                                                               "mp!1"
                                                               "{t:Transition | ts(t) AND scp(t) = scp(t1)}")
                                                              (("1"
                                                                (expand
                                                                 "ann_guard_actions"
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   1
                                                                   :dir
                                                                   rl
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member"
                                                                     "filter_event")
                                                                    (("1"
                                                                      (skosimp)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -5
                                                           1
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (beta)
                                                            (("2"
                                                              (use
                                                               "update_vars_wf_Stmt")
                                                              (("2"
                                                                (use
                                                                 "guard_to_expression_wf_BoolExpr")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -1
                                                   1
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("2"
                                                    (expand
                                                     "ann_guard_actions_set")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "derive" 1)
                                      (("2"
                                        (expand "execute_CaseJML")
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "derive" 1)
                                              (("2"
                                                (inst
                                                 1
                                                 "tau!1"
                                                 "v1!1"
                                                 "m1!1"
                                                 "m2!1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp)
                                      (("3"
                                        (use
                                         "before_member[[BoolExpr, Stmt]]")
                                        (("3"
                                          (use
                                           "before_distinct[[BoolExpr, Stmt]]")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (use
                                               "set2list_same_elements[[BoolExpr, Stmt]]")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "member" -1)
                                                  (("3"
                                                    (expand
                                                     "ann_event_set"
                                                     -1)
                                                    (("3"
                                                      (skosimp)
                                                      (("3"
                                                        (replace
                                                         -3
                                                         :hide?
                                                         t)
                                                        (("3"
                                                          (replace
                                                           -6
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("3"
                                                            (case
                                                             "NOT q!1 = scp(t1)")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                -5
                                                                -9
                                                                -11
                                                                -25
                                                                -26
                                                                1
                                                                3))
                                                              (("1"
                                                                (expand*
                                                                 "ann_trans_cp"
                                                                 "derive"
                                                                 "derive"
                                                                 "derive")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (expand*
                                                                     "check_for_exception_final"
                                                                     "check_for_exception")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             -6)
                                                                            (("1"
                                                                              (rewrite
                                                                               -11)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -9
                                                                                   :dir
                                                                                   rl
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "MP_modeled_lookup_correspondence")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "mp!1"
                                                                                       "scp(t1)"
                                                                                       "q!1"
                                                                                       "sMP1!1"
                                                                                       "sAP1!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skosimp)
                                      (("4"
                                        (replace
                                         -2
                                         -1
                                         :dir
                                         rl
                                         :hide?
                                         t)
                                        (("4"
                                          (hide-all-but
                                           (-1 -4 -5 -7 -21 -22 1 3))
                                          (("4"
                                            (expand*
                                             "ann_trans_cp"
                                             "derive"
                                             "derive"
                                             "derive")
                                            (("4"
                                              (skosimp)
                                              (("4"
                                                (replace
                                                 -3
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("4"
                                                  (expand*
                                                   "check_for_exception_final"
                                                   "check_for_exception")
                                                  (("4"
                                                    (ground)
                                                    (("4"
                                                      (rewrite -1)
                                                      (("4"
                                                        (decompose-equality
                                                         1)
                                                        (("4"
                                                          (rewrite -4)
                                                          (("4"
                                                            (rewrite
                                                             -7)
                                                            (("4"
                                                              (decompose-equality
                                                               1)
                                                              (("4"
                                                                (use
                                                                 "MP_modeled_lookup_correspondence")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (case
                                       "ann_event_set(mp!1)(ts)(brT)")
                                      (("1"
                                        (use
                                         "set2list_same_elements[[BoolExpr, Stmt]]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1 :dir rl :hide? t)
                                        (("2"
                                          (expand "ann_event_set" 1)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite
                                                 "nonempty_exists")
                                                (("2"
                                                  (inst 1 "t1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (use "ann_event_wf_Branches")
                                      (("6"
                                        (assert)
                                        (("6"
                                          (replace -4 1 :dir rl)
                                          (("6"
                                            (use "filter_event_subset")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 1 :dir rl)
                                    (("2"
                                      (use "ann_trans_cp_wf")
                                      (("1"
                                        (beta)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1" (prop) nil nil)
                                             ("2"
                                              (lemma
                                               "subset_transitive[Transition]")
                                              (("2"
                                                (inst
                                                 -
                                                 "{t: Transition | ts(t) AND scp(t) = scp(t1)}"
                                                 "ts"
                                                 "ts(mva(mp!1))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (use
                                                     "filter_event_subset")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand*
                                                           "subset?"
                                                           "member")
                                                          (("2"
                                                            (skosimp)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst?) nil nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (lemma "finite_subset[Transition]")
                                (("2"
                                  (skolem!)
                                  (("2"
                                    (inst
                                     -
                                     "ts(mva(mp!1))"
                                     "{t: Transition | ts(t) AND scp(t) = q!1}")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand* "subset?" "member")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (replace
                                             -3
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "filter_event")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1 1 :dir rl)
                            (("2" (expand "filter_event")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (typepred "mp!1")
                          (("2" (expand* "wf_MP" "wf_MVA" "wf_Trans")
                            (("2" (flatten)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -11 1))
                    (("2" (expand* "nonempty?" "empty?" "member")
                      (("2" (typepred "mva(mp!1)")
                        (("2" (expand* "complete" "total")
                          (("2" (flatten)
                            (("2"
                              (inst - "cp(astate(sMP1!1))"
                               "(# etype := et!1, mname := name(m!1) #)"
                               "stA(astate(sMP1!1))"
                               "st(pstate(sMP1!1))")
                              (("2"
                                (expand* "wf_state" "wf_AState")
                                (("2"
                                  (ground)
                                  (("2"
                                    (skolem!)
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "set2list")
              (("2" (lift-if)
                (("2" (ground)
                  (("2" (hide-all-but (1 4))
                    (("2"
                      (expand* "empty?" "member" "ann_event_set"
                       "filter_event")
                      (("2" (skosimp*)
                        (("2" (rewrite "nonempty_exists")
                          (("2" (skolem - "t")
                            (("2" (typepred "t")
                              (("2"
                                (typepred "mp!1")
                                (("2"
                                  (expand* "wf_MP" "wf_MVA" "wf_Trans")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (case
                                           "event(t) = (# etype := et!1, mname := name(m!1) #)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_event const-decl "Stmt" AnnotateEvent nil)
    (execute_CaseJML const-decl "(execute_CaseJML_type)" SemanticsJML
     nil)
    (on_method_MVA const-decl "AState" MonitoredProgramSemantics nil)
    (derive def-decl "bool" Semantics nil)
    (related_states const-decl "boolean" Equivalence nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (step const-decl "AState" MVASemantics nil)
    (CP formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Name formal-nonempty-type-decl nil AnnGenerationLemmas nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (FieldDecl type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (finite_subset formula-decl nil finite_sets nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (list type-decl nil list_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (ann_event_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ann_event_wf_Branches formula-decl nil AnnotateProgramProperties
     nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (Val_Int_extensionality formula-decl nil Val_adt nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (MP_modeled_lookup_correspondence formula-decl nil
     AnnGenerationLemmas nil)
    (i adt-accessor-decl "[(Int?) -> int]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (val2int const-decl "int" State nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (check_for_exception_final const-decl "bool" Semantics nil)
    (check_for_exception const-decl "bool" Semantics nil)
    (PSt type-eq-decl nil State nil)
    (guard_to_expression const-decl "BoolExpr" MVASemantics nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (update_vars_wf_Stmt formula-decl nil AnnotateProgramProperties
     nil)
    (guard_to_expression_wf_BoolExpr formula-decl nil
     AnnotateProgramProperties nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (get_monitored_class const-decl "Class" MonitoredProgram nil)
    (update_vars_proper_subterm_set_clause formula-decl nil
     AnnGenerationLemmas nil)
    (name_get_monitored_class formula-decl nil MonitoredProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (get_monitored_class_in_classes formula-decl nil MonitoredProgram
     nil)
    (update_vars_preserves_MP_modeled formula-decl nil
     AnnGenerationLemmas nil)
    (before_distinct formula-decl nil listfuncs nil)
    (guard_to_expression_behavior const-decl "boolean" Equivalence nil)
    (well_behaved_MVA const-decl "boolean" Equivalence nil)
    (determ_step_AP formula-decl nil AnnotatedProgramSemantics nil)
    (derive_boolean_expr_type formula-decl nil SemanticsProofs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (Excpt type-decl nil Excpt_adt nil)
    (update_PState_type const-decl "boolean" SemanticsTypes nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (update_GhostVars_type const-decl "boolean" SemanticsJMLTypes nil)
    (update_GhostVars const-decl "(update_GhostVars_type)"
     AnnotatedProgramSemantics nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (derive_type type-eq-decl nil SemanticsTypes nil)
    (derive_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (execute_set const-decl "(execute_set_type)" SemanticsJML nil)
    (execute_assert_type const-decl "boolean" SemanticsTypes nil)
    (execute_assert const-decl "(execute_assert_type)" SemanticsJML
     nil)
    (wf_Branches const-decl "boolean" WellFormedProgram nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry const-decl "(on_method_event_type)" SemanticsJML
     nil)
    (on_method_exit_normal const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (on_method_exit_exceptional const-decl "(on_method_event_type)"
     SemanticsJML nil)
    (id_preserves application-judgement "S" identity_props nil)
    (FALSE const-decl "bool" booleans nil)
    (Val_Bool_extensionality formula-decl nil Val_adt nil)
    (b adt-accessor-decl "[(Bool?) -> bool]" Val_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Bool? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Bool adt-constructor-decl "[bool -> (Bool?)]" Val_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (MP_modeled? const-decl "boolean" Equivalence nil)
    (Program_modeled? const-decl "boolean" Equivalence nil)
    (deterministic const-decl "boolean" MVASemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (member const-decl "bool" sets nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (before_member formula-decl nil listfuncs nil)
    (subset? const-decl "bool" sets nil)
    (ann_guard_actions_wf_Branches formula-decl nil
     AnnotateProgramProperties nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (ann_trans_cp_wf formula-decl nil AnnotateProgramProperties nil)
    (subset_transitive formula-decl nil sets_lemmas nil)
    (CaseJML_exclusive_branches_semantics formula-decl nil
     APSemanticsProperties nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (is_finite const-decl "bool" finite_sets nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (total const-decl "boolean" MVASemantics nil)
    (wf_AState const-decl "boolean" MVASemantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   844174 31560 t nil)
  (ann_event_preserves_MP_modeled-2 nil 3402271328 3402769018
   ("" (skosimp*)
    ((""
      (expand* "related_states" "ann_event" "derive" "execute_CaseJML"
       "on_method_MVA")
      (("" (ground)
        (("" (lift-if)
          (("" (ground)
            (("1" (expand* "step" "derive")
              (("1" (skosimp*)
                (("1"
                  (name-replace "t1"
                   "choose(LAMBDA (t: Transition): ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                                          event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                          guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1))))")
                  (("1" (typepred "t1")
                    (("1" (case "cps(mva(mp!1))(scp(t1))")
                      (("1"
                        (name-replace "ts"
                         "filter_event(mva(mp!1))(et!1)(name(m!1))"
                         :hide? nil)
                        (("1"
                          (name "brT"
                                "ann_trans_cp(mp!1)(scp(t1), {t: Transition | ts(t) AND scp(t) = scp(t1)})")
                          (("1"
                            (lemma
                             "CaseJML_exclusive_branches_semantics[Name]")
                            (("1"
                              (inst -1 "ann_program(mp!1)"
                               "set2list(ann_event_set(mp!1)(ts))"
                               "sAP1!1" "sAP2!1" "Unit" "n!1" "brT")
                              (("1"
                                (split -1)
                                (("1"
                                  (skolem!)
                                  (("1"
                                    (replace -2 -1 :dir rl :hide? t)
                                    (("1"
                                      (hide
                                       -10
                                       -11
                                       -12
                                       -13
                                       -14
                                       -15
                                       -16
                                       -21
                                       1
                                       2)
                                      (("1"
                                        (expand*
                                         "derive"
                                         "execute_CaseJML"
                                         "ann_trans_cp"
                                         "ann_guard_actions")
                                        (("1"
                                          (name
                                           "bT"
                                           "(guard_to_expression(mva(mp!1))(guard(t1)), update_vars(mp!1)(t1))")
                                          (("1"
                                            (case
                                             "ann_guard_actions_set(mp!1)({t:Transition | ts(t) AND scp(t) = scp(t1)})(bT)")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "derive")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "derive" 1)
                                  (("2"
                                    (expand "execute_CaseJML")
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "derive" 1)
                                          (("2"
                                            (inst
                                             1
                                             "tau!1"
                                             "v1!1"
                                             "m1!1"
                                             "m2!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (postpone) nil nil)
                                 ("4" (postpone) nil nil)
                                 ("5"
                                  (case "ann_event_set(mp!1)(ts)(brT)")
                                  (("1" (postpone) nil nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("6" (propax) nil nil)
                                 ("7" (propax) nil nil)
                                 ("8" (postpone) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -11 1))
                    (("2" (expand* "nonempty?" "empty?" "member")
                      (("2" (typepred "mva(mp!1)")
                        (("2" (expand* "complete" "total")
                          (("2" (flatten)
                            (("2"
                              (inst - "cp(astate(sMP1!1))"
                               "(# etype := et!1, mname := name(m!1) #)"
                               "stA(astate(sMP1!1))"
                               "st(pstate(sMP1!1))")
                              (("2"
                                (expand* "wf_state" "wf_AState")
                                (("2"
                                  (ground)
                                  (("2"
                                    (skolem!)
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "set2list")
              (("2" (lift-if)
                (("2" (ground)
                  (("2" (hide-all-but (1 4))
                    (("2"
                      (expand* "empty?" "member" "ann_event_set"
                       "filter_event")
                      (("2" (skosimp*)
                        (("2" (rewrite "nonempty_exists")
                          (("2" (skolem - "t")
                            (("2" (typepred "t")
                              (("2"
                                (typepred "mp!1")
                                (("2"
                                  (expand* "wf_MP" "wf_MVA" "wf_Trans")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (prop)
                                        (("2"
                                          (case
                                           "event(t) = (# etype := et!1, mname := name(m!1) #)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 9561158 13400 t nil)
  (ann_event_preserves_MP_modeled-1 nil 3402258002 3402270901
   ("" (skosimp)
    ((""
      (expand* "related_states" "ann_event" "ann_event_set"
       "on_method_MVA" "derive" "execute_CaseJML")
      (("" (ground)
        (("" (lift-if)
          (("" (split -11)
            (("1" (split)
              (("1" (flatten)
                (("1" (expand "set2list") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (expand* "step" "derive")
                (("2" (skosimp*)
                  (("2"
                    (case "nonempty?({t: Transition |
                                                               ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                                               event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                               guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1)))})")
                    (("1"
                      (name "t1" "choose(LAMBDA (t: Transition):
                                                                                 ts(mva(mp!1))(t) AND scp(t) = cp(astate(sMP1!1)) AND
                                                                                 event(t) = (# etype := et!1, mname := name(m!1) #) AND
                                                                                 guard(t)(stA(astate(sMP1!1)), st(pstate(sMP1!1))))")
                      (("1" (replace -1)
                        (("1" (expand "choose")
                          (("1" (use "epsilon_ax[Transition]")
                            (("1" (replace -2 -1)
                              (("1"
                                (prop)
                                (("1"
                                  (hide -5 -6)
                                  (("1"
                                    (case "cps(mva(mp!1))(scp(t1))")
                                    (("1"
                                      (case
                                       "FORALL (q: CP): is_finite({t: Transition | ts!1(t) AND scp(t) = q})")
                                      (("1"
                                        (name
                                         "C1"
                                         "{c : [BoolExpr, Stmt] | EXISTS (q : CP):
                                                                                                                                                                                                                                                                                                         cps(mva(mp!1))(q) AND
                                                                                                                                                                                                                                                                                                         nonempty?({t: Transition | ts!1(t) AND scp(t) = q}) AND
                                                                                                                                                                                                                                                                                                         c = ann_trans_cp(mp!1)(q, {t : Transition | ts!1(t) AND scp(t) = q})}")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case
                                             "C1(ann_trans_cp(mp!1)(scp(t1), {t : Transition | ts!1(t) AND scp(t) = scp(t1)}))")
                                            (("1"
                                              (name
                                               "brT"
                                               "ann_trans_cp(mp!1)(scp(t1), {t: Transition | ts!1(t) AND scp(t) = scp(t1)})")
                                              (("1"
                                                (case
                                                 "FORALL (tau: APState, v: Val, m1: below(n!1)):
                                                                                                                                                                                                                                               derive(ann_program(mp!1))(PROJ_1(brT), sAP1!1, v, tau)(m1) IMPLIES
                                                                                                                                                                                                                                               sAP1!1 = tau AND v = Bool(TRUE)")
                                                (("1"
                                                  (case
                                                   "member(brT, set2list(C1))")
                                                  (("1"
                                                    (case
                                                     "EXISTS (tau : APState, n : nat): derive(ann_program(mp!1))(PROJ_2(brT), sAP1!1, Unit, tau)(n)")
                                                    (("1"
                                                      (skolem!)
                                                      (("1"
                                                        (lemma
                                                         "CaseJML_exclusive_branches_semantics[Name]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "ann_program(mp!1)"
                                                           "set2list(C1)"
                                                           "sAP1!1"
                                                           "sAP2!1"
                                                           "Unit"
                                                           "n!1"
                                                           "brT")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (skolem!)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5
                                                                   -6
                                                                   -7
                                                                   -14
                                                                   -15
                                                                   -16
                                                                   -21)
                                                                  (("1"
                                                                    (expand*
                                                                     "derive"
                                                                     "execute_CaseJML"
                                                                     "ann_trans_cp")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand*
                                                                         "ann_guard_actions"
                                                                         "ann_guard_actions_set")
                                                                        (("1"
                                                                          (name
                                                                           "C2"
                                                                           "{x: [BoolExpr, Stmt] | EXISTS (t: Transition): ts!1(t) AND scp(t) = scp(t1) AND
                                                                                                                                                                                                                                                                                      x = (guard_to_expression(mva(mp!1))(guard(t)), update_vars(mp!1)(t))}")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (name
                                                                               "bT"
                                                                               "(guard_to_expression(mva(mp!1))(guard(t1)), update_vars(mp!1)(t1))")
                                                                              (("1"
                                                                                (case
                                                                                 "C2(bT)")
                                                                                (("1"
                                                                                  (case
                                                                                   "NOT null?(set2list(C2))")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (case
                                                                                       "FORALL (b2: [BoolExpr, Stmt], tau: APState, v: Val, m2: below(n!2)):
                                                                                                                                                                                                                                                                         member(b2, set2list(C2)) IMPLIES NOT bT = b2 IMPLIES
                                                                                                                                                                                                                                                                         derive(ann_program(mp!1))(PROJ_1(b2), sAP1!1, v, tau)(m2) IMPLIES
                                                                                                                                                                                                                                                                         sAP1!1 = tau AND v = Bool(FALSE)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "EXISTS (tau : APState, n : nat): derive(ann_program(mp!1))(PROJ_2(bT), sAP1!1, Unit, tau)(n)")
                                                                                        (("1"
                                                                                          (skolem!)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "CaseJML_exclusive_branches_semantics[Name]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "ann_program(mp!1)"
                                                                                               "set2list(C2)"
                                                                                               "sAP1!1"
                                                                                               "sAP2!1"
                                                                                               "Unit"
                                                                                               "n!2"
                                                                                               "bT")
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (skolem!)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -5
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (beta)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         1
                                                                                                         2
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "MP_modeled?")
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "update_vars_preserves_MVA_modeled")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "mp!1"
                                                                                                                 "c!1"
                                                                                                                 "m!1"
                                                                                                                 "t1"
                                                                                                                 "sMP1!1"
                                                                                                                 "astate(sMP2!1)"
                                                                                                                 "sAP1!1"
                                                                                                                 "sAP2!1"
                                                                                                                 "n1!2")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "related_states")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "update_vars_proper_subterm_set_clause")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "mp!1"
                                                                                                                       "c!1"
                                                                                                                       "m!1"
                                                                                                                       "t1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "Program_modeled?")
                                                                                                              (("2"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "derive"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "execute_CaseJML")
                                                                                                    (("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("6"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("7"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("4"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 12898959 21230 t shostak)))

