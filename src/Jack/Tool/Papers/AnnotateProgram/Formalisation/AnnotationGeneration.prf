(VariableNames
 (cp_TCC1 0
  (cp_TCC1-1 nil 3396601202 3403857344
   (""
    (inst 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (skosimp*)
      ((""
        (case "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (case-replace
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :hide? t)
          (("1" (use "infinite_nonempty[Name]") nil nil)
           ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
            nil))
          nil)
         ("2" (use "infinite_difference[Name]")
          (("1" (use "infinite_namespace") nil nil)
           ("2" (typepred "reserved_words")
            (("2" (typepred "declared_var_names(program(mp!1))")
              (("2" (typepred "var_names(mva(mp!1))")
                (("2" (expand "forbidden_names")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((infinite_difference judgement-tcc nil infinite_sets_def nil)
    (infinite_namespace formula-decl nil VariableNames nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]" VariableNames
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (member const-decl "bool" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (injective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (difference const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil VariableNames nil)
    (Name formal-nonempty-type-decl nil VariableNames nil))
   1137 1030 t nil)))
(NewVariableDeclarations
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-2 nil 3397386732 3403863488
   (";;; Proof IMP_VariableNames_TCC1-1 for formula AnnotateProgram.IMP_VariableNames_TCC1"
    (use "infinite_namespace") nil
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((infinite_namespace formula-decl nil NewVariableDeclarations nil))
   116 120 nil nil)
  (IMP_VariableNames_TCC1-1 nil 3397386612 nil
   ("" (assuming-tcc) nil nil) nil nil nil nil nil nil))
 (name_of_TCC1 0
  (name_of_TCC1-2 nil 3397386758 3403857347
   (";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
    (use "name_of_exists")
    ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
      (skosimp*)
      ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of_exists formula-decl nil NewVariableDeclarations nil))
   505 510 nil nil)
  (name_of_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (unique_TCC1 0
  (unique_TCC1-2 nil 3397386786 3403857348
   (";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
    (use "CP_is_enumerable")
    ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
      (skosimp*)
      ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (CP_is_enumerable formula-decl nil NewVariableDeclarations nil))
   364 360 nil nil)
  (unique_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (new_cp_gvd_TCC1 0
  (new_cp_gvd_TCC1-1 nil 3398096023 3403857348
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (defined? const-decl "boolean" ValProp nil))
   762 670 nil nil))
 (new_cps_gvds_TCC1 0
  (new_cps_gvds_TCC1-1 nil 3398096023 3403857349
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
(q: (cps(mva(mp!1))))|
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1)
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (apply-extensionality :hide? t) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "q!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (FieldDecl type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nonempty? const-decl "bool" sets nil))
   1132 950 t nil))
 (new_mva_vars_gvds_TCC1 0
  (new_mva_vars_gvds_TCC1-1 nil 3398096023 3403857350
   ("" (skosimp*)
    (("" (typepred "vdsA(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (v: (vdsA(mva(mp!1)))):
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)})) : f!1(choose({
                     (v: (vdsA(mva(mp!1)))) |
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "v!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst 1 "v!1") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst 1 "v!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FieldDecl type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   579 500 t nil))
 (new_vars_derived_from_mp 0
  (new_vars_derived_from_mp-1 nil 3397386643 3403857352
   ("" (skosimp*)
    (("" (expand "var_names")
      (("" (expand "new_gvds")
        (("" (split 1)
          (("1" (inst 1 "new_cp_gvd(mp!1)") (("1" (grind) nil nil))
            nil)
           ("2" (skosimp*)
            (("2"
              (inst 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("3" (skosimp*)
            (("3"
              (inst 1
               "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
              (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil))
   2208 2070 t nil))
 (wf_new_vars 0
  (wf_new_vars-1 nil 3397386628 3403857359
   ("" (skosimp*)
    ((""
      (auto-rewrite ("empty?" "disjoint?" "intersection" "member"
                     "union"))
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (typepred "name_of(mp!1)(q!1)") (("1" (grind) nil nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (typepred "cp(mp!1)") (("2" (grind) nil nil)) nil))
          nil)
         ("3" (skosimp*)
          (("3" (typepred "name_of(mp!1)(q!1)") (("3" (grind) nil nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skosimp*)
            (("4" (expand "new_gvds")
              (("4" (rewrite "add_as_union")
                (("4" (rewrite "var_names_union")
                  (("4" (rewrite "var_names_union")
                    (("4" (assert)
                      (("4" (expand "var_names")
                        (("4" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case-replace "f!1 = v!1" :hide? t)
                                  (("1"
                                    (typepred "v!1")
                                    (("1"
                                      (typepred "mp!1")
                                      (("1"
                                        (expand "wf_MP")
                                        (("1"
                                          (expand "wf_MVA")
                                          (("1"
                                            (expand "wf_vdsA")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -4)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "var_names")
                                                      (("1"
                                                        (inst? 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-extensionality :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (skosimp*)
            (("5" (expand "new_gvds")
              (("5" (rewrite "add_as_union")
                (("5" (rewrite "var_names_union")
                  (("5" (rewrite "var_names_union")
                    (("5" (assert)
                      (("5" (expand "var_names")
                        (("5" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "mp!1")
                                  (("2"
                                    (expand "compatible")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand
                                         "MVA_aut_vars_are_not_prog_vars")
                                        (("2"
                                          (case-replace
                                           "f!1 = v!1"
                                           :hide?
                                           t)
                                          (("1"
                                            (typepred "v!1")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "ext_declared_var_names")
                                                  (("1"
                                                    (expand
                                                     "declared_var_names")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3"
                                (expand "new_cp_gvd")
                                (("3"
                                  (expand "singleton")
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "forbidden_names")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (FieldDecl type-eq-decl nil Program nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil))
   5636 5120 t nil))
 (cp_new_ghostvar 0
  (cp_new_ghostvar-1 nil 3398086579 3403857346
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert) (("" (flatten) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   2438 2260 t shostak))
 (halted_new_ghostvar 0
  (halted_new_ghostvar-1 nil 3398086655 3403857350
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "var_names")
                    (("" (assert)
                      ((""
                        (inst 1
                         "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                        (("1" (assert)
                          (("1" (expand "halted")
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (inst 1 "halted")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "mva(mp!1)")
                                    (("1"
                                      (expand "complete")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "defined?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (halted const-decl "CP" MVA nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   506 430 t shostak))
 (new_cp_gvd_TCC2 0
  (new_cp_gvd_TCC2-1 nil 3403876780 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (new_cp_gvd_new_ghostvar 0
  (new_cp_gvd_new_ghostvar-1 nil 3403876818 3403876903
   ("" (skosimp)
    ((""
      (expand* "new_gvds" "new_cps_gvds" "new_cp_gvd" "add" "union"
       "member")
      (("" (flatten) (("" (inst?) nil nil)) nil)) nil))
    nil)
   unchecked
   ((new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    nil nil (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil))
   84601 160 t shostak))
 (new_mva_var_new_ghostvar 0
  (new_mva_var_new_ghostvar-1 nil 3403877388 3403877427
   ("" (skosimp)
    ((""
      (expand* "new_gvds" "new_mva_vars_gvds" "new_mva_var_gvd" "add"
       "union" "member")
      (("" (flatten) (("" (inst?) nil nil)) nil)) nil))
    nil)
   proved
   ((new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (new_mva_var_gvd const-decl "FieldDecl" NewVariableDeclarations
     nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (mp!1 skolem-const-decl "(wf_MP)" NewVariableDeclarations nil)
    (vd!1 skolem-const-decl "MVAVarDecl[CP, Name]"
     NewVariableDeclarations nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil))
   39506 320 t shostak))
 (cp_not_cps_ghostvar 0
  (cp_not_cps_ghostvar-1 nil 3398156394 3403863490
   ("" (skosimp*)
    (("" (expand "new_cps_gvds")
      (("" (skosimp*)
        (("" (typepred "name_of(mp!1)(q!1)") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil))
   1345 1270 t shostak))
 (cp_not_mva_ghostvar 0
  (cp_not_mva_ghostvar-1 nil 3398156446 3403863493
   ("" (skosimp*)
    (("" (expand "new_mva_vars_gvds")
      (("" (skosimp*)
        (("" (typepred "cp(mp!1)")
          (("" (typepred "v!1") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (FieldDecl type-eq-decl nil Program nil))
   2637 2470 t shostak))
 (var_names_MVA_subset_var_names_new_gdvs 0
  (var_names_MVA_subset_var_names_new_gdvs-1 nil 3401682644 3403857353
   (";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
    (skosimp)
    ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
      (expand* "var_names" "subset?" "union" "member")
      ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
        (skosimp)
        ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
          (split)
          (("1" (hide 1)
            (("1" (expand* "var_names" "new_gvds")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert)
                    (("1"
                      (expand* "add" "union" "member"
                       "new_mva_vars_gvds")
                      (("1" (flatten) (("1" (inst?) nil)))))))))))))))
           ("2" (hide 2)
            (("2" (expand* "Union" "var_names")
              (("2" (skosimp)
                (("2" (typepred "mp!1")
                  (("2" (expand "compatible")
                    (("2" (flatten)
                      (("2" (skosimp)
                        (("2" (inst 1 "var_names(c!1)")
                          (("1" (expand "var_names")
                            (("1"
                              (expand* "union" "member"
                               "MVA_prog_vars_are_fields")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" 2)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))))
                           ("2" (inst?) nil))))))))))))))))))))))))
    "")
   unchecked
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil))
   674 620 nil nil)))
(AnnotateEvent
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619498 3403863493
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateEvent nil)) 108 100 t
   nil))
 (IMP_NewVariableDeclarations_TCC1 0
  (IMP_NewVariableDeclarations_TCC1-1 nil 3401619498 3403863493
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateEvent nil)) 108 110 t
   nil))
 (IMP_NewVariableDeclarations_TCC2 0
  (IMP_NewVariableDeclarations_TCC2-1 nil 3401619498 3403863493
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateEvent nil)) 114 110 t
   nil))
 (ann_action_TCC1 0
  (ann_action_TCC1-1 nil 3401619498 3403857359
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   277 270 nil nil))
 (var_names_ann_action 0
  (var_names_ann_action-1 nil 3401682404 3403857382
   (";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
    (skolem 1 (_ "n!1"))
    ((";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
      (induct "a")
      (("1" (grind) nil)
       ("2" (skosimp*)
        (("2" (rewrite "ann_action" 1)
          (("2" (rewrite "var_names" 1)
            (("2" (rewrite "var_names" 1)
              (("2" (auto-rewrite "union" "add" "member")
                (("2" (assert)
                  (("2" (replace -1 :hide? t)
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (inst?) (("2" (assert) nil)))
                         ("3" (skosimp*)
                          (("3" (inst?) (("3" (assert) nil)))))
                         ("4" (skosimp*)
                          (("4" (split -1)
                            (("1" (assert) nil)
                             ("2" (inst?)
                              (("2"
                                (assert)
                                nil))))))))))))))))))))))))))))
    "")
   unchecked
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Action type-eq-decl nil MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil))
   846 760 nil nil))
 (subterm_ann_action 0
  (subterm_ann_action-1 nil 3403600232 3403857380
   ("" (induct "a")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" 1)
        (("2" (expand "subterm" 1 1)
          (("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (inst 1 "cons1_var!1")
                  (("1" (assert)
                    (("1" (expand "member") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -2)
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (expand "member" -1)
                    (("3" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (inst?)
                        (("2" (assert)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (OneAction type-eq-decl nil MVA nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil) (Action type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   682 600 t shostak))
 (ann_guard_actions_set_TCC1 0
  (ann_guard_actions_set_TCC1-2 nil 3401619720 3403857376
   (";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
    (skosimp*)
    ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
      (typepred "ts!1")
      ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
        (expand "is_finite")
        ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
          (skosimp*)
          ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
            (inst 1 "N!1" "LAMBDA(x :({x: [BoolExpr[Name], Stmt[Name]] |
                       EXISTS (t: Transition[CP, Name]):
                         ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))})) : f!1(choose({t : Transition[CP, Name] |  ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil)))
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil)))))))))
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil)))))))))))))))
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (assert) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil) (Store type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (guard_to_expression const-decl "BoolExpr" MVASemantics nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (nonempty? const-decl "bool" sets nil))
   1018 950 nil nil)
  (ann_guard_actions_set_TCC1-1 nil 3401619498 nil
   ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
 (ann_event_set_TCC1 0
  (ann_event_set_TCC1-1 nil 3401619498 3403857359
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(t :
                        ({t: Transition[CP, Name] |
                             ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (expand "injective?")
              (("" (skosimp*)
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   360 280 t nil))
 (ann_event_set_TCC2 0
  (ann_event_set_TCC2-2 nil 3401619789 3403857374
   (";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
    (skosimp*)
    ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
      (typepred "cps(mva(mp!1))")
      ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
        (expand "is_finite")
        ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
          (skosimp*)
          ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
            (inst 1 "N!1"
             "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                             EXISTS (q: CP):
                               cps(mva(mp!1))(q) AND
                                nonempty?[Transition[CP, Name]]
                                    ({t: Transition[CP, Name] |
                                        ts!1(t) AND scp(t) = q})
                                 AND
                                 c =
                                  ann_trans_cp(mp!1)
                                              (q,
                                               {t: Transition[CP, Name]
                                                |
                                                ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                                nonempty?[Transition[CP, Name]]
                                    ({t: Transition[CP, Name] |
                                        ts!1(t) AND scp(t) = q})
                                 AND
                                 c =
                                  ann_trans_cp(mp!1)
                                              (q,
                                               {t: Transition[CP, Name]
                                                |
                                                ts!1(t) AND scp(t) = q})}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1"
                        (name "q1" "choose({q: CP |
                                                  cps(mva(mp!1))(q) AND
                                                   nonempty?[Transition[CP, Name]]
                                                       ({t: Transition[CP, Name] |
                                                           ts!1(t) AND scp(t) = q})
                                                    AND
                                                    x1!1 =
                                                     ann_trans_cp(mp!1)
                                                                 (q,
                                                                  {t: Transition[CP, Name] |
                                                                     ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (name "q2" "choose({q: CP |
                                                        cps(mva(mp!1))(q) AND
                                                         nonempty?[Transition[CP, Name]]
                                                             ({t: Transition[CP, Name] |
                                                                 ts!1(t) AND scp(t) = q})
                                                          AND
                                                          x2!1 =
                                                           ann_trans_cp(mp!1)
                                                                       (q,
                                                                        {t: Transition[CP, Name] |
                                                                           ts!1(t) AND scp(t) = q})})")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (case
                                 "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (case
                                   "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1"
                                    (replace -5)
                                    (("1" (assert) nil)))
                                   ("2"
                                    (replace -2 :dir rl)
                                    (("2" (assert) nil)))
                                   ("3"
                                    (typepred "ts!1")
                                    (("3"
                                      (expand "is_finite")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst 1 "N!2" "f!2")
                                          (("3" (grind) nil)))))))))))
                                 ("2"
                                  (replace -1 :dir rl)
                                  (("2" (assert) nil)))
                                 ("3"
                                  (typepred "ts!1")
                                  (("3"
                                    (expand "is_finite")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (inst 1 "N!2" "f!2")
                                        (("3"
                                          (grind)
                                          nil)))))))))))))))
                           ("2" (typepred "x2!1")
                            (("2" (skosimp*)
                              (("2"
                                (rewrite "nonempty_exists" 1)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil)))))))))))
                         ("2" (typepred "x1!1")
                          (("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists" 1)
                              (("1" (inst?) (("1" (assert) nil)))
                               ("2"
                                (skosimp*)
                                (("2"
                                  (typepred "ts!1")
                                  (("2"
                                    (expand "is_finite")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst 1 "N!2" "f!2")
                                        (("2"
                                          (grind)
                                          nil)))))))))))))))))
                         ("3" (skosimp*)
                          (("3" (typepred "ts!1")
                            (("3" (expand "is_finite")
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst 1 "N!2" "f!2")
                                  (("3" (grind) nil)))))))))))))))))
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil)))))))))))))))))
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil)))))))))))))))))
                   ("4" (skosimp*)
                    (("4" (typepred "ts!1")
                      (("4" (expand "is_finite")
                        (("4" (skosimp*)
                          (("4" (inst 1 "N!2" "f!2")
                            (("4" (grind) nil)))))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists" 1)
                    (("1" (inst?) (("1" (assert) nil)))
                     ("2" (skosimp*)
                      (("2" (typepred "ts!1")
                        (("2" (expand "is_finite")
                          (("2" (skosimp*)
                            (("2" (inst 1 "N!2" "f!2")
                              (("2" (grind) nil)))))))))))))))))))
             ("3" (skosimp*)
              (("3" (typepred "ts!1")
                (("3" (expand "is_finite")
                  (("3" (skosimp*)
                    (("3" (inst 1 "N!2" "f!2")
                      (("3" (grind) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   14967 13900 nil nil)
  (ann_event_set_TCC2-1 nil 3401619498 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (var_names_ann_event 0
  (var_names_ann_event-2 nil 3402742040 3403857386
   ("" (skosimp*)
    (("" (auto-rewrite "subset?" "member" "union" "add")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_event")
            (("" (rewrite "var_names_CaseJML_set2list")
              (("" (skosimp*)
                (("" (expand "ann_event_set")
                  (("" (skosimp*)
                    (("" (expand "ann_trans_cp")
                      (("" (replace -4 :hide? t)
                        (("" (assert)
                          (("" (split -4)
                            (("1"
                              (apply (repeat (rewrite "var_names" -1)))
                              (("1"
                                (assert)
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (use "cp_new_ghostvar")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (expand "new_gvds")
                                        (("2"
                                          (rewrite "add_as_union")
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (rewrite
                                               "var_names_union")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "new_cps_gvds")
                                                    (("2"
                                                      (expand
                                                       "var_names")
                                                      (("2"
                                                        (inst
                                                         2
                                                         "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                        (("1"
                                                          (inst
                                                           2
                                                           "q!1")
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "defined?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "ann_guard_actions")
                              (("2"
                                (rewrite "var_names_CaseJML_set2list")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand "ann_guard_actions_set")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (replace -3 :hide? t)
                                        (("1"
                                          (expand "update_vars")
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (use
                                               "guard_to_expression_yields_wf_BoolExpr")
                                              (("1"
                                                (typepred "mp!1")
                                                (("1"
                                                  (expand "wf_MP")
                                                  (("1"
                                                    (expand
                                                     "wf_BoolExpr")
                                                    (("1"
                                                      (expand
                                                       "wf_Body")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "var_names_MVA_subset_var_names_new_gdvs")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "var_names" -1)
                                              (("2"
                                                (rewrite
                                                 "var_names"
                                                 -1)
                                                (("2"
                                                  (rewrite
                                                   "var_names"
                                                   -1)
                                                  (("2"
                                                    (rewrite
                                                     "var_names"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (use
                                                             "cp_new_ghostvar")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "singleton")
                                                          (("2"
                                                            (expand
                                                             "new_gvds")
                                                            (("2"
                                                              (rewrite
                                                               "add_as_union")
                                                              (("2"
                                                                (rewrite
                                                                 "var_names_union")
                                                                (("2"
                                                                  (rewrite
                                                                   "var_names_union")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "new_cps_gvds")
                                                                        (("2"
                                                                          (expand
                                                                           "var_names")
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               2
                                                                               "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                              (("1"
                                                                                (inst
                                                                                 2
                                                                                 "tcp(t!1)")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "mp!1")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "wf_MP")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "wf_MVA")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "wf_Trans")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -9
                                                                                                 "t!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "defined?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (rewrite
                                                           "var_names_ann_action")
                                                          (("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (typepred
                                                               "mp!1")
                                                              (("3"
                                                                (expand
                                                                 "wf_MP")
                                                                (("3"
                                                                  (expand
                                                                   "wf_MVA")
                                                                  (("3"
                                                                    (flatten)
                                                                    (("3"
                                                                      (inst
                                                                       -6
                                                                       "t!1")
                                                                      (("3"
                                                                        (expand
                                                                         "wf_Trans")
                                                                        (("3"
                                                                          (expand
                                                                           "wf_Action")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -11
                                                                               "t!1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (inst
                                                                                       -9
                                                                                       "oa!1")
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "wf_Expr")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "wf_Body")
                                                                                              (("3"
                                                                                                (flatten)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -10
                                                                                                     "x!1")
                                                                                                    (("3"
                                                                                                      (split
                                                                                                       -13)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         -10)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "new_gvds")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "add_as_union")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "var_names_union")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "var_names_union")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "new_mva_vars_gvds")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "var_names"
                                                                                                                         4)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             4
                                                                                                                             "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 4
                                                                                                                                 "f!1")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "var_names"
                                                                                                           -11)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "var_names"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "new_gvds")
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "add_as_union")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "var_names_union")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "var_names_union")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "new_mva_vars_gvds")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "var_names"
                                                                                                                                 4)
                                                                                                                                (("1"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     4
                                                                                                                                     "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         4
                                                                                                                                         "f!1")
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "compatible")
                                                                                                                (("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "MVA_prog_vars_are_fields")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "var_names"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -7
                                                                                                                               "l!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "var_names"
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "Union")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         2
                                                                                                                                         "var_names(c!1)")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "var_names")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "Union")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "var_names"
                                                                                                                                                   3)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     3
                                                                                                                                                     "fd!1")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (inst?)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "ann_event_set_TCC1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ann_event_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (var_names_ann_action formula-decl nil AnnotateEvent nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Union const-decl "set" sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (guard_to_expression_yields_wf_BoolExpr formula-decl nil
     MVASemantics nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (wf_BoolExpr const-decl "boolean" WellFormedMVA nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   4166 3660 t nil)
  (var_names_ann_event-1 nil 3401682730 3401704757
   ("" (skosimp*)
    (("" (expand "subset?" 1)
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "ann_event")
            (("" (rewrite "var_names_CaseJML_set2list")
              (("" (skosimp*)
                (("" (expand "ann_event_set")
                  (("" (skosimp*)
                    (("" (expand "ann_trans_cp")
                      (("" (replace -4 :hide? t)
                        (("" (auto-rewrite "union" "member")
                          (("" (assert)
                            (("" (rewrite "var_names" -4)
                              ((""
                                (rewrite "var_names" -4)
                                ((""
                                  (rewrite "var_names" -4)
                                  ((""
                                    (rewrite "var_names" -4)
                                    ((""
                                      (rewrite "var_names" -4)
                                      ((""
                                        (expand "singleton")
                                        ((""
                                          (assert)
                                          ((""
                                            (split -4)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (use "cp_new_ghostvar")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "new_gvds")
                                                  (("2"
                                                    (rewrite
                                                     "add_as_union")
                                                    (("2"
                                                      (rewrite
                                                       "var_names_union")
                                                      (("2"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "new_cps_gvds")
                                                              (("2"
                                                                (expand
                                                                 "var_names")
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "q!1")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "defined?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "ann_guard_actions")
                                              (("3"
                                                (rewrite
                                                 "var_names_CaseJML_set2list")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand
                                                     "ann_guard_actions_set")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "update_vars")
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (use
                                                               "var_names_guard_to_expresion")
                                                              (("1"
                                                                (typepred
                                                                 "mp!1")
                                                                (("1"
                                                                  (expand
                                                                   "wf_MP")
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "var_names_MVA_subset_var_names_new_gdvs")
                                                                              (("1"
                                                                                (expand*
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "var_names"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "var_names"
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "var_names"
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "var_names"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "add")
                                                                        (("2"
                                                                          (expand
                                                                           "singleton")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "cp_new_ghostvar")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "new_gvds")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "add_as_union")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "var_names_union")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "var_names_union")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "new_cps_gvds")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "tcp(t!1)")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "mp!1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "wf_MP")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_MVA")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wf_Trans")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -6
                                                                                                                 "t!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -10
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "var_names_ann_action")
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "mp!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_MP")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "wf_MVA")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "wf_Trans")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "wf_Action")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "subset?")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -12)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -12
                                                                                                       "t!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (flatten)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -9
                                                                                                               "oa!1")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -10
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         -12)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "var_names"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "new_gvds")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "add_as_union")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "var_names_union")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "var_names_union")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "new_mva_vars_gvds")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "var_names"
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               4
                                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "f!1")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "new_gvds")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "add_as_union")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "var_names_union")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "var_names_union")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "new_mva_vars_gvds")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "var_names"
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       4
                                                                                                                                                       "f!1")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "compatible")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "MVA_prog_vars_are_fields")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "var_names"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -7
                                                                                                                                             "l!1")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "var_names"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "Union")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       2
                                                                                                                                                       "var_names(c!1)")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "Union")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "var_names"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   3
                                                                                                                                                                   "fd!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ann_event_set_TCC1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (list type-decl nil list_adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton? const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   783 774 t nil))
 (ann_event_var_names 0
  (ann_event_var_names-1 nil 3401682976 3403857381
   ("" (skosimp*)
    (("" (use "var_names_ann_event")
      (("" (assert)
        ((""
          (auto-rewrite "subset?" "member" "union" "add" "singleton")
          (("" (assert)
            (("" (inst?)
              (("" (assert)
                (("" (use "wf_program_var_names_declared")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((var_names_ann_event formula-decl nil AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   709 630 t shostak))
 (ann_event_set_ghostvar_TCC1 0
  (ann_event_set_ghostvar_TCC1-1 nil 3402770423 3403857380
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   846 750 nil nil))
 (ann_event_set_ghostvar 0
  (ann_event_set_ghostvar-1 nil 3403593988 3403857379
   ("" (skosimp*)
    (("" (expand "ann_event")
      (("" (use "subterm_CaseJML_set2list")
        (("" (assert)
          (("" (skosimp*)
            (("" (hide -5)
              (("" (expand "ann_event_set")
                (("" (skosimp*)
                  (("" (expand "ann_trans_cp")
                    (("" (replace -3 :hide? t)
                      (("" (assert)
                        (("" (split -3)
                          (("1" (auto-rewrite "subterm")
                            (("1" (assert) nil nil)) nil)
                           ("2" (expand "ann_guard_actions")
                            (("2" (use "subterm_CaseJML_set2list")
                              (("1"
                                (assert)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (expand "ann_guard_actions_set")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (replace -3 :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -3)
                                              (("1"
                                                (use
                                                 "guard_to_expression_yields_wf_BoolExpr")
                                                (("1"
                                                  (typepred "mp!1")
                                                  (("1"
                                                    (expand "wf_MP")
                                                    (("1"
                                                      (expand
                                                       "subset?")
                                                      (("1"
                                                        (expand
                                                         "member")
                                                        (("1"
                                                          (inst? -9)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "wf_BoolExpr")
                                                                (("1"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst?
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "update_vars")
                                                (("2"
                                                  (rewrite "subterm")
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (expand
                                                       "subterm")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               "cp_new_ghostvar")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (auto-rewrite
                                                           "subterm")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (use
                                                       "subterm_ann_action")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "subterm"
                                                             -2)
                                                            (("2"
                                                              (typepred
                                                               "mp!1")
                                                              (("2"
                                                                (expand*
                                                                 "wf_MP"
                                                                 "wf_MVA")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (expand
                                                                       "subset?")
                                                                      (("2"
                                                                        (expand
                                                                         "member"
                                                                         -14)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "wf_Trans")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "wf_Action")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (split
                                                                                           -12)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "var_names_MVA_subset_var_names_new_gdvs")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "compatible")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "MVA_aut_vars_are_not_prog_vars")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         -12)
                                                                                                        (("1"
                                                                                                          (skosimp*)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "var_names"
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (auto-rewrite
                                                                                                               "subset?"
                                                                                                               "member"
                                                                                                               "union")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -16
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (use
                                                                                                                             "wf_program_var_names_declared")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "wf_Expr")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_Body")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "ann_event_set_TCC1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_event const-decl "Stmt" AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_BoolExpr const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (guard_to_expression_yields_wf_BoolExpr formula-decl nil
     MVASemantics nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (subterm_ann_action formula-decl nil AnnotateEvent nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (FieldDecl type-eq-decl nil Program nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateEvent nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ann_event_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (subterm_CaseJML_set2list formula-decl nil ProgramFunctions nil))
   3346 3000 t shostak)))
(AnnotateMethod
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619631 3403863493
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateMethod nil)) 174 110 t
   nil))
 (IMP_AnnotateEvent_TCC1 0
  (IMP_AnnotateEvent_TCC1-1 nil 3401619631 3403863494
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateMethod nil)) 108 100 t
   nil))
 (IMP_AnnotateEvent_TCC2 0
  (IMP_AnnotateEvent_TCC2-1 nil 3401619631 3403863494
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateMethod nil)) 122 130 t
   nil))
 (filter_event_TCC1 0
  (filter_event_TCC1-2 nil 3401619964 3403857397
   (";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
    (skosimp*)
    ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
      (typepred "ts(a!1)")
      ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
        (expand "is_finite")
        ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
          (skosimp*)
          ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
            (inst 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                         ts(a!1)(t) AND
                          etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
              (grind) nil))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   1063 990 nil nil)
  (filter_event_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (filter_event_subset 0
  (filter_event_subset-1 nil 3401684085 3403857398
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "filter_event") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((subset? const-decl "bool" sets nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (member const-decl "bool" sets nil))
   245 250 t shostak))
 (filter_event_cp_is_finite_TCC1 0
  (filter_event_cp_is_finite_TCC1-1 nil 3402860754 3403863495
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (member const-decl "bool" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsP const-decl "boolean" WellFormedMVA nil)
    (wf_Guard const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil))
   1253 1190 nil nil))
 (filter_event_cp_is_finite 0
  (filter_event_cp_is_finite-1 nil 3402860771 3403863495
   ("" (skosimp)
    (("" (expand "filter_event")
      (("" (typepred "ts(mva(mp!1))")
        (("" (lemma "finite_subset[Transition]")
          ((""
            (inst -1 "ts(mva(mp!1))"
             "{t: Transition | ts(mva(mp!1))(t) AND etype(event(t)) = et!1 AND mname(event(t)) = n!1 AND scp(t) = q!1}")
            (("" (assert)
              (("" (expand* "subset?" "member")
                (("" (skosimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil))
   252 250 t shostak))
 (ann_methods_TCC1 0
  (ann_methods_TCC1-2 nil 3401620001 3403857416
   (";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
    (skosimp*)
    ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
      (typepred "ms!1")
      ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
        (expand "is_finite")
        ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
          (skosimp*)
          ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                         EXISTS (n: Method[Name]):
                           ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "n!1") (("2" (assert) nil)))))
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "n!2")
                            (("3" (assert) nil)))))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "m!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "n!1")
                      (("2" (assert) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (nonempty? const-decl "bool" sets nil))
   491 420 nil nil)
  (ann_methods_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (ann_method_name 0
  (ann_method_name-1 nil 3403429160 3403863495
   ("" (skosimp)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 172
   110 t shostak))
 (ann_method_arg 0
  (ann_method_arg-1 nil 3401620571 3403857387
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 234
   240 t shostak))
 (ann_method_pre 0
  (ann_method_pre-1 nil 3401620551 3403863496
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 117
   120 t shostak))
 (ann_method_post 0
  (ann_method_post-1 nil 3401620559 3403863496
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 122
   130 t shostak))
 (ann_method_lvars 0
  (ann_method_lvars-1 nil 3401620597 3403857387
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 236
   240 t shostak))
 (ann_method_body 0
  (ann_method_body-1 nil 3401620545 3403863496
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 116
   120 t shostak))
 (ann_method_pre_set 0
  (ann_method_pre_set-1 nil 3401620600 3403863496
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 294
   240 t shostak))
 (ann_method_post_set 0
  (ann_method_post_set-1 nil 3401620605 3403863496
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 232
   240 t shostak))
 (ann_method_exc_set 0
  (ann_method_exc_set-1 nil 3401620608 3403863497
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 245
   250 t shostak))
 (ann_method_res 0
  (ann_method_res-1 nil 3401620574 3403863497
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 117
   110 t shostak))
 (ann_method_res_type 0
  (ann_method_res_type-1 nil 3401620593 3403863497
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_method const-decl "Method" AnnotateMethod nil)) 177
   120 t shostak))
 (ann_method_wf_Body1 0
  (ann_method_wf_Body1-1 nil 3403610503 3403857396
   (";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
    (skosimp*)
    ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
      (assert)
      ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
        (auto-rewrite "union" "member" "singleton")
        ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
          (auto-rewrite-theory "AnnotateMethod")
          ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
            (use "new_vars_derived_from_mp")
            ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
              (use "halted_new_ghostvar")
              ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
                (expand "wf_Method")
                ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
                  (expand "wf_Body")
                  ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
                    (flatten)
                    ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
                      (assert)
                      ((";;; Proof ann_method_wf_Body-1 for formula AnnotateMethod.ann_method_wf_Body"
                        (split 1)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (propax) nil) ("4" (propax) nil)
                         ("5" (skosimp*)
                          (("5" (rewrite "var_names" -1)
                            (("5" (assert)
                              (("5"
                                (split -1)
                                (("1" (inst? -12) (("1" (assert) nil)))
                                 ("2"
                                  (rewrite "var_names" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (use "ann_event_var_names")
                                        (("1" (assert) nil)))
                                       ("2"
                                        (apply
                                         (repeat
                                          (then
                                           (rewrite "var_names" -1)
                                           (assert))))
                                        nil)))))))))))))))
                         ("6" (skosimp*)
                          (("6" (rewrite "var_names" -1)
                            (("6" (assert)
                              (("6"
                                (split -1)
                                (("1" (inst? -14) (("1" (assert) nil)))
                                 ("2"
                                  (use "ann_event_var_names")
                                  (("2" (assert) nil)))))))))))
                         ("7" (skosimp*)
                          (("7" (rewrite "var_names" -1)
                            (("7" (assert)
                              (("7"
                                (split -1)
                                (("1" (inst? -16) (("1" (assert) nil)))
                                 ("2"
                                  (use "ann_event_var_names")
                                  (("2"
                                    (assert)
                                    nil))))))))))))))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_event_var_names formula-decl nil AnnotateEvent nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[BoolExpr -> (Assert?)]" Body_adt
     nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil))
   9475 3520 nil nil))
 (ann_method_wf_Body2_TCC1 0
  (ann_method_wf_Body2_TCC1-1 nil 3403610870 3403857402
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2149 2000 nil nil))
 (ann_method_wf_Body2_TCC2 0
  (ann_method_wf_Body2_TCC2-1 nil 3403610870 3403857404
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2165 2010 nil nil))
 (ann_method_wf_Body2_TCC3 0
  (ann_method_wf_Body2_TCC3-1 nil 3403610870 3403857407
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2145 1980 nil nil))
 (ann_method_wf_Body2_TCC4 0
  (ann_method_wf_Body2_TCC4-1 nil 3403610870 3403857409
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2137 1980 nil nil))
 (ann_method_wf_Body2_TCC5 0
  (ann_method_wf_Body2_TCC5-1 nil 3403610870 3403857411
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2145 1980 nil nil))
 (ann_method_wf_Body2_TCC6 0
  (ann_method_wf_Body2_TCC6-1 nil 3403610870 3403857413
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2320 2170 nil nil))
 (ann_method_wf_Body2_TCC7 0
  (ann_method_wf_Body2_TCC7-1 nil 3403610870 3403857416
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   2335 2180 nil nil))
 (ann_method_wf_Body2 0
  (ann_method_wf_Body2-1 nil 3403610885 3403857400
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "AnnotateMethod")
        (("" (assert)
          (("" (expand* "wf_Method" "wf_Body")
            (("" (flatten)
              (("" (apply (repeat (inst?)))
                (("" (assert)
                  (("" (split 1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil)
                     ("5" (skosimp*)
                      (("5" (rewrite "subterm" -1)
                        (("5" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "subterm" -1)
                            (("2" (split -1)
                              (("1"
                                (use "ann_event_set_ghostvar")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (apply (repeat (rewrite "subterm" -1)))
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (skosimp*)
                      (("6" (rewrite "subterm" -1)
                        (("6" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (use "ann_event_set_ghostvar")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("7" (skosimp*)
                      (("7" (rewrite "subterm" -1)
                        (("7" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (use "ann_event_set_ghostvar")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_method const-decl "Method" AnnotateMethod nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_event_set_ghostvar formula-decl nil AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[BoolExpr -> (Assert?)]" Body_adt
     nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   2331 2070 t shostak)))
(AnnotateClass
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619633 3403863497
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateClass nil)) 109 110 t
   nil))
 (IMP_AnnotateMethod_TCC1 0
  (IMP_AnnotateMethod_TCC1-1 nil 3401619633 3403863497
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateClass nil)) 108 110 t
   nil))
 (IMP_AnnotateMethod_TCC2 0
  (IMP_AnnotateMethod_TCC2-1 nil 3401619633 3403863497
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateClass nil)) 114 110 t
   nil))
 (FieldDecls_ann_class 0
  (FieldDecls_ann_class-1 nil 3401684150 3403857416
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
    nil)
   unchecked ((ann_class const-decl "Class" AnnotateClass nil)) 243 240
   t shostak))
 (LocalDecls_ann_class 0
  (LocalDecls_ann_class-1 nil 3401684165 3403857417
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (expand "getLocalDecls")
                (("1" (apply-extensionality :hide? t)
                  (("1" (expand "ann_methods")
                    (("1" (assert)
                      (("1" (auto-rewrite "ann_method_arg")
                        (("1" (auto-rewrite "ann_method_lvars")
                          (("1" (iff)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "ann_method(mp!1)(m!1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 1)
                                      (("1" (inst?) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_class const-decl "Class" AnnotateClass nil)
    (JType type-decl nil JType_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateClass nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ann_method_lvars formula-decl nil AnnotateMethod nil)
    (ann_method_arg formula-decl nil AnnotateMethod nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   542 480 t shostak))
 (GhostDecls_ann_class_annotated 0
  (GhostDecls_ann_class_annotated-1 nil 3401684331 3403863498
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   unchecked ((ann_class const-decl "Class" AnnotateClass nil)) 120 120
   t shostak))
 (GhostDecls_ann_class_not_annotated 0
  (GhostDecls_ann_class_not_annotated-1 nil 3401684344 3403863498
   ("" (skosimp*)
    (("" (expand "ann_class") (("" (assert) nil nil)) nil)) nil)
   unchecked
   ((ann_class const-decl "Class" AnnotateClass nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   140 140 t shostak))
 (ann_class_almost_wf_Class 0
  (ann_class_almost_wf_Class-1 nil 3401684390 3403857420
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "wf_Class")
        (("" (flatten)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (expand "ann_class")
                (("1" (split -1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "ann_methods")
                        (("1" (skosimp*)
                          (("1" (inst -8 "n!1" "n!2")
                            (("1" (assert)
                              (("1"
                                (expand "ann_method")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split -2)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (inst? -4) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_Body")
              (("2" (skosimp*)
                (("2" (inst?)
                  (("2" (expand "ann_class" -1)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (rewrite "var_names" -3)
                            (("1" (auto-rewrite "union" "member")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "var_names" -3)
                                  (("1"
                                    (rewrite "var_names" -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat
                                          (rewrite "var_names" -3)))
                                        (("1"
                                          (expand "singleton")
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (use "cp_new_ghostvar")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (use
                                               "halted_new_ghostvar")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (singleton const-decl "(singleton?)" sets nil)
    (halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateClass nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil))
   2562 2420 t shostak))
 (ann_class_inv_TCC1 0
  (ann_class_inv_TCC1-1 nil 3401682275 3403863500
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (CP formal-nonempty-type-decl nil AnnotateClass nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil))
   2637 2480 nil nil))
 (ann_class_inv 0
  (ann_class_inv-1 nil 3401682311 3403863501
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (assert) (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked ((ann_class const-decl "Class" AnnotateClass nil)) 519 430
   t shostak))
 (ann_program_preserves_class_name 0
  (ann_program_preserves_class_name-1 nil 3401682902 3403863501
   (";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
    (skosimp*)
    ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
      (expand "ann_class")
      ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
        (lift-if)
        ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
          (propax) nil))))))
    "")
   unchecked ((ann_class const-decl "Class" AnnotateClass nil)) 117 120
   nil nil)))
(AnnotateProgram
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601203 3403863501
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateProgram nil)) 107 110
   t nil))
 (IMP_AnnotateClass_TCC1 0
  (IMP_AnnotateClass_TCC1-1 nil 3401620497 3403863501
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateProgram nil)) 108 110 t
   nil))
 (IMP_AnnotateClass_TCC2 0
  (IMP_AnnotateClass_TCC2-1 nil 3401620497 3403863501
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateProgram nil)) 115 110 t
   nil))
 (ann_program_TCC1 0
  (ann_program_TCC1-1 nil 3383987003 3403857421
   ("" (skosimp)
    (("" (typepred "classes(program(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                         EXISTS (c1: Class[Name]):
                           classes(program(mp!1))(c1) AND
                            c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "c1!1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "c1!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "c1!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (nonempty? const-decl "bool" sets nil))
   998 850 t nil))
 (ann_program_TCC2 0
  (ann_program_TCC2-5 nil 3403612149 3403857432
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "is_finite[Class]({c: Class | EXISTS (c1: Class): mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes := {c: Class | EXISTS (c1: Class):
                               classes(program(mp!1))(c1) AND
                               c = ann_class(mp!1)(c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes := {c: Class | EXISTS (c1:  Class):
                                       classes(program(mp!1))(c1)  AND
                                       c = ann_class(mp!1)(c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes := {c: Class | EXISTS (c1: Class):
                                               classes(program(mp!1))(c1) AND
                                               c = ann_class(mp!1)(c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                                                                                                                     := {c: Class[Name] |
                                                                                                                                                                           EXISTS (c1: Class[Name]):
                                                                                                                                                                             classes(program(mp!1))
                                                                                                                                                                                 (c1)
                                                                                                                                                                              AND
                                                                                                                                                                              c =
                                                                                                                                                                               ann_class[CP, Name]
                                                                                                                                                                                   (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "ann_method_wf_Body1")
                                                                    (("1"
                                                                      (lemma
                                                                       "ann_method_wf_Body2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "mp!1"
                                                                         "n!1"
                                                                         _)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "wf_Method"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "wf_Body")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -12
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -11
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -15
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names_union")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -2
                                                                                              -3
                                                                                              -4
                                                                                              -5
                                                                                              -6
                                                                                              -7
                                                                                              -8
                                                                                              1))
                                                                                            (("1"
                                                                                              (auto-rewrite
                                                                                               "union"
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (skosimp*)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skosimp*)
                                                                                                    (("2"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (inst?
                                                                                                       -4)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (skosimp*)
                                                                                                    (("5"
                                                                                                      (inst?
                                                                                                       -5)
                                                                                                      (("5"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("6"
                                                                                                    (skosimp*)
                                                                                                    (("6"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("6"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("7"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("8"
                                                                                                    (skosimp*)
                                                                                                    (("8"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("8"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("9"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("10"
                                                                                                    (skosimp*)
                                                                                                    (("10"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("10"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("11"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("12"
                                                                                                    (skosimp*)
                                                                                                    (("12"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("12"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("13"
                                                                                                    (skosimp*)
                                                                                                    (("13"
                                                                                                      (inst?
                                                                                                       -6)
                                                                                                      (("13"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("14"
                                                                                                    (skosimp*)
                                                                                                    (("14"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("14"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (replace
                                                                       -7)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-11
                                                                          2))
                                                                        (("2"
                                                                          (rewrite
                                                                           "var_names_union")
                                                                          (("2"
                                                                            (auto-rewrite
                                                                             "union"
                                                                             "member")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (skosimp*)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -4)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skosimp*)
                                                                                    (("3"
                                                                                      (inst?
                                                                                       -4)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (skosimp*)
                                                                                    (("4"
                                                                                      (inst?
                                                                                       -6)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (skosimp*)
                                                                                    (("5"
                                                                                      (inst?
                                                                                       -6)
                                                                                      (("5"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (skosimp*)
                                                                                    (("6"
                                                                                      (inst?
                                                                                       -8)
                                                                                      (("6"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("7"
                                                                                    (skosimp*)
                                                                                    (("7"
                                                                                      (inst?
                                                                                       -8)
                                                                                      (("7"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("8"
                                                                                    (skosimp*)
                                                                                    (("8"
                                                                                      (inst?
                                                                                       -10)
                                                                                      (("8"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("9"
                                                                                    (skosimp*)
                                                                                    (("9"
                                                                                      (inst?
                                                                                       -10)
                                                                                      (("9"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("10"
                                                                                    (skosimp*)
                                                                                    (("10"
                                                                                      (inst?
                                                                                       -12)
                                                                                      (("10"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("11"
                                                                                    (skosimp*)
                                                                                    (("11"
                                                                                      (inst?
                                                                                       -12)
                                                                                      (("11"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("12"
                                                                                    (skosimp*)
                                                                                    (("12"
                                                                                      (inst?
                                                                                       -14)
                                                                                      (("12"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("13"
                                                                                    (skosimp*)
                                                                                    (("13"
                                                                                      (inst?
                                                                                       -14)
                                                                                      (("13"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("14"
                                                                                    (skosimp*)
                                                                                    (("14"
                                                                                      (inst?
                                                                                       -16)
                                                                                      (("14"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand
                                                   "ann_class"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -14
                                                                 "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? -12)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (expand "wf_Body")
                                                  (("4"
                                                    (flatten)
                                                    (("4"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("4"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (replace
                                                                 -7)
                                                                (("2"
                                                                  (rewrite
                                                                   "var_names_union")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?
                                                                       -14)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "ann_class"
                                                                           -2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "subterm"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -14)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "subterm"
                                                                                             -2)))
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (FieldDecls_ann_class formula-decl nil AnnotateClass nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (This const-decl "Name" Program nil)
    (ann_method_wf_Body2 formula-decl nil AnnotateMethod nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (ann_method_wf_Body1 formula-decl nil AnnotateMethod nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (ann_class_almost_wf_Class formula-decl nil AnnotateClass nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (LocalDecls_ann_class formula-decl nil AnnotateClass nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (ann_program_TCC1 subtype-tcc nil AnnotateProgram nil))
   10893 9880 t nil)
  (ann_program_TCC2-4 nil 3402747058 3403612132
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "is_finite[Class]({c: Class | EXISTS (c1: Class): mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes := {c: Class | EXISTS (c1: Class):
                 classes(program(mp!1))(c1) AND
                 c = ann_class(mp!1)(c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes := {c: Class | EXISTS (c1:  Class):
                     classes(program(mp!1))(c1)  AND
                     c = ann_class(mp!1)(c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes := {c: Class | EXISTS (c1: Class):
                         classes(program(mp!1))(c1) AND
                         c = ann_class(mp!1)(c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                                                                                       := {c: Class[Name] |
                                                                                                                                             EXISTS (c1: Class[Name]):
                                                                                                                                               classes(program(mp!1))
                                                                                                                                                   (c1)
                                                                                                                                                AND
                                                                                                                                                c =
                                                                                                                                                 ann_class[CP, Name]
                                                                                                                                                     (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "ann_method_wf_Body1")
                                                                    (("1"
                                                                      (lemma
                                                                       "ann_method_wf_Body2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "mp!1"
                                                                         "n!1"
                                                                         _)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "wf_Method")
                                                                              (("1"
                                                                                (expand
                                                                                 "wf_Body")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -12
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -11
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -3
                                                                                          -4
                                                                                          -5
                                                                                          -6
                                                                                          -7
                                                                                          -8
                                                                                          1))
                                                                                        (("1"
                                                                                          (auto-rewrite
                                                                                           "union"
                                                                                           "member")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst?
                                                                                                   -4)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (skosimp*)
                                                                                                (("4"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (flatten)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("5"
                                                                                                (skosimp*)
                                                                                                (("5"
                                                                                                  (inst?
                                                                                                   -5)
                                                                                                  (("5"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("6"
                                                                                                (skosimp*)
                                                                                                (("6"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("6"
                                                                                                    (assert)
                                                                                                    (("6"
                                                                                                      (flatten)
                                                                                                      (("6"
                                                                                                        (assert)
                                                                                                        (("6"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("7"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("8"
                                                                                                (skosimp*)
                                                                                                (("8"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("8"
                                                                                                    (assert)
                                                                                                    (("8"
                                                                                                      (flatten)
                                                                                                      (("8"
                                                                                                        (assert)
                                                                                                        (("8"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("9"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("10"
                                                                                                (skosimp*)
                                                                                                (("10"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("10"
                                                                                                    (assert)
                                                                                                    (("10"
                                                                                                      (flatten)
                                                                                                      (("10"
                                                                                                        (assert)
                                                                                                        (("10"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("11"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("12"
                                                                                                (skosimp*)
                                                                                                (("12"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("12"
                                                                                                    (assert)
                                                                                                    (("12"
                                                                                                      (flatten)
                                                                                                      (("12"
                                                                                                        (assert)
                                                                                                        (("12"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("13"
                                                                                                (skosimp*)
                                                                                                (("13"
                                                                                                  (inst?
                                                                                                   -6)
                                                                                                  (("13"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("14"
                                                                                                (skosimp*)
                                                                                                (("14"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("14"
                                                                                                    (assert)
                                                                                                    (("14"
                                                                                                      (flatten)
                                                                                                      (("14"
                                                                                                        (assert)
                                                                                                        (("14"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("8"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("9"
                                                                                (skosimp*)
                                                                                (("9"
                                                                                  (assert)
                                                                                  (("9"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("10"
                                                                                (skosimp*)
                                                                                (("10"
                                                                                  (inst?
                                                                                   -12)
                                                                                  (("10"
                                                                                    (assert)
                                                                                    (("10"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("11"
                                                                                (skosimp*)
                                                                                (("11"
                                                                                  (inst?
                                                                                   -11)
                                                                                  (("11"
                                                                                    (assert)
                                                                                    (("11"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("12"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("13"
                                                                                (skosimp*)
                                                                                (("13"
                                                                                  (inst?
                                                                                   -13)
                                                                                  (("13"
                                                                                    (assert)
                                                                                    (("13"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("14"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand
                                                   "ann_class"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -14
                                                                 "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? -12)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (expand "wf_Body")
                                                  (("4"
                                                    (flatten)
                                                    (("4"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("4"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 6966 152 t nil)
  (ann_program_TCC2-3 nil 3401699946 3402747036
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "    is_finite[Class[Name]]
                                 ({c: Class[Name] |
                                     EXISTS (c1: Class[Name]):
                                       mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes
                                                                                  := {c: Class[Name] |
                                                                                        EXISTS (c1:
                                                                                                  Class
                                                                                                      [Name]):
                                                                                          classes
                                                                                            (program(mp!1))
                                                                                              (c1)
                                                                                           AND
                                                                                           c =
                                                                                            ann_class[CP, Name]
                                                                                                (mp!1)
                                                                                                (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes
                                                                                            := {c: Class[Name] |
                                                                                                  EXISTS (c1:
                                                                                                            Class
                                                                                                                [Name]):
                                                                                                    classes
                                                                                                      (program(mp!1))
                                                                                                        (c1)
                                                                                                     AND
                                                                                                     c =
                                                                                                      ann_class[CP, Name]
                                                                                                          (mp!1)
                                                                                                          (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes
                                                                                                      := {c: Class[Name] |
                                                                                                            EXISTS (c1:
                                                                                                                      Class
                                                                                                                          [Name]):
                                                                                                              classes
                                                                                                                (program(mp!1))
                                                                                                                  (c1)
                                                                                                               AND
                                                                                                               c =
                                                                                                                ann_class[CP, Name]
                                                                                                                    (mp!1)
                                                                                                                    (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                                                       := {c: Class[Name] |
                                                                                                             EXISTS (c1: Class[Name]):
                                                                                                               classes(program(mp!1))
                                                                                                                   (c1)
                                                                                                                AND
                                                                                                                c =
                                                                                                                 ann_class[CP, Name]
                                                                                                                     (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "ann_method_wf_Body")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -10
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (inst?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp*)
                                                                                (("6"
                                                                                  (inst?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand
                                                   "ann_class"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -14
                                                                 "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? -12)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (expand "wf_Body")
                                                  (("4"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("4"
                                                      (skosimp*)
                                                      (("4"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (inst? -3)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   595475 1700 t nil)
  (ann_program_TCC2-2 nil 3401685127 3401689620
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "    is_finite[Class[Name]]
                       ({c: Class[Name] |
                           EXISTS (c1: Class[Name]):
                             mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes
                                                                    := {c: Class[Name] |
                                                                          EXISTS (c1:
                                                                                    Class
                                                                                        [Name]):
                                                                            classes
                                                                              (program(mp!1))
                                                                                (c1)
                                                                             AND
                                                                             c =
                                                                              ann_class[CP, Name]
                                                                                  (mp!1)
                                                                                  (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes
                                                                          := {c: Class[Name] |
                                                                                EXISTS (c1:
                                                                                          Class
                                                                                              [Name]):
                                                                                  classes
                                                                                    (program(mp!1))
                                                                                      (c1)
                                                                                   AND
                                                                                   c =
                                                                                    ann_class[CP, Name]
                                                                                        (mp!1)
                                                                                        (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes
                                                                                := {c: Class[Name] |
                                                                                      EXISTS (c1:
                                                                                                Class
                                                                                                    [Name]):
                                                                                        classes
                                                                                          (program(mp!1))
                                                                                            (c1)
                                                                                         AND
                                                                                         c =
                                                                                          ann_class[CP, Name]
                                                                                              (mp!1)
                                                                                              (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1"
                              (auto-rewrite "disjoint?" "empty?"
                                            "intersection" "member"
                                            "subset?" "union")
                              (("1"
                                (expand "declared_var_names")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (rewrite "var_names_union")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (apply (repeat (inst?)))
                                        (("3"
                                          (rewrite "var_names_union")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                         := {c: Class[Name] |
                                                                               EXISTS (c1: Class[Name]):
                                                                                 classes(program(mp!1))
                                                                                     (c1)
                                                                                  AND
                                                                                  c =
                                                                                   ann_class[CP, Name]
                                                                                       (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "body_ann_method_wf_Body")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -10
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (inst?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp*)
                                                                                (("6"
                                                                                  (inst?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (expand "wf_Body")
                                                  (("3"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst? -3)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-14 -12 1))
                      (("5"
                        (expand "wf_program_methods_only_in_one_class")
                        (("5" (skosimp*)
                          (("5" (assert)
                            (("5" (inst -8 "c1!2" "c1!3" _)
                              (("5"
                                (assert)
                                (("5"
                                  (replace -2 :hide? t)
                                  (("5"
                                    (replace -3 :hide? t)
                                    (("5"
                                      (expand "ann_class")
                                      (("5"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -5)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "wf_program_has_unique_class_names_def")
                                                (("1"
                                                  (inst
                                                   -7
                                                   "c1!2"
                                                   "c1!3")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "ann_methods")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst -8 "n!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 30438 1249 t nil)
  (ann_program_TCC2-1 nil 3401614556 3401685096
   ("" (subtype-tcc) nil nil) unfinished nil 1529 4 t nil)))
(AnnotateProgramProperties
 (CP_is_enumerable 0
  (CP_is_enumerable-1 nil 3392611795 3392611802 ("" (postpone) nil nil)
   unchecked nil 7000 150 t shostak))
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601223 3403862360
   ("" (use "infinite_namespace") nil nil) unchecked nil 1 1 t nil))
 (IMP_AnnotateProgram_TCC1 0
  (IMP_AnnotateProgram_TCC1-1 nil 3390292134 3403862360
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 1 0 t nil))
 (IMP_AnnotateProgram_TCC2 0
  (IMP_AnnotateProgram_TCC2-1 nil 3395037658 3403862360
   ("" (use "name_of_exists") nil nil) unchecked nil 1 0 t nil))
 (ann_program_class_correspondence 0
  (ann_program_class_correspondence-1 nil 3392569211 3403862360
   ("" (skosimp*)
    (("" (expand "ann_program") (("" (propax) nil nil)) nil)) nil)
   unchecked nil 3 2 t shostak))
 (ann_program_method_correspondence 0
  (ann_program_method_correspondence-1 nil 3392569244 3403862361
   ("" (skosimp*)
    (("" (use "ann_program_class_correspondence")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand* "ann_class" "ann_methods")
            (("" (inst 1 "c1!1" _)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (replace -2 -5) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   88 87 t shostak))
 (ann_program_preserves_var_decls 0
  (ann_program_preserves_var_decls-1 nil 3392566301 3403862363
   ("" (skosimp*)
    (("" (split)
      (("1" (expand* "ann_program" "getFieldDecls")
        (("1" (apply-extensionality :hide? t)
          (("1" (iff)
            (("1" (split)
              (("1" (skosimp*)
                (("1" (inst 1 "ann_class(mp!1)(c!1)")
                  (("1" (split)
                    (("1" (inst?) nil nil)
                     ("2" (expand "ann_class") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "ann_class")
                      (("2" (lift-if) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "getLocalDecls")
        (("2" (apply-extensionality :hide? t)
          (("2" (iff)
            (("2" (expand "getLocalDecls")
              (("2" (split)
                (("1" (expand "ann_program")
                  (("1" (skosimp*)
                    (("1" (case "name(c!1) = class_name(mva(mp!1))")
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (expand "ann_methods")
                                (("2"
                                  (inst 1 "ann_method(mp!1)(m!1)")
                                  (("2"
                                    (split 1)
                                    (("1" (inst?) nil nil)
                                     ("2"
                                      (expand "ann_method")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 2 "ann_class(mp!1)(c!1)")
                        (("2" (assert)
                          (("2" (split 2)
                            (("1" (inst?) nil nil)
                             ("2" (inst 1 "m!1")
                              (("2"
                                (expand "ann_class")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (use "ann_program_method_correspondence")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (inst 1 "c1!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "m1!1")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (expand "ann_method" -7)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst 2 "c1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 2 "m1!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand* "subset?" "member")
        (("3" (skosimp*)
          (("3" (expand* "ann_program" "getGhostDecls")
            (("3" (skosimp*)
              (("3" (inst 1 "ann_class(mp!1)(c!1)")
                (("3" (split)
                  (("1" (inst?) nil nil)
                   ("2" (expand* "ann_class" "union" "member")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   208 208 t shostak))
 (ann_program_preserves_var_decl_names 0
  (ann_program_preserves_var_decl_names-1 nil 3392567558 3403862364
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (flatten)
        (("" (replace -1)
          (("" (replace -2)
            (("" (assert)
              (("" (expand* "subset?" "member" "var_names")
                (("" (skosimp*)
                  (("" (inst?)
                    (("" (assert)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   79 79 t shostak))
 (ann_program_add_ghost_var_decls 0
  (ann_program_add_ghost_var_decls-1 nil 3396607040 3403862365
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "getGhostDecls")
        (("" (expand "union")
          (("" (expand "member")
            (("" (iff)
              (("" (split 1)
                (("1" (skosimp*)
                  (("1" (use "ann_program_class_correspondence")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (inst 1 "c1!1")
                          (("1" (assert)
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (expand "ann_class")
                                (("1"
                                  (expand "union")
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (split -1)
                    (("1" (skosimp*)
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (expand "ann_program")
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "mp!1")
                      (("2" (expand "compatible")
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2" (inst 1 "ann_class(mp!1)(c!1)")
                              (("2"
                                (expand "ann_program")
                                (("2"
                                  (split 1)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (expand "ann_class")
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil))
   70 69 t shostak))
 (ann_program_ext_declared_var_names 0
  (ann_program_ext_declared_var_names-1 nil 3401708815 3403862367
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (auto-rewrite "union" "member")
        (("" (apply-extensionality :hide? t)
          (("" (use "ann_program_preserves_var_decls")
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2)
                  (("" (use "ann_program_add_ghost_var_decls")
                    (("" (replace -1)
                      (("" (rewrite "var_names_union")
                        (("" (assert)
                          (("" (iff) (("" (prop) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   199 198 t shostak))
 (ann_program_preserves_wf_state 0
  (ann_program_preserves_wf_state-1 nil 3390298254 3403862368
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (inst?)
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2) (("" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   80 80 t shostak))
 (ann_program_preserves_pstate_vars 0
  (ann_program_preserves_pstate_vars-1 nil 3392567663 3403862369
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (replace -1)
              (("" (replace -2)
                (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   123 123 t shostak))
 (ann_program_preserves_ghoststate_vars 0
  (ann_program_preserves_ghoststate_vars-1 nil 3392567791 3403862370
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand* "wf_state" "wf_ghoststate")
        (("" (flatten)
          (("" (inst?)
            (("" (inst?)
              (("" (expand* "id" "subset?" "member" "var_names")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst?)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   146 142 t shostak))
 (var_names_ann_program 0
  (var_names_ann_program-1 nil 3397470724 3403862379
   ("" (auto-rewrite "subset?" "member" "union")
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_program")
            (("" (expand "var_names" -1)
              (("" (expand "Union")
                (("" (skosimp*)
                  (("" (typepred "a!1")
                    (("" (skosimp*)
                      (("" (replace -3 :hide? t)
                        (("" (replace -2 :hide? t)
                          (("" (expand "ann_class")
                            (("" (assert)
                              ((""
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (auto-rewrite "Union")
                                    (("1"
                                      (rewrite "var_names" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "a!2")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "var_names"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (rewrite
                                                                             "var_names")
                                                                            (("4"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "var_names(pre_set(n!1))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "add_as_union")
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (rewrite
                                                                                                         "var_names_union")))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "halted")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "var_names")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "new_cps_gvds")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       2
                                                                                                                       "halted")
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "mva(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "complete")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("5"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "var_names(post_set(n!1))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("6"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("6"
                                                                                (assert)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "var_names(exc_set(n!1))")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (assert)
                                                                              (("7"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("8"
                                                                              (assert)
                                                                              (("8"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("9"
                                                                              (assert)
                                                                              (("9"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "var_names" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "var_names" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite "var_names" -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split -1)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (rewrite
                                                     "var_names"
                                                     -1)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "singleton")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (use
                                                           "cp_new_ghostvar")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "halted_new_ghostvar")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (rewrite
                                                         "var_names"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "var_names" 2)
                                    (("2"
                                      (expand "Union")
                                      (("2"
                                        (inst 2 "var_names(c1!1)")
                                        (("2" (inst 1 "c1!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil))
   810 806 t shostak))
 (var_names_declared_in_MVA_subset_ghostvars 0
  (var_names_declared_in_MVA_subset_ghostvars-1 nil 3403862450
   3403862532
   ("" (skosimp*)
    (("" (auto-rewrite "subset?" "member" "union" "add")
      (("" (assert)
        (("" (skosimp*)
          (("" (rewrite "ann_program_add_ghost_var_decls")
            (("" (rewrite "var_names_union")
              (("" (assert)
                (("" (flatten)
                  (("" (use "new_vars_derived_from_mp")
                    (("" (flatten)
                      (("" (expand "var_names" -4)
                        (("" (skosimp*)
                          (("" (inst? -3) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   8131 218 t shostak))
 (ann_program_defines_MVA_vars 0
  (ann_program_defines_MVA_vars-2 nil 3394875181 3403862379
   ("" (skosimp)
    (("" (typepred "mp!1")
      (("" (expand* "compatible" "var_names" "new_gvds")
        (("" (skosimp*)
          (("" (inst 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (assert)
              (("" (split 1)
                (("1" (expand "ann_program") (("1" (inst?) nil nil))
                  nil)
                 ("2" (expand "ann_class") (("2" (propax) nil nil))
                  nil)
                 ("3" (expand* "ann_class" "union" "member" "new_gvds")
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (lift type-decl nil lift_adt nil))
   54 52 t nil)
  (ann_program_defines_MVA_vars-1 nil 3389956467 3394872339
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (prop)
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand* "getGhostDecls" "var_names")
              (("1" (use "ann_program_defines_MVA_vars2")
                (("1" (split -)
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (expand* "var_names" "new_gvds" "union" "member")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   untried
   ((id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   974962 4000 t shostak))
 (new_vars_ghost_in_ann_program 0
  (new_vars_ghost_in_ann_program-1 nil 3394876088 3403862380
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (flatten)
        (("" (inst?)
          (("" (assert)
            (("" (hide -1 2)
              (("" (expand "getGhostDecls")
                (("" (expand "var_names" 1)
                  (("" (use "ann_program_defines_MVA_vars")
                    (("" (assert)
                      (("" (skosimp)
                        (("" (inst?)
                          (("" (assert)
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((id const-decl "(bijective?[T, T])" identity nil)
    (lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   41 40 t shostak))
 (wf_Body_MVA_implies_wf_Body 0
  (wf_Body_MVA_implies_wf_Body-1 nil 3403370425 3403862384
   ("" (skosimp)
    (("" (expand "wf_Body")
      (("" (split)
        (("1" (skosimp)
          (("1" (expand* "subset?" "member")
            (("1" (inst?)
              (("1" (assert)
                (("1"
                  (expand* "ext_declared_var_names" "union" "member")
                  (("1" (flatten)
                    (("1" (expand "var_names" -2)
                      (("1" (expand* "union" "member")
                        (("1" (split)
                          (("1" (hide -2 -3 1 2 4)
                            (("1" (use "ann_program_defines_MVA_vars")
                              (("1"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand "var_names" 1)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "getGhostDecls")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "var_names")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             "new_gvds"
                                             "add"
                                             "union"
                                             "member")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "new_mva_vars_gvds")
                                                (("2"
                                                  (inst 3 "f!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 2 3 4)
                            (("2" (expand "var_names")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "mp!1")
                                  (("2"
                                    (expand*
                                     "compatible"
                                     "MVA_prog_vars_are_fields")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "ann_program_preserves_var_decls")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "getFieldDecls")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((union const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (add const-decl "(nonempty?)" sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   456 453 t shostak))
 (one_action_source_wf_Body 0
  (one_action_source_wf_Body-1 nil 3403614165 3403862388
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (expand "wf_Action")
        (("" (use "var_names_declared_in_MVA_subset_ghostvars")
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (expand "wf_Expr")
                  (("" (expand "wf_Body")
                    (("" (flatten)
                      (("" (assert)
                        (("" (auto-rewrite "subset?" "member")
                          (("" (assert)
                            (("" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst? -4)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (auto-rewrite "union")
                                          (("1"
                                            (expand
                                             "ext_declared_var_names")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -4)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "mp!1")
                                                    (("2"
                                                      (expand
                                                       "compatible")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "MVA_prog_vars_are_fields")
                                                            (("2"
                                                              (expand
                                                               "var_names"
                                                               -7)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "ann_program_preserves_var_decls")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "var_names"
                                                                               1)
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "getFieldDecls")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst? -6)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   332 331 t shostak))
 (one_action_translation_wf_Body 0
  (one_action_translation_wf_Body-1 nil 3403614375 3403862391
   ("" (skosimp*)
    (("" (use "one_action_source_wf_Body")
      (("" (assert)
        (("" (expand "wf_Action")
          (("" (inst?)
            (("" (assert)
              (("" (expand "wf_Expr")
                (("" (expand "wf_Body")
                  (("" (flatten)
                    (("" (split 1)
                      (("1" (skosimp*)
                        (("1" (rewrite "var_names" -1)
                          (("1" (expand "add")
                            (("1" (split -1)
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "var_names_MVA_subset_var_names_new_gdvs")
                                  (("1"
                                    (rewrite
                                     "ann_program_ext_declared_var_names")
                                    (("1"
                                      (auto-rewrite
                                       "subset?"
                                       "union"
                                       "member")
                                      (("1"
                                        (expand "var_names" -1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "wf_program_var_names_declared")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst? -2)
                                (("2"
                                  (expand "member")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (rewrite "subterm" -2)
                          (("2" (assert)
                            (("2" (split -2)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "var_names_declared_in_MVA_subset_ghostvars")
                                    (("1"
                                      (auto-rewrite
                                       "subset?"
                                       "member"
                                       "union")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst? -7)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member def-decl "bool" list_props nil)
    (add const-decl "(nonempty?)" sets nil))
   354 353 t shostak))
 (ann_action_yields_wf_Body 0
  (ann_action_yields_wf_Body-1 nil 3403860923 3403862394
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (use "one_action_translation_wf_Body")
        (("" (assert)
          (("" (expand "wf_Body")
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (rewrite "var_names_ann_action")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (inst? -3)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "var_names"
                                 "add"
                                 "member")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (use "subterm_ann_action")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (inst? -6) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   257 257 t shostak))
 (update_vars_wf_Stmt 0
  (update_vars_wf_Stmt-1 nil 3403861319 3403862401
   ("" (skosimp*)
    (("" (expand "wf_Stmt")
      (("" (expand "update_vars")
        (("" (use "ann_action_yields_wf_Body")
          (("" (typepred "mp!1")
            (("" (expand "wf_MP")
              (("" (expand "wf_MVA")
                (("" (flatten)
                  (("" (inst?)
                    (("" (expand "wf_Trans")
                      (("" (assert)
                        (("" (flatten)
                          (("" (assert)
                            (("" (hide-all-but (-7 -11 2))
                              ((""
                                (expand "wf_Body")
                                ((""
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (auto-rewrite
                                       "var_names"
                                       "union"
                                       "member"
                                       "add"
                                       "singleton")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (stop-rewrite "var_names")
                                          (("1"
                                            (rewrite
                                             "ann_program_ext_declared_var_names")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (use
                                                   "cp_new_ghostvar")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "new_vars_derived_from_mp")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst? -2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst? -3)
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (rewrite "subterm" -2)
                                      (("2"
                                        (split -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (rewrite "subterm" -1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "ann_program_add_ghost_var_decls")
                                                  (("1"
                                                    (rewrite
                                                     "var_names_union")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (use
                                                               "cp_new_ghostvar")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "subterm" -1)
                                              (("2"
                                                (split -1)
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (rewrite
                                                   "subterm"
                                                   -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst? -5)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((list type-decl nil list_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (injective? const-decl "bool" functions nil)
    (lift type-decl nil lift_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   701 700 t shostak))
 (guard_to_expression_wf_BoolExpr 0
  (guard_to_expression_wf_BoolExpr-1 nil 3403862105 3403862402
   ("" (skosimp*)
    (("" (expand "wf_BoolExpr")
      (("" (use "guard_to_expression_yields_wf_BoolExpr")
        (("" (assert)
          (("" (typepred "mp!1")
            (("" (expand "wf_MP")
              (("" (assert)
                (("" (expand "wf_BoolExpr")
                  (("" (expand "wf_Body")
                    (("" (split 1)
                      (("1" (skosimp*)
                        (("1" (auto-rewrite "subset?" "member" "union")
                          (("1" (assert)
                            (("1" (inst? -4)
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "var_names_MVA_subset_var_names_new_gdvs")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite
                                           "ann_program_ext_declared_var_names")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (use
                                                 "wf_program_var_names_declared")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst? -6) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   138 137 t shostak))
 (ann_trans_cp_wf 0
  (ann_trans_cp_wf-1 nil 3403872295 3403879745
   ("" (beta)
    (("" (skosimp*)
      (("" (expand* "wf_BoolExpr" "wf_Stmt" "ann_trans_cp")
        (("" (split)
          (("1" (expand "wf_Body")
            (("1" (split)
              (("1" (skosimp)
                (("1" (expand "ext_declared_var_names")
                  (("1" (auto-rewrite ("var_names" "union" "member"))
                    (("1" (assert)
                      (("1" (expand "singleton")
                        (("1" (flatten)
                          (("1" (hide 1 2)
                            (("1" (split)
                              (("1"
                                (inst 1 "new_cp_gvd(mp!1)")
                                (("1"
                                  (expand "new_cp_gvd" 1 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "ann_program_add_ghost_var_decls")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand*
                                               "new_gvds"
                                               "add"
                                               "member")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "new_cp_gvd(mp!1)(q!1)")
                                (("2"
                                  (expand "new_cp_gvd" 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "ann_program_add_ghost_var_decls")
                                      (("2"
                                        (rewrite -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "new_cp_gvd_new_ghostvar")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (auto-rewrite "subterm") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "ann_guard_actions")
            (("2" (expand "wf_Body")
              (("2" (split)
                (("1" (skosimp)
                  (("1" (use "var_names_CaseJML_set2list")
                    (("1" (rewrite -1)
                      (("1" (skosimp)
                        (("1"
                          (expand* "ann_guard_actions_set"
                           "ann_guard_actions")
                          (("1" (skosimp)
                            (("1" (rewrite -2)
                              (("1"
                                (expand* "union" "member")
                                (("1"
                                  (case "ts(mva(mp!1))(t!1)")
                                  (("1"
                                    (split)
                                    (("1"
                                      (use
                                       "guard_to_expression_wf_BoolExpr")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand*
                                           "wf_BoolExpr"
                                           "wf_Body")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "update_vars_wf_Stmt")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand* "wf_Stmt" "wf_Body")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand* "subset?" "member")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "subterm")
                    (("2" (assert)
                      (("2" (use "some_is_exists")
                        (("2" (rewrite -1)
                          (("2" (skosimp)
                            (("2" (use "set2list_same_elements")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -3)
                                  (("2"
                                    (expand*
                                     "member"
                                     "ann_guard_actions_set"
                                     "ann_guard_actions")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (rewrite -2)
                                        (("2"
                                          (case "ts(mva(mp!1))(t!1)")
                                          (("1"
                                            (use "update_vars_wf_Stmt")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "wf_Stmt"
                                                 "wf_Body")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst? -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "guard_to_expression_wf_BoolExpr")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand*
                                                             "wf_BoolExpr"
                                                             "wf_Body")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst?
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand*
                                             "subset?"
                                             "member")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (new_cp_gvd_new_ghostvar formula-decl nil NewVariableDeclarations
     nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (PRED type-eq-decl nil defined_types nil)
    (some adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (pred type-eq-decl nil defined_types nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl
     "[list[[BoolExpr, Stmt]] -> (CaseJML?)]" Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (guard_to_expression const-decl "BoolExpr" MVASemantics nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (update_vars_wf_Stmt formula-decl nil AnnotateProgramProperties
     nil)
    (guard_to_expression_wf_BoolExpr formula-decl nil
     AnnotateProgramProperties nil)
    (subset? const-decl "bool" sets nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateEvent nil)
    (wf_BoolExpr const-decl "boolean" WellFormedProgram nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateEvent nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil))
   1006983 4490 t shostak))
 (ann_event_wf_Body 0
  (ann_event_wf_Body-1 nil 3402484935 3403862404
   ("" (skosimp)
    (("" (expand "wf_Body")
      (("" (split)
        (("1" (skosimp)
          (("1" (use "ann_event_var_names")
            (("1" (assert)
              (("1" (use "ann_program_ext_declared_var_names")
                (("1" (rewrite -1)
                  (("1" (expand* "union" "member") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (use "ann_event_set_ghostvar")
            (("2" (assert)
              (("2" (use "ann_program_add_ghost_var_decls")
                (("2" (rewrite -1)
                  (("2" (expand* "var_names" "union" "member")
                    (("2" (skosimp)
                      (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   207 207 t shostak))
 (ann_program_preserves_wf_method 0
  (ann_program_preserves_wf_method-1 nil 3401708680 3403862719
   ("" (skosimp*)
    (("" (typepred "m!1")
      (("" (use "ann_method_wf_Body1")
        (("" (use "ann_method_wf_Body2")
          (("" (assert)
            (("" (expand "wf_Method" 1)
              (("" (expand "wf_Body")
                (("" (rewrite "ann_program_ext_declared_var_names")
                  (("" (rewrite "ann_program_add_ghost_var_decls")
                    (("" (rewrite "var_names_union")
                      (("" (auto-rewrite "union" "member")
                        (("" (assert)
                          (("" (flatten)
                            (("" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst? -3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (skosimp*)
                                (("3"
                                  (inst? -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp*)
                                (("4"
                                  (inst?)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil)
                               ("5"
                                (skosimp*)
                                (("5"
                                  (inst? -5)
                                  (("5" (assert) nil nil))
                                  nil))
                                nil)
                               ("6"
                                (skosimp*)
                                (("6"
                                  (inst?)
                                  (("6" (assert) nil nil))
                                  nil))
                                nil)
                               ("7" (propax) nil nil)
                               ("8"
                                (skosimp*)
                                (("8"
                                  (inst?)
                                  (("8" (assert) nil nil))
                                  nil))
                                nil)
                               ("9" (propax) nil nil)
                               ("10"
                                (skosimp*)
                                (("10"
                                  (inst?)
                                  (("10" (assert) nil nil))
                                  nil))
                                nil)
                               ("11" (propax) nil nil)
                               ("12"
                                (skosimp*)
                                (("12"
                                  (inst?)
                                  (("12" (assert) nil nil))
                                  nil))
                                nil)
                               ("13"
                                (skosimp*)
                                (("13"
                                  (inst? -6)
                                  (("13" (assert) nil nil))
                                  nil))
                                nil)
                               ("14"
                                (skosimp*)
                                (("14"
                                  (inst?)
                                  (("14" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   17743 825 t shostak))
 (ann_program_preserves_wf_body 0
  (ann_program_preserves_wf_body-1 nil 3401438501 3403862811
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 1)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (rewrite "ann_program_ext_declared_var_names")
                (("1" (auto-rewrite "union" "member")
                  (("1" (assert) (("1" (flatten) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (rewrite "ann_program_add_ghost_var_decls")
              (("2" (rewrite "var_names_union")
                (("2" (auto-rewrite "union" "member")
                  (("2" (inst? -4)
                    (("2" (assert) (("2" (flatten) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   7168 58 t shostak))
 (get_class_ann_program 0
  (get_class_ann_program-1 nil 3392567967 3403862410
   ("" (skosimp*)
    (("" (replace -3 :hide? t)
      (("" (replace -3 :hide? t)
        (("" (expand* "ann_program" "get_class")
          (("" (assert)
            (("" (lift-if -2)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (assert) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil 40 41 t shostak))
 (same_class_name_ann_class_implies_same_class 0
  (same_class_name_ann_class_implies_same_class-1 nil 3387512899
   3403862410
   ("" (skosimp)
    (("" (expand "ann_program")
      (("" (skosimp)
        (("" (lemma "wf_program_has_unique_class_names")
          (("" (inst -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (typepred "mp!1")
              (("" (expand "wf_MP")
                (("" (expand "ann_class")
                  (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((bool nonempty-type-eq-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   36 37 t shostak))
 (same_method_name_ann_class_implies_same_method 0
  (same_method_name_ann_class_implies_same_method-1 nil 3401684952
   3403862410
   ("" (skosimp)
    (("" (lemma "wf_class_has_unique_method_names")
      ((""
        (inst -1 "ann_program(mp!1)" "c2!1" "m2!1"
         "ann_method(mp!1)(m1!1)")
        (("" (lemma "wf_program_has_wf_classes")
          (("" (inst -1 "ann_program(mp!1)" "c2!1")
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "ann_method" -2 2)
                    (("1" (replace -3)
                      (("1" (expand "ann_class" 1)
                        (("1" (expand "ann_methods")
                          (("1" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ann_program" 1)
                  (("2" (inst 1 "c1!1") (("2" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   37 37 t nil))
 (lookup_mthd_ann_program_TCC1 0
  (lookup_mthd_ann_program_TCC1-1 nil 3398657929 3403862416
   ("" (subtype-tcc) nil nil) unchecked
   ((subset? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   546 538 nil nil))
 (lookup_mthd_ann_program 0
  (lookup_mthd_ann_program-1 nil 3387195852 3403862418
   ("" (skosimp)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          (("" (case "up?(get_class(ann_program(mp!1))(tgt!1))")
            (("1" (assert)
              (("1" (split -2)
                (("1" (split -3)
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (skosimp*)
                        (("1"
                          (name "c1"
                                "down(get_class(program(mp!1))(tgt!1))")
                          (("1" (replace -1)
                            (("1"
                              (name "c2"
                                    "down(get_class(ann_program(mp!1))(tgt!1))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma
                                   "same_class_name_ann_class_implies_same_class")
                                  (("1"
                                    (inst -1 "mp!1" "c1" "c2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "get_class_ann_program")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -1
                                             "mp!1"
                                             "c1"
                                             "c2"
                                             "tgt!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "same_method_name_ann_class_implies_same_method")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (assert)
                          (("2"
                            (case-replace
                             " methods(down(get_class(ann_program(mp!1))(tgt!1))) = methods(down(get_class(program(mp!1))(tgt!1)))")
                            (("1" (assert) nil nil)
                             ("2"
                              (case-replace
                               "get_class(ann_program(mp!1))(tgt!1) = get_class(program(mp!1))(tgt!1)")
                              (("2"
                                (use
                                 "same_class_name_ann_class_implies_same_class")
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "get_class_ann_program")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (use "ann_program_class_correspondence")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   186 182 t shostak))
 (ann_program_preserves_class_names 0
  (ann_program_preserves_class_names-1 nil 3398687801 3403862418
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "class_names")
        (("" (iff)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (inst 1 "ann_class(mp!1)(c!1)")
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_name")
                    (("1" (assert)
                      (("1" (expand "ann_program")
                        (("1" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (use "ann_program_class_correspondence")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst 1 "c1!1")
                      (("2" (assert)
                        (("2" (replace -2)
                          (("2"
                            (rewrite
                             "ann_program_preserves_class_name")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil))
   58 56 t shostak))
 (up_get_class_equivalence 0
  (up_get_class_equivalence-1 nil 3398687657 3403862419
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (propax) nil nil)
             ("2" (split -1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_names")
                    nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   33 33 t shostak))
 (get_class_equivalence 0
  (get_class_equivalence-1 nil 3398688099 3403862421
   ("" (skosimp*)
    (("" (use "up_get_class_equivalence")
      (("" (assert)
        (("" (use "ann_program_preserves_class_name")
          (("" (expand "get_class")
            (("" (case "Reference?(a!1)")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (split -4)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (expand "class_names")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case-replace
                                     "{c_1: Class[Name] |
                                        classes(program(mp!1))(c_1) AND
                                         name(c_1) = class_name(a!1)} = singleton(c!1)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c: Class[Name] |
                               classes(ann_program(mp!1))(c) AND
                                name(c) = class_name(a!1)} = singleton(c!2)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -4)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (typepred
                                                   "program(mp!1)")
                                                  (("1"
                                                    (expand*
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "c!1"
                                                         "c1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -11
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (rewrite
                                                                 "ann_program_preserves_class_name"
                                                                 -9)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (typepred
                                                     "ann_program(mp!1)")
                                                    (("1"
                                                      (expand*
                                                       "wf_Program"
                                                       "wf_program_has_unique_class_names_def")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "x!1"
                                                           "c!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred
                                                 "program(mp!1)")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (expand "class_names")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (case-replace
                                     "{c: Class[Name] |
                             classes(ann_program(mp!1))(c) AND
                              name(c) = class_name(a!1)} = singleton(c!2)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c_1: Class[Name] |
                                classes(program(mp!1))(c_1) AND
                                 name(c_1) = class_name(a!1)} = singleton(c!1)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -3)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (rewrite
                                                   "ann_program_preserves_class_name")
                                                  (("1"
                                                    (expand
                                                     "ann_class"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "program(mp!1)")
                                                        (("1"
                                                          (expand*
                                                           "wf_Program"
                                                           "wf_program_has_unique_class_names_def")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "c1!1"
                                                               "c!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (iff)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred
                                                   "program(mp!1)")
                                                  (("1"
                                                    (expand*
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "x!1"
                                                         "c!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred
                                                 "ann_program(mp!1)")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   257 252 t shostak)))

