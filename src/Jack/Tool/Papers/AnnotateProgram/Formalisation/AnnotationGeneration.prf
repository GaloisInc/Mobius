(|AnnotateProgram|
 (|unique_TCC1| 0
  (|unique_TCC1-1| NIL 3383987003 3394354051
   ("" (USE "CP_is_enumerable") (("" (SKOLEM!) (("" (INST?) NIL NIL)) NIL))
    NIL)
   PROVED
   ((|f!1| SKOLEM-CONST-DECL "[CP -> nat]" |AnnotateProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgram| NIL))
   67 66 T NIL))
 (|name_of_TCC1| 0
  (|name_of_TCC1-1| NIL 3383987003 3394354052
   ("" (USE "unique_TCC1")
    (("" (USE "nat2string_injective_function_exists")
      (("" (SKOSIMP*)
        (("" (TYPEPRED "x!1")
          (("" (INST 1 "f!1 o x!1")
            (("" (USE "composition_injective[CP, nat,string]") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nat2string_injective_function_exists| FORMULA-DECL NIL |FunProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|composition_injective| JUDGEMENT-TCC NIL |function_props| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|f!1| SKOLEM-CONST-DECL "[nat -> string]" |AnnotateProgram| NIL)
    (|x!1| SKOLEM-CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (|unique_TCC1| EXISTENCE-TCC NIL |AnnotateProgram| NIL))
   25 25 T NIL))
 (|new_gvds_TCC1| 0
  (|new_gvds_TCC1-2| NIL 3392614976 3394354055
   ("" (SKOSIMP*)
    ((""
      (CASE-REPLACE "{gd: FieldDecl[string] |
                  jtype(gd) = IntType AND
                   (name(gd) = cp AND
                     init_val(gd) = Int(unique(init_cp(mva(mp!1)))))
                   OR
                   ((EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(q) AND jtype(gd) = IntType AND init_val(gd) = Int(unique(q)))
                     OR
                     (EXISTS (v: (vdsA(mva(mp!1)))):
                        name(gd) = name(v) AND jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)))} = union ({gd: FieldDecl[string] |
                  jtype(gd) = IntType AND
                   (name(gd) = cp AND
                     init_val(gd) = Int(unique(init_cp(mva(mp!1)))))}, union({gd : FieldDecl[string] | ((EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(q) AND jtype(gd) = IntType AND init_val(gd) = Int(unique(q))))}, {gd : FieldDecl[string] |  (EXISTS (v: (vdsA(mva(mp!1)))):
                        name(gd) = name(v) AND jtype(gd) = jtype(v) AND init_val(gd) = init_val(v))}))")
      (("1" (HIDE -1)
        (("1" (USE "finite_union[FieldDecl[string]]")
          (("1" (HIDE 2)
            (("1" (USE "finite_union[FieldDecl[string]]")
              (("1" (HIDE 2)
                (("1" (TYPEPRED "vdsA(mva(mp!1))")
                  (("1" (EXPAND "is_finite")
                    (("1" (SKOSIMP*)
                      (("1"
                        (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[string] |
                             (EXISTS (v: (vdsA(mva(mp!1)))):
                                name(gd) = name(v) AND
                                 jtype(gd) = jtype(v) AND
                                  init_val(gd) = init_val(v))})) : f!1((# name := name(gd), jtype := jtype(gd), init_val := init_val(gd) #))")
                        (("1" (EXPAND "injective?")
                          (("1" (SKOSIMP*)
                            (("1"
                              (INST -1
                               "(# name := name(x1!1), jtype := jtype(x1!1), init_val := init_val(x1!1) #)"
                               "(# name := name(x2!1), jtype := jtype(x2!1), init_val := init_val(x2!1) #)")
                              (("1" (ASSERT)
                                (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "gd!1")
                            (("2" (SKOSIMP*)
                              (("2" (TYPEPRED "v!1")
                                (("2"
                                  (CASE-REPLACE
                                   "v!1 = (# name := name(gd!1), jtype := jtype(gd!1), init_val := init_val(gd!1) #)")
                                  (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "cps(mva(mp!1))")
                  (("2" (EXPAND "is_finite")
                    (("2" (SKOSIMP*)
                      (("2"
                        (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[string] |
                             ((EXISTS (q: (cps(mva(mp!1)))):
                                 name(gd) = name_of(q) AND
                                  jtype(gd) = IntType AND
                                   init_val(gd) = Int(unique(q))))})) : f!1(choose ({q : (cps(mva(mp!1))) | name(gd) = name_of(q) AND init_val(gd) = Int(unique(q))}))")
                        (("1" (EXPAND "injective?")
                          (("1" (SKOSIMP*)
                            (("1" (TYPEPRED "x1!1")
                              (("1" (TYPEPRED "x2!1")
                                (("1" (SKOSIMP*)
                                  (("1" (INST? -7)
                                    (("1" (ASSERT)
                                      (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "nonempty_exists")
                                      (("2" (INST 1 "q!1")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("3" (REWRITE "nonempty_exists")
                                      (("3" (INST 1 "q!2")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "is_finite")
              (("2"
                (INST 1 "1" "LAMBDA(gd : ({gd: FieldDecl[string] |
                                 jtype(gd) = IntType AND
                                  (name(gd) = cp AND
                                    init_val(gd) =
                                     Int(unique(init_cp(mva(mp!1)))))})) : 0")
                (("2" (EXPAND "injective?")
                  (("2" (SKOSIMP*)
                    (("2" (TYPEPRED "x1!1")
                      (("2" (TYPEPRED "x2!1")
                        (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|cp| CONST-DECL "string" |AnnotateProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|name_of| CONST-DECL "(injective?[CP, string])" |AnnotateProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|union| CONST-DECL "set" |sets| NIL)
    (|mp!1| SKOLEM-CONST-DECL "MonitoredProgram[CP, string]" |AnnotateProgram|
     NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|q!2| SKOLEM-CONST-DECL "(cps(mva(mp!1)))" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|q!1| SKOLEM-CONST-DECL "(cps(mva(mp!1)))" |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({gd: FieldDecl[string] |
    ((EXISTS (q: (cps(mva(mp!1)))):
        name(gd) = name_of(q) AND
         jtype(gd) = IntType AND init_val(gd) = Int[string](unique(q))))})"
     |AnnotateProgram| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({gd: FieldDecl[string] |
    ((EXISTS (q: (cps(mva(mp!1)))):
        name(gd) = name_of(q) AND
         jtype(gd) = IntType AND init_val(gd) = Int[string](unique(q))))})"
     |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL))
   391 388 T NIL)
  (|new_gvds_TCC1-1| NIL 3390028807 3392614965
   ("" (SKOSIMP*)
    ((""
      (CASE-REPLACE "{gd: GhostVarDecl[string] |
                jtype(gd) = IntType AND
                 (name(gd) = cp AND
                   init_val(gd) = Int(unique(init_cp(mva(mp!1)))))
                 OR
                 ((EXISTS (q: (cps(mva(mp!1)))):
                     name(gd) = name_of(q) AND jtype(gd) = IntType AND init_val(gd) = Int(unique(q)))
                   OR
                   (EXISTS (v: (vdsA(mva(mp!1)))):
                      name(gd) = name(v) AND jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)))} = union ({gd: GhostVarDecl[string] |
                jtype(gd) = IntType AND
                 (name(gd) = cp AND
                   init_val(gd) = Int(unique(init_cp(mva(mp!1)))))}, union({gd : GhostVarDecl[string] | ((EXISTS (q: (cps(mva(mp!1)))):
                     name(gd) = name_of(q) AND jtype(gd) = IntType AND init_val(gd) = Int(unique(q))))}, {gd : GhostVarDecl[string] |  (EXISTS (v: (vdsA(mva(mp!1)))):
                      name(gd) = name(v) AND jtype(gd) = jtype(v) AND init_val(gd) = init_val(v))}))")
      (("1" (HIDE -1)
        (("1" (USE "finite_union[GhostVarDecl[string]]")
          (("1" (HIDE 2)
            (("1" (USE "finite_union[GhostVarDecl[string]]")
              (("1" (HIDE 2)
                (("1" (TYPEPRED "vdsA(mva(mp!1))")
                  (("1" (EXPAND "is_finite")
                    (("1" (SKOSIMP*)
                      (("1"
                        (INST 1 "N!1" "LAMBDA(gd : ({gd: GhostVarDecl[string] |
                     (EXISTS (v: (vdsA(mva(mp!1)))):
                        name(gd) = name(v) AND
                         jtype(gd) = jtype(v) AND
                          init_val(gd) = init_val(v))})) : f!1((# name := name(gd), jtype := jtype(gd), init_val := init_val(gd) #))")
                        (("1" (EXPAND "injective?")
                          (("1" (SKOSIMP*)
                            (("1"
                              (INST -1
                               "(# name := name(x1!1), jtype := jtype(x1!1), init_val := init_val(x1!1) #)"
                               "(# name := name(x2!1), jtype := jtype(x2!1), init_val := init_val(x2!1) #)")
                              (("1" (ASSERT)
                                (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "gd!1")
                            (("2" (SKOSIMP*)
                              (("2" (TYPEPRED "v!1")
                                (("2"
                                  (CASE-REPLACE
                                   "v!1 = (# name := name(gd!1), jtype := jtype(gd!1), init_val := init_val(gd!1) #)")
                                  (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "cps(mva(mp!1))")
                  (("2" (EXPAND "is_finite")
                    (("2" (SKOSIMP*)
                      (("2"
                        (INST 1 "N!1" "LAMBDA(gd : ({gd: GhostVarDecl[string] |
                     ((EXISTS (q: (cps(mva(mp!1)))):
                         name(gd) = name_of(q) AND
                          jtype(gd) = IntType AND
                           init_val(gd) = Int(unique(q))))})) : f!1(choose ({q : (cps(mva(mp!1))) | name(gd) = name_of(q) AND init_val(gd) = Int(unique(q))}))")
                        (("1" (EXPAND "injective?")
                          (("1" (SKOSIMP*)
                            (("1" (TYPEPRED "x1!1")
                              (("1" (TYPEPRED "x2!1")
                                (("1" (SKOSIMP*)
                                  (("1" (INST? -7)
                                    (("1" (ASSERT)
                                      (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "nonempty_exists")
                                      (("2" (INST 1 "q!1")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("3" (REWRITE "nonempty_exists")
                                      (("3" (INST 1 "q!2")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (EXPAND "is_finite")
              (("2"
                (INST 1 "1" "LAMBDA(gd : ({gd: GhostVarDecl[string] |
                           jtype(gd) = IntType AND
                            (name(gd) = cp AND
                              init_val(gd) =
                               Int(unique(init_cp(mva(mp!1)))))})) : 0")
                (("2" (EXPAND "injective?")
                  (("2" (SKOSIMP*)
                    (("2" (TYPEPRED "x1!1")
                      (("2" (TYPEPRED "x2!1")
                        (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Val| TYPE-DECL NIL |Val_adt| NIL) (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|cp| CONST-DECL "string" |AnnotateProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|AState| TYPE-EQ-DECL NIL |MVASemantics| NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|MPState| TYPE-EQ-DECL NIL |MonitoredProgramSemantics| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|upto| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|deriv_stmt_rec_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|deriv_expr_rec_type| TYPE-EQ-DECL NIL |SemanticsTypes| NIL)
    (|execute_set_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|execute_CaseJML_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|on_method_event_type| CONST-DECL "boolean" |SemanticsTypes| NIL)
    (|on_method_entry_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|on_method_exit_normal_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|on_method_exit_exceptional_MP| CONST-DECL "(on_method_event_type)"
     |MonitoredProgramSemantics| NIL)
    (|name_of| CONST-DECL "(injective?[CP, string])" |AnnotateProgram| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL))
   24297 410 T NIL))
 (|ann_action_TCC1| 0
  (|ann_action_TCC1-1| NIL 3383987003 3394354056 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   45 45 NIL NIL))
 (|ann_guard_actions_TCC1| 0
  (|ann_guard_actions_TCC1-1| NIL 3390028807 3394354058
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(x : (({x: [Expr[string], Stmt[string]] |
                     EXISTS (t: Transition[CP, string]):
                       ts!1(t) AND
                        x =
                         (guard_to_expression[CP, string]
                              (mva(mp!1))(guard(t)),
                          update_vars(t))}))) : f!1(choose({t :Transition[CP, string] |
                       ts!1(t) AND
                        x = (guard_to_expression[CP, string]
                              (mva(mp!1))(guard(t)), update_vars(t))}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST?)
                        (("1" (ASSERT)
                          (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                         ("2" (GRIND) NIL NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "t!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|t!2| SKOLEM-CONST-DECL "Transition[CP, string]" |AnnotateProgram| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({x: [Expr[string], Stmt[string]] |
    EXISTS (t: Transition[CP, string]):
      ts!1(t) AND
       x =
        (guard_to_expression[CP, string](mva(mp!1))(guard(t)),
         update_vars(t))})"
     |AnnotateProgram| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({x: [Expr[string], Stmt[string]] |
    EXISTS (t: Transition[CP, string]):
      ts!1(t) AND
       x =
        (guard_to_expression[CP, string](mva(mp!1))(guard(t)),
         update_vars(t))})"
     |AnnotateProgram| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL) (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ts!1| SKOLEM-CONST-DECL "finite_set[Transition[CP, string]]"
     |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|guard_to_expression| CONST-DECL "Expr" |MVASemantics| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL
     "{mp: MonitoredProgram | wf_MP(mp) AND well_typed_Program(program(mp))}"
     |AnnotateProgram| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   230 230 T NIL))
 (|ann_event_TCC1| 0
  (|ann_event_TCC1-1| NIL 3390028807 3394354058
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t :
                ({t: Transition[CP, string] |
                     ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (EXPAND "injective?")
              (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   26 26 T NIL))
 (|ann_event_TCC2| 0
  (|ann_event_TCC2-1| NIL 3390028807 3394354086
   ("" (SKOSIMP*)
    (("" (TYPEPRED "cps(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: [Expr[string], Stmt[string]] |
                       EXISTS (q: CP):
                         cps(mva(mp!1))(q) AND
                          nonempty?[Transition[CP, string]]
                              ({t: Transition[CP, string] |
                                  ts!1(t) AND scp(t) = q})
                           AND
                           c =
                            ann_trans_cp(mp!1)
                                        (q,
                                         {t: Transition[CP, string]
                                          |
                                          ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                          nonempty?[Transition[CP, string]]
                              ({t: Transition[CP, string] |
                                  ts!1(t) AND scp(t) = q})
                           AND
                           c =
                            ann_trans_cp(mp!1)
                                        (q,
                                         {t: Transition[CP, string]
                                          |
                                          ts!1(t) AND scp(t) = q})}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (HIDE -2)
                      (("1"
                        (NAME "q1"
                              "choose({q: CP |
                 cps(mva(mp!1))(q) AND
                  nonempty?[Transition[CP, string]]
                      ({t: Transition[CP, string] |
                          ts!1(t) AND scp(t) = q})
                   AND
                   x1!1 =
                    ann_trans_cp(mp!1)
                                (q,
                                 {t: Transition[CP, string] |
                                    ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (NAME "q2"
                                "choose({q: CP |
                 cps(mva(mp!1))(q) AND
                  nonempty?[Transition[CP, string]]
                      ({t: Transition[CP, string] |
                          ts!1(t) AND scp(t) = q})
                   AND
                   x2!1 =
                    ann_trans_cp(mp!1)
                                (q,
                                 {t: Transition[CP, string] |
                                    ts!1(t) AND scp(t) = q})})")
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2)
                              (("1"
                                (CASE
                                    "ann_trans_cp(mp!1)(q1, {t : Transition[CP, string] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (CASE
                                      "ann_trans_cp(mp!1)(q2, {t : Transition[CP, string] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1" (REPLACE -5) (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (REPLACE -2 :DIR RL)
                                    (("2" (ASSERT) NIL NIL)) NIL)
                                   ("3" (TYPEPRED "ts!1")
                                    (("3" (EXPAND "is_finite")
                                      (("3" (SKOSIMP*)
                                        (("3" (INST 1 "N!2" "f!2")
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACE -1 :DIR RL)
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (TYPEPRED "ts!1")
                                  (("3" (EXPAND "is_finite")
                                    (("3" (SKOSIMP*)
                                      (("3" (INST 1 "N!2" "f!2")
                                        (("3" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "x2!1")
                            (("2" (SKOSIMP*)
                              (("2" (REWRITE "nonempty_exists" 1)
                                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "x1!1")
                          (("2" (SKOSIMP*)
                            (("2" (REWRITE "nonempty_exists" 1)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (SKOSIMP*)
                                (("2" (TYPEPRED "ts!1")
                                  (("2" (EXPAND "is_finite")
                                    (("2" (SKOSIMP*)
                                      (("2" (INST 1 "N!2" "f!2")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (SKOSIMP*)
                          (("3" (TYPEPRED "ts!1")
                            (("3" (EXPAND "is_finite")
                              (("3" (SKOSIMP*)
                                (("3" (INST 1 "N!2" "f!2")
                                  (("3" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (SKOSIMP*)
                      (("2" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (SKOSIMP*)
                      (("3" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (SKOSIMP*)
                    (("4" (TYPEPRED "ts!1")
                      (("4" (EXPAND "is_finite")
                        (("4" (SKOSIMP*)
                          (("4" (INST 1 "N!2" "f!2") (("4" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists" 1)
                    (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (SKOSIMP*)
                      (("2" (TYPEPRED "ts!1")
                        (("2" (EXPAND "is_finite")
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "N!2" "f!2") (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "ts!1")
                (("3" (EXPAND "is_finite")
                  (("3" (SKOSIMP*)
                    (("3" (INST 1 "N!2" "f!2") (("3" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|c!1| SKOLEM-CONST-DECL "({c: [Expr[string], Stmt[string]] |
    EXISTS (q: CP):
      cps(mva(mp!1))(q) AND
       nonempty?[Transition[CP, string]]
           ({t: Transition[CP, string] | ts!1(t) AND scp(t) = q})
        AND
        c =
         ann_trans_cp(mp!1)
                     (q,
                      {t: Transition[CP, string] |
                         ts!1(t) AND scp(t) = q})})"
     |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({c: [Expr[string], Stmt[string]] |
    EXISTS (q: CP):
      cps(mva(mp!1))(q) AND
       nonempty?[Transition[CP, string]]
           ({t: Transition[CP, string] | ts!1(t) AND scp(t) = q})
        AND
        c =
         ann_trans_cp(mp!1)
                     (q,
                      {t: Transition[CP, string] |
                         ts!1(t) AND scp(t) = q})})"
     |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({c: [Expr[string], Stmt[string]] |
    EXISTS (q: CP):
      cps(mva(mp!1))(q) AND
       nonempty?[Transition[CP, string]]
           ({t: Transition[CP, string] | ts!1(t) AND scp(t) = q})
        AND
        c =
         ann_trans_cp(mp!1)
                     (q,
                      {t: Transition[CP, string] |
                         ts!1(t) AND scp(t) = q})})"
     |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|ann_guard_actions| CONST-DECL "list[[Expr, Stmt]]" |AnnotateProgram| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL
     "{mp: MonitoredProgram | wf_MP(mp) AND well_typed_Program(program(mp))}"
     |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|ts!1| SKOLEM-CONST-DECL "finite_set[Transition[CP, string]]"
     |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_trans_cp| CONST-DECL "[Expr, Stmt]" |AnnotateProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   2757 2752 T NIL))
 (|filter_event_TCC1| 0
  (|filter_event_TCC1-1| NIL 3383987003 3394354089
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts(a!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t : ({t: Transition[CP, string] |
                     ts(a!1)(t) AND
                      etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            (("" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   258 257 T NIL))
 (|ann_method_TCC1| 0
  (|ann_method_TCC1-1| NIL 3389418364 3394354089
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "wf_MP" "complete") (("" (FLATTEN) NIL NIL)) NIL)) NIL)
   PROVED
   ((|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   2 2 T NIL))
 (|ann_methods_TCC1| 0
  (|ann_methods_TCC1-1| NIL 3383987003 3394354089
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ms!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(m : ({m: Method[string] |
                     EXISTS (n: Method[string]):
                       ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[string] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "n!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "m!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|m!1| SKOLEM-CONST-DECL "({m: Method[string] |
    EXISTS (n: Method[string]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     |AnnotateProgram| NIL)
    (|n!1| SKOLEM-CONST-DECL "Method[string]" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|n!2| SKOLEM-CONST-DECL "Method[string]" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|n!1| SKOLEM-CONST-DECL "Method[string]" |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({m: Method[string] |
    EXISTS (n: Method[string]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     |AnnotateProgram| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({m: Method[string] |
    EXISTS (n: Method[string]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     |AnnotateProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ms!1| SKOLEM-CONST-DECL "finite_set[Method[string]]" |AnnotateProgram|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL
     "{mp: MonitoredProgram | wf_MP(mp) AND well_typed_Program(program(mp))}"
     |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   38 38 T NIL))
 (|ann_class_TCC1| 0
  (|ann_class_TCC1-1| NIL 3392614111 3394354108 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsP| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|wf_Guard| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|invariants_are_booleans| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   1840 1836 NIL NIL))
 (|reserved_words_TCC1| 0
  (|reserved_words_TCC1-1| NIL 3394271402 3394354374
   ("" (EXPAND "is_finite")
    ((""
      (INST 1 "5" "LAMBDA(n : ({n: string |
                         n = This[string] OR n = \"super\" OR n = \"if\"
                      OR n = \"then\" OR n = \"else\"})) : IF n = This[string] THEN 0 ELSIF n = \"super\" THEN 1 ELSIF n = \"if\" THEN 2 ELSIF n = \"then\" THEN 3 ELSE 4 ENDIF")
      (("" (EXPAND "injective?")
        (("" (SKOSIMP*)
          (("" (LIFT-IF)
            (("" (ASSERT)
              (("" (LIFT-IF)
                (("" (ASSERT)
                  (("" (LIFT-IF)
                    (("" (ASSERT)
                      (("" (PROP)
                        (("" (ASSERT)
                          (("" (TYPEPRED "x1!1")
                            (("" (TYPEPRED "x2!1") (("" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|char| ADT-CONSTRUCTOR-DECL "[below[256] -> (char?)]" |character_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL))
   16612 41 T NIL))
 (|ann_program_TCC1| 0
  (|ann_program_TCC1-1| NIL 3383987003 3394354109
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND "ann_program_pre") (("" (PROP) NIL NIL)) NIL)) NIL)
   PROVED
   ((|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   2 3 T NIL))
 (|ann_program_TCC2| 0
  (|ann_program_TCC2-1| NIL 3389418364 3394354110
   ("" (SKOSIMP*)
    (("" (TYPEPRED "classes(program(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: Class[string] |
                     EXISTS (c1: Class[string]):
                       classes(program(mp!1))(c1) AND
                        c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[string] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "c1!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "mp!1")
                (("3" (EXPAND "ann_program_pre")
                  (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|c!1| SKOLEM-CONST-DECL "({c: Class[string] |
    EXISTS (c1: Class[string]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     |AnnotateProgram| NIL)
    (|c1!1| SKOLEM-CONST-DECL "Class[string]" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|c1!2| SKOLEM-CONST-DECL "Class[string]" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|c1!1| SKOLEM-CONST-DECL "Class[string]" |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({c: Class[string] |
    EXISTS (c1: Class[string]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     |AnnotateProgram| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({c: Class[string] |
    EXISTS (c1: Class[string]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     |AnnotateProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(ann_program_pre)" |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   60 60 T NIL)))
(|AnnotateProgramProperties|
 (|CP_is_enumerable| 0
  (|CP_is_enumerable-1| NIL 3392611795 3392611802 ("" (POSTPONE) NIL NIL)
   UNCHECKED NIL 7000 150 T SHOSTAK))
 (|IMP_AnnotateProgram_TCC1| 0
  (|IMP_AnnotateProgram_TCC1-1| NIL 3390292134 3394354110
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 1 1
   T NIL))
 (|ann_program_preserves_fields| 0
  (|ann_program_preserves_fields-1| NIL 3394277977 3394354110
   ("" (SKOSIMP)
    (("" (EXPAND* "getFieldDecls" "ann_program")
      (("" (SKOSIMP*)
        (("" (REWRITE -3)
          (("" (INST?) (("" (EXPAND "ann_class") (("" (GROUND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL))
   27 26 T SHOSTAK))
 (|ann_program_preserves_locals| 0
  (|ann_program_preserves_locals-1| NIL 3394277747 3394354111
   ("" (SKOSIMP)
    (("" (EXPAND* "getLocalDecls" "ann_program")
      (("" (SKOSIMP*)
        (("" (REWRITE -3)
          (("" (EXPAND* "ann_class" "ann_methods" "ann_method")
            (("" (SPLIT)
              (("1" (SKOSIMP*)
                (("1" (INST?) (("1" (REWRITE -4) (("1" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL)
               ("2" (INST?) (("2" (GROUND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ExitExceptional| ADT-CONSTRUCTOR-DECL "(ExitExceptional?)"
     |EventType_adt| NIL)
    (|ExitExceptional?| ADT-RECOGNIZER-DECL "[EventType -> boolean]"
     |EventType_adt| NIL)
    (|ExitNormal| ADT-CONSTRUCTOR-DECL "(ExitNormal?)" |EventType_adt| NIL)
    (|ExitNormal?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt|
     NIL)
    (|Entry| ADT-CONSTRUCTOR-DECL "(Entry?)" |EventType_adt| NIL)
    (|Entry?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Stmt_adt|
     NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Stmt -> boolean]" |Stmt_adt| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL))
   53 53 T SHOSTAK))
 (|ann_program_yields_wf_program| 0
  (|ann_program_yields_wf_program-1| NIL 3393664525 3394354122
   ("" (SKOSIMP)
    (("" (EXPAND "ann_program_pre")
      (("" (FLATTEN)
        (("" (COPY -1)
          (("" (EXPAND "wf_MP" -1)
            (("" (EXPAND "wf_Program")
              (("" (PROP)
                (("1" (HIDE-ALL-BUT (-2 -7 -9 1))
                  (("1" (EXPAND "wf_program_variables_disjoint_def")
                    (("1" (PROP)
                      (("1" (HIDE -2 -3)
                        (("1"
                          (EXPAND* "disjoint?" "empty?" "intersection" "member"
                           "var_names")
                          (("1" (SKOSIMP*)
                            (("1" (INST?)
                              (("1" (SPLIT)
                                (("1" (INST?)
                                  (("1" (HIDE -3)
                                    (("1"
                                      (EXPAND* "getFieldDecls" "ann_program"
                                       "ann_class")
                                      (("1" (SKOSIMP*)
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -2)
                                              (("1" (LIFT-IF)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE -1)
                                  (("2" (INST?)
                                    (("2"
                                      (EXPAND* "getLocalDecls" "ann_program"
                                       "ann_class")
                                      (("2" (SKOSIMP*)
                                        (("2" (SPLIT)
                                          (("1" (LIFT-IF)
                                            (("1" (SPLIT -)
                                              (("1" (FLATTEN)
                                                (("1"
                                                  (EXPAND* "ann_methods"
                                                   "ann_method")
                                                  (("1" (REPLACE -3)
                                                    (("1" (HIDE -3)
                                                      (("1" (BETA)
                                                        (("1" (SKOSIMP)
                                                          (("1" (INST?)
                                                            (("1" (ASSERT)
                                                              (("1"
                                                                (REWRITE -6)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (INST?)
                                                (("2" (GROUND) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 -3)
                        (("2"
                          (EXPAND* "disjoint?" "empty?" "intersection" "member"
                           "var_names")
                          (("2" (SKOSIMP*)
                            (("2" (INST?)
                              (("2" (SPLIT)
                                (("1" (INST?)
                                  (("1" (HIDE -3)
                                    (("1"
                                      (EXPAND* "getLocalDecls" "ann_program"
                                       "ann_class")
                                      (("1" (SKOSIMP*)
                                        (("1" (LIFT-IF)
                                          (("1" (SPLIT -)
                                            (("1" (FLATTEN)
                                              (("1" (REWRITE -3)
                                                (("1" (BETA)
                                                  (("1"
                                                    (EXPAND* "ann_methods"
                                                     "ann_method")
                                                    (("1" (SKOSIMP)
                                                      (("1" (INST?)
                                                        (("1" (ASSERT)
                                                          (("1" (REWRITE -5)
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST?)
                                              (("2" (GROUND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "wf_program_variables_disjoint")
                                  (("2" (EXPAND "wf_MP")
                                    (("2" (PROP)
                                      (("2" (BETA)
                                        (("2" (FLATTEN)
                                          (("2" (HIDE -1 -3)
                                            (("2"
                                              (EXPAND* "disjoint?"
                                               "intersection" "empty?" "member"
                                               "var_names")
                                              (("2" (INST - "x!1")
                                                (("2" (HIDE 2)
                                                  (("2"
                                                    (CASE
                                                        "ann_program_pre(mp!1)")
                                                    (("1"
                                                      (USE
                                                       "ann_program_preserves_locals")
                                                      (("1" (ASSERT)
                                                        (("1" (SPLIT)
                                                          (("1" (INST?)
                                                            (("1" (PROP) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2" (HIDE -3 -7 -8)
                                                            (("2"
                                                              (EXPAND*
                                                               "getGhostDecls"
                                                               "ann_program"
                                                               "ann_class")
                                                              (("2" (SKOSIMP*)
                                                                (("2" (INST?)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    (("2"
                                                                      (INST?)
                                                                      (("2"
                                                                        (LIFT-IF)
                                                                        (("2"
                                                                          (GROUND)
                                                                          (("2"
                                                                            (REWRITE
                                                                             -2)
                                                                            (("2"
                                                                              (BETA)
                                                                              (("2"
                                                                                (EXPAND*
                                                                                 "union"
                                                                                 "member")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "wf_new_vars")
                                                                                  (("2"
                                                                                    (FLATTEN)
                                                                                    (("2"
                                                                                      (INST?)
                                                                                      (("2"
                                                                                        (PROP)
                                                                                        (("2"
                                                                                          (HIDE
                                                                                           1
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "var_names")
                                                                                            (("2"
                                                                                              (INST?)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (EXPAND*
                                                       "ann_program_pre"
                                                       "wf_MP")
                                                      (("2" (ASSERT)
                                                        (("2" (REVEAL -10)
                                                          (("2" (PROPAX) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE -1 -2)
                        (("3"
                          (EXPAND* "disjoint?" "empty?" "intersection" "member"
                           "var_names")
                          (("3" (SKOSIMP*)
                            (("3" (INST?)
                              (("3" (SPLIT)
                                (("1" (HIDE -3)
                                  (("1"
                                    (EXPAND* "getFieldDecls" "ann_program"
                                     "ann_class")
                                    (("1" (SKOSIMP*)
                                      (("1" (INST?)
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1" (REPLACE -2)
                                              (("1" (ASSERT)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "wf_program_variables_disjoint")
                                  (("2" (EXPAND "wf_MP")
                                    (("2" (PROP)
                                      (("2" (BETA)
                                        (("2" (FLATTEN)
                                          (("2" (HIDE -1 -2)
                                            (("2"
                                              (EXPAND* "disjoint?"
                                               "intersection" "empty?" "member"
                                               "var_names")
                                              (("2" (INST - "x!1")
                                                (("2"
                                                  (CASE
                                                      "ann_program_pre(mp!1)")
                                                  (("1"
                                                    (USE
                                                     "ann_program_preserves_fields")
                                                    (("1" (ASSERT)
                                                      (("1" (SPLIT)
                                                        (("1" (INST?)
                                                          (("1" (PROP) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (HIDE -2 -3 -7 2)
                                                          (("2" (INST 1 "f!2")
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND*
                                                                 "getGhostDecls"
                                                                 "ann_program"
                                                                 "ann_class")
                                                                (("2"
                                                                  (SKOSIMP*)
                                                                  (("2"
                                                                    (LIFT-IF)
                                                                    (("2"
                                                                      (SPLIT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (REWRITE
                                                                           -3)
                                                                          (("1"
                                                                            (EXPAND*
                                                                             "ann_methods"
                                                                             "ann_method")
                                                                            (("1"
                                                                              (EXPAND*
                                                                               "union"
                                                                               "member")
                                                                              (("1"
                                                                                (INST?)
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "wf_new_vars")
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST?)
                                                                                        (("1"
                                                                                          (PROP)
                                                                                          (("1"
                                                                                            (HIDE
                                                                                             1
                                                                                             2
                                                                                             4)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "var_names")
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (INST?)
                                                                        (("2"
                                                                          (GROUND)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (EXPAND* "ann_program_pre"
                                                     "wf_MP")
                                                    (("2" (ASSERT)
                                                      (("2" (REVEAL -10)
                                                        (("2" (PROPAX) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT (-3 -7 -6 1))
                  (("2" (EXPAND "wf_program_variables_not_this_def")
                    (("2" (PROP)
                      (("1" (HIDE 2 3)
                        (("1" (EXPAND* "var_names" "getFieldDecls")
                          (("1" (SKOSIMP*)
                            (("1" (INST?)
                              (("1" (ASSERT)
                                (("1" (EXPAND* "ann_program" "ann_class")
                                  (("1" (SKOSIMP)
                                    (("1" (INST?)
                                      (("1" (ASSERT)
                                        (("1" (REPLACE -2)
                                          (("1" (LIFT-IF)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 1 3)
                        (("2" (EXPAND* "var_names" "getLocalDecls")
                          (("2" (SKOSIMP*)
                            (("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (EXPAND* "ann_program" "ann_class")
                                  (("2" (SKOSIMP)
                                    (("2" (REPLACE -2)
                                      (("2" (HIDE -2)
                                        (("2" (LIFT-IF)
                                          (("2" (SPLIT -)
                                            (("1" (FLATTEN)
                                              (("1" (BETA)
                                                (("1"
                                                  (EXPAND* "ann_methods"
                                                   "ann_method")
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST?)
                                                      (("1" (ASSERT)
                                                        (("1" (REWRITE -4)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST?)
                                              (("2" (PROP) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE 1 2)
                        (("3" (EXPAND* "var_names" "getGhostDecls")
                          (("3" (SKOSIMP*)
                            (("3" (EXPAND* "ann_program" "ann_class")
                              (("3" (SKOSIMP)
                                (("3" (INST?)
                                  (("3" (ASSERT)
                                    (("3" (INST?)
                                      (("3" (ASSERT)
                                        (("3" (REPLACE -2)
                                          (("3" (HIDE -2 -5)
                                            (("3" (LIFT-IF)
                                              (("3" (GROUND)
                                                (("3"
                                                  (EXPAND* "union" "member")
                                                  (("3" (REVEAL -8)
                                                    (("3"
                                                      (EXPAND "wf_new_vars")
                                                      (("3" (FLATTEN)
                                                        (("3" (INST?)
                                                          (("3" (PROP)
                                                            (("3"
                                                              (EXPAND
                                                               "reserved_words")
                                                              (("3" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("3" (HIDE-ALL-BUT (-4 1))
                  (("3" (EXPAND "wf_program_has_unique_class_names_def")
                    (("3" (SKOSIMP)
                      (("3" (EXPAND* "ann_program" "ann_class")
                        (("3" (SKOSIMP*)
                          (("3" (INST - "c1!2" "c1!3")
                            (("3" (ASSERT)
                              (("3" (SPLIT -6)
                                (("1" (HIDE -6)
                                  (("1" (REPLACE -3)
                                    (("1" (REPLACE -5)
                                      (("1" (HIDE -3 -5)
                                        (("1" (LIFT-IF)
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 2)
                                  (("2" (REPLACE -2)
                                    (("2" (REPLACE -4)
                                      (("2" (HIDE -2 -4)
                                        (("2" (LIFT-IF)
                                          (("2" (ASSERT)
                                            (("2" (PROP)
                                              (("2" (LIFT-IF)
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("4" (HIDE-ALL-BUT (-5 1))
                  (("4" (SKOSIMP)
                    (("4" (EXPAND* "ann_program" "ann_class")
                      (("4" (SKOSIMP)
                        (("4" (INST - "c1!1")
                          (("4" (ASSERT)
                            (("4" (REPLACE -2)
                              (("4" (HIDE -2)
                                (("4"
                                  (EXPAND* "wf_Class" "ann_methods"
                                   "ann_method")
                                  (("4" (SKOSIMP)
                                    (("4" (ASSERT)
                                      (("4" (SPLIT)
                                        (("1" (SPLIT)
                                          (("1" (SKOSIMP*)
                                            (("1" (INST - "n!1" "n!2")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (PROP) NIL NIL))
                                          NIL)
                                         ("2" (PROP)
                                          (("2" (INST?)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("5" (HIDE-ALL-BUT (-6 -7 -8 1))
                  (("5" (SKOSIMP)
                    (("5" (INST?)
                      (("5" (EXPAND* "var_names" "getGhostDecls")
                        (("5" (SKOSIMP*)
                          (("5" (INST?)
                            (("5" (ASSERT)
                              (("5" (INST 1 "ann_class(mp!1)(c!1)")
                                (("5" (SPLIT)
                                  (("1" (EXPAND "ann_program")
                                    (("1" (INST?) NIL NIL)) NIL)
                                   ("2" (EXPAND* "ann_class" "union" "member")
                                    NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|reserved_words| CONST-DECL "finite_set[string]" |AnnotateProgram| NIL)
    (|wf_program_variables_not_this_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    NIL NIL (|member| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ExitExceptional| ADT-CONSTRUCTOR-DECL "(ExitExceptional?)"
     |EventType_adt| NIL)
    (|ExitExceptional?| ADT-RECOGNIZER-DECL "[EventType -> boolean]"
     |EventType_adt| NIL)
    (|ExitNormal| ADT-CONSTRUCTOR-DECL "(ExitNormal?)" |EventType_adt| NIL)
    (|ExitNormal?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt|
     NIL)
    (|Entry| ADT-CONSTRUCTOR-DECL "(Entry?)" |EventType_adt| NIL)
    (|Entry?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Stmt_adt|
     NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Stmt -> boolean]" |Stmt_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_program_variables_disjoint| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|ann_program_preserves_locals| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|wf_new_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|halted| CONST-DECL "string" |AnnotateProgram| NIL)
    (|cp| CONST-DECL "string" |AnnotateProgram| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (VarEval?)]" |NumExpr_adt|
     NIL)
    (|VarEval?| ADT-RECOGNIZER-DECL "[NumExpr -> boolean]" |NumExpr_adt| NIL)
    (|Neq| ADT-CONSTRUCTOR-DECL "[[NumExpr, NumExpr] -> (Neq?)]" |BoolExpr_adt|
     NIL)
    (|Neq?| ADT-RECOGNIZER-DECL "[BoolExpr -> boolean]" |BoolExpr_adt| NIL)
    (|NumExpr| TYPE-DECL NIL |NumExpr_adt| NIL)
    (|b| ADT-ACCESSOR-DECL "[(BExpr?) -> BoolExpr[Name]]" |Expr_adt| NIL)
    (|Conj| ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (Conj?)]"
     |BoolExpr_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[BoolExpr -> boolean]" |BoolExpr_adt| NIL)
    (|BExpr| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (BExpr?)]" |Expr_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Expr -> boolean]" |Expr_adt| NIL)
    (|BoolExpr| TYPE-DECL NIL |BoolExpr_adt| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_program_preserves_fields| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_program_variables_disjoint_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL))
   1120 1117 T SHOSTAK))
 (|ann_program_class_correspondence_TCC1| 0
  (|ann_program_class_correspondence_TCC1-1| NIL 3392569207 3394354123
   ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|wf_new_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|reserved_words| CONST-DECL "finite_set[string]" |AnnotateProgram| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|disjoint_model_vars| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|invariants_are_booleans| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Guard| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL) NIL
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|wf_vdsP| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL))
   110 109 NIL NIL))
 (|ann_program_class_correspondence| 0
  (|ann_program_class_correspondence-1| NIL 3392569211 3394354123
   ("" (SKOSIMP*) (("" (EXPAND "ann_program") (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   UNCHECKED ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)) 22 23
   T SHOSTAK))
 (|ann_program_method_correspondence| 0
  (|ann_program_method_correspondence-1| NIL 3392569244 3394354125
   ("" (SKOSIMP*)
    (("" (USE "ann_program_class_correspondence")
      (("" (ASSERT)
        (("" (INST?)
          (("" (ASSERT)
            (("" (SKOSIMP*)
              (("" (INST 1 "c1!1" _)
                (("" (ASSERT)
                  (("" (EXPAND "ann_class")
                    (("" (LIFT-IF)
                      (("" (ASSERT)
                        (("" (SPLIT -2)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (REPLACE -2 -6)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "ann_methods")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL))
   163 163 T SHOSTAK))
 (|ann_program_preserves_fields_eq| 0
  (|ann_program_preserves_fields_eq-1| NIL 3394358345 3394358759
   ("" (SKOSIMP)
    (("" (EXPAND* "getFieldDecls" "ann_program")
      (("" (IFF)
        (("" (SPLIT 1)
          (("1" (SKOSIMP*)
            (("1" (REWRITE -2)
              (("1" (REWRITE -3)
                (("1" (INST?)
                  (("1" (EXPAND "ann_class") (("1" (GROUND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOSIMP*)
            (("2" (INST 1 "ann_class(mp!1)(c!1)")
              (("1" (SPLIT 1)
                (("1" (INST?) NIL NIL)
                 ("2" (EXPAND "ann_class") (("2" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (EXPAND "ann_program_pre")
                (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL "MonitoredProgram[CP, string]"
     |AnnotateProgramProperties| NIL))
   6075 257 T NIL))
 (|ann_program_preserves_locals_eq| 0
  (|ann_program_preserves_locals_eq-1| NIL 3394358569 3394359063
   ("" (SKOSIMP)
    (("" (EXPAND* "getLocalDecls" "ann_program")
      (("" (IFF)
        (("" (SPLIT 1)
          (("1" (SKOSIMP*)
            (("1" (REWRITE -2)
              (("1" (EXPAND* "ann_class" "ann_methods" "ann_method")
                (("1" (SPLIT)
                  (("1" (SKOSIMP*)
                    (("1" (INST?)
                      (("1" (REWRITE -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL)
                   ("2" (INST?) (("2" (GROUND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOSIMP*)
            (("2" (INST 1 "ann_class(mp!1)(c!1)" _)
              (("1" (EXPAND "ann_class" 1 3)
                (("1" (ASSERT)
                  (("1" (EXPAND "ann_program_pre")
                    (("1" (FLATTEN)
                      (("1" (CASE "name(c!1) = class_name(mva(mp!1))")
                        (("1" (ASSERT)
                          (("1" (INST 1 "ann_method(mp!1)(m!1)")
                            (("1" (SPLIT 1)
                              (("1" (INST?) NIL NIL)
                               ("2" (ASSERT)
                                (("2" (EXPAND "ann_methods")
                                  (("2" (INST?) NIL NIL)) NIL))
                                NIL)
                               ("3" (EXPAND "ann_method")
                                (("3" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (INST 2 "m!1")
                          (("2" (SPLIT 2)
                            (("1" (INST?) NIL NIL) ("2" (ASSERT) NIL NIL)
                             ("3" (ASSERT) NIL NIL) ("4" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT)
                (("2" (EXPAND "ann_program_pre")
                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ExitExceptional| ADT-CONSTRUCTOR-DECL "(ExitExceptional?)"
     |EventType_adt| NIL)
    (|ExitExceptional?| ADT-RECOGNIZER-DECL "[EventType -> boolean]"
     |EventType_adt| NIL)
    (|ExitNormal| ADT-CONSTRUCTOR-DECL "(ExitNormal?)" |EventType_adt| NIL)
    (|ExitNormal?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt|
     NIL)
    (|Entry| ADT-CONSTRUCTOR-DECL "(Entry?)" |EventType_adt| NIL)
    (|Entry?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Stmt_adt|
     NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Stmt -> boolean]" |Stmt_adt| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL "MonitoredProgram[CP, string]"
     |AnnotateProgramProperties| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL))
   28391 134 T NIL))
 (|ann_program_preserves_var_decls| 0
  (|ann_program_preserves_var_decls-1| NIL 3392566301 3394354127
   ("" (SKOSIMP*)
    (("" (USE "ann_program_method_correspondence")
      (("" (ASSERT)
        (("" (EXPAND "ann_program_pre")
          (("" (FLATTEN)
            (("" (SPLIT 1)
              (("1" (EXPAND "ann_program")
                (("1" (EXPAND "getFieldDecls")
                  (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                    (("1" (IFF)
                      (("1" (SPLIT 1)
                        (("1" (SKOSIMP*)
                          (("1" (INST 1 "ann_class(mp!1)(c!1)")
                            (("1" (SPLIT 1)
                              (("1" (INST?) NIL NIL)
                               ("2" (EXPAND "ann_class")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (EXPAND "ann_class")
                                (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "getLocalDecls")
                (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (IFF)
                    (("2" (SPLIT 1)
                      (("1" (EXPAND "ann_program")
                        (("1" (SKOSIMP*)
                          (("1" (CASE "name(c!1) = class_name(mva(mp!1))")
                            (("1"
                              (INST 1 "ann_class(mp!1)(c!1)"
                               "ann_method(mp!1)(m!1)")
                              (("1" (ASSERT)
                                (("1" (SPLIT 1)
                                  (("1" (INST?) NIL NIL)
                                   ("2" (EXPAND "ann_class")
                                    (("2" (EXPAND "ann_methods")
                                      (("2" (INST?) NIL NIL)) NIL))
                                    NIL)
                                   ("3" (EXPAND "ann_method")
                                    (("3" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (INST 2 "ann_class(mp!1)(c!1)" "m!1")
                              (("2" (SPLIT 2)
                                (("1" (INST?) NIL NIL)
                                 ("2" (EXPAND "ann_class")
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (INST? -4)
                          (("2" (ASSERT)
                            (("2" (SKOSIMP*)
                              (("2" (SPLIT -6)
                                (("1" (FLATTEN)
                                  (("1" (INST 1 "c1!1" "m1!1")
                                    (("1" (ASSERT)
                                      (("1" (REPLACE -2)
                                        (("1" (EXPAND "ann_method" -5)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (INST 2 "c1!1" "m1!1")
                                    (("2" (ASSERT)
                                      (("2" (REPLACE -1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (EXPAND "subset?")
                (("3" (EXPAND "member")
                  (("3" (SKOSIMP*)
                    (("3" (EXPAND "ann_program")
                      (("3" (EXPAND "getGhostDecls")
                        (("3" (SKOSIMP*)
                          (("3" (INST 1 "ann_class(mp!1)(c!1)")
                            (("1" (SPLIT 1)
                              (("1" (INST?) NIL NIL)
                               ("2" (EXPAND "ann_class")
                                (("2" (EXPAND "union")
                                  (("2" (EXPAND "member")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_method_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL))
   208 207 T SHOSTAK))
 (|ann_program_preserves_var_decl_names| 0
  (|ann_program_preserves_var_decl_names-1| NIL 3392567558 3394354128
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (ASSERT)
        (("" (FLATTEN)
          (("" (REPLACE -1)
            (("" (REPLACE -2)
              (("" (ASSERT)
                (("" (EXPAND "subset?")
                  (("" (EXPAND "member")
                    (("" (EXPAND "var_names")
                      (("" (SKOSIMP*)
                        (("" (INST?)
                          (("" (ASSERT)
                            (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL) NIL
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL))
   74 74 T SHOSTAK))
 (|ann_program_preserves_wf_state| 0
  (|ann_program_preserves_wf_state-1| NIL 3390298254 3394354129
   ("" (SKOSIMP)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (ASSERT)
        (("" (EXPAND "wf_state")
          (("" (SKOSIMP*)
            (("" (INST?)
              (("" (INST?)
                (("" (FLATTEN)
                  (("" (REPLACE -1)
                    (("" (REPLACE -2) (("" (ASSERT) (("" (PROP) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL))
   76 74 T SHOSTAK))
 (|ann_program_preserves_pstate_vars| 0
  (|ann_program_preserves_pstate_vars-1| NIL 3392567663 3394354130
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (ASSERT)
        (("" (EXPAND "wf_state")
          (("" (FLATTEN)
            (("" (EXPAND "wf_state" -6)
              (("" (EXPAND "wf_state" -8)
                (("" (ASSERT)
                  (("" (REPLACE -1)
                    (("" (REPLACE -2)
                      (("" (INST?)
                        (("" (INST?) (("" (ASSERT) (("" (PROP) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL))
   99 97 T SHOSTAK))
 (|ann_program_preserves_ghoststate_vars| 0
  (|ann_program_preserves_ghoststate_vars-1| NIL 3392567791 3394354131
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (ASSERT)
        (("" (FLATTEN)
          (("" (EXPAND "wf_state")
            (("" (FLATTEN)
              (("" (EXPAND "wf_ghoststate")
                (("" (INST?)
                  (("" (INST?)
                    (("" (ASSERT)
                      (("" (EXPAND "id")
                        (("" (ASSERT)
                          (("" (EXPAND "subset?")
                            (("" (EXPAND "member")
                              (("" (EXPAND "var_names")
                                (("" (SKOSIMP*)
                                  (("" (ASSERT)
                                    (("" (INST?)
                                      (("" (ASSERT)
                                        (("" (INST?) (("" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|id_preserves| APPLICATION-JUDGEMENT "S" |identity_props| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL))
   156 156 T SHOSTAK))
 (|get_class_ann_program| 0
  (|get_class_ann_program-1| NIL 3392567967 3394354132
   ("" (SKOSIMP*)
    (("" (REPLACE -4 :HIDE? T)
      (("" (REPLACE -4 :HIDE? T)
        (("" (EXPAND "ann_program")
          (("" (EXPAND "get_class")
            (("" (ASSERT)
              (("" (LIFT-IF -2)
                (("" (SPLIT -2)
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (LIFT-IF)
                        (("1" (ASSERT)
                          (("1" (SPLIT -5)
                            (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL))
   37 37 T SHOSTAK))
 (|same_class_name_ann_class_implies_same_class_TCC1| 0
  (|same_class_name_ann_class_implies_same_class_TCC1-1| NIL 3389418365
   3394354132
   ("" (SKOSIMP) (("" (EXPAND "ann_program_pre") (("" (PROP) NIL NIL)) NIL))
    NIL)
   UNCHECKED ((|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)) 3
   2 T NIL))
 (|same_class_name_ann_class_implies_same_class| 0
  (|same_class_name_ann_class_implies_same_class-1| NIL 3387512899 3394355062
   ("" (SKOSIMP)
    (("" (EXPAND "ann_program")
      (("" (SKOSIMP)
        (("" (EXPAND "ann_program_pre")
          (("" (FLATTEN)
            (("" (LEMMA "wf_program_has_unique_class_names")
              (("" (REPLACE -7)
                (("" (EXPAND "ann_class" -8)
                  (("" (ASSERT)
                    (("" (INST -1 "program(mp!1)" "c1!1" "c1!2")
                      (("" (ASSERT)
                        (("" (EXPAND "wf_MP")
                          (("" (FLATTEN)
                            (("" (ASSERT)
                              (("" (EXPAND "ann_class") (("" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|wf_program_has_unique_class_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL))
   11219 29 T SHOSTAK))
 (|same_method_name_ann_class_implies_same_method_TCC1| 0
  (|same_method_name_ann_class_implies_same_method_TCC1-1| NIL 3389418365
   3394354132
   ("" (SKOSIMP) (("" (EXPAND "ann_program_pre") (("" (PROP) NIL NIL)) NIL))
    NIL)
   UNCHECKED ((|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)) 2
   2 T NIL))
 (|same_method_name_ann_class_implies_same_method| 0
  (|same_method_name_ann_class_implies_same_method-1| NIL 3387516443 3394354133
   ("" (SKOSIMP)
    (("" (LEMMA "wf_class_has_unique_method_names")
      (("" (INST -1 "c2!1" "m2!1" "ann_method(mp!1)(m1!1)")
        (("" (LEMMA "wf_program_has_wf_classes")
          (("" (INST -1 "ann_program(mp!1)" "c2!1")
            (("" (USE "ann_program_yields_wf_program")
              (("" (ASSERT)
                (("" (SPLIT -2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "ann_method" -3 2)
                      (("1" (REPLACE -5)
                        (("1" (EXPAND "ann_class" 1)
                          (("1" (EXPAND "ann_methods") (("1" (INST?) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "ann_program" 1)
                    (("2" (INST 1 "c1!1") (("2" (PROP) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|wf_class_has_unique_method_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|wf_program_has_wf_classes| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|ann_program_yields_wf_program| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL) NIL
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   95 95 T SHOSTAK))
 (|lookup_mthd_ann_program_TCC1| 0
  (|lookup_mthd_ann_program_TCC1-1| NIL 3387195852 3394354133
   ("" (SKOSIMP) (("" (EXPAND "ann_program_pre") (("" (PROP) NIL NIL)) NIL))
    NIL)
   UNCHECKED ((|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)) 3
   4 T NIL))
 (|lookup_mthd_ann_program| 0
  (|lookup_mthd_ann_program-1| NIL 3387195852 3394354133
   ("" (SKOSIMP)
    (("" (LEMMA "lookup_mthd_axiom")
      (("" (INST-CP -1 "program(mp!1)" "s!1" "m1!1" "mn!1" "tgt!1")
        (("" (INST -1 "ann_program(mp!1)" "s!1" "m2!1" "mn!1" "tgt!1")
          (("" (ASSERT)
            (("" (SPLIT)
              (("1" (FLATTEN)
                (("1" (NAME "c1" "down(get_class(program(mp!1))(tgt!1, s!1))")
                  (("1" (REPLACE -1)
                    (("1"
                      (NAME "c2"
                            "down(get_class(ann_program(mp!1))(tgt!1, s!1))")
                      (("1" (REPLACE -1)
                        (("1"
                          (LEMMA
                           "same_class_name_ann_class_implies_same_class")
                          (("1" (INST -1 "mp!1" "c1" "c2")
                            (("1" (ASSERT)
                              (("1" (LEMMA "get_class_ann_program")
                                (("1" (INST -1 "mp!1" "c1" "c2" "s!1" "tgt!1")
                                  (("1" (ASSERT)
                                    (("1" (PROP)
                                      (("1"
                                        (USE
                                         "same_method_name_ann_class_implies_same_method")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2"
                                        (USE
                                         "wf_class_has_unique_method_names")
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "wf_program_has_wf_classes")
                                            (("2"
                                              (INST -1 "program(mp!1)" "c1")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (EXPAND* "ann_program_pre"
                                                   "wf_MP")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-2 -3 1))
                (("2" (USE "ann_program_preserves_wf_state")
                  (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|ann_program_preserves_wf_state| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|get_class_ann_program| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_class_has_unique_method_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|wf_program_has_wf_classes| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|same_method_name_ann_class_implies_same_method| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|same_class_name_ann_class_implies_same_class| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL))
   5 5 T SHOSTAK))
 (|ann_program_preserves_well_behaved_Program| 0
  (|ann_program_preserves_well_behaved_Program-1| NIL 3392570267 3394354140
   ("" (SKOSIMP*)
    (("" (EXPAND "well_behaved_Program")
      (("" (SKOSIMP*)
        (("" (EXPAND "id")
          (("" (USE "ann_program_class_correspondence")
            (("" (ASSERT)
              (("" (INST? -1)
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST?)
                      (("" (ASSERT)
                        (("" (FLATTEN)
                          (("" (SPLIT 1)
                            (("1" (SKOSIMP*)
                              (("1" (HIDE -6)
                                (("1" (REPLACE -3)
                                  (("1" (EXPAND "ann_class" -1)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1"
                                          (INST -5
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s1!1), gvs := gvs(s1!1) #)"
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s2!1), gvs := gvs(s2!1) #)"
                                           "v!1" _)
                                          (("1" (ASSERT)
                                            (("1" (SPLIT -1)
                                              (("1" (FLATTEN)
                                                (("1" (REWRITE "deriv_expr" -2)
                                                  (("1"
                                                    (REWRITE "deriv_expr" -2)
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (INST?)
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "deriv_expr")
                                                      (("2" (SPLIT -5)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (APPLY-EXTENSIONALITY
                                                             2 :HIDE? T)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (POSTPONE) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (HIDE -5)
                                (("2" (USE "ann_program_method_correspondence")
                                  (("2" (ASSERT)
                                    (("2" (INST -1 "c!1" "m!1")
                                      (("2" (ASSERT)
                                        (("2" (SKOSIMP*)
                                          (("2" (SPLIT -3)
                                            (("1" (FLATTEN)
                                              (("1" (REPLACE -2)
                                                (("1" (POSTPONE) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (POSTPONE) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 671 665 T SHOSTAK))
 (|ann_program_defines_MVA_vars2| 0
  (|ann_program_defines_MVA_vars2-1| NIL 3390026041 3394354142
   ("" (SKOSIMP*)
    (("" (TYPEPRED "mp!1")
      (("" (EXPAND "compatible")
        (("" (SKOSIMP*)
          (("" (INST 1 "ann_class(mp!1)(c!1)")
            (("1" (ASSERT)
              (("1" (REPLACE -6 :HIDE? T)
                (("1" (EXPAND "ann_program")
                  (("1" (EXPAND "ann_class")
                    (("1" (EXPAND "union")
                      (("1" (EXPAND "member")
                        (("1" (EXPAND "new_gvds")
                          (("1" (SPLIT 1)
                            (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                             ("2"
                              (INST 1
                               "(# jtype := IntType, name := cp, init_val := Int(unique(init_cp(mva(mp!1)))) #)")
                              (("2" (GRIND) NIL NIL)) NIL)
                             ("3" (SKOSIMP*)
                              (("3"
                                (INST 1
                                 "(# jtype := IntType, name := name_of(q!1), init_val := Int(unique(q!1)) #)")
                                (("1" (ASSERT)
                                  (("1" (FLATTEN) (("1" (INST?) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL)
                             ("4" (SKOSIMP*)
                              (("4"
                                (INST 1
                                 "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
                                (("4" (FLATTEN) (("4" (INST? 4) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "ann_program_pre")
              (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|ann_program_pre| CONST-DECL "boolean" |AnnotateProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL) NIL
    NIL (|name_of| CONST-DECL "(injective?[CP, string])" |AnnotateProgram| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|cp| CONST-DECL "string" |AnnotateProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|well_typed_Program| CONST-DECL "boolean" |WellTypedProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL))
   224 223 T NIL))
 (|ann_program_defines_MVA_vars| 0
  (|ann_program_defines_MVA_vars-1| NIL 3389956467 3394354144
   ("" (SKOSIMP*)
    (("" (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost")
      (("" (USE "ann_program_defines_MVA_vars2")
        (("" (ASSERT)
          (("" (SKOSIMP*)
            (("" (EXPAND "id")
              (("" (EXPAND "var_names")
                (("" (EXPAND "getGhostDecls")
                  (("" (SPLIT 1)
                    (("1" (INST? -11)
                      (("1" (ASSERT)
                        (("1" (INST? 1)
                          (("1" (ASSERT)
                            (("1" (INST? 1) (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP*)
                      (("2" (INST? -12)
                        (("2" (ASSERT)
                          (("2" (INST? -7)
                            (("2" (ASSERT)
                              (("2" (SKOSIMP*)
                                (("2" (INST? 1)
                                  (("2" (ASSERT)
                                    (("2" (INST? 1) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (SKOSIMP*)
                      (("3" (INST? -12)
                        (("3" (ASSERT)
                          (("3" (INST? -8)
                            (("3" (ASSERT)
                              (("3" (SKOSIMP*)
                                (("3" (INST? 1)
                                  (("3" (ASSERT)
                                    (("3" (INST?) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|name_of| CONST-DECL "(injective?[CP, string])" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|cp| CONST-DECL "string" |AnnotateProgram| NIL) NIL
    (|ann_program_defines_MVA_vars2| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-DECL NIL |Stmt_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-DECL NIL |Expr_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   242 241 T SHOSTAK)))

