(|VariableNames|
 (|cp_TCC1| 0
  (|cp_TCC1-1| NIL 3396601202 3396602726
   (""
    (INST 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (SKOSIMP*)
      ((""
        (CASE
            "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (CASE-REPLACE
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :HIDE? T)
          (("1" (USE "infinite_nonempty[Name]") NIL NIL)
           ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (USE "infinite_difference[Name]")
          (("1" (USE "infinite_namespace") NIL NIL)
           ("2" (TYPEPRED "reserved_words")
            (("2" (TYPEPRED "declared_var_names(program(mp!1))")
              (("2" (TYPEPRED "var_names(mva(mp!1))")
                (("2" (EXPAND "forbidden_names") (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|infinite_difference| JUDGEMENT-TCC NIL |infinite_sets_def| NIL)
    (|infinite_namespace| FORMULA-DECL NIL |VariableNames| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) NIL
    (|infinite_nonempty| JUDGEMENT-TCC NIL |infinite_sets_def| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |VariableNames| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |VariableNames| NIL))
   213 210 T NIL)))
(|AnnotateProgram|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396601203 3396602726
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateProgram| NIL)) 2 2 T NIL))
 (|name_of_TCC1| 0
  (|name_of_TCC1-1| NIL 3396601203 3396602727
   ("" (USE "name_of_exists") (("" (SKOSIMP*) (("" (INST?) NIL NIL)) NIL)) NIL)
   UNCHECKED
   (NIL (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of_exists| FORMULA-DECL NIL |AnnotateProgram| NIL))
   130 130 T NIL))
 (|unique_TCC1| 0
  (|unique_TCC1-1| NIL 3396601203 3396602728
   ("" (USE "CP_is_enumerable") (("" (SKOSIMP*) (("" (INST?) NIL NIL)) NIL))
    NIL)
   UNCHECKED
   (NIL (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgram| NIL))
   85 84 T NIL))
 (|new_gvds_TCC1| 0
  (|new_gvds_TCC1-1| NIL 3396601203 3396602735
   ("" (SKOSIMP*)
    ((""
      (CASE-REPLACE "({gd: FieldDecl[Name] |
              jtype(gd) = IntType AND
               (name(gd) = cp[CP, Name](mp!1) AND
                 init_val(gd) = Int[Name](unique(init_cp(mva(mp!1)))))
               OR
               ((EXISTS (q: (cps(mva(mp!1)))):
                   name(gd) = name_of(mp!1)(q) AND
                    jtype(gd) = IntType AND
                     init_val(gd) = Int[Name](unique(q)))
                 OR
                 (EXISTS (v: (vdsA(mva(mp!1)))):
                    name(gd) = name(v) AND
                     jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)))}) = add((# jtype := IntType, name := cp(mp!1), init_val := Int[Name](unique(init_cp(mva(mp!1)))) #), union({gd: FieldDecl[Name] |((EXISTS (q: (cps(mva(mp!1)))):
                   name(gd) = name_of(mp!1)(q) AND
                    jtype(gd) = IntType AND
                     init_val(gd) = Int[Name](unique(q))))}, {gd: FieldDecl[Name] | (EXISTS (v: (vdsA(mva(mp!1)))):
                    name(gd) = name(v) AND
                     jtype(gd) = jtype(v) AND init_val(gd) = init_val(v))}))"
       :HIDE? T)
      (("1" (LEMMA "finite_add[FieldDecl[Name]]")
        (("1" (INST?)
          (("1" (EXPAND "defined?") (("1" (PROPAX) NIL NIL)) NIL)
           ("2" (HIDE 2)
            (("2" (USE "finite_union[FieldDecl[Name]]")
              (("1" (HIDE 2)
                (("1" (TYPEPRED "vdsA(mva(mp!1))")
                  (("1" (EXPAND "is_finite")
                    (("1" (SKOSIMP*)
                      (("1"
                        (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     (EXISTS (v: (vdsA(mva(mp!1)))):
                        name(gd) = name(v) AND
                         jtype(gd) = jtype(v) AND
                          init_val(gd) = init_val(v))})) : f!1(choose({v: (vdsA(mva(mp!1))) | name(gd) = name(v) AND
                         jtype(gd) = jtype(v) AND
                          init_val(gd) = init_val(v)}))")
                        (("1" (EXPAND "injective?")
                          (("1" (SKOSIMP*)
                            (("1" (INST? -1 :WHERE -2)
                              (("1" (ASSERT)
                                (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                                NIL)
                               ("2" (REWRITE "nonempty_exists")
                                (("2" (TYPEPRED "x2!1")
                                  (("2" (SKOSIMP*)
                                    (("2" (TYPEPRED "v!1")
                                      (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (REWRITE "nonempty_exists")
                                (("3" (TYPEPRED "x1!1")
                                  (("3" (SKOSIMP*)
                                    (("3" (TYPEPRED "v!1")
                                      (("3" (INST?) (("3" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "gd!1")
                            (("2" (REWRITE "nonempty_exists")
                              (("2" (SKOSIMP*)
                                (("2" (TYPEPRED "v!1")
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "cps(mva(mp!1))")
                  (("2" (EXPAND "is_finite")
                    (("2" (SKOSIMP*)
                      (("2"
                        (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     ((EXISTS (q: (cps(mva(mp!1)))):
                         name(gd) = name_of(mp!1)(q) AND
                          jtype(gd) = IntType AND
                           init_val(gd) = Int[Name](unique(q))))})) : f!1(choose({q: (cps(mva(mp!1))) |
                         name(gd) = name_of(mp!1)(q) AND
                          jtype(gd) = IntType AND
                           init_val(gd) = Int[Name](unique(q))}))")
                        (("1" (EXPAND "injective?")
                          (("1" (SKOSIMP*)
                            (("1" (INST? -1 :WHERE -2)
                              (("1" (SPLIT -1)
                                (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (REWRITE "nonempty_exists")
                                (("2" (TYPEPRED "x2!1")
                                  (("2" (SKOSIMP*)
                                    (("2" (INST?) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("3" (REWRITE "nonempty_exists")
                                (("3" (TYPEPRED "x1!1")
                                  (("3" (SKOSIMP*)
                                    (("3" (INST?) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "gd!1")
                            (("2" (REWRITE "nonempty_exists")
                              (("2" (SKOSIMP*)
                                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
          (("1" (EXPAND "add")
            (("1" (EXPAND "union")
              (("1" (EXPAND "member")
                (("1" (IFF)
                  (("1" (SPLIT 1)
                    (("1" (SKOSIMP*)
                      (("1" (ASSERT)
                        (("1" (SPLIT -1)
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP*)
                      (("2" (SPLIT -1)
                        (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (GRIND) NIL NIL))
          NIL))
        NIL)
       ("3" (GRIND) NIL NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL) NIL
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_union| JUDGEMENT-TCC NIL |finite_sets| NIL) NIL NIL NIL NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL) NIL NIL NIL NIL NIL NIL
    (|finite_add| FORMULA-DECL NIL |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   678 673 T NIL))
 (|new_gvds_as_union_TCC1| 0
  (|new_gvds_as_union_TCC1-1| NIL 3396609153 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL NIL NIL NIL NIL))
 (|new_gvds_as_union| 0
  (|new_gvds_as_union-1| NIL 3396609157 3396609198
   ("" (SKOSIMP*)
    (("" (EXPAND "add")
      (("" (EXPAND "union")
        (("" (EXPAND "member")
          (("" (EXPAND "new_gvds")
            (("" (APPLY-EXTENSIONALITY :HIDE? T)
              (("1" (IFF)
                (("1" (SPLIT 1)
                  (("1" (SKOSIMP*)
                    (("1" (SPLIT -1)
                      (("1" (FLATTEN)
                        (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                       ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (SPLIT -1)
                      (("1" (REPLACE -1 :DIR RL) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |AnnotateProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |AnnotateProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|x!1| SKOLEM-CONST-DECL "FieldDecl[Name]" |AnnotateProgram| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL))
   4080 162 T SHOSTAK))
 (|new_vars_derived_from_mp| 0
  (|new_vars_derived_from_mp-1| NIL 3396602954 3396603090
   ("" (SKOSIMP*)
    (("" (EXPAND "var_names")
      (("" (EXPAND "new_gvds")
        (("" (SPLIT 1)
          (("1"
            (INST 1
             "(# jtype := IntType, name := cp(mp!1), init_val := Int(unique(init_cp(mva(mp!1)))) #)")
            (("1" (GRIND) NIL NIL)) NIL)
           ("2" (SKOSIMP*)
            (("2"
              (INST 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST?) NIL NIL)) NIL)) NIL)
               ("2" (GRIND) NIL NIL))
              NIL))
            NIL)
           ("3" (SKOSIMP*)
            (("3"
              (INST 1
               "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
              (("3" (FLATTEN) (("3" (ASSERT) (("3" (INST? 3) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   (NIL (|unique| CONST-DECL "(injective?[CP, nat])" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL) NIL
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |AnnotateProgram| NIL)
    NIL (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL))
   13658 178 T SHOSTAK))
 (|wf_new_vars| 0
  (|wf_new_vars-1| NIL 3396603095 3396603326
   ("" (SKOSIMP*)
    (("" (AUTO-REWRITE ("empty?" "disjoint?" "intersection" "member"))
      (("" (SPLIT 1)
        (("1" (SKOSIMP*)
          (("1" (TYPEPRED "name_of(mp!1)(q!1)") (("1" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (TYPEPRED "cp(mp!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)
         ("3" (SKOSIMP*)
          (("3" (TYPEPRED "name_of(mp!1)(q!1)") (("3" (GRIND) NIL NIL)) NIL))
          NIL)
         ("4" (ASSERT)
          (("4" (SKOSIMP*)
            (("4" (EXPAND "var_names")
              (("4" (EXPAND "new_gvds")
                (("4" (SKOSIMP*)
                  (("4" (SPLIT -1)
                    (("1" (FLATTEN)
                      (("1" (TYPEPRED "cp(mp!1)") (("1" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("2" (SKOSIMP*)
                      (("2" (TYPEPRED "name_of(mp!1)(q!1)")
                        (("2" (GRIND) NIL NIL)) NIL))
                      NIL)
                     ("3" (SKOSIMP*)
                      (("3" (CASE-REPLACE "f!1 = v!1" :HIDE? T)
                        (("1" (TYPEPRED "v!1")
                          (("1" (TYPEPRED "mp!1")
                            (("1" (EXPAND "wf_MP")
                              (("1" (EXPAND "wf_MVA")
                                (("1" (EXPAND "wf_vdsA")
                                  (("1" (FLATTEN)
                                    (("1" (ASSERT)
                                      (("1" (INST? -4)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "var_names")
                                            (("1" (INST? 1)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (ASSERT)
          (("5" (SKOSIMP*)
            (("5" (EXPAND "var_names")
              (("5" (EXPAND "new_gvds")
                (("5" (ASSERT)
                  (("5" (SKOSIMP*)
                    (("5" (SPLIT -1)
                      (("1" (FLATTEN)
                        (("1" (TYPEPRED "cp(mp!1)") (("1" (GRIND) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (TYPEPRED "name_of(mp!1)(q!1)")
                          (("2" (GRIND) NIL NIL)) NIL))
                        NIL)
                       ("3" (SKOSIMP*)
                        (("3" (TYPEPRED "mp!1")
                          (("3" (EXPAND "compatible")
                            (("3" (FLATTEN)
                              (("3" (EXPAND "MVA_aut_vars_are_not_prog_vars")
                                (("3" (CASE-REPLACE "f!1 = v!1" :HIDE? T)
                                  (("1" (TYPEPRED "v!1")
                                    (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|MVA_aut_vars_are_not_prog_vars| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   23101 1064 T SHOSTAK))
 (|ann_action_TCC1| 0
  (|ann_action_TCC1-1| NIL 3383987003 3396602735 ("" (TERMINATION-TCC) NIL NIL)
   UNCHECKED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   43 43 NIL NIL))
 (|ann_guard_actions_TCC1| 0
  (|ann_guard_actions_TCC1-1| NIL 3390028807 3396602738
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(x : (({x: [BoolExpr[Name], Stmt[Name]] |
                       EXISTS (t: Transition[CP, Name]):
                         ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))}))) : f!1(choose({t :Transition[CP, Name] |
                         ts!1(t) AND
                          x = (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)), update_vars(mp!1)(t))}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST?)
                        (("1" (ASSERT)
                          (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                         ("2" (GRIND) NIL NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "t!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|guard_to_expression| CONST-DECL "BoolExpr" |MVASemantics| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   339 336 T NIL))
 (|ann_event_TCC1| 0
  (|ann_event_TCC1-2| NIL 3396602486 3396602739
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t :
                    ({t: Transition[CP, Name] |
                         ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (EXPAND "injective?")
              (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   25 25 T NIL)
  (|ann_event_TCC1-1| NIL 3390028807 3396601298
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t :
                ({t: Transition[CP, string] |
                     ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (EXPAND "injective?")
              (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   214 212 T NIL))
 (|ann_event_TCC2| 0
  (|ann_event_TCC2-2| NIL 3396602568 3396602768
   (";;; Proof ann_event_TCC2-1 for formula AnnotateProgram.ann_event_TCC2"
    (SKOSIMP*)
    ((";;; Proof ann_event_TCC2-1 for formula AnnotateProgram.ann_event_TCC2"
      (TYPEPRED "cps(mva(mp!1))")
      ((";;; Proof ann_event_TCC2-1 for formula AnnotateProgram.ann_event_TCC2"
        (EXPAND "is_finite")
        ((";;; Proof ann_event_TCC2-1 for formula AnnotateProgram.ann_event_TCC2"
          (SKOSIMP*)
          ((";;; Proof ann_event_TCC2-1 for formula AnnotateProgram.ann_event_TCC2"
            (INST 1 "N!1" "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                         EXISTS (q: CP):
                           cps(mva(mp!1))(q) AND
                            nonempty?[Transition[CP, Name]]
                                ({t: Transition[CP, Name] |
                                    ts!1(t) AND scp(t) = q})
                             AND
                             c =
                              ann_trans_cp(mp!1)
                                          (q,
                                           {t: Transition[CP, Name]
                                            |
                                            ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                            nonempty?[Transition[CP, Name]]
                                ({t: Transition[CP, Name] |
                                    ts!1(t) AND scp(t) = q})
                             AND
                             c =
                              ann_trans_cp(mp!1)
                                          (q,
                                           {t: Transition[CP, Name]
                                            |
                                            ts!1(t) AND scp(t) = q})}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (HIDE -2)
                      (("1"
                        (NAME "q1"
                              "choose({q: CP |
                            cps(mva(mp!1))(q) AND
                             nonempty?[Transition[CP, Name]]
                                 ({t: Transition[CP, Name] |
                                     ts!1(t) AND scp(t) = q})
                              AND
                              x1!1 =
                               ann_trans_cp(mp!1)
                                           (q,
                                            {t: Transition[CP, Name] |
                                               ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (NAME "q2"
                                "choose({q: CP |
                              cps(mva(mp!1))(q) AND
                               nonempty?[Transition[CP, Name]]
                                   ({t: Transition[CP, Name] |
                                       ts!1(t) AND scp(t) = q})
                                AND
                                x2!1 =
                                 ann_trans_cp(mp!1)
                                             (q,
                                              {t: Transition[CP, Name] |
                                                 ts!1(t) AND scp(t) = q})})")
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2)
                              (("1"
                                (CASE
                                    "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (CASE
                                      "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1" (REPLACE -5) (("1" (ASSERT) NIL)))
                                   ("2" (REPLACE -2 :DIR RL)
                                    (("2" (ASSERT) NIL)))
                                   ("3" (TYPEPRED "ts!1")
                                    (("3" (EXPAND "is_finite")
                                      (("3" (SKOSIMP*)
                                        (("3" (INST 1 "N!2" "f!2")
                                          (("3" (GRIND) NIL)))))))))))
                                 ("2" (REPLACE -1 :DIR RL)
                                  (("2" (ASSERT) NIL)))
                                 ("3" (TYPEPRED "ts!1")
                                  (("3" (EXPAND "is_finite")
                                    (("3" (SKOSIMP*)
                                      (("3" (INST 1 "N!2" "f!2")
                                        (("3" (GRIND) NIL)))))))))))))))
                           ("2" (TYPEPRED "x2!1")
                            (("2" (SKOSIMP*)
                              (("2" (REWRITE "nonempty_exists" 1)
                                (("2" (INST?) (("2" (ASSERT) NIL)))))))))))
                         ("2" (TYPEPRED "x1!1")
                          (("2" (SKOSIMP*)
                            (("2" (REWRITE "nonempty_exists" 1)
                              (("1" (INST?) (("1" (ASSERT) NIL)))
                               ("2" (SKOSIMP*)
                                (("2" (TYPEPRED "ts!1")
                                  (("2" (EXPAND "is_finite")
                                    (("2" (SKOSIMP*)
                                      (("2" (INST 1 "N!2" "f!2")
                                        (("2" (GRIND) NIL)))))))))))))))))
                         ("3" (SKOSIMP*)
                          (("3" (TYPEPRED "ts!1")
                            (("3" (EXPAND "is_finite")
                              (("3" (SKOSIMP*)
                                (("3" (INST 1 "N!2" "f!2")
                                  (("3" (GRIND) NIL)))))))))))))))))
                   ("2" (TYPEPRED "x2!1")
                    (("2" (SKOSIMP*)
                      (("2" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL)))
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL)))))))))))))))))
                   ("3" (TYPEPRED "x1!1")
                    (("3" (SKOSIMP*)
                      (("3" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL)))
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL)))))))))))))))))
                   ("4" (SKOSIMP*)
                    (("4" (TYPEPRED "ts!1")
                      (("4" (EXPAND "is_finite")
                        (("4" (SKOSIMP*)
                          (("4" (INST 1 "N!2" "f!2")
                            (("4" (GRIND) NIL)))))))))))))))))
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists" 1)
                    (("1" (INST?) (("1" (ASSERT) NIL)))
                     ("2" (SKOSIMP*)
                      (("2" (TYPEPRED "ts!1")
                        (("2" (EXPAND "is_finite")
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "N!2" "f!2")
                              (("2" (GRIND) NIL)))))))))))))))))))
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "ts!1")
                (("3" (EXPAND "is_finite")
                  (("3" (SKOSIMP*)
                    (("3" (INST 1 "N!2" "f!2")
                      (("3" (GRIND) NIL))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|ann_guard_actions| CONST-DECL "list[[BoolExpr, Stmt]]" |AnnotateProgram|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL) NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_trans_cp| CONST-DECL "[BoolExpr, Stmt]" |AnnotateProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   2891 2877 NIL NIL)
  (|ann_event_TCC2-1| NIL 3390028807 3396601300
   ("" (SKOSIMP*)
    (("" (TYPEPRED "cps(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: [Expr[string], Stmt[string]] |
                       EXISTS (q: CP):
                         cps(mva(mp!1))(q) AND
                          nonempty?[Transition[CP, string]]
                              ({t: Transition[CP, string] |
                                  ts!1(t) AND scp(t) = q})
                           AND
                           c =
                            ann_trans_cp(mp!1)
                                        (q,
                                         {t: Transition[CP, string]
                                          |
                                          ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                          nonempty?[Transition[CP, string]]
                              ({t: Transition[CP, string] |
                                  ts!1(t) AND scp(t) = q})
                           AND
                           c =
                            ann_trans_cp(mp!1)
                                        (q,
                                         {t: Transition[CP, string]
                                          |
                                          ts!1(t) AND scp(t) = q})}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (HIDE -2)
                      (("1"
                        (NAME "q1"
                              "choose({q: CP |
                 cps(mva(mp!1))(q) AND
                  nonempty?[Transition[CP, string]]
                      ({t: Transition[CP, string] |
                          ts!1(t) AND scp(t) = q})
                   AND
                   x1!1 =
                    ann_trans_cp(mp!1)
                                (q,
                                 {t: Transition[CP, string] |
                                    ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (NAME "q2"
                                "choose({q: CP |
                 cps(mva(mp!1))(q) AND
                  nonempty?[Transition[CP, string]]
                      ({t: Transition[CP, string] |
                          ts!1(t) AND scp(t) = q})
                   AND
                   x2!1 =
                    ann_trans_cp(mp!1)
                                (q,
                                 {t: Transition[CP, string] |
                                    ts!1(t) AND scp(t) = q})})")
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2)
                              (("1"
                                (CASE
                                    "ann_trans_cp(mp!1)(q1, {t : Transition[CP, string] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (CASE
                                      "ann_trans_cp(mp!1)(q2, {t : Transition[CP, string] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1" (REPLACE -5) (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (REPLACE -2 :DIR RL)
                                    (("2" (ASSERT) NIL NIL)) NIL)
                                   ("3" (TYPEPRED "ts!1")
                                    (("3" (EXPAND "is_finite")
                                      (("3" (SKOSIMP*)
                                        (("3" (INST 1 "N!2" "f!2")
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACE -1 :DIR RL)
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (TYPEPRED "ts!1")
                                  (("3" (EXPAND "is_finite")
                                    (("3" (SKOSIMP*)
                                      (("3" (INST 1 "N!2" "f!2")
                                        (("3" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "x2!1")
                            (("2" (SKOSIMP*)
                              (("2" (REWRITE "nonempty_exists" 1)
                                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "x1!1")
                          (("2" (SKOSIMP*)
                            (("2" (REWRITE "nonempty_exists" 1)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (SKOSIMP*)
                                (("2" (TYPEPRED "ts!1")
                                  (("2" (EXPAND "is_finite")
                                    (("2" (SKOSIMP*)
                                      (("2" (INST 1 "N!2" "f!2")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (SKOSIMP*)
                          (("3" (TYPEPRED "ts!1")
                            (("3" (EXPAND "is_finite")
                              (("3" (SKOSIMP*)
                                (("3" (INST 1 "N!2" "f!2")
                                  (("3" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (SKOSIMP*)
                      (("2" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (SKOSIMP*)
                      (("3" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (SKOSIMP*)
                    (("4" (TYPEPRED "ts!1")
                      (("4" (EXPAND "is_finite")
                        (("4" (SKOSIMP*)
                          (("4" (INST 1 "N!2" "f!2") (("4" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists" 1)
                    (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (SKOSIMP*)
                      (("2" (TYPEPRED "ts!1")
                        (("2" (EXPAND "is_finite")
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "N!2" "f!2") (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "ts!1")
                (("3" (EXPAND "is_finite")
                  (("3" (SKOSIMP*)
                    (("3" (INST 1 "N!2" "f!2") (("3" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|ann_guard_actions| CONST-DECL "list[[BoolExpr, Stmt]]" |AnnotateProgram|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL) (< CONST-DECL "bool" |reals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_trans_cp| CONST-DECL "[BoolExpr, Stmt]" |AnnotateProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL))
   197 197 T NIL))
 (|filter_event_TCC1| 0
  (|filter_event_TCC1-1| NIL 3383987003 3396602863
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts(a!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                       ts(a!1)(t) AND
                        etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            (("" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   1307 204 T NIL))
 (|ann_method_TCC1| 0
  (|ann_method_TCC1-1| NIL 3389418364 3396602774
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "wf_MP" "complete") (("" (FLATTEN) NIL NIL)) NIL)) NIL)
   UNCHECKED
   ((|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   3 3 T NIL))
 (|ann_methods_TCC1| 0
  (|ann_methods_TCC1-1| NIL 3383987003 3396602899
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ms!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                       EXISTS (n: Method[Name]):
                         ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "n!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "m!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL) NIL
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   3063 45 T NIL))
 (|ann_program_TCC1| 0
  (|ann_program_TCC1-1| NIL 3383987003 3396602930
   ("" (SKOSIMP)
    (("" (TYPEPRED "classes(program(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                         EXISTS (c1: Class[Name]):
                           classes(program(mp!1))(c1) AND
                            c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "c1!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   2733 68 T NIL)))
(|AnnotateProgramProperties|
 (|CP_is_enumerable| 0
  (|CP_is_enumerable-1| NIL 3392611795 3392611802 ("" (POSTPONE) NIL NIL)
   UNCHECKED NIL 7000 150 T SHOSTAK))
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396601223 3396603425
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateProgramProperties| NIL))
   318 1 T NIL))
 (|IMP_AnnotateProgram_TCC1| 0
  (|IMP_AnnotateProgram_TCC1-1| NIL 3390292134 3396602776
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 20
   20 T NIL))
 (|IMP_AnnotateProgram_TCC2| 0
  (|IMP_AnnotateProgram_TCC2-1| NIL 3395037658 3396602776
   ("" (USE "name_of_exists") NIL NIL) UNCHECKED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 2 2 T
   NIL))
 (|ann_program_class_correspondence| 0
  (|ann_program_class_correspondence-1| NIL 3392569211 3396602776
   ("" (SKOSIMP*) (("" (EXPAND "ann_program") (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   UNFINISHED ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)) 3 3
   T SHOSTAK))
 (|ann_program_method_correspondence| 0
  (|ann_program_method_correspondence-1| NIL 3392569244 3396602777
   ("" (SKOSIMP*)
    (("" (USE "ann_program_class_correspondence")
      (("" (ASSERT)
        (("" (SKOSIMP*)
          (("" (EXPAND* "ann_class" "ann_methods")
            (("" (INST 1 "c1!1" _)
              (("" (ASSERT)
                (("" (LIFT-IF)
                  (("" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (REPLACE -2 -5) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL))
   99 99 T SHOSTAK))
 (|ann_program_preserves_var_decls| 0
  (|ann_program_preserves_var_decls-1| NIL 3392566301 3396602779
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (EXPAND* "ann_program" "getFieldDecls")
        (("1" (APPLY-EXTENSIONALITY :HIDE? T)
          (("1" (IFF)
            (("1" (SPLIT)
              (("1" (SKOSIMP*)
                (("1" (INST 1 "ann_class(mp!1)(c!1)")
                  (("1" (SPLIT)
                    (("1" (INST?) NIL NIL)
                     ("2" (EXPAND "ann_class") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (EXPAND "ann_class")
                      (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "getLocalDecls")
        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
          (("2" (IFF)
            (("2" (SPLIT)
              (("1" (EXPAND "ann_program")
                (("1" (SKOSIMP*)
                  (("1" (CASE "name(c!1) = class_name(mva(mp!1))")
                    (("1"
                      (INST 1 "ann_class(mp!1)(c!1)" "ann_method(mp!1)(m!1)")
                      (("1" (SPLIT 1)
                        (("1" (INST?) NIL NIL)
                         ("2" (EXPAND* "ann_class" "ann_methods")
                          (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)
                         ("3" (EXPAND "ann_method") (("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST 2 "ann_class(mp!1)(c!1)" "m!1")
                      (("2" (SPLIT 2)
                        (("1" (INST?) NIL NIL)
                         ("2" (EXPAND "ann_class") (("2" (ASSERT) NIL NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (USE "ann_program_method_correspondence")
                  (("2" (ASSERT)
                    (("2" (SKOSIMP*)
                      (("2" (SPLIT -)
                        (("1" (FLATTEN)
                          (("1" (INST 1 "c1!1" "m1!1")
                            (("1" (ASSERT)
                              (("1" (REPLACE -2)
                                (("1" (EXPAND "ann_method" -7)
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (INST 2 "c1!1" "m1!1")
                            (("2" (ASSERT)
                              (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND* "subset?" "member")
        (("3" (SKOSIMP*)
          (("3" (EXPAND* "ann_program" "getGhostDecls")
            (("3" (SKOSIMP*)
              (("3" (INST 1 "ann_class(mp!1)(c!1)")
                (("3" (SPLIT)
                  (("1" (INST?) NIL NIL)
                   ("2" (EXPAND* "ann_class" "union" "member")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_program_method_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   209 209 T SHOSTAK))
 (|ann_program_preserves_var_decl_names| 0
  (|ann_program_preserves_var_decl_names-1| NIL 3392567558 3396602780
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (FLATTEN)
        (("" (REPLACE -1)
          (("" (REPLACE -2)
            (("" (ASSERT)
              (("" (EXPAND* "subset?" "member" "var_names")
                (("" (SKOSIMP*)
                  (("" (INST?)
                    (("" (ASSERT) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL)
   110 110 T SHOSTAK))
 (|ann_program_add_ghost_var_decls| 0
  (|ann_program_add_ghost_var_decls-1| NIL 3396607040 3396607483
   ("" (SKOSIMP*)
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (EXPAND "getGhostDecls")
        (("" (EXPAND "union")
          (("" (EXPAND "member")
            (("" (IFF)
              (("" (SPLIT 1)
                (("1" (SKOSIMP*)
                  (("1" (USE "ann_program_class_correspondence")
                    (("1" (ASSERT)
                      (("1" (SKOSIMP*)
                        (("1" (INST 1 "c1!1")
                          (("1" (ASSERT)
                            (("1" (REPLACE -2 :HIDE? T)
                              (("1" (EXPAND "ann_class")
                                (("1" (EXPAND "union")
                                  (("1" (EXPAND "member")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (SPLIT -1)
                    (("1" (SKOSIMP*)
                      (("1" (INST 1 "ann_class(mp!1)(c!1)")
                        (("1" (EXPAND "ann_program")
                          (("1" (SPLIT 1)
                            (("1" (INST?) NIL NIL)
                             ("2" (EXPAND "ann_class")
                              (("2" (ASSERT)
                                (("2" (EXPAND "union")
                                  (("2" (EXPAND "member")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "mp!1")
                      (("2" (EXPAND "compatible")
                        (("2" (FLATTEN)
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "ann_class(mp!1)(c!1)")
                              (("2" (EXPAND "ann_program")
                                (("2" (SPLIT 1)
                                  (("1" (INST?) NIL NIL)
                                   ("2" (EXPAND "ann_class")
                                    (("2" (EXPAND "union")
                                      (("2" (EXPAND "member")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   37314 829 T SHOSTAK))
 (|ann_program_preserves_wf_state| 0
  (|ann_program_preserves_wf_state-1| NIL 3390298254 3396602781
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND "wf_state")
        (("" (SKOSIMP*)
          (("" (INST?)
            (("" (FLATTEN)
              (("" (REPLACE -1) (("" (REPLACE -2) (("" (PROP) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL))
   72 72 T SHOSTAK))
 (|ann_program_preserves_pstate_vars| 0
  (|ann_program_preserves_pstate_vars-1| NIL 3392567663 3396602782
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND "wf_state")
        (("" (FLATTEN)
          (("" (EXPAND "wf_state")
            (("" (REPLACE -1)
              (("" (REPLACE -2)
                (("" (INST?) (("" (INST?) (("" (PROP) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL))
   94 94 T SHOSTAK))
 (|ann_program_preserves_ghoststate_vars| 0
  (|ann_program_preserves_ghoststate_vars-1| NIL 3392567791 3396602783
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND* "wf_state" "wf_ghoststate")
        (("" (FLATTEN)
          (("" (INST?)
            (("" (INST?)
              (("" (EXPAND* "id" "subset?" "member" "var_names")
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST?) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL))
   130 130 T SHOSTAK))
 (|ann_program_yields_wf_program| 0
  (|ann_program_yields_wf_program-1| NIL 3393664525 3396602797
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "wf_MP" "wf_Program")
      (("" (PROP)
        (("1" (HIDE-ALL-BUT (-3 1))
          (("1" (EXPAND "wf_program_variables_disjoint_def")
            (("1" (PROP)
              (("1" (HIDE -2 -3)
                (("1"
                  (EXPAND* "disjoint?" "empty?" "intersection" "member"
                   "var_names")
                  (("1" (SKOSIMP*)
                    (("1" (INST?)
                      (("1" (SPLIT)
                        (("1" (INST?)
                          (("1" (HIDE -3)
                            (("1"
                              (EXPAND* "getFieldDecls" "ann_program"
                               "ann_class")
                              (("1" (SKOSIMP*)
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -2 :HIDE? T)
                                      (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE -1)
                          (("2" (INST?)
                            (("2"
                              (EXPAND* "getLocalDecls" "ann_program"
                               "ann_class")
                              (("2" (SKOSIMP*)
                                (("2" (ASSERT)
                                  (("2" (LIFT-IF)
                                    (("2" (SPLIT -)
                                      (("1" (FLATTEN)
                                        (("1"
                                          (EXPAND* "ann_methods" "ann_method")
                                          (("1" (REPLACE -2 :HIDE? T)
                                            (("1" (BETA)
                                              (("1" (SKOSIMP)
                                                (("1" (INST?)
                                                  (("1" (ASSERT)
                                                    (("1" (REPLACE -5 :HIDE? T)
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (INST?) (("2" (GROUND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE -1 -3)
                (("2"
                  (EXPAND* "disjoint?" "empty?" "intersection" "member"
                   "var_names")
                  (("2" (SKOSIMP*)
                    (("2" (INST?)
                      (("2" (SPLIT)
                        (("1" (INST?)
                          (("1" (HIDE -3)
                            (("1"
                              (EXPAND* "getLocalDecls" "ann_program"
                               "ann_class")
                              (("1" (SKOSIMP*)
                                (("1" (LIFT-IF)
                                  (("1" (SPLIT -)
                                    (("1" (FLATTEN)
                                      (("1" (REPLACE -3 :HIDE? T)
                                        (("1" (BETA)
                                          (("1"
                                            (EXPAND* "ann_methods"
                                             "ann_method")
                                            (("1" (SKOSIMP)
                                              (("1" (INST?)
                                                (("1" (ASSERT)
                                                  (("1" (REPLACE -5 :HIDE? T)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (INST?) (("2" (GROUND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (USE "wf_program_variables_disjoint")
                          (("2" (TYPEPRED "mp!1")
                            (("2" (EXPAND "wf_MP")
                              (("2" (PROP)
                                (("2" (BETA)
                                  (("2" (FLATTEN)
                                    (("2" (HIDE -1 -3)
                                      (("2"
                                        (EXPAND* "disjoint?" "intersection"
                                         "empty?" "member" "var_names")
                                        (("2" (INST - "x!1")
                                          (("2" (HIDE -2 -3 2)
                                            (("2"
                                              (USE
                                               "ann_program_preserves_var_decls")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (REPLACE -2 :DIR RL :HIDE? T)
                                                  (("2" (HIDE -1 -2)
                                                    (("2" (SPLIT)
                                                      (("1" (INST?)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND*
                                                         "getGhostDecls"
                                                         "ann_program"
                                                         "ann_class")
                                                        (("2" (SKOSIMP*)
                                                          (("2" (INST?)
                                                            (("2" (ASSERT)
                                                              (("2" (INST?)
                                                                (("2" (LIFT-IF)
                                                                  (("2"
                                                                    (GROUND)
                                                                    (("2"
                                                                      (REPLACE
                                                                       -2
                                                                       :HIDE? T)
                                                                      (("2"
                                                                        (BETA)
                                                                        (("2"
                                                                          (EXPAND*
                                                                           "union"
                                                                           "member"
                                                                           "compatible"
                                                                           "wf_new_vars")
                                                                          (("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (HIDE
                                                                               -2
                                                                               -3
                                                                               -5)
                                                                              (("2"
                                                                                (EXPAND*
                                                                                 "disjoint?"
                                                                                 "empty?"
                                                                                 "intersection"
                                                                                 "member"
                                                                                 "declared_var_names")
                                                                                (("2"
                                                                                  (INST
                                                                                   -
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (PROP)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "var_names")
                                                                                      (("1"
                                                                                        (INST?)
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       1
                                                                                       3)
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "var_names")
                                                                                        (("2"
                                                                                          (INST?)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("3" (HIDE -1 -2)
                (("3"
                  (EXPAND* "disjoint?" "empty?" "intersection" "member"
                   "var_names")
                  (("3" (SKOSIMP*)
                    (("3" (INST?)
                      (("3" (SPLIT)
                        (("1" (HIDE -3)
                          (("1"
                            (EXPAND* "getFieldDecls" "ann_program" "ann_class")
                            (("1" (SKOSIMP*)
                              (("1" (INST?)
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -2 :HIDE? T)
                                      (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (USE "wf_program_variables_disjoint")
                          (("2" (TYPEPRED "mp!1")
                            (("2" (EXPAND "wf_MP")
                              (("2" (PROP)
                                (("2" (BETA)
                                  (("2" (FLATTEN)
                                    (("2" (HIDE -1 -2)
                                      (("2"
                                        (EXPAND* "disjoint?" "intersection"
                                         "empty?" "member" "var_names")
                                        (("2" (INST - "x!1")
                                          (("2"
                                            (USE
                                             "ann_program_preserves_var_decls")
                                            (("2" (FLATTEN)
                                              (("2"
                                                (REPLACE -1 :DIR RL :HIDE? T)
                                                (("2" (HIDE -1 -2 -4 -5 2)
                                                  (("2" (SPLIT)
                                                    (("1" (INST?)
                                                      (("1" (PROP) NIL NIL))
                                                      NIL)
                                                     ("2" (INST 1 "f!2")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (EXPAND*
                                                           "getGhostDecls"
                                                           "ann_program"
                                                           "ann_class")
                                                          (("2" (SKOSIMP*)
                                                            (("2" (LIFT-IF)
                                                              (("2" (SPLIT)
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (REPLACE -3
                                                                             :HIDE? T)
                                                                    (("1"
                                                                      (EXPAND*
                                                                       "ann_methods"
                                                                       "ann_method"
                                                                       "union"
                                                                       "member")
                                                                      (("1"
                                                                        (INST?)
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND*
                                                                             "compatible"
                                                                             "wf_new_vars")
                                                                            (("1"
                                                                              (FLATTEN)
                                                                              (("1"
                                                                                (HIDE
                                                                                 -3
                                                                                 -4
                                                                                 -6)
                                                                                (("1"
                                                                                  (EXPAND*
                                                                                   "disjoint?"
                                                                                   "intersection"
                                                                                   "empty?"
                                                                                   "member"
                                                                                   "declared_var_names")
                                                                                  (("1"
                                                                                    (INST
                                                                                     -
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "var_names")
                                                                                        (("1"
                                                                                          (INST?)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (HIDE
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "var_names")
                                                                                          (("2"
                                                                                            (INST?)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (INST?)
                                                                  (("2"
                                                                    (GROUND)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT (-1 -4 1))
          (("2" (EXPAND "wf_program_variables_not_reserved_words_def")
            (("2" (EXPAND* "disjoint?" "empty?" "intersection" "member")
              (("2" (SKOSIMP)
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (EXPAND "declared_var_names")
                      (("2" (PROP)
                        (("1" (HIDE 2 3)
                          (("1" (EXPAND* "var_names" "getFieldDecls")
                            (("1" (SKOSIMP*)
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (EXPAND* "ann_program" "ann_class")
                                    (("1" (SKOSIMP)
                                      (("1" (INST?)
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -2 :HIDE? T)
                                            (("1" (LIFT-IF)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 1 3)
                          (("2" (EXPAND* "var_names" "getLocalDecls")
                            (("2" (SKOSIMP*)
                              (("2" (INST?)
                                (("2" (ASSERT)
                                  (("2" (EXPAND* "ann_program" "ann_class")
                                    (("2" (SKOSIMP)
                                      (("2" (REPLACE -2 :HIDE? T)
                                        (("2" (LIFT-IF)
                                          (("2" (SPLIT -)
                                            (("1" (FLATTEN)
                                              (("1" (BETA)
                                                (("1"
                                                  (EXPAND* "ann_methods"
                                                   "ann_method")
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST?)
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (REPLACE -4 :HIDE? T)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST?)
                                              (("2" (PROP) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (HIDE 1 2)
                          (("3" (EXPAND* "var_names" "getGhostDecls")
                            (("3" (SKOSIMP*)
                              (("3" (EXPAND* "ann_program" "ann_class")
                                (("3" (SKOSIMP)
                                  (("3" (INST?)
                                    (("3" (ASSERT)
                                      (("3" (INST?)
                                        (("3" (ASSERT)
                                          (("3" (REPLACE -2 :HIDE? T)
                                            (("3" (LIFT-IF)
                                              (("3" (GROUND)
                                                (("3"
                                                  (EXPAND* "union" "member"
                                                   "compatible" "wf_new_vars")
                                                  (("3" (FLATTEN)
                                                    (("3" (HIDE -6 -8 -9)
                                                      (("3"
                                                        (EXPAND* "disjoint?"
                                                         "empty?"
                                                         "intersection"
                                                         "member")
                                                        (("3"
                                                          (INST - "name(f!1)")
                                                          (("3" (ASSERT)
                                                            (("3"
                                                              (EXPAND
                                                               "var_names")
                                                              (("3" (INST?) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE-ALL-BUT (-5 1))
          (("3" (EXPAND "wf_program_has_unique_class_names_def")
            (("3" (SKOSIMP)
              (("3" (EXPAND* "ann_program" "ann_class")
                (("3" (SKOSIMP*)
                  (("3" (INST - "c1!2" "c1!3")
                    (("3" (ASSERT)
                      (("3" (SPLIT -6)
                        (("1" (HIDE -6)
                          (("1" (REPLACE -3 :HIDE? T)
                            (("1" (REPLACE -4 :HIDE? T)
                              (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (REPLACE -2 :HIDE? T)
                            (("2" (REPLACE -3 :HIDE? T)
                              (("2" (LIFT-IF)
                                (("2" (ASSERT)
                                  (("2" (PROP)
                                    (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE-ALL-BUT (-6 1))
          (("4" (SKOSIMP)
            (("4" (EXPAND* "ann_program" "ann_class")
              (("4" (SKOSIMP)
                (("4" (INST - "c1!1")
                  (("4" (ASSERT)
                    (("4" (REPLACE -2 :HIDE? T)
                      (("4" (EXPAND* "wf_Class" "ann_methods" "ann_method")
                        (("4" (SKOSIMP)
                          (("4" (ASSERT)
                            (("4" (SPLIT)
                              (("1" (SPLIT)
                                (("1" (SKOSIMP*)
                                  (("1" (INST - "n!1" "n!2")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (PROP) NIL NIL))
                                NIL)
                               ("2" (PROP)
                                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (HIDE-ALL-BUT (-7 1))
          (("5" (SKOSIMP)
            (("5" (INST?)
              (("5" (USE "ann_program_preserves_var_decls")
                (("5" (FLATTEN)
                  (("5" (EXPAND* "subset?" "member")
                    (("5" (EXPAND "var_names")
                      (("5" (SKOSIMP)
                        (("5" (INST?)
                          (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("6" (HIDE-ALL-BUT (-8 1))
          (("6" (EXPAND "invariants_are_bool_expr")
            (("6" (SKOSIMP)
              (("6" (EXPAND* "ann_program" "ann_class")
                (("6" (SKOSIMP)
                  (("6" (REPLACE -2 :HIDE? T)
                    (("6" (LIFT-IF)
                      (("6" (SPLIT)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (SKOSIMP)
                          (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_program_variables_disjoint_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL) NIL
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_program_variables_disjoint| FORMULA-DECL NIL |WellFormedProgram| NIL)
    NIL (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|wf_program_variables_not_reserved_words_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL) NIL
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL))
   1327 1320 T SHOSTAK))
 (|ann_program_preserves_well_behaved_Program| 0
  (|ann_program_preserves_well_behaved_Program-1| NIL 3392570267 3396602798
   ("" (SKOSIMP*)
    (("" (EXPAND "well_behaved_Program")
      (("" (SKOSIMP*)
        (("" (EXPAND "id")
          (("" (USE "ann_program_class_correspondence")
            (("" (ASSERT)
              (("" (INST? -1)
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST?)
                      (("" (ASSERT)
                        (("" (FLATTEN)
                          (("" (SPLIT 1)
                            (("1" (SKOSIMP*)
                              (("1" (HIDE -6)
                                (("1" (REPLACE -3)
                                  (("1" (EXPAND "ann_class" -1)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1"
                                          (INST -5
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s1!1), gvs := gvs(s1!1) #)"
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s2!1), gvs := gvs(s2!1) #)"
                                           "v!1" _)
                                          (("1" (ASSERT)
                                            (("1" (SPLIT -1)
                                              (("1" (FLATTEN)
                                                (("1" (REWRITE "deriv_expr" -2)
                                                  (("1"
                                                    (REWRITE "deriv_expr" -2)
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (INST?)
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "deriv_expr")
                                                      (("2" (SPLIT -5)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (APPLY-EXTENSIONALITY
                                                             2 :HIDE? T)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (POSTPONE) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (HIDE -5)
                                (("2" (USE "ann_program_method_correspondence")
                                  (("2" (ASSERT)
                                    (("2" (INST -1 "c!1" "m!1")
                                      (("2" (ASSERT)
                                        (("2" (SKOSIMP*)
                                          (("2" (SPLIT -3)
                                            (("1" (FLATTEN)
                                              (("1" (REPLACE -2)
                                                (("1" (POSTPONE) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (POSTPONE) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 141 141 T SHOSTAK))
 (|get_class_ann_program| 0
  (|get_class_ann_program-1| NIL 3392567967 3396602799
   ("" (SKOSIMP*)
    (("" (REPLACE -3 :HIDE? T)
      (("" (REPLACE -3 :HIDE? T)
        (("" (EXPAND* "ann_program" "get_class")
          (("" (ASSERT)
            (("" (LIFT-IF -2)
              (("" (SPLIT -2)
                (("1" (FLATTEN)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (SPLIT -4)
                          (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL))
   41 41 T SHOSTAK))
 (|same_class_name_ann_class_implies_same_class| 0
  (|same_class_name_ann_class_implies_same_class-1| NIL 3387512899 3396602799
   ("" (SKOSIMP)
    (("" (EXPAND "ann_program")
      (("" (SKOSIMP)
        (("" (LEMMA "wf_program_has_unique_class_names")
          (("" (INST -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (TYPEPRED "mp!1")
              (("" (EXPAND "wf_MP")
                (("" (EXPAND "ann_class")
                  (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|wf_program_has_unique_class_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   37 37 T SHOSTAK))
 (|same_method_name_ann_class_implies_same_method| 0
  (|same_method_name_ann_class_implies_same_method-1| NIL 3387516443 3396602800
   ("" (SKOSIMP)
    (("" (LEMMA "wf_class_has_unique_method_names")
      (("" (INST -1 "c2!1" "m2!1" "ann_method(mp!1)(m1!1)")
        (("" (LEMMA "wf_program_has_wf_classes")
          (("" (INST -1 "ann_program(mp!1)" "c2!1")
            (("" (USE "ann_program_yields_wf_program")
              (("" (ASSERT)
                (("" (SPLIT -2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "ann_method" -3 2)
                      (("1" (REPLACE -4)
                        (("1" (EXPAND "ann_class" 1)
                          (("1" (EXPAND "ann_methods") (("1" (INST?) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "ann_program" 1)
                    (("2" (INST 1 "c1!1") (("2" (PROP) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|wf_class_has_unique_method_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_program_has_wf_classes| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|ann_program_yields_wf_program| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   98 97 T SHOSTAK))
 (|lookup_mthd_ann_program| 0
  (|lookup_mthd_ann_program-1| NIL 3387195852 3396602800
   ("" (SKOSIMP)
    (("" (LEMMA "lookup_mthd_axiom")
      (("" (INST-CP -1 "program(mp!1)" "s!1" "m1!1" "mn!1" "tgt!1")
        (("" (INST -1 "ann_program(mp!1)" "s!1" "m2!1" "mn!1" "tgt!1")
          (("" (ASSERT)
            (("" (SPLIT)
              (("1" (FLATTEN)
                (("1" (NAME "c1" "down(get_class(program(mp!1))(tgt!1, s!1))")
                  (("1" (REPLACE -1)
                    (("1"
                      (NAME "c2"
                            "down(get_class(ann_program(mp!1))(tgt!1, s!1))")
                      (("1" (REPLACE -1)
                        (("1"
                          (LEMMA
                           "same_class_name_ann_class_implies_same_class")
                          (("1" (INST -1 "mp!1" "c1" "c2")
                            (("1" (ASSERT)
                              (("1" (LEMMA "get_class_ann_program")
                                (("1" (INST -1 "mp!1" "c1" "c2" "s!1" "tgt!1")
                                  (("1" (ASSERT)
                                    (("1" (PROP)
                                      (("1"
                                        (USE
                                         "same_method_name_ann_class_implies_same_method")
                                        (("1" (ASSERT) NIL NIL)) NIL)
                                       ("2"
                                        (USE
                                         "wf_class_has_unique_method_names")
                                        (("2" (ASSERT)
                                          (("2"
                                            (LEMMA "wf_program_has_wf_classes")
                                            (("2"
                                              (INST -1 "program(mp!1)" "c1")
                                              (("2" (ASSERT)
                                                (("2"
                                                  (EXPAND* "ann_program_pre"
                                                   "wf_MP")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-2 -3 1))
                (("2" (USE "ann_program_preserves_wf_state")
                  (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) NIL
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Excpt| TYPE-DECL NIL |Excpt_adt| NIL)
    (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|PState| TYPE-EQ-DECL NIL |State| NIL)
    (|ann_program_preserves_wf_state| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|get_class_ann_program| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_class_has_unique_method_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|wf_program_has_wf_classes| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|same_method_name_ann_class_implies_same_method| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|same_class_name_ann_class_implies_same_class| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL))
   40 40 T SHOSTAK))
 (|ann_program_defines_MVA_vars| 0
  (|ann_program_defines_MVA_vars-2| NIL 3394875181 3396602801
   ("" (SKOSIMP)
    (("" (TYPEPRED "mp!1")
      (("" (EXPAND* "compatible" "var_names" "new_gvds")
        (("" (SKOSIMP*)
          (("" (INST 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (ASSERT)
              (("" (SPLIT 1)
                (("1" (EXPAND "ann_program") (("1" (INST?) NIL NIL)) NIL)
                 ("2" (EXPAND "ann_class") (("2" (PROPAX) NIL NIL)) NIL)
                 ("3" (EXPAND* "ann_class" "union" "member" "new_gvds")
                  (("3" (PROP) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |AnnotateProgram| NIL))
   38 38 T NIL)
  (|ann_program_defines_MVA_vars-1| NIL 3389956467 3394872339
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost"
       "id")
      (("" (PROP)
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (EXPAND* "getGhostDecls" "var_names")
              (("1" (USE "ann_program_defines_MVA_vars2")
                (("1" (SPLIT -)
                  (("1" (SKOSIMP)
                    (("1" (INST?)
                      (("1" (ASSERT)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND* "var_names" "new_gvds" "union" "member")
                    (("2" (POSTPONE) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNTRIED
   ((|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL))
   974962 4000 T SHOSTAK))
 (|new_vars_ghost_in_ann_program| 0
  (|new_vars_ghost_in_ann_program-1| NIL 3394876088 3396602801
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost"
       "id")
      (("" (FLATTEN)
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE -1 2)
              (("" (EXPAND "getGhostDecls")
                (("" (EXPAND "var_names" 1)
                  (("" (USE "ann_program_defines_MVA_vars")
                    (("" (ASSERT)
                      (("" (SKOSIMP)
                        (("" (INST?)
                          (("" (ASSERT)
                            (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED
   ((|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL) NIL
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program_defines_MVA_vars| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions|
     NIL))
   40 41 T SHOSTAK)))

