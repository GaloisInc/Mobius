(VariableNames
 (cp_TCC1 0
  (cp_TCC1-1 nil 3396601202 3399203291
   (""
    (inst 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (skosimp*)
      ((""
        (case "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (case-replace
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :hide? t)
          (("1" (use "infinite_nonempty[Name]") nil nil)
           ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
            nil))
          nil)
         ("2" (use "infinite_difference[Name]")
          (("1" (use "infinite_namespace") nil nil)
           ("2" (typepred "reserved_words")
            (("2" (typepred "declared_var_names(program(mp!1))")
              (("2" (typepred "var_names(mva(mp!1))")
                (("2" (expand "forbidden_names")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((infinite_difference judgement-tcc nil infinite_sets_def nil)
    (infinite_namespace formula-decl nil VariableNames nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, Name]" VariableNames
     nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (member const-decl "bool" sets nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (injective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (difference const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil VariableNames nil)
    (Name formal-nonempty-type-decl nil VariableNames nil))
   1314 1270 t nil)))
(NewVariableDeclarations
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-2 nil 3397386732 3398596640
   (";;; Proof IMP_VariableNames_TCC1-1 for formula AnnotateProgram.IMP_VariableNames_TCC1"
    (use "infinite_namespace") nil
    ";;; developed with SHOSTAK decision procedures")
   unchecked (nil) 20 19 nil nil)
  (IMP_VariableNames_TCC1-1 nil 3397386612 nil
   ("" (assuming-tcc) nil nil) nil nil nil nil nil nil))
 (name_of_TCC1 0
  (name_of_TCC1-2 nil 3397386758 3399203292
   (";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
    (use "name_of_exists")
    ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
      (skosimp*)
      ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   proved
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[mp: (wf_MP) -> [CP -> (legal_names(mp))]]"
     NewVariableDeclarations nil)
    (name_of_exists formula-decl nil NewVariableDeclarations nil))
   367 370 nil nil)
  (name_of_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (unique_TCC1 0
  (unique_TCC1-2 nil 3397386786 3399203293
   (";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
    (use "CP_is_enumerable")
    ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
      (skosimp*)
      ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   proved
   ((CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[CP -> nat]" NewVariableDeclarations nil)
    (CP_is_enumerable formula-decl nil NewVariableDeclarations nil))
   336 290 nil nil)
  (unique_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (new_cp_gvd_TCC1 0
  (new_cp_gvd_TCC1-1 nil 3398096023 3399203293
   ("" (subtype-tcc) nil nil) proved
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (defined? const-decl "boolean" ValProp nil))
   863 860 nil nil))
 (new_cps_gvds_TCC1 0
  (new_cps_gvds_TCC1-1 nil 3398096023 3399203294
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
(q: (cps(mva(mp!1))))|
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1)
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (apply-extensionality :hide? t) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "q!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gd!1 skolem-const-decl "({gd: FieldDecl[Name] |
    EXISTS (q: (cps(mva(mp!1)))):
      name(gd) = name_of(mp!1)(q) AND
       jtype(gd) = IntType AND init_val(gd) = Int[Name](unique(q))})"
     NewVariableDeclarations nil)
    (q!1 skolem-const-decl "(cps(mva(mp!1)))" NewVariableDeclarations
     nil)
    (x1!1 skolem-const-decl "({gd: FieldDecl[Name] |
    EXISTS (q: (cps(mva(mp!1)))):
      name(gd) = name_of(mp!1)(q) AND
       jtype(gd) = IntType AND init_val(gd) = Int[Name](unique(q))})"
     NewVariableDeclarations nil)
    (x2!1 skolem-const-decl "({gd: FieldDecl[Name] |
    EXISTS (q: (cps(mva(mp!1)))):
      name(gd) = name_of(mp!1)(q) AND
       jtype(gd) = IntType AND init_val(gd) = Int[Name](unique(q))})"
     NewVariableDeclarations nil)
    (q!1 skolem-const-decl "(cps(mva(mp!1)))" NewVariableDeclarations
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (q!1 skolem-const-decl "(cps(mva(mp!1)))" NewVariableDeclarations
     nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (FieldDecl type-eq-decl nil Program nil)
    (mp!1 skolem-const-decl "(wf_MP[CP, Name])" NewVariableDeclarations
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nonempty? const-decl "bool" sets nil))
   1044 1020 t nil))
 (new_mva_vars_gvds_TCC1 0
  (new_mva_vars_gvds_TCC1-1 nil 3398096023 3399203295
   ("" (skosimp*)
    (("" (typepred "vdsA(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (v: (vdsA(mva(mp!1)))):
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)})) : f!1(choose({
                     (v: (vdsA(mva(mp!1)))) |
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "v!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst 1 "v!1") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst 1 "v!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gd!1 skolem-const-decl "({gd: FieldDecl[Name] |
    EXISTS (v: (vdsA(mva(mp!1)))):
      name(gd) = name(v) AND
       jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)})"
     NewVariableDeclarations nil)
    (v!1 skolem-const-decl "(vdsA(mva(mp!1)))" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (x1!1 skolem-const-decl "({gd: FieldDecl[Name] |
    EXISTS (v: (vdsA(mva(mp!1)))):
      name(gd) = name(v) AND
       jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)})"
     NewVariableDeclarations nil)
    (x2!1 skolem-const-decl "({gd: FieldDecl[Name] |
    EXISTS (v: (vdsA(mva(mp!1)))):
      name(gd) = name(v) AND
       jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)})"
     NewVariableDeclarations nil)
    (v!1 skolem-const-decl "(vdsA(mva(mp!1)))" NewVariableDeclarations
     nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (v!1 skolem-const-decl "(vdsA(mva(mp!1)))" NewVariableDeclarations
     nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (FieldDecl type-eq-decl nil Program nil)
    (mp!1 skolem-const-decl "(wf_MP[CP, Name])" NewVariableDeclarations
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil))
   670 610 t nil))
 (new_vars_derived_from_mp 0
  (new_vars_derived_from_mp-1 nil 3397386643 3398596652
   ("" (skosimp*)
    (("" (expand "var_names")
      (("" (expand "new_gvds")
        (("" (split 1)
          (("1" (inst 1 "new_cp_gvd(mp!1)") (("1" (grind) nil nil))
            nil)
           ("2" (skosimp*)
            (("2"
              (inst 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("3" (skosimp*)
            (("3"
              (inst 1
               "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
              (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    (set type-eq-decl nil sets nil) nil nil nil
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (union const-decl "set" sets nil) nil
    (member const-decl "bool" sets nil) nil nil)
   612 612 t nil))
 (wf_new_vars 0
  (wf_new_vars-1 nil 3397386628 3399203300
   ("" (skosimp*)
    ((""
      (auto-rewrite ("empty?" "disjoint?" "intersection" "member"
                     "union"))
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (typepred "name_of(mp!1)(q!1)") (("1" (grind) nil nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (typepred "cp(mp!1)") (("2" (grind) nil nil)) nil))
          nil)
         ("3" (skosimp*)
          (("3" (typepred "name_of(mp!1)(q!1)") (("3" (grind) nil nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skosimp*)
            (("4" (expand "new_gvds")
              (("4" (rewrite "add_as_union")
                (("4" (rewrite "var_names_union")
                  (("4" (rewrite "var_names_union")
                    (("4" (assert)
                      (("4" (expand "var_names")
                        (("4" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case-replace "f!1 = v!1" :hide? t)
                                  (("1"
                                    (typepred "v!1")
                                    (("1"
                                      (typepred "mp!1")
                                      (("1"
                                        (expand "wf_MP")
                                        (("1"
                                          (expand "wf_MVA")
                                          (("1"
                                            (expand "wf_vdsA")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -4)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "var_names")
                                                      (("1"
                                                        (inst? 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-extensionality :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (skosimp*)
            (("5" (expand "new_gvds")
              (("5" (rewrite "add_as_union")
                (("5" (rewrite "var_names_union")
                  (("5" (rewrite "var_names_union")
                    (("5" (assert)
                      (("5" (expand "var_names")
                        (("5" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "mp!1")
                                  (("2"
                                    (expand "compatible")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand
                                         "MVA_aut_vars_are_not_prog_vars")
                                        (("2"
                                          (case-replace
                                           "f!1 = v!1"
                                           :hide?
                                           t)
                                          (("1"
                                            (typepred "v!1")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3"
                                (expand "new_cp_gvd")
                                (("3"
                                  (expand "singleton")
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "forbidden_names")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (FieldDecl type-eq-decl nil Program nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil))
   4778 4570 t nil))
 (cp_new_ghostvar 0
  (cp_new_ghostvar-1 nil 3398086579 3399203319
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert) (("" (flatten) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (mp!1 skolem-const-decl "(wf_MP)" NewVariableDeclarations nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   2015 1920 t shostak))
 (halted_new_ghostvar 0
  (halted_new_ghostvar-1 nil 3398086655 3399203319
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "var_names")
                    (("" (assert)
                      ((""
                        (inst 1
                         "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                        (("1" (assert)
                          (("1" (expand "halted")
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (inst 1 "halted")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "mva(mp!1)")
                                    (("1"
                                      (expand "complete")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "defined?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "(wf_MP)" NewVariableDeclarations nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (halted const-decl "CP" MVA nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   584 550 t shostak))
 (cp_not_cps_ghostvar 0
  (cp_not_cps_ghostvar-1 nil 3398156394 3398156681
   ("" (skosimp*)
    (("" (expand "new_cps_gvds")
      (("" (skosimp*)
        (("" (typepred "name_of(mp!1)(q!1)") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil) nil nil nil nil nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil (injective? const-decl "bool" functions nil) nil nil
    (set type-eq-decl nil sets nil) nil nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil)
   301 103 t shostak))
 (cp_not_mva_ghostvar 0
  (cp_not_mva_ghostvar-1 nil 3398156446 3398156692
   ("" (skosimp*)
    (("" (expand "new_mva_vars_gvds")
      (("" (skosimp*)
        (("" (typepred "cp(mp!1)")
          (("" (typepred "v!1") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil) nil nil nil nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil nil nil nil nil (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil (boolean nonempty-type-decl nil booleans nil)
    nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil)
   815 618 t shostak)))
(AnnotateProgram
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601203 3398596676
   ("" (use "infinite_namespace") nil nil) unchecked (nil) 0 1 t nil))
 (IMP_NewVariableDeclarations_TCC1 0
  (IMP_NewVariableDeclarations_TCC1-1 nil 3397387554 3398596676
   ("" (use "CP_is_enumerable") nil nil) unchecked (nil) 0 1 t nil))
 (IMP_NewVariableDeclarations_TCC2 0
  (IMP_NewVariableDeclarations_TCC2-1 nil 3397387554 3398596676
   ("" (use "name_of_exists") nil nil) unchecked (nil) 19 17 t nil))
 (ann_action_TCC1 0
  (ann_action_TCC1-1 nil 3383987003 3398596676
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   6 6 nil nil))
 (ann_guard_actions_set_TCC1 0
  (ann_guard_actions_set_TCC1-1 nil 3398100725 3398596679
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(x :({x: [BoolExpr[Name], Stmt[Name]] |
                     EXISTS (t: Transition[CP, Name]):
                       ts!1(t) AND
                        x =
                         (guard_to_expression[CP, Name]
                              (mva(mp!1))(guard(t)),
                          update_vars(mp!1)(t))})) : f!1(choose({t : Transition[CP, Name] |  ts!1(t) AND
                        x =
                         (guard_to_expression[CP, Name]
                              (mva(mp!1))(guard(t)),
                          update_vars(mp!1)(t))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   315 308 t nil))
 (ann_event_set_TCC1 0
  (ann_event_set_TCC1-2 nil 3398099362 3398596680
   (";;; Proof for formula AnnotateProgram.ann_event_TCC1" (skosimp*)
    ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
      (typepred "ts!1")
      ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
        (expand "is_finite")
        ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
          (skosimp*)
          ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
            (inst 1 "N!1" "LAMBDA(t :
                      ({t: Transition[CP, Name] |
                           ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
              (expand "injective?")
              ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
                (skosimp*)
                ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
                  (inst?)
                  ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
                    (assert) nil))))))))))))))))
    "")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   35 31 nil nil)
  (ann_event_set_TCC1-1 nil 3398099323 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (ann_event_set_TCC2 0
  (ann_event_set_TCC2-1 nil 3398099323 3398596709
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1"
             "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                           EXISTS (q: CP):
                             cps(mva(mp!1))(q) AND
                              nonempty?[Transition[CP, Name]]
                                  ({t: Transition[CP, Name] |
                                      ts!1(t) AND scp(t) = q})
                               AND
                               c =
                                ann_trans_cp(mp!1)
                                            (q,
                                             {t: Transition[CP, Name]
                                              |
                                              ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                              nonempty?[Transition[CP, Name]]
                                  ({t: Transition[CP, Name] |
                                      ts!1(t) AND scp(t) = q})
                               AND
                               c =
                                ann_trans_cp(mp!1)
                                            (q,
                                             {t: Transition[CP, Name]
                                              |
                                              ts!1(t) AND scp(t) = q})}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1"
                        (name "q1" "choose({q: CP |
                                       cps(mva(mp!1))(q) AND
                                        nonempty?[Transition[CP, Name]]
                                            ({t: Transition[CP, Name] |
                                                ts!1(t) AND scp(t) = q})
                                         AND
                                         x1!1 =
                                          ann_trans_cp(mp!1)
                                                      (q,
                                                       {t: Transition[CP, Name] |
                                                          ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (name "q2" "choose({q: CP |
                                           cps(mva(mp!1))(q) AND
                                            nonempty?[Transition[CP, Name]]
                                                ({t: Transition[CP, Name] |
                                                    ts!1(t) AND scp(t) = q})
                                             AND
                                             x2!1 =
                                              ann_trans_cp(mp!1)
                                                          (q,
                                                           {t: Transition[CP, Name] |
                                                              ts!1(t) AND scp(t) = q})})")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (case
                                 "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (case
                                   "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1"
                                    (replace -5)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -2 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "ts!1")
                                    (("3"
                                      (expand "is_finite")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst 1 "N!2" "f!2")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 :dir rl)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (typepred "ts!1")
                                  (("3"
                                    (expand "is_finite")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (inst 1 "N!2" "f!2")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "x2!1")
                            (("2" (skosimp*)
                              (("2"
                                (rewrite "nonempty_exists" 1)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1!1")
                          (("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists" 1)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (typepred "ts!1")
                                  (("2"
                                    (expand "is_finite")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst 1 "N!2" "f!2")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*)
                          (("3" (typepred "ts!1")
                            (("3" (expand "is_finite")
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst 1 "N!2" "f!2")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (typepred "ts!1")
                      (("4" (expand "is_finite")
                        (("4" (skosimp*)
                          (("4" (inst 1 "N!2" "f!2")
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists" 1)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (typepred "ts!1")
                        (("2" (expand "is_finite")
                          (("2" (skosimp*)
                            (("2" (inst 1 "N!2" "f!2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (typepred "ts!1")
                (("3" (expand "is_finite")
                  (("3" (skosimp*)
                    (("3" (inst 1 "N!2" "f!2") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (injective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil) nil
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil) nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   2904 2865 t nil))
 (filter_event_TCC1 0
  (filter_event_TCC1-1 nil 3383987003 3399203320
   ("" (skosimp*)
    (("" (typepred "ts(a!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                       ts(a!1)(t) AND
                        etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   955 910 t nil))
 (ann_method_TCC1 0
  (ann_method_TCC1-1 nil 3389418364 3399203305
   ("" (skolem-typepred)
    (("" (expand* "wf_MP" "complete") (("" (flatten) nil nil)) nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   316 320 t nil))
 (ann_methods_TCC1 0
  (ann_methods_TCC1-1 nil 3383987003 3399203305
   ("" (skosimp*)
    (("" (typepred "ms!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                       EXISTS (n: Method[Name]):
                         ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "n!1") (("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "n!2") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "m!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "n!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (n!1 skolem-const-decl "Method[Name]" AnnotateProgram nil)
    (m!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     AnnotateProgram nil)
    (injective? const-decl "bool" functions nil)
    (n!2 skolem-const-decl "Method[Name]" AnnotateProgram nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (n!1 skolem-const-decl "Method[Name]" AnnotateProgram nil)
    (x2!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     AnnotateProgram nil)
    (x1!1 skolem-const-decl "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     AnnotateProgram nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ms!1 skolem-const-decl "finite_set[Method[Name]]" AnnotateProgram
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (mp!1 skolem-const-decl "(wf_MP[CP, Name])" AnnotateProgram nil)
    (nonempty? const-decl "bool" sets nil))
   543 520 t nil))
 (ann_program_TCC1 0
  (ann_program_TCC1-1 nil 3383987003 3399203237
   ("" (skosimp)
    (("" (typepred "classes(program(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                         EXISTS (c1: Class[Name]):
                           classes(program(mp!1))(c1) AND
                            c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "c1!1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "c1!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "c1!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (c1!1 skolem-const-decl "Class[Name]" AnnotateProgram nil)
    (c!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     AnnotateProgram nil)
    (injective? const-decl "bool" functions nil)
    (c1!2 skolem-const-decl "Class[Name]" AnnotateProgram nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (c1!1 skolem-const-decl "Class[Name]" AnnotateProgram nil)
    (x2!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     AnnotateProgram nil)
    (x1!1 skolem-const-decl "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     AnnotateProgram nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "(wf_MP[CP, Name])" AnnotateProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (nonempty? const-decl "bool" sets nil))
   809 730 t nil)))
(AnnotateProgramProperties
 (CP_is_enumerable 0
  (CP_is_enumerable-1 nil 3392611795 3392611802 ("" (postpone) nil nil)
   unchecked nil 7000 150 t shostak))
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601223 3398144744
   ("" (use "infinite_namespace") nil nil) unchecked nil 1 1 t nil))
 (IMP_AnnotateProgram_TCC1 0
  (IMP_AnnotateProgram_TCC1-1 nil 3390292134 3398144744
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 1 0 t nil))
 (IMP_AnnotateProgram_TCC2 0
  (IMP_AnnotateProgram_TCC2-1 nil 3395037658 3398144744
   ("" (use "name_of_exists") nil nil) unchecked nil 0 0 t nil))
 (ann_program_class_correspondence 0
  (ann_program_class_correspondence-1 nil 3392569211 3399203301
   ("" (skosimp*)
    (("" (expand "ann_program") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_program const-decl "Program" AnnotateProgram nil))
   360 360 t shostak))
 (ann_program_method_correspondence 0
  (ann_program_method_correspondence-1 nil 3392569244 3399203304
   ("" (skosimp*)
    (("" (use "ann_program_class_correspondence")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand* "ann_class" "ann_methods")
            (("" (inst 1 "c1!1" _)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (replace -2 -5) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil))
   876 850 t shostak))
 (ann_program_preserves_var_decls 0
  (ann_program_preserves_var_decls-1 nil 3392566301 3399203303
   ("" (skosimp*)
    (("" (split)
      (("1" (expand* "ann_program" "getFieldDecls")
        (("1" (apply-extensionality :hide? t)
          (("1" (iff)
            (("1" (split)
              (("1" (skosimp*)
                (("1" (inst 1 "ann_class(mp!1)(c!1)")
                  (("1" (split)
                    (("1" (inst?) nil nil)
                     ("2" (expand "ann_class") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "ann_class")
                      (("2" (lift-if) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "getLocalDecls")
        (("2" (apply-extensionality :hide? t)
          (("2" (iff)
            (("2" (split)
              (("1" (expand "ann_program")
                (("1" (skosimp*)
                  (("1" (case "name(c!1) = class_name(mva(mp!1))")
                    (("1"
                      (inst 1 "ann_class(mp!1)(c!1)"
                       "ann_method(mp!1)(m!1)")
                      (("1" (split 1)
                        (("1" (inst?) nil nil)
                         ("2" (expand* "ann_class" "ann_methods")
                          (("2" (assert) (("2" (inst?) nil nil)) nil))
                          nil)
                         ("3" (expand "ann_method")
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (inst 2 "ann_class(mp!1)(c!1)" "m!1")
                      (("2" (split 2)
                        (("1" (inst?) nil nil)
                         ("2" (expand "ann_class")
                          (("2" (assert) nil nil)) nil)
                         ("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (use "ann_program_method_correspondence")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (split -)
                        (("1" (flatten)
                          (("1" (inst 1 "c1!1" "m1!1")
                            (("1" (assert)
                              (("1"
                                (replace -2)
                                (("1"
                                  (expand "ann_method" -7)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (inst 2 "c1!1" "m1!1")
                            (("2" (assert)
                              (("2"
                                (replace -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand* "subset?" "member")
        (("3" (skosimp*)
          (("3" (expand* "ann_program" "getGhostDecls")
            (("3" (skosimp*)
              (("3" (inst 1 "ann_class(mp!1)(c!1)")
                (("3" (split)
                  (("1" (inst?) nil nil)
                   ("2" (expand* "ann_class" "union" "member")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (ann_program_method_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   1991 1880 t shostak))
 (ann_program_preserves_var_decl_names 0
  (ann_program_preserves_var_decl_names-1 nil 3392567558 3398144748
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (flatten)
        (("" (replace -1)
          (("" (replace -2)
            (("" (assert)
              (("" (expand* "subset?" "member" "var_names")
                (("" (skosimp*)
                  (("" (inst?)
                    (("" (assert)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   91 90 t shostak))
 (ann_program_add_ghost_var_decls 0
  (ann_program_add_ghost_var_decls-1 nil 3396607040 3399203301
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "getGhostDecls")
        (("" (expand "union")
          (("" (expand "member")
            (("" (iff)
              (("" (split 1)
                (("1" (skosimp*)
                  (("1" (use "ann_program_class_correspondence")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (inst 1 "c1!1")
                          (("1" (assert)
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (expand "ann_class")
                                (("1"
                                  (expand "union")
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (split -1)
                    (("1" (skosimp*)
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (expand "ann_program")
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "mp!1")
                      (("2" (expand "compatible")
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2" (inst 1 "ann_class(mp!1)(c!1)")
                              (("2"
                                (expand "ann_program")
                                (("2"
                                  (split 1)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (expand "ann_class")
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (member const-decl "bool" sets nil))
   1321 1240 t shostak))
 (ann_program_preserves_wf_state 0
  (ann_program_preserves_wf_state-1 nil 3390298254 3398144749
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (inst?)
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2) (("" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   74 74 t shostak))
 (ann_program_preserves_pstate_vars 0
  (ann_program_preserves_pstate_vars-1 nil 3392567663 3398144750
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (replace -1)
              (("" (replace -2)
                (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   96 95 t shostak))
 (ann_program_preserves_ghoststate_vars 0
  (ann_program_preserves_ghoststate_vars-1 nil 3392567791 3398144752
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand* "wf_state" "wf_ghoststate")
        (("" (flatten)
          (("" (inst?)
            (("" (inst?)
              (("" (expand* "id" "subset?" "member" "var_names")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst?)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   133 133 t shostak))
 (ann_method_body 0
  (ann_method_body-1 nil 3398657933 nil
   (";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
    (skosimp*)
    ((";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
      (expand "ann_method")
      ((";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
        (propax) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (ann_method_pre 0
  (ann_method_pre-1 nil 3398657944 nil
   (";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
    (skosimp*)
    ((";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
      (expand "ann_method")
      ((";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
        (propax) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (ann_method_post 0
  (ann_method_post-1 nil 3398657949 nil
   (";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
    (skosimp*)
    ((";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
      (expand "ann_method")
      ((";;; Proof var_names_ann_method_body-1 for formula AnnotateProgramProperties.var_names_ann_method_body"
        (propax) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (ann_method_arg 0
  (ann_method_arg-1 nil 3398660702 3398660706
   ("" (expand "ann_method") (("" (propax) nil nil)) nil) unfinished
   nil 412 22 t shostak))
 (ann_method_res 0
  (ann_method_res-1 nil 3398660714 3398660716
   ("" (expand "ann_method") (("" (propax) nil nil)) nil) unfinished
   nil 233 22 t shostak))
 (ann_method_res_type 0
  (ann_method_res_type-1 nil 3398664332 3398664334
   ("" (expand "ann_method") (("" (propax) nil nil)) nil) unfinished
   nil 218 4 t shostak))
 (ann_method_lvars 0
  (ann_method_lvars-1 nil 3398664337 3398664339
   ("" (expand "ann_method") (("" (propax) nil nil)) nil) unfinished
   nil 205 4 t shostak))
 (ann_method_pre_set 0
  (ann_method_pre_set-1 nil 3398657966 nil
   (";;; Proof var_names_ann_method_pre_set-1 for formula AnnotateProgramProperties.var_names_ann_method_pre_set"
    (expand "ann_method")
    ((";;; Proof var_names_ann_method_pre_set-1 for formula AnnotateProgramProperties.var_names_ann_method_pre_set"
      (propax) nil))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (ann_method_post_set 0
  (ann_method_post_set-1 nil 3398657969 nil
   (";;; Proof var_names_ann_method_pre_set-1 for formula AnnotateProgramProperties.var_names_ann_method_pre_set"
    (expand "ann_method")
    ((";;; Proof var_names_ann_method_pre_set-1 for formula AnnotateProgramProperties.var_names_ann_method_pre_set"
      (propax) nil))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (ann_method_exc_set 0
  (ann_method_exc_set-1 nil 3398657971 nil
   (";;; Proof var_names_ann_method_pre_set-1 for formula AnnotateProgramProperties.var_names_ann_method_pre_set"
    (expand "ann_method")
    ((";;; Proof var_names_ann_method_pre_set-1 for formula AnnotateProgramProperties.var_names_ann_method_pre_set"
      (propax) nil))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (ann_class_inv_TCC1 0
  (ann_class_inv_TCC1-1 nil 3398660702 nil ("" (subtype-tcc) nil nil)
   unchecked nil nil nil nil nil))
 (ann_class_inv 0
  (ann_class_inv-1 nil 3398657980 nil
   (";;; Proof var_names_ann_class_inv-1 for formula AnnotateProgramProperties.var_names_ann_class_inv"
    (skosimp*)
    ((";;; Proof var_names_ann_class_inv-1 for formula AnnotateProgramProperties.var_names_ann_class_inv"
      (expand "ann_class")
      ((";;; Proof var_names_ann_class_inv-1 for formula AnnotateProgramProperties.var_names_ann_class_inv"
        (assert)
        ((";;; Proof var_names_ann_class_inv-1 for formula AnnotateProgramProperties.var_names_ann_class_inv"
          (lift-if)
          ((";;; Proof var_names_ann_class_inv-1 for formula AnnotateProgramProperties.var_names_ann_class_inv"
            (propax) nil))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished nil nil nil nil nil))
 (var_names_ann_action 0
  (var_names_ann_action-1 nil 3398142929 3398144758
   ("" (skolem 1 (_ "n!1"))
    (("" (induct "a")
      (("1" (grind) nil nil)
       ("2" (skosimp*)
        (("2" (rewrite "ann_action" 1)
          (("2" (rewrite "var_names" 1)
            (("2" (rewrite "var_names" 1)
              (("2" (auto-rewrite "union" "add" "member")
                (("2" (assert)
                  (("2" (replace -1 :hide? t)
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (inst?) (("2" (assert) nil nil)) nil)
                         ("3" (skosimp*)
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil)
                         ("4" (skosimp*)
                          (("4" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member def-decl "bool" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil))
   159 158 t shostak))
 (var_names_CaseJML_set2list 0
  (var_names_CaseJML_set2list-1 nil 3398139097 3398144761
   ("" (skolem 1 (_ "n!1"))
    ((""
      (use "wf_induction[finite_set[[BoolExpr, Stmt]], LAMBDA(x, y : finite_set[[BoolExpr, Stmt]]) : card(x) < card(y)]")
      (("1" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (rewrite "set2list" 1)
              (("2" (lift-if)
                (("2" (split 1)
                  (("1" (skosimp*)
                    (("1" (rewrite "var_names" 1)
                      (("1" (iff)
                        (("1" (prop)
                          (("1" (grind) nil nil)
                           ("2" (skosimp*)
                            (("2" (auto-rewrite "empty?" "member")
                              (("2"
                                (assert)
                                (("2" (inst? -3) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (rewrite "var_names" 2)
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (rewrite "card_remove")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1 :hide? t)
                                    (("2"
                                      (iff)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (case
                                             "  var_names(PROJ_1(choose(x!1)))(n!1)")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "var_names(PROJ_2(choose(x!1)))(n!1)")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst 3 "x!2")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "remove")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "nonempty?")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (inst 3 "x!2")
                                            (("2"
                                              (rewrite "remove")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "wf_card[[BoolExpr, Stmt]]") nil nil))
      nil))
    nil)
   unfinished
   ((list type-decl nil list_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (union const-decl "set" sets nil)
    (wf_induction formula-decl nil wf_induction nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (emptyset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (remove const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   217 216 t shostak))
 (var_names_MVA_subset_var_names_new_gdvs 0
  (var_names_MVA_subset_var_names_new_gdvs-1 nil 3399206311 3399207699
   ("" (skosimp)
    (("" (expand* "var_names" "subset?" "union" "member")
      (("" (skosimp)
        (("" (split)
          (("1" (hide 1)
            (("1" (expand* "var_names" "new_gvds")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert)
                    (("1"
                      (expand* "add" "union" "member"
                       "new_mva_vars_gvds")
                      (("1" (flatten) (("1" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand* "Union" "var_names")
              (("2" (skosimp)
                (("2" (typepred "mp!1")
                  (("2" (expand "compatible")
                    (("2" (flatten)
                      (("2" (skosimp)
                        (("2" (inst 1 "var_names(c!1)")
                          (("1" (expand "var_names")
                            (("1"
                              (expand* "union" "member"
                               "MVA_prog_vars_are_fields")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" 2)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst?) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (c!1 skolem-const-decl "Class[Name]" AnnotateProgramProperties nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (mp!1 skolem-const-decl "(wf_MP)" AnnotateProgramProperties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil))
   499334 980 t shostak))
 (var_names_ann_event 0
  (var_names_ann_event-1 nil 3398098253 3399207947
   ("" (skosimp*)
    (("" (expand "subset?" 1)
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "ann_event")
            (("" (rewrite "var_names_CaseJML_set2list")
              (("" (skosimp*)
                (("" (expand "ann_event_set")
                  (("" (skosimp*)
                    (("" (expand "ann_trans_cp")
                      (("" (replace -4 :hide? t)
                        (("" (auto-rewrite "union" "member")
                          (("" (assert)
                            (("" (rewrite "var_names" -4)
                              ((""
                                (rewrite "var_names" -4)
                                ((""
                                  (rewrite "var_names" -4)
                                  ((""
                                    (rewrite "var_names" -4)
                                    ((""
                                      (rewrite "var_names" -4)
                                      ((""
                                        (expand "singleton")
                                        ((""
                                          (assert)
                                          ((""
                                            (split -4)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (use "cp_new_ghostvar")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "new_gvds")
                                                  (("2"
                                                    (rewrite
                                                     "add_as_union")
                                                    (("2"
                                                      (rewrite
                                                       "var_names_union")
                                                      (("2"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "new_cps_gvds")
                                                              (("2"
                                                                (expand
                                                                 "var_names")
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "q!1")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "defined?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "ann_guard_actions")
                                              (("3"
                                                (rewrite
                                                 "var_names_CaseJML_set2list")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand
                                                     "ann_guard_actions_set")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "update_vars")
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (use
                                                               "var_names_guard_to_expresion")
                                                              (("1"
                                                                (typepred
                                                                 "mp!1")
                                                                (("1"
                                                                  (expand
                                                                   "wf_MP")
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "var_names_MVA_subset_var_names_new_gdvs")
                                                                              (("1"
                                                                                (expand*
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "var_names"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "var_names"
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "var_names"
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "var_names"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "add")
                                                                        (("2"
                                                                          (expand
                                                                           "singleton")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "cp_new_ghostvar")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "new_gvds")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "add_as_union")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "var_names_union")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "var_names_union")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "new_cps_gvds")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "tcp(t!1)")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "mp!1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "wf_MP")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_MVA")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wf_Trans")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -6
                                                                                                                 "t!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -11
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "var_names_ann_action")
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "mp!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_MP")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "wf_MVA")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "wf_Trans")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "wf_Action")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "subset?")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -13)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -13
                                                                                                       "t!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (flatten)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -9
                                                                                                               "oa!1")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -10
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         -13)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "var_names"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "new_gvds")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "add_as_union")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "var_names_union")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "var_names_union")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "new_mva_vars_gvds")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "var_names"
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               4
                                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "f!1")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "new_gvds")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "add_as_union")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "var_names_union")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "var_names_union")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "new_mva_vars_gvds")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "var_names"
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       4
                                                                                                                                                       "f!1")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "compatible")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "MVA_prog_vars_are_fields")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "var_names"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -7
                                                                                                                                             "l!1")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "var_names"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "Union")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       2
                                                                                                                                                       "var_names(c!1)")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "Union")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "var_names"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   3
                                                                                                                                                                   "fd!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ann_event_set_TCC1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((member const-decl "bool" sets nil)
    (ann_event const-decl "Stmt" AnnotateProgram nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (FieldDecl type-eq-decl nil Program nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (q!1 skolem-const-decl "CP" AnnotateProgramProperties nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ann_guard_actions_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateProgram nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     AnnotateProgramProperties nil)
    (var_names_guard_to_expresion formula-decl nil MVASemantics nil)
    (add const-decl "(nonempty?)" sets nil)
    (var_names_ann_action formula-decl nil AnnotateProgramProperties
     nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Union const-decl "set" sets nil)
    (c!1 skolem-const-decl "Class[Name]" AnnotateProgramProperties nil)
    (var_names const-decl "set[Name]" ProgramFunctions nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (mp!1 skolem-const-decl "(wf_MP)" AnnotateProgramProperties nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (t!1 skolem-const-decl "Transition[CP, Name]"
     AnnotateProgramProperties nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (ann_action def-decl "Stmt" AnnotateProgram nil)
    (update_vars const-decl "Stmt" AnnotateProgram nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateProgram nil)
    (ann_guard_actions const-decl "list[[BoolExpr, Stmt]]"
     AnnotateProgram nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (ann_trans_cp const-decl "[BoolExpr, Stmt]" AnnotateProgram nil)
    (ann_event_set const-decl "finite_set[[BoolExpr, Stmt]]"
     AnnotateProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (var_names_CaseJML_set2list formula-decl nil
     AnnotateProgramProperties nil)
    (subset? const-decl "bool" sets nil))
   220162 8980 t shostak))
 (var_names_ann_program 0
  (var_names_ann_program-1 nil 3397470724 3399202822
   ("" (auto-rewrite "subset?" "member" "union")
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_program")
            (("" (expand "var_names" -1)
              (("" (expand "Union")
                (("" (skosimp*)
                  (("" (typepred "a!1")
                    (("" (skosimp*)
                      (("" (replace -3 :hide? t)
                        (("" (replace -2 :hide? t)
                          (("" (expand "ann_class")
                            (("" (assert)
                              ((""
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (auto-rewrite "Union")
                                    (("1"
                                      (rewrite "var_names" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "a!2")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "var_names"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (rewrite
                                                                             "var_names")
                                                                            (("4"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "var_names(pre_set(n!1))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "add_as_union")
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (rewrite
                                                                                                         "var_names_union")))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "halted")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "var_names")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "new_cps_gvds")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       2
                                                                                                                       "halted")
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "mva(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "complete")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("5"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "var_names(post_set(n!1))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("6"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("6"
                                                                                (assert)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "var_names(exc_set(n!1))")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (assert)
                                                                              (("7"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("8"
                                                                              (assert)
                                                                              (("8"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("9"
                                                                              (assert)
                                                                              (("9"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "var_names" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "var_names" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite "var_names" -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split -1)
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (rewrite
                                                         "var_names"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (repeat
                                                    (rewrite
                                                     "var_names"
                                                     -1)))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "singleton")
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (use
                                                           "cp_new_ghostvar")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "halted_new_ghostvar")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "var_names" 2)
                                    (("2"
                                      (expand "Union")
                                      (("2"
                                        (inst 2 "var_names(c1!1)")
                                        (("2" (inst 1 "c1!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (Assert adt-constructor-decl "[BoolExpr -> (Assert?)]" Body_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateProgram
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateProgram nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (var_names_ann_event formula-decl nil AnnotateProgramProperties
     nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (new_cp_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (halted const-decl "CP" MVA nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NExpr adt-constructor-decl "[NumExpr -> (NExpr?)]" Body_adt nil)
    (NumExpr type-eq-decl nil Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Int? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (RExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[BoolExpr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[BoolExpr, BoolExpr] -> (Conj?)]"
     Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (FF? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TT? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   672794 12170 t shostak))
 (ann_program_yields_wf_program 0
  (ann_program_yields_wf_program-1 nil 3393664525 3399203309
   ("" (skolem-typepred)
    (("" (expand* "wf_MP" "wf_Program")
      (("" (prop)
        (("1" (hide-all-but (-3 1))
          (("1" (expand "wf_program_variables_disjoint_def")
            (("1" (use "ann_program_preserves_var_decls")
              (("1" (rewrite "ann_program_add_ghost_var_decls")
                (("1" (flatten)
                  (("1" (use "wf_new_vars")
                    (("1" (replace -2 :dir rl :hide? t)
                      (("1" (replace -2 :dir rl :hide? t)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (hide -1 -2 -3 -4 -7)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "declared_var_names")
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but (-1 -4 1))
          (("2" (expand "wf_program_variables_not_reserved_words_def")
            (("2" (expand "declared_var_names")
              (("2" (use "ann_program_preserves_var_decls")
                (("2" (flatten)
                  (("2" (replace -1 :dir rl :hide? t)
                    (("2" (replace -1 :dir rl :hide? t)
                      (("2" (rewrite "ann_program_add_ghost_var_decls")
                        (("2" (rewrite "var_names_union")
                          (("2" (use "wf_new_vars")
                            (("2" (flatten)
                              (("2"
                                (hide -1 -2 -3 -5 -7)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but (-5 1))
          (("3" (expand "wf_program_has_unique_class_names_def")
            (("3" (skosimp)
              (("3" (expand* "ann_program" "ann_class")
                (("3" (skosimp*)
                  (("3" (inst - "c1!2" "c1!3")
                    (("3" (assert)
                      (("3" (split -6)
                        (("1" (hide -6)
                          (("1" (replace -3 :hide? t)
                            (("1" (replace -4 :hide? t)
                              (("1"
                                (lift-if)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -3 :hide? t)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (lift-if)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide-all-but (-6 1))
          (("4" (expand "wf_Classes")
            (("4" (skosimp)
              (("4" (expand* "ann_program" "ann_class")
                (("4" (skosimp)
                  (("4" (inst - "c1!1")
                    (("4" (assert)
                      (("4" (replace -2 :hide? t)
                        (("4"
                          (expand* "wf_Class" "ann_methods"
                           "ann_method")
                          (("4" (skosimp)
                            (("4" (assert)
                              (("4"
                                (split)
                                (("1"
                                  (split)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (inst - "n!1" "n!2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (prop) nil nil))
                                  nil)
                                 ("2"
                                  (prop)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (expand "wf_program_all_variables_declared")
          (("5" (skosimp)
            (("5" (inst?)
              (("5" (use "ann_program_preserves_var_decls")
                (("5" (expand "declared_var_names")
                  (("5" (flatten)
                    (("5" (replace -1)
                      (("5" (replace -2)
                        (("5" (assert)
                          (("5"
                            (rewrite "ann_program_add_ghost_var_decls")
                            (("5" (rewrite "var_names_union")
                              (("5"
                                (auto-rewrite "union" "member")
                                (("5"
                                  (assert)
                                  (("5"
                                    (flatten)
                                    (("5"
                                      (use "var_names_ann_program")
                                      (("5"
                                        (assert)
                                        (("5"
                                          (expand "subset?")
                                          (("5"
                                            (expand "member")
                                            (("5"
                                              (inst?)
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_program_all_variables_declared const-decl "boolean"
     WellFormedProgram nil)
    (var_names_ann_program formula-decl nil AnnotateProgramProperties
     nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (FieldDecl type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   3947 3810 t shostak))
 (ann_program_preserves_well_behaved_Program 0
  (ann_program_preserves_well_behaved_Program-1 nil 3392570267
   3398144775
   ("" (skosimp*)
    (("" (expand "well_behaved_Program")
      (("" (skosimp*)
        (("" (expand "id")
          (("" (use "ann_program_class_correspondence")
            (("" (assert)
              (("" (inst? -1)
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst?)
                      (("" (assert)
                        (("" (flatten)
                          (("" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (hide -6)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "ann_class" -1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -5
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s1!1), gvs := gvs(s1!1) #)"
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s2!1), gvs := gvs(s2!1) #)"
                                           "v!1"
                                           _)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite
                                                   "deriv_expr"
                                                   -2)
                                                  (("1"
                                                    (rewrite
                                                     "deriv_expr"
                                                     -2)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "deriv_expr")
                                                      (("2"
                                                        (split -5)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (apply-extensionality
                                                             2
                                                             :hide?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (hide -5)
                                (("2"
                                  (use
                                   "ann_program_method_correspondence")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "c!1" "m!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (split -3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 183 183 t shostak))
 (get_class_ann_program 0
  (get_class_ann_program-1 nil 3392567967 3398144776
   ("" (skosimp*)
    (("" (replace -3 :hide? t)
      (("" (replace -3 :hide? t)
        (("" (expand* "ann_program" "get_class")
          (("" (assert)
            (("" (lift-if -2)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (assert) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 40 40 t shostak))
 (same_class_name_ann_class_implies_same_class 0
  (same_class_name_ann_class_implies_same_class-1 nil 3387512899
   3398144776
   ("" (skosimp)
    (("" (expand "ann_program")
      (("" (skosimp)
        (("" (lemma "wf_program_has_unique_class_names")
          (("" (inst -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (typepred "mp!1")
              (("" (expand "wf_MP")
                (("" (expand "ann_class")
                  (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   35 36 t shostak))
 (same_method_name_ann_class_implies_same_method 0
  (same_method_name_ann_class_implies_same_method-1 nil 3387516443
   3398144777
   ("" (skosimp)
    (("" (lemma "wf_class_has_unique_method_names")
      (("" (inst -1 "c2!1" "m2!1" "ann_method(mp!1)(m1!1)")
        (("" (lemma "wf_program_has_wf_classes")
          (("" (inst -1 "ann_program(mp!1)" "c2!1")
            (("" (use "ann_program_yields_wf_program")
              (("" (assert)
                (("" (split -2)
                  (("1" (assert)
                    (("1" (expand "ann_method" -3 2)
                      (("1" (replace -4)
                        (("1" (expand "ann_class" 1)
                          (("1" (expand "ann_methods")
                            (("1" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ann_program" 1)
                    (("2" (inst 1 "c1!1") (("2" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   103 103 t shostak))
 (lookup_mthd_ann_program_TCC1 0
  (lookup_mthd_ann_program_TCC1-1 nil 3398657929 nil
   ("" (subtype-tcc) nil nil) unchecked nil nil nil nil nil))
 (lookup_mthd_ann_program 0
  (lookup_mthd_ann_program-1 nil 3387195852 3398144779
   ("" (skosimp)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          (("" (case "up?(get_class(ann_program(mp!1))(tgt!1))")
            (("1" (assert)
              (("1" (split -2)
                (("1" (split -3)
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (skosimp*)
                        (("1"
                          (name "c1"
                                "down(get_class(program(mp!1))(tgt!1))")
                          (("1" (replace -1)
                            (("1"
                              (name "c2"
                                    "down(get_class(ann_program(mp!1))(tgt!1))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma
                                   "same_class_name_ann_class_implies_same_class")
                                  (("1"
                                    (inst -1 "mp!1" "c1" "c2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "get_class_ann_program")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -1
                                             "mp!1"
                                             "c1"
                                             "c2"
                                             "tgt!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "same_method_name_ann_class_implies_same_method")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (assert)
                          (("2"
                            (case-replace
                             " methods(down(get_class(ann_program(mp!1))(tgt!1))) = methods(down(get_class(program(mp!1))(tgt!1)))")
                            (("1" (assert) nil nil)
                             ("2"
                              (case-replace
                               "get_class(ann_program(mp!1))(tgt!1) = get_class(program(mp!1))(tgt!1)")
                              (("2"
                                (use
                                 "same_class_name_ann_class_implies_same_class")
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "get_class_ann_program")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (use "ann_program_class_correspondence")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   180 180 t shostak))
 (ann_program_defines_MVA_vars 0
  (ann_program_defines_MVA_vars-2 nil 3394875181 3398144779
   ("" (skosimp)
    (("" (typepred "mp!1")
      (("" (expand* "compatible" "var_names" "new_gvds")
        (("" (skosimp*)
          (("" (inst 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (assert)
              (("" (split 1)
                (("1" (expand "ann_program") (("1" (inst?) nil nil))
                  nil)
                 ("2" (expand "ann_class") (("2" (propax) nil nil))
                  nil)
                 ("3" (expand* "ann_class" "union" "member" "new_gvds")
                  (("3" (prop) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (lift type-decl nil lift_adt nil))
   34 33 t nil)
  (ann_program_defines_MVA_vars-1 nil 3389956467 3394872339
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (prop)
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand* "getGhostDecls" "var_names")
              (("1" (use "ann_program_defines_MVA_vars2")
                (("1" (split -)
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (expand* "var_names" "new_gvds" "union" "member")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   untried
   ((id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   974962 4000 t shostak))
 (new_vars_ghost_in_ann_program 0
  (new_vars_ghost_in_ann_program-1 nil 3394876088 3398144780
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (flatten)
        (("" (inst?)
          (("" (assert)
            (("" (hide -1 2)
              (("" (expand "getGhostDecls")
                (("" (expand "var_names" 1)
                  (("" (use "ann_program_defines_MVA_vars")
                    (("" (assert)
                      (("" (skosimp)
                        (("" (inst?)
                          (("" (assert)
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((id const-decl "(bijective?[T, T])" identity nil)
    (lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   65 64 t shostak))
 (ann_program_preserves_class_name 0
  (ann_program_preserves_class_name-1 nil 3398687922 3398687932
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
    nil)
   unfinished nil 970 5 t shostak))
 (ann_program_preserves_class_names 0
  (ann_program_preserves_class_names-1 nil 3398687801 3398687917
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "class_names")
        (("" (iff)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (inst 1 "ann_class(mp!1)(c!1)")
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_name")
                    (("1" (assert)
                      (("1" (expand "ann_program")
                        (("1" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (use "ann_program_class_correspondence")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst 1 "c1!1")
                      (("2" (assert)
                        (("2" (replace -2)
                          (("2"
                            (rewrite
                             "ann_program_preserves_class_name")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil))
   11578 102 t shostak))
 (up_get_class_equivalence 0
  (up_get_class_equivalence-1 nil 3398687657 3398687963
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (propax) nil nil)
             ("2" (split -1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_names")
                    nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   1129 14 t shostak))
 (get_class_equivalence 0
  (get_class_equivalence-1 nil 3398688099 3398689881
   ("" (skosimp*)
    (("" (use "up_get_class_equivalence")
      (("" (assert)
        (("" (use "ann_program_preserves_class_name")
          (("" (expand "get_class")
            (("" (case "Reference?(a!1)")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (split -4)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (expand "class_names")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case-replace
                                     "{c_1: Class[Name] |
                              classes(program(mp!1))(c_1) AND
                               name(c_1) = class_name(a!1)} = singleton(c!1)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c: Class[Name] |
                   classes(ann_program(mp!1))(c) AND
                    name(c) = class_name(a!1)} = singleton(c!2)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -4)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (typepred "mp!1")
                                                  (("1"
                                                    (expand*
                                                     "wf_MP"
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "c!1"
                                                         "c1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -14
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -9)
                                                              (("1"
                                                                (rewrite
                                                                 "ann_program_preserves_class_name"
                                                                 -12)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (use
                                                     "ann_program_yields_wf_program")
                                                    (("1"
                                                      (expand*
                                                       "wf_Program"
                                                       "wf_program_has_unique_class_names_def")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "x!1"
                                                           "c!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred "mp!1")
                                                (("1"
                                                  (expand*
                                                   "wf_MP"
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "x!1"
                                                       "c!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (expand "class_names")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (case-replace
                                     "{c: Class[Name] |
                   classes(ann_program(mp!1))(c) AND
                    name(c) = class_name(a!1)} = singleton(c!2)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c_1: Class[Name] |
                    classes(program(mp!1))(c_1) AND
                     name(c_1) = class_name(a!1)} = singleton(c!1)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -3)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (rewrite
                                                   "ann_program_preserves_class_name")
                                                  (("1"
                                                    (expand
                                                     "ann_class"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "mp!1")
                                                        (("1"
                                                          (expand*
                                                           "wf_MP"
                                                           "wf_Program"
                                                           "wf_program_has_unique_class_names_def")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "c1!1"
                                                               "c!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (iff)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred "mp!1")
                                                  (("1"
                                                    (expand*
                                                     "wf_MP"
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "x!1"
                                                         "c!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (use
                                                 "ann_program_yields_wf_program")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (lift type-decl nil lift_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   163395 1106 t shostak)))

