(|VariableNames|
 (|cp_TCC1| 0
  (|cp_TCC1-1| NIL 3396601202 3401699965
   (""
    (INST 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (SKOSIMP*)
      ((""
        (CASE
            "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (CASE-REPLACE
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :HIDE? T)
          (("1" (USE "infinite_nonempty[Name]") NIL NIL)
           ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (USE "infinite_difference[Name]")
          (("1" (USE "infinite_namespace") NIL NIL)
           ("2" (TYPEPRED "reserved_words")
            (("2" (TYPEPRED "declared_var_names(program(mp!1))")
              (("2" (TYPEPRED "var_names(mva(mp!1))")
                (("2" (EXPAND "forbidden_names") (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|infinite_difference| JUDGEMENT-TCC NIL |infinite_sets_def| NIL)
    (|infinite_namespace| FORMULA-DECL NIL |VariableNames| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL) NIL
    (|infinite_nonempty| JUDGEMENT-TCC NIL |infinite_sets_def| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL NIL NIL NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |VariableNames| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |VariableNames| NIL))
   224 223 T NIL)))
(|NewVariableDeclarations|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-2| NIL 3397386732 3401700088
   (";;; Proof IMP_VariableNames_TCC1-1 for formula AnnotateProgram.IMP_VariableNames_TCC1"
    (USE "infinite_namespace") NIL
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |NewVariableDeclarations| NIL)) 1 1
   NIL NIL)
  (|IMP_VariableNames_TCC1-1| NIL 3397386612 NIL ("" (ASSUMING-TCC) NIL NIL)
   NIL NIL NIL NIL NIL NIL))
 (|name_of_TCC1| 0
  (|name_of_TCC1-2| NIL 3397386758 3401700090
   (";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
    (USE "name_of_exists")
    ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
      (SKOSIMP*)
      ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
        (INST?) NIL))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   (NIL (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of_exists| FORMULA-DECL NIL |NewVariableDeclarations| NIL))
   195 193 NIL NIL)
  (|name_of_TCC1-1| NIL 3397386612 NIL ("" (EXISTENCE-TCC) NIL NIL) NIL NIL NIL
   NIL NIL NIL))
 (|unique_TCC1| 0
  (|unique_TCC1-2| NIL 3397386786 3401700091
   (";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
    (USE "CP_is_enumerable")
    ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
      (SKOSIMP*)
      ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
        (INST?) NIL))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   (NIL (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|CP_is_enumerable| FORMULA-DECL NIL |NewVariableDeclarations| NIL))
   74 73 NIL NIL)
  (|unique_TCC1-1| NIL 3397386612 NIL ("" (EXISTENCE-TCC) NIL NIL) NIL NIL NIL
   NIL NIL NIL))
 (|new_cp_gvd_TCC1| 0
  (|new_cp_gvd_TCC1-1| NIL 3398096023 3401700092 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED
   ((|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL))
   97 93 NIL NIL))
 (|new_cps_gvds_TCC1| 0
  (|new_cps_gvds_TCC1-1| NIL 3398096023 3401700095
   ("" (SKOSIMP*)
    (("" (TYPEPRED "cps(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
(q: (cps(mva(mp!1))))|
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST? -1)
                  (("1" (ASSERT)
                    (("1" (SPLIT -1)
                      (("1" (ASSERT)
                        (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "nonempty_exists")
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOSIMP*)
                        (("2" (INST 1 "q!1") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "nonempty_exists")
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOSIMP*)
                        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "gd!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL NIL NIL NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   299 295 T NIL))
 (|new_mva_vars_gvds_TCC1| 0
  (|new_mva_vars_gvds_TCC1-1| NIL 3398096023 3401700096
   ("" (SKOSIMP*)
    (("" (TYPEPRED "vdsA(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (v: (vdsA(mva(mp!1)))):
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)})) : f!1(choose({
                     (v: (vdsA(mva(mp!1)))) |
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST? -1 :WHERE -2)
                  (("1" (ASSERT)
                    (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                   ("2" (REWRITE "nonempty_exists")
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOSIMP*)
                        (("2" (INST 1 "v!1") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "nonempty_exists")
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOSIMP*)
                        (("3" (INST 1 "v!1") (("3" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "gd!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOSIMP*)
                    (("2" (INST 1 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   74 72 T NIL))
 (|new_vars_derived_from_mp| 0
  (|new_vars_derived_from_mp-1| NIL 3397386643 3401704716
   ("" (SKOSIMP*)
    (("" (EXPAND "var_names")
      (("" (EXPAND "new_gvds")
        (("" (SPLIT 1)
          (("1" (INST 1 "new_cp_gvd(mp!1)") (("1" (GRIND) NIL NIL)) NIL)
           ("2" (SKOSIMP*)
            (("2"
              (INST 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL)
           ("3" (SKOSIMP*)
            (("3"
              (INST 1
               "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
              (("3" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   (NIL
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    NIL
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    NIL
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL))
   610 601 T NIL))
 (|wf_new_vars| 0
  (|wf_new_vars-1| NIL 3397386628 3401704732
   ("" (SKOSIMP*)
    (("" (AUTO-REWRITE ("empty?" "disjoint?" "intersection" "member" "union"))
      (("" (SPLIT 1)
        (("1" (SKOSIMP*)
          (("1" (TYPEPRED "name_of(mp!1)(q!1)") (("1" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (TYPEPRED "cp(mp!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)
         ("3" (SKOSIMP*)
          (("3" (TYPEPRED "name_of(mp!1)(q!1)") (("3" (GRIND) NIL NIL)) NIL))
          NIL)
         ("4" (ASSERT)
          (("4" (SKOSIMP*)
            (("4" (EXPAND "new_gvds")
              (("4" (REWRITE "add_as_union")
                (("4" (REWRITE "var_names_union")
                  (("4" (REWRITE "var_names_union")
                    (("4" (ASSERT)
                      (("4" (EXPAND "var_names")
                        (("4" (SPLIT -1)
                          (("1" (SKOSIMP*)
                            (("1" (EXPAND "new_cps_gvds")
                              (("1" (SKOSIMP*)
                                (("1" (TYPEPRED "name_of(mp!1)(q!1)")
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (EXPAND "new_mva_vars_gvds")
                              (("2" (SKOSIMP*)
                                (("2" (CASE-REPLACE "f!1 = v!1" :HIDE? T)
                                  (("1" (TYPEPRED "v!1")
                                    (("1" (TYPEPRED "mp!1")
                                      (("1" (EXPAND "wf_MP")
                                        (("1" (EXPAND "wf_MVA")
                                          (("1" (EXPAND "wf_vdsA")
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (INST? -4)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "var_names")
                                                      (("1" (INST? 2)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (SKOSIMP*)
                            (("3" (TYPEPRED "cp(mp!1)") (("3" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (ASSERT)
          (("5" (SKOSIMP*)
            (("5" (EXPAND "new_gvds")
              (("5" (REWRITE "add_as_union")
                (("5" (REWRITE "var_names_union")
                  (("5" (REWRITE "var_names_union")
                    (("5" (ASSERT)
                      (("5" (EXPAND "var_names")
                        (("5" (SPLIT -1)
                          (("1" (SKOSIMP*)
                            (("1" (EXPAND "new_cps_gvds")
                              (("1" (SKOSIMP*)
                                (("1" (TYPEPRED "name_of(mp!1)(q!1)")
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (EXPAND "new_mva_vars_gvds")
                              (("2" (SKOSIMP*)
                                (("2" (TYPEPRED "mp!1")
                                  (("2" (EXPAND "compatible")
                                    (("2" (FLATTEN)
                                      (("2"
                                        (EXPAND
                                         "MVA_aut_vars_are_not_prog_vars")
                                        (("2"
                                          (CASE-REPLACE "f!1 = v!1" :HIDE? T)
                                          (("1" (TYPEPRED "v!1")
                                            (("1" (INST?)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (SKOSIMP*)
                            (("3" (TYPEPRED "cp(mp!1)")
                              (("3" (EXPAND "new_cp_gvd")
                                (("3" (EXPAND "singleton")
                                  (("3" (REPLACE -1 :HIDE? T)
                                    (("3" (ASSERT)
                                      (("3" (EXPAND "forbidden_names")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|MVA_aut_vars_are_not_prog_vars| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL NIL NIL NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   1582 1575 T NIL))
 (|cp_new_ghostvar| 0
  (|cp_new_ghostvar-1| NIL 3398086579 3401704738
   ("" (SKOSIMP*)
    (("" (EXPAND "new_gvds")
      (("" (REWRITE "add_as_union")
        (("" (REWRITE "var_names_union")
          (("" (REWRITE "var_names_union")
            (("" (AUTO-REWRITE "union" "singleton" "member")
              (("" (ASSERT) (("" (FLATTEN) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL) NIL
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    NIL (|member| CONST-DECL "bool" |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL))
   629 625 T SHOSTAK))
 (|halted_new_ghostvar| 0
  (|halted_new_ghostvar-1| NIL 3398086655 3401704739
   ("" (SKOSIMP*)
    (("" (EXPAND "new_gvds")
      (("" (REWRITE "add_as_union")
        (("" (REWRITE "var_names_union")
          (("" (REWRITE "var_names_union")
            (("" (AUTO-REWRITE "union" "singleton" "member")
              (("" (ASSERT)
                (("" (FLATTEN)
                  (("" (EXPAND "var_names")
                    (("" (ASSERT)
                      ((""
                        (INST 1
                         "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                        (("1" (ASSERT)
                          (("1" (EXPAND "halted")
                            (("1" (EXPAND "new_cps_gvds")
                              (("1" (INST 1 "halted")
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "mva(mp!1)")
                                    (("1" (EXPAND "complete")
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "defined?") (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|halted| CONST-DECL "CP" MVA NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL) NIL
    (|member| CONST-DECL "bool" |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL))
   59 57 T SHOSTAK))
 (|cp_not_cps_ghostvar| 0
  (|cp_not_cps_ghostvar-1| NIL 3398156394 3401704740
   ("" (SKOSIMP*)
    (("" (EXPAND "new_cps_gvds")
      (("" (SKOSIMP*)
        (("" (TYPEPRED "name_of(mp!1)(q!1)") (("" (GRIND) NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL NIL NIL NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL))
   120 120 T SHOSTAK))
 (|cp_not_mva_ghostvar| 0
  (|cp_not_mva_ghostvar-1| NIL 3398156446 3401704746
   ("" (SKOSIMP*)
    (("" (EXPAND "new_mva_vars_gvds")
      (("" (SKOSIMP*)
        (("" (TYPEPRED "cp(mp!1)")
          (("" (TYPEPRED "v!1") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL NIL NIL NIL
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL))
   614 611 T SHOSTAK))
 (|var_names_MVA_subset_var_names_new_gdvs| 0
  (|var_names_MVA_subset_var_names_new_gdvs-1| NIL 3401682644 3401704747
   (";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
    (SKOSIMP)
    ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
      (EXPAND* "var_names" "subset?" "union" "member")
      ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
        (SKOSIMP)
        ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
          (SPLIT)
          (("1" (HIDE 1)
            (("1" (EXPAND* "var_names" "new_gvds")
              (("1" (SKOSIMP)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (EXPAND* "add" "union" "member" "new_mva_vars_gvds")
                      (("1" (FLATTEN) (("1" (INST?) NIL)))))))))))))))
           ("2" (HIDE 2)
            (("2" (EXPAND* "Union" "var_names")
              (("2" (SKOSIMP)
                (("2" (TYPEPRED "mp!1")
                  (("2" (EXPAND "compatible")
                    (("2" (FLATTEN)
                      (("2" (SKOSIMP)
                        (("2" (INST 1 "var_names(c!1)")
                          (("1" (EXPAND "var_names")
                            (("1"
                              (EXPAND* "union" "member"
                               "MVA_prog_vars_are_fields")
                              (("1" (FLATTEN)
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (EXPAND "var_names" 2)
                                      (("1" (SKOSIMP)
                                        (("1" (INST?)
                                          (("1" (ASSERT) NIL)))))))))))))))))
                           ("2" (INST?) NIL))))))))))))))))))))))))
    "")
   UNCHECKED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    NIL (|Union| CONST-DECL "set" |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|MVA_prog_vars_are_fields| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL))
   109 108 NIL NIL)))
(|AnnotateEvent|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3401619498 3401700039
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateEvent| NIL)) 1 1 T NIL))
 (|IMP_NewVariableDeclarations_TCC1| 0
  (|IMP_NewVariableDeclarations_TCC1-1| NIL 3401619498 3401700039
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateEvent| NIL)) 1 1 T NIL))
 (|IMP_NewVariableDeclarations_TCC2| 0
  (|IMP_NewVariableDeclarations_TCC2-1| NIL 3401619498 3401700039
   ("" (USE "name_of_exists") NIL NIL) UNCHECKED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateEvent| NIL)) 1 2 T NIL))
 (|ann_action_TCC1| 0
  (|ann_action_TCC1-1| NIL 3401619498 3401700039 ("" (TERMINATION-TCC) NIL NIL)
   UNCHECKED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   30 30 NIL NIL))
 (|var_names_ann_action| 0
  (|var_names_ann_action-1| NIL 3401682404 3401704749
   (";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
    (SKOLEM 1 (_ "n!1"))
    ((";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
      (INDUCT "a")
      (("1" (GRIND) NIL)
       ("2" (SKOSIMP*)
        (("2" (REWRITE "ann_action" 1)
          (("2" (REWRITE "var_names" 1)
            (("2" (REWRITE "var_names" 1)
              (("2" (AUTO-REWRITE "union" "add" "member")
                (("2" (ASSERT)
                  (("2" (REPLACE -1 :HIDE? T)
                    (("2" (IFF)
                      (("2" (PROP)
                        (("1" (INST?) (("1" (ASSERT) NIL)))
                         ("2" (INST?) (("2" (ASSERT) NIL)))
                         ("3" (SKOSIMP*) (("3" (INST?) (("3" (ASSERT) NIL)))))
                         ("4" (SKOSIMP*)
                          (("4" (SPLIT -1)
                            (("1" (ASSERT) NIL)
                             ("2" (INST?)
                              (("2" (ASSERT) NIL))))))))))))))))))))))))))))
    "")
   UNCHECKED
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|ann_action| DEF-DECL "Stmt" |AnnotateEvent| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|Set| ADT-CONSTRUCTOR-DECL "[[Name, Expr] -> (Set?)]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL))
   181 181 NIL NIL))
 (|ann_guard_actions_set_TCC1| 0
  (|ann_guard_actions_set_TCC1-2| NIL 3401619720 3401700045
   (";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
    (SKOSIMP*)
    ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
      (TYPEPRED "ts!1")
      ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
        (EXPAND "is_finite")
        ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
          (SKOSIMP*)
          ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
            (INST 1 "N!1" "LAMBDA(x :({x: [BoolExpr[Name], Stmt[Name]] |
                       EXISTS (t: Transition[CP, Name]):
                         ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))})) : f!1(choose({t : Transition[CP, Name] |  ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL)))
                   ("2" (REWRITE "nonempty_exists")
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOSIMP*)
                        (("2" (INST?) (("2" (ASSERT) NIL)))))))))
                   ("3" (REWRITE "nonempty_exists")
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOSIMP*)
                        (("3" (INST?) (("3" (ASSERT) NIL)))))))))))))))
             ("2" (SKOSIMP*)
              (("2" (REWRITE "nonempty_exists")
                (("2" (TYPEPRED "x!1")
                  (("2" (SKOSIMP*)
                    (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|guard_to_expression| CONST-DECL "BoolExpr" |MVASemantics| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL
    (|update_vars| CONST-DECL "Stmt" |AnnotateEvent| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   322 318 NIL NIL)
  (|ann_guard_actions_set_TCC1-1| NIL 3401619498 NIL ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL NIL NIL NIL NIL))
 (|ann_event_set_TCC1| 0
  (|ann_event_set_TCC1-1| NIL 3401619498 3401700045
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t :
                        ({t: Transition[CP, Name] |
                             ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (EXPAND "injective?")
              (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   64 62 T NIL))
 (|ann_event_set_TCC2| 0
  (|ann_event_set_TCC2-2| NIL 3401619789 3401700078
   (";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
    (SKOSIMP*)
    ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
      (TYPEPRED "cps(mva(mp!1))")
      ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
        (EXPAND "is_finite")
        ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
          (SKOSIMP*)
          ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
            (INST 1 "N!1" "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                             EXISTS (q: CP):
                               cps(mva(mp!1))(q) AND
                                nonempty?[Transition[CP, Name]]
                                    ({t: Transition[CP, Name] |
                                        ts!1(t) AND scp(t) = q})
                                 AND
                                 c =
                                  ann_trans_cp(mp!1)
                                              (q,
                                               {t: Transition[CP, Name]
                                                |
                                                ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                                nonempty?[Transition[CP, Name]]
                                    ({t: Transition[CP, Name] |
                                        ts!1(t) AND scp(t) = q})
                                 AND
                                 c =
                                  ann_trans_cp(mp!1)
                                              (q,
                                               {t: Transition[CP, Name]
                                                |
                                                ts!1(t) AND scp(t) = q})}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (HIDE -2)
                      (("1"
                        (NAME "q1"
                              "choose({q: CP |
                                                  cps(mva(mp!1))(q) AND
                                                   nonempty?[Transition[CP, Name]]
                                                       ({t: Transition[CP, Name] |
                                                           ts!1(t) AND scp(t) = q})
                                                    AND
                                                    x1!1 =
                                                     ann_trans_cp(mp!1)
                                                                 (q,
                                                                  {t: Transition[CP, Name] |
                                                                     ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (NAME "q2"
                                "choose({q: CP |
                                                        cps(mva(mp!1))(q) AND
                                                         nonempty?[Transition[CP, Name]]
                                                             ({t: Transition[CP, Name] |
                                                                 ts!1(t) AND scp(t) = q})
                                                          AND
                                                          x2!1 =
                                                           ann_trans_cp(mp!1)
                                                                       (q,
                                                                        {t: Transition[CP, Name] |
                                                                           ts!1(t) AND scp(t) = q})})")
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2)
                              (("1"
                                (CASE
                                    "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (CASE
                                      "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1" (REPLACE -5) (("1" (ASSERT) NIL)))
                                   ("2" (REPLACE -2 :DIR RL)
                                    (("2" (ASSERT) NIL)))
                                   ("3" (TYPEPRED "ts!1")
                                    (("3" (EXPAND "is_finite")
                                      (("3" (SKOSIMP*)
                                        (("3" (INST 1 "N!2" "f!2")
                                          (("3" (GRIND) NIL)))))))))))
                                 ("2" (REPLACE -1 :DIR RL)
                                  (("2" (ASSERT) NIL)))
                                 ("3" (TYPEPRED "ts!1")
                                  (("3" (EXPAND "is_finite")
                                    (("3" (SKOSIMP*)
                                      (("3" (INST 1 "N!2" "f!2")
                                        (("3" (GRIND) NIL)))))))))))))))
                           ("2" (TYPEPRED "x2!1")
                            (("2" (SKOSIMP*)
                              (("2" (REWRITE "nonempty_exists" 1)
                                (("2" (INST?) (("2" (ASSERT) NIL)))))))))))
                         ("2" (TYPEPRED "x1!1")
                          (("2" (SKOSIMP*)
                            (("2" (REWRITE "nonempty_exists" 1)
                              (("1" (INST?) (("1" (ASSERT) NIL)))
                               ("2" (SKOSIMP*)
                                (("2" (TYPEPRED "ts!1")
                                  (("2" (EXPAND "is_finite")
                                    (("2" (SKOSIMP*)
                                      (("2" (INST 1 "N!2" "f!2")
                                        (("2" (GRIND) NIL)))))))))))))))))
                         ("3" (SKOSIMP*)
                          (("3" (TYPEPRED "ts!1")
                            (("3" (EXPAND "is_finite")
                              (("3" (SKOSIMP*)
                                (("3" (INST 1 "N!2" "f!2")
                                  (("3" (GRIND) NIL)))))))))))))))))
                   ("2" (TYPEPRED "x2!1")
                    (("2" (SKOSIMP*)
                      (("2" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL)))
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL)))))))))))))))))
                   ("3" (TYPEPRED "x1!1")
                    (("3" (SKOSIMP*)
                      (("3" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL)))
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL)))))))))))))))))
                   ("4" (SKOSIMP*)
                    (("4" (TYPEPRED "ts!1")
                      (("4" (EXPAND "is_finite")
                        (("4" (SKOSIMP*)
                          (("4" (INST 1 "N!2" "f!2")
                            (("4" (GRIND) NIL)))))))))))))))))
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists" 1)
                    (("1" (INST?) (("1" (ASSERT) NIL)))
                     ("2" (SKOSIMP*)
                      (("2" (TYPEPRED "ts!1")
                        (("2" (EXPAND "is_finite")
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "N!2" "f!2")
                              (("2" (GRIND) NIL)))))))))))))))))))
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "ts!1")
                (("3" (EXPAND "is_finite")
                  (("3" (SKOSIMP*)
                    (("3" (INST 1 "N!2" "f!2")
                      (("3" (GRIND) NIL))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|ann_guard_actions| CONST-DECL "list[[BoolExpr, Stmt]]" |AnnotateEvent|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|ann_guard_actions_set| CONST-DECL "finite_set[[BoolExpr, Stmt]]"
     |AnnotateEvent| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateEvent| NIL) NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (|nonempty?| CONST-DECL "bool" |sets| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_trans_cp| CONST-DECL "[BoolExpr, Stmt]" |AnnotateEvent| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   3327 3285 NIL NIL)
  (|ann_event_set_TCC2-1| NIL 3401619498 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   NIL NIL NIL NIL))
 (|var_names_ann_event| 0
  (|var_names_ann_event-1| NIL 3401682730 3401704757
   ("" (SKOSIMP*)
    (("" (EXPAND "subset?" 1)
      (("" (EXPAND "member")
        (("" (SKOSIMP*)
          (("" (EXPAND "ann_event")
            (("" (REWRITE "var_names_CaseJML_set2list")
              (("" (SKOSIMP*)
                (("" (EXPAND "ann_event_set")
                  (("" (SKOSIMP*)
                    (("" (EXPAND "ann_trans_cp")
                      (("" (REPLACE -4 :HIDE? T)
                        (("" (AUTO-REWRITE "union" "member")
                          (("" (ASSERT)
                            (("" (REWRITE "var_names" -4)
                              (("" (REWRITE "var_names" -4)
                                (("" (REWRITE "var_names" -4)
                                  (("" (REWRITE "var_names" -4)
                                    (("" (REWRITE "var_names" -4)
                                      (("" (EXPAND "singleton")
                                        (("" (ASSERT)
                                          (("" (SPLIT -4)
                                            (("1" (REPLACE -1)
                                              (("1" (USE "cp_new_ghostvar")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (REPLACE -1)
                                              (("2" (FLATTEN)
                                                (("2" (EXPAND "new_gvds")
                                                  (("2"
                                                    (REWRITE "add_as_union")
                                                    (("2"
                                                      (REWRITE
                                                       "var_names_union")
                                                      (("2"
                                                        (REWRITE
                                                         "var_names_union")
                                                        (("2" (ASSERT)
                                                          (("2" (FLATTEN)
                                                            (("2"
                                                              (EXPAND
                                                               "new_cps_gvds")
                                                              (("2"
                                                                (EXPAND
                                                                 "var_names")
                                                                (("2"
                                                                  (INST 2
                                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                  (("1"
                                                                    (INST 2
                                                                     "q!1")
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "defined?")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (EXPAND "ann_guard_actions")
                                              (("3"
                                                (REWRITE
                                                 "var_names_CaseJML_set2list")
                                                (("1" (SKOSIMP*)
                                                  (("1"
                                                    (EXPAND
                                                     "ann_guard_actions_set")
                                                    (("1" (SKOSIMP*)
                                                      (("1" (REPLACE -3)
                                                        (("1"
                                                          (EXPAND
                                                           "update_vars")
                                                          (("1" (SPLIT -4)
                                                            (("1"
                                                              (USE
                                                               "var_names_guard_to_expresion")
                                                              (("1"
                                                                (TYPEPRED
                                                                 "mp!1")
                                                                (("1"
                                                                  (EXPAND
                                                                   "wf_MP")
                                                                  (("1"
                                                                    (EXPAND*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (INST?)
                                                                      (("1"
                                                                        (PROP)
                                                                        (("1"
                                                                          (INST?)
                                                                          (("1"
                                                                            (ASSERT)
                                                                            (("1"
                                                                              (USE
                                                                               "var_names_MVA_subset_var_names_new_gdvs")
                                                                              (("1"
                                                                                (EXPAND*
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REWRITE
                                                               "var_names" -1)
                                                              (("2"
                                                                (REWRITE
                                                                 "var_names"
                                                                 -1)
                                                                (("2"
                                                                  (REWRITE
                                                                   "var_names"
                                                                   -1)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "var_names"
                                                                     -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "add")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "singleton")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (SPLIT
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (USE
                                                                                   "cp_new_ghostvar")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "new_gvds")
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "add_as_union")
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "var_names_union")
                                                                                      (("2"
                                                                                        (REWRITE
                                                                                         "var_names_union")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "new_cps_gvds")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "var_names")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   2
                                                                                                   "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     2
                                                                                                     "tcp(t!1)")
                                                                                                    (("1"
                                                                                                      (TYPEPRED
                                                                                                       "mp!1")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "wf_MP")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "wf_MVA")
                                                                                                          (("1"
                                                                                                            (FLATTEN)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "wf_Trans")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -6
                                                                                                                 "t!1")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       -10
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (PROPAX)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (REWRITE
                                                                                 "var_names_ann_action")
                                                                                (("3"
                                                                                  (SKOSIMP*)
                                                                                  (("3"
                                                                                    (TYPEPRED
                                                                                     "mp!1")
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "wf_MP")
                                                                                      (("3"
                                                                                        (EXPAND
                                                                                         "wf_MVA")
                                                                                        (("3"
                                                                                          (FLATTEN)
                                                                                          (("3"
                                                                                            (INST
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("3"
                                                                                              (EXPAND
                                                                                               "wf_Trans")
                                                                                              (("3"
                                                                                                (EXPAND
                                                                                                 "wf_Action")
                                                                                                (("3"
                                                                                                  (EXPAND
                                                                                                   "subset?")
                                                                                                  (("3"
                                                                                                    (EXPAND
                                                                                                     "member"
                                                                                                     -12)
                                                                                                    (("3"
                                                                                                      (INST
                                                                                                       -12
                                                                                                       "t!1")
                                                                                                      (("3"
                                                                                                        (ASSERT)
                                                                                                        (("3"
                                                                                                          (ASSERT)
                                                                                                          (("3"
                                                                                                            (FLATTEN)
                                                                                                            (("3"
                                                                                                              (INST
                                                                                                               -9
                                                                                                               "oa!1")
                                                                                                              (("3"
                                                                                                                (ASSERT)
                                                                                                                (("3"
                                                                                                                  (FLATTEN)
                                                                                                                  (("3"
                                                                                                                    (INST
                                                                                                                     -10
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (ASSERT)
                                                                                                                      (("3"
                                                                                                                        (SPLIT
                                                                                                                         -12)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "var_names"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "new_gvds")
                                                                                                                            (("1"
                                                                                                                              (REWRITE
                                                                                                                               "add_as_union")
                                                                                                                              (("1"
                                                                                                                                (REWRITE
                                                                                                                                 "var_names_union")
                                                                                                                                (("1"
                                                                                                                                  (REWRITE
                                                                                                                                   "var_names_union")
                                                                                                                                  (("1"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("1"
                                                                                                                                      (FLATTEN)
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "new_mva_vars_gvds")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "var_names"
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (SKOSIMP*)
                                                                                                                                            (("1"
                                                                                                                                              (INST
                                                                                                                                               4
                                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                              (("1"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   4
                                                                                                                                                   "f!1")
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (SPLIT
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "var_names"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "new_gvds")
                                                                                                                                (("1"
                                                                                                                                  (REWRITE
                                                                                                                                   "add_as_union")
                                                                                                                                  (("1"
                                                                                                                                    (REWRITE
                                                                                                                                     "var_names_union")
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "var_names_union")
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        (("1"
                                                                                                                                          (FLATTEN)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "new_mva_vars_gvds")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "var_names"
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (SKOSIMP*)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   4
                                                                                                                                                   "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (INST
                                                                                                                                                       4
                                                                                                                                                       "f!1")
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (EXPAND
                                                                                                                               "compatible")
                                                                                                                              (("2"
                                                                                                                                (FLATTEN)
                                                                                                                                (("2"
                                                                                                                                  (SKOSIMP*)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "MVA_prog_vars_are_fields")
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "var_names"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (SKOSIMP*)
                                                                                                                                          (("2"
                                                                                                                                            (INST
                                                                                                                                             -7
                                                                                                                                             "l!1")
                                                                                                                                            (("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("2"
                                                                                                                                                (SKOSIMP*)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "var_names"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "Union")
                                                                                                                                                    (("2"
                                                                                                                                                      (INST
                                                                                                                                                       2
                                                                                                                                                       "var_names(c!1)")
                                                                                                                                                      (("1"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "Union")
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            (("1"
                                                                                                                                                              (FLATTEN)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "var_names"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (INST
                                                                                                                                                                   3
                                                                                                                                                                   "fd!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL)
                                                                                                                                                       ("2"
                                                                                                                                                        (INST?)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (USE "ann_event_set_TCC1")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|subset?| CONST-DECL "bool" |sets| NIL)
    (|var_names_CaseJML_set2list| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_event_set| CONST-DECL "finite_set[[BoolExpr, Stmt]]" |AnnotateEvent|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|ann_trans_cp| CONST-DECL "[BoolExpr, Stmt]" |AnnotateEvent| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Eq| ADT-CONSTRUCTOR-DECL "[[Expr, Expr] -> (Eq?)]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (NumVarEval?)]" |Body_adt|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|ann_guard_actions| CONST-DECL "list[[BoolExpr, Stmt]]" |AnnotateEvent|
     NIL)
    (|ann_event_set_TCC1| SUBTYPE-TCC NIL |AnnotateEvent| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateEvent| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (|Set| ADT-CONSTRUCTOR-DECL "[[Name, Expr] -> (Set?)]" |Body_adt| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|ann_action| DEF-DECL "Stmt" |AnnotateEvent| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    NIL (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    NIL NIL NIL (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|MVA_prog_vars_are_fields| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|var_names_ann_action| FORMULA-DECL NIL |AnnotateEvent| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|var_names_guard_to_expresion| FORMULA-DECL NIL |MVASemantics| NIL)
    (|var_names_MVA_subset_var_names_new_gdvs| FORMULA-DECL NIL
     |NewVariableDeclarations| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ann_guard_actions_set| CONST-DECL "finite_set[[BoolExpr, Stmt]]"
     |AnnotateEvent| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL) NIL
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) NIL NIL
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|cp_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateEvent| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   783 774 T NIL))
 (|ann_event_var_names| 0
  (|ann_event_var_names-1| NIL 3401682976 3401704762
   ("" (SKOSIMP*)
    (("" (USE "var_names_ann_event")
      (("" (SPLIT -1)
        (("1" (EXPAND "subset?")
          (("1" (EXPAND "member")
            (("1" (INST?)
              (("1" (ASSERT)
                (("1" (EXPAND "union")
                  (("1" (EXPAND "member")
                    (("1" (TYPEPRED "program(mp!1)")
                      (("1" (EXPAND "wf_Program")
                        (("1" (FLATTEN)
                          (("1" (EXPAND "var_names" -5)
                            (("1" (EXPAND "Union")
                              (("1" (SKOSIMP*)
                                (("1" (TYPEPRED "a!1")
                                  (("1" (SKOSIMP*)
                                    (("1" (REPLACE -2)
                                      (("1" (EXPAND "var_names" -7)
                                        (("1" (AUTO-REWRITE "union" "member")
                                          (("1" (ASSERT)
                                            (("1" (SPLIT -7)
                                              (("1" (EXPAND "Union")
                                                (("1" (SKOSIMP*)
                                                  (("1" (TYPEPRED "a!2")
                                                    (("1" (SKOSIMP*)
                                                      (("1" (REPLACE -2)
                                                        (("1"
                                                          (EXPAND "var_names"
                                                                  -3)
                                                          (("1"
                                                            (EXPAND "Union")
                                                            (("1" (SKOSIMP*)
                                                              (("1"
                                                                (TYPEPRED
                                                                 "a!3")
                                                                (("1"
                                                                  (EXPAND
                                                                   "wf_Classes")
                                                                  (("1" (INST?)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "wf_Class")
                                                                        (("1"
                                                                          (FLATTEN)
                                                                          (("1"
                                                                            (INST?
                                                                             -11)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "wf_Method")
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "wf_Body")
                                                                                    (("1"
                                                                                      (SPLIT
                                                                                       -1)
                                                                                      (("1"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("1"
                                                                                          (INST?
                                                                                           -12)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (INST?
                                                                                           -13)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("3"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("3"
                                                                                          (INST?
                                                                                           -11)
                                                                                          (("3"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("4"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("4"
                                                                                          (INST?
                                                                                           -14)
                                                                                          (("4"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("5"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("5"
                                                                                          (INST?
                                                                                           -15)
                                                                                          (("5"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("6"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("6"
                                                                                          (INST?
                                                                                           -16)
                                                                                          (("6"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("7"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("7"
                                                                                          (EXPAND
                                                                                           "var_names"
                                                                                           -4)
                                                                                          (("7"
                                                                                            (SKOSIMP*)
                                                                                            (("7"
                                                                                              (EXPAND
                                                                                               "ext_declared_var_names"
                                                                                               1)
                                                                                              (("7"
                                                                                                (ASSERT)
                                                                                                (("7"
                                                                                                  (FLATTEN)
                                                                                                  (("7"
                                                                                                    (EXPAND
                                                                                                     "var_names"
                                                                                                     2)
                                                                                                    (("7"
                                                                                                      (INST?
                                                                                                       2)
                                                                                                      (("7"
                                                                                                        (ASSERT)
                                                                                                        (("7"
                                                                                                          (EXPAND
                                                                                                           "getLocalDecls")
                                                                                                          (("7"
                                                                                                            (INST?
                                                                                                             2)
                                                                                                            (("7"
                                                                                                              (ASSERT)
                                                                                                              (("7"
                                                                                                                (EXPAND
                                                                                                                 "getLocalDecls")
                                                                                                                (("7"
                                                                                                                  (INST?
                                                                                                                   2)
                                                                                                                  (("7"
                                                                                                                    (ASSERT)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("8"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("8"
                                                                                          (INST?
                                                                                           -17)
                                                                                          (("8"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("9"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("9"
                                                                                          (EXPAND
                                                                                           "singleton")
                                                                                          (("9"
                                                                                            (EXPAND
                                                                                             "ext_declared_var_names"
                                                                                             1)
                                                                                            (("9"
                                                                                              (ASSERT)
                                                                                              (("9"
                                                                                                (FLATTEN)
                                                                                                (("9"
                                                                                                  (EXPAND
                                                                                                   "var_names"
                                                                                                   2)
                                                                                                  (("9"
                                                                                                    (INST
                                                                                                     2
                                                                                                     "arg(m!1)")
                                                                                                    (("9"
                                                                                                      (ASSERT)
                                                                                                      (("9"
                                                                                                        (EXPAND
                                                                                                         "getLocalDecls")
                                                                                                        (("9"
                                                                                                          (INST?
                                                                                                           2)
                                                                                                          (("9"
                                                                                                            (ASSERT)
                                                                                                            (("9"
                                                                                                              (EXPAND
                                                                                                               "getLocalDecls")
                                                                                                              (("9"
                                                                                                                (INST?
                                                                                                                 2)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2"
                                                (EXPAND
                                                 "ext_declared_var_names"
                                                 1)
                                                (("2" (ASSERT)
                                                  (("2" (FLATTEN)
                                                    (("2"
                                                      (EXPAND "var_names" -1)
                                                      (("2"
                                                        (EXPAND "var_names" 1)
                                                        (("2" (SKOSIMP*)
                                                          (("2" (INST?)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "getFieldDecls")
                                                                (("2" (INST?)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3"
                                                (EXPAND
                                                 "ext_declared_var_names")
                                                (("3" (ASSERT)
                                                  (("3" (FLATTEN)
                                                    (("3"
                                                      (EXPAND "var_names" -1)
                                                      (("3"
                                                        (EXPAND "var_names" 3)
                                                        (("3" (SKOSIMP*)
                                                          (("3" (INST?)
                                                            (("3" (ASSERT)
                                                              (("3"
                                                                (EXPAND
                                                                 "getGhostDecls")
                                                                (("3" (INST?)
                                                                  (("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("4" (EXPAND "wf_Classes")
                                                (("4" (INST?)
                                                  (("4" (ASSERT)
                                                    (("4" (EXPAND "wf_Class")
                                                      (("4" (FLATTEN)
                                                        (("4"
                                                          (EXPAND "wf_Body")
                                                          (("4" (INST? -10)
                                                            (("4" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (PROPAX) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateEvent| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|var_names_ann_event| FORMULA-DECL NIL |AnnotateEvent| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) NIL
    (|wf_Classes| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ext_declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions|
     NIL)
    NIL NIL (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Method| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL) NIL
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL NIL
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    NIL (|member| CONST-DECL "bool" |sets| NIL))
   546 546 T SHOSTAK)))
(|AnnotateMethod|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3401619631 3401704762
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateMethod| NIL)) 3 3 T NIL))
 (|IMP_AnnotateEvent_TCC1| 0
  (|IMP_AnnotateEvent_TCC1-1| NIL 3401619631 3401704762
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateMethod| NIL)) 3 3 T NIL))
 (|IMP_AnnotateEvent_TCC2| 0
  (|IMP_AnnotateEvent_TCC2-1| NIL 3401619631 3401704762
   ("" (USE "name_of_exists") NIL NIL) UNCHECKED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateMethod| NIL)) 3 3 T NIL))
 (|filter_event_TCC1| 0
  (|filter_event_TCC1-2| NIL 3401619964 3401704765
   (";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
    (SKOSIMP*)
    ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
      (TYPEPRED "ts(a!1)")
      ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
        (EXPAND "is_finite")
        ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
          (SKOSIMP*)
          ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
            (INST 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                         ts(a!1)(t) AND
                          etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
              (GRIND) NIL))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   238 238 NIL NIL)
  (|filter_event_TCC1-1| NIL 3401619631 NIL ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL NIL NIL NIL NIL))
 (|filter_event_subset| 0
  (|filter_event_subset-1| NIL 3401684085 3401704765
   ("" (SKOSIMP*)
    (("" (EXPAND "subset?")
      (("" (EXPAND "member")
        (("" (SKOSIMP*)
          (("" (EXPAND "filter_event") (("" (ASSERT) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|subset?| CONST-DECL "bool" |sets| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateMethod| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   5 5 T SHOSTAK))
 (|ann_method_TCC1| 0
  (|ann_method_TCC1-2| NIL 3401619990 3401704765
   (";;; Proof ann_method_TCC1-1 for formula AnnotateProgram.ann_method_TCC1"
    (SKOLEM-TYPEPRED)
    ((";;; Proof ann_method_TCC1-1 for formula AnnotateProgram.ann_method_TCC1"
      (EXPAND* "wf_MP" "complete")
      ((";;; Proof ann_method_TCC1-1 for formula AnnotateProgram.ann_method_TCC1"
        (FLATTEN) NIL))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   21 21 NIL NIL)
  (|ann_method_TCC1-1| NIL 3401619631 NIL ("" (SUBTYPE-TCC) NIL NIL) UNFINISHED
   NIL NIL NIL NIL NIL))
 (|ann_methods_TCC1| 0
  (|ann_methods_TCC1-2| NIL 3401620001 3401704765
   (";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
    (SKOSIMP*)
    ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
      (TYPEPRED "ms!1")
      ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
        (EXPAND "is_finite")
        ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
          (SKOSIMP*)
          ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
            (INST 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                         EXISTS (n: Method[Name]):
                           ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "n!1") (("2" (ASSERT) NIL)))))
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "n!2")
                            (("3" (ASSERT) NIL)))))))))))))))))
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "m!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "n!1") (("2" (ASSERT) NIL))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL) NIL
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   38 37 NIL NIL)
  (|ann_methods_TCC1-1| NIL 3401619631 NIL ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL NIL NIL NIL NIL))
 (|ann_method_body| 0
  (|ann_method_body-1| NIL 3401620545 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 21 21 T
   SHOSTAK))
 (|ann_method_pre| 0
  (|ann_method_pre-1| NIL 3401620551 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 4 4 T
   SHOSTAK))
 (|ann_method_post| 0
  (|ann_method_post-1| NIL 3401620559 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 3 4 T
   SHOSTAK))
 (|ann_method_arg| 0
  (|ann_method_arg-1| NIL 3401620571 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 39 39 T
   SHOSTAK))
 (|ann_method_res| 0
  (|ann_method_res-1| NIL 3401620574 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 4 4 T
   SHOSTAK))
 (|ann_method_res_type| 0
  (|ann_method_res_type-1| NIL 3401620593 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 3 3 T
   SHOSTAK))
 (|ann_method_lvars| 0
  (|ann_method_lvars-1| NIL 3401620597 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 21 21 T
   SHOSTAK))
 (|ann_method_pre_set| 0
  (|ann_method_pre_set-1| NIL 3401620600 3401704766
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 4 4 T
   SHOSTAK))
 (|ann_method_post_set| 0
  (|ann_method_post_set-1| NIL 3401620605 3401704767
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 4 4 T
   SHOSTAK))
 (|ann_method_exc_set| 0
  (|ann_method_exc_set-1| NIL 3401620608 3401704767
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   UNCHECKED ((|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)) 22 21 T
   SHOSTAK))
 (|ann_method_wf_Body| 0
  (|ann_method_wf_Body-1| NIL 3401699901 3401704770
   (";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
    (SKOSIMP*)
    ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
      (ASSERT)
      ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
        (AUTO-REWRITE "union" "member" "singleton")
        ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
          (AUTO-REWRITE-THEORY "AnnotateMethod")
          ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
            (USE "new_vars_derived_from_mp")
            ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
              (USE "halted_new_ghostvar")
              ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                (EXPAND "wf_Method")
                ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                  (EXPAND "wf_Body")
                  ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                    (FLATTEN)
                    ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                      (ASSERT)
                      ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                        (SPLIT 1)
                        (("1" (PROPAX) NIL) ("2" (PROPAX) NIL)
                         ("3" (PROPAX) NIL) ("4" (PROPAX) NIL)
                         ("5" (SKOSIMP*)
                          (("5" (REWRITE "var_names" -1)
                            (("5" (ASSERT)
                              (("5" (SPLIT -1)
                                (("1" (INST? -9) (("1" (ASSERT) NIL)))
                                 ("2" (REWRITE "var_names" -1)
                                  (("2" (ASSERT)
                                    (("2" (SPLIT -1)
                                      (("1" (USE "ann_event_var_names")
                                        (("1" (ASSERT) NIL)))
                                       ("2"
                                        (APPLY
                                         (REPEAT
                                          (THEN (REWRITE "var_names" -1)
                                           (ASSERT))))
                                        NIL)))))))))))))))
                         ("6" (SKOSIMP*)
                          (("6" (REWRITE "var_names" -1)
                            (("6" (ASSERT)
                              (("6" (SPLIT -1)
                                (("1" (INST? -10) (("1" (ASSERT) NIL)))
                                 ("2" (USE "ann_event_var_names")
                                  (("2" (ASSERT) NIL)))))))))))
                         ("7" (SKOSIMP*)
                          (("7" (REWRITE "var_names" -1)
                            (("7" (ASSERT)
                              (("7" (SPLIT -1)
                                (("1" (INST? -11) (("1" (ASSERT) NIL)))
                                 ("2" (USE "ann_event_var_names")
                                  (("2" (ASSERT)
                                    NIL))))))))))))))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   UNCHECKED
   ((|halted_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)
    (|ExitExceptional| ADT-CONSTRUCTOR-DECL "(ExitExceptional?)"
     |EventType_adt| NIL)
    (|ExitExceptional?| ADT-RECOGNIZER-DECL "[EventType -> boolean]"
     |EventType_adt| NIL)
    (|ExitNormal| ADT-CONSTRUCTOR-DECL "(ExitNormal?)" |EventType_adt| NIL)
    (|ExitNormal?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt|
     NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|filter_event_subset| FORMULA-DECL NIL |AnnotateMethod| NIL)
    (|ann_event_var_names| FORMULA-DECL NIL |AnnotateEvent| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (NumVarEval?)]" |Body_adt|
     NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq| ADT-CONSTRUCTOR-DECL "[[Expr, Expr] -> (Eq?)]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Neg?)]" |Body_adt| NIL)
    (|Assert| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Assert?)]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Entry| ADT-CONSTRUCTOR-DECL "(Entry?)" |EventType_adt| NIL)
    (|Entry?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateMethod| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateEvent| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|wf_Method| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateMethod| NIL)
    (|new_vars_derived_from_mp| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   320 320 NIL NIL)))
(|AnnotateClass|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3401619633 3401704770
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateClass| NIL)) 3 2 T NIL))
 (|IMP_AnnotateMethod_TCC1| 0
  (|IMP_AnnotateMethod_TCC1-1| NIL 3401619633 3401704770
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateClass| NIL)) 3 2 T NIL))
 (|IMP_AnnotateMethod_TCC2| 0
  (|IMP_AnnotateMethod_TCC2-1| NIL 3401619633 3401704770
   ("" (USE "name_of_exists") NIL NIL) UNCHECKED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateClass| NIL)) 3 3 T NIL))
 (|FieldDecls_ann_class| 0
  (|FieldDecls_ann_class-1| NIL 3401684150 3401704770
   ("" (SKOSIMP*)
    (("" (EXPAND "ann_class") (("" (LIFT-IF) (("" (PROPAX) NIL NIL)) NIL))
      NIL))
    NIL)
   UNCHECKED ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)) 23 22 T
   SHOSTAK))
 (|LocalDecls_ann_class| 0
  (|LocalDecls_ann_class-1| NIL 3401684165 3401704771
   ("" (SKOSIMP*)
    (("" (EXPAND "ann_class")
      (("" (LIFT-IF)
        (("" (ASSERT)
          (("" (SPLIT 1)
            (("1" (SKOSIMP*)
              (("1" (EXPAND "getLocalDecls")
                (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("1" (EXPAND "ann_methods")
                    (("1" (ASSERT)
                      (("1" (AUTO-REWRITE "ann_method_arg")
                        (("1" (AUTO-REWRITE "ann_method_lvars")
                          (("1" (IFF)
                            (("1" (SPLIT 1)
                              (("1" (SKOSIMP*)
                                (("1" (INST?)
                                  (("1" (ASSERT)
                                    (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST 1 "ann_method(mp!1)(m!1)")
                                  (("2" (ASSERT)
                                    (("2" (SPLIT 1)
                                      (("1" (INST?) NIL NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (PROPAX) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateClass| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateClass| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|ann_method_arg| FORMULA-DECL NIL |AnnotateMethod| NIL)
    (|ann_method_lvars| FORMULA-DECL NIL |AnnotateMethod| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL) NIL)
   37 37 T SHOSTAK))
 (|GhostDecls_ann_class_annotated| 0
  (|GhostDecls_ann_class_annotated-1| NIL 3401684331 3401704771
   ("" (SKOSIMP*)
    (("" (EXPAND "ann_class") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   UNCHECKED ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)) 4 4 T
   SHOSTAK))
 (|GhostDecls_ann_class_not_annotated| 0
  (|GhostDecls_ann_class_not_annotated-1| NIL 3401684344 3401704771
   ("" (SKOSIMP*) (("" (EXPAND "ann_class") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   UNCHECKED
   ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL))
   40 40 T SHOSTAK))
 (|ann_class_almost_wf_Class| 0
  (|ann_class_almost_wf_Class-1| NIL 3401684390 3401704776
   ("" (SKOSIMP*)
    (("" (ASSERT)
      (("" (EXPAND "wf_Class")
        (("" (FLATTEN)
          (("" (SPLIT 1)
            (("1" (SKOSIMP*)
              (("1" (EXPAND "ann_class")
                (("1" (SPLIT -1)
                  (("1" (FLATTEN)
                    (("1" (ASSERT)
                      (("1" (EXPAND "ann_methods")
                        (("1" (SKOSIMP*)
                          (("1" (INST -8 "n!1" "n!2")
                            (("1" (ASSERT)
                              (("1" (EXPAND "ann_method")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (FLATTEN)
                    (("2" (ASSERT)
                      (("2" (SPLIT -2)
                        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (FLATTEN)
                          (("2" (ASSERT)
                            (("2" (INST? -4) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "wf_Body")
              (("2" (SKOSIMP*)
                (("2" (INST?)
                  (("2" (EXPAND "ann_class" -1)
                    (("2" (SPLIT -1)
                      (("1" (FLATTEN)
                        (("1" (ASSERT)
                          (("1" (REWRITE "var_names" -3)
                            (("1" (AUTO-REWRITE "union" "member")
                              (("1" (ASSERT)
                                (("1" (REWRITE "var_names" -3)
                                  (("1" (REWRITE "var_names" -3)
                                    (("1" (ASSERT)
                                      (("1"
                                        (APPLY
                                         (REPEAT (REWRITE "var_names" -3)))
                                        (("1" (EXPAND "singleton")
                                          (("1" (SPLIT -3)
                                            (("1" (USE "cp_new_ghostvar")
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (USE "halted_new_ghostvar")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|halted_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|cp_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateClass| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (NumVarEval?)]" |Body_adt|
     NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq| ADT-CONSTRUCTOR-DECL "[[Expr, Expr] -> (Eq?)]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Neg?)]" |Body_adt| NIL)
    (|Conj| ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (Conj?)]" |Body_adt|
     NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateClass| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL))
   536 535 T SHOSTAK))
 (|ann_class_inv_TCC1| 0
  (|ann_class_inv_TCC1-1| NIL 3401682275 3401704778 ("" (SUBTYPE-TCC) NIL NIL)
   UNCHECKED
   ((|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateClass| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateClass| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   159 158 NIL NIL))
 (|ann_class_inv| 0
  (|ann_class_inv-1| NIL 3401682311 3401704779
   ("" (SKOSIMP*)
    (("" (EXPAND "ann_class")
      (("" (ASSERT) (("" (LIFT-IF) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   UNCHECKED ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)) 76 76 T
   SHOSTAK))
 (|ann_program_preserves_class_name| 0
  (|ann_program_preserves_class_name-1| NIL 3401682902 3401704779
   (";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
    (SKOSIMP*)
    ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
      (EXPAND "ann_class")
      ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
        (LIFT-IF)
        ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
          (PROPAX) NIL))))))
    "")
   UNCHECKED ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)) 3 4 NIL
   NIL)))
(|AnnotateProgram|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396601203 3401704779
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateProgram| NIL)) 21 21 T
   NIL))
 (|IMP_AnnotateClass_TCC1| 0
  (|IMP_AnnotateClass_TCC1-1| NIL 3401620497 3401704779
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgram| NIL)) 2 3 T NIL))
 (|IMP_AnnotateClass_TCC2| 0
  (|IMP_AnnotateClass_TCC2-1| NIL 3401620497 3401704779
   ("" (USE "name_of_exists") NIL NIL) UNCHECKED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateProgram| NIL)) 2 3 T NIL))
 (|ann_program_TCC1| 0
  (|ann_program_TCC1-1| NIL 3383987003 3401704780
   ("" (SKOSIMP)
    (("" (TYPEPRED "classes(program(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                         EXISTS (c1: Class[Name]):
                           classes(program(mp!1))(c1) AND
                            c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "c1!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL) NIL NIL
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL) NIL NIL NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   70 70 T NIL))
 (|ann_program_TCC2| 0
  (|ann_program_TCC2-3| NIL 3401699946 3401704788
   ("" (SKOSIMP*)
    (("" (TYPEPRED "program(mp!1)")
      (("" (EXPAND "wf_Program")
        ((""
          (CASE "    is_finite[Class[Name]]
                                 ({c: Class[Name] |
                                     EXISTS (c1: Class[Name]):
                                       mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (CASE "var_names(getFieldDecls((# classes
                                                                                  := {c: Class[Name] |
                                                                                        EXISTS (c1:
                                                                                                  Class
                                                                                                      [Name]):
                                                                                          classes
                                                                                            (program(mp!1))
                                                                                              (c1)
                                                                                           AND
                                                                                           c =
                                                                                            ann_class[CP, Name]
                                                                                                (mp!1)
                                                                                                (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (CASE "var_names(getLocalDecls((# classes
                                                                                            := {c: Class[Name] |
                                                                                                  EXISTS (c1:
                                                                                                            Class
                                                                                                                [Name]):
                                                                                                    classes
                                                                                                      (program(mp!1))
                                                                                                        (c1)
                                                                                                     AND
                                                                                                     c =
                                                                                                      ann_class[CP, Name]
                                                                                                          (mp!1)
                                                                                                          (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (CASE "var_names(getGhostDecls((# classes
                                                                                                      := {c: Class[Name] |
                                                                                                            EXISTS (c1:
                                                                                                                      Class
                                                                                                                          [Name]):
                                                                                                              classes
                                                                                                                (program(mp!1))
                                                                                                                  (c1)
                                                                                                               AND
                                                                                                               c =
                                                                                                                ann_class[CP, Name]
                                                                                                                    (mp!1)
                                                                                                                    (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (USE "wf_new_vars")
                  (("1" (PROP)
                    (("1" (HIDE-ALL-BUT (-5 -6 -7 -8 -10 1))
                      (("1" (EXPAND "wf_program_variables_disjoint_def")
                        (("1" (APPLY (REPEAT (REPLACE -2 :HIDE? T)))
                          (("1" (FLATTEN)
                            (("1" (ASSERT)
                              (("1"
                                (AUTO-REWRITE "disjoint?"
                                              "empty?"
                                              "intersection"
                                              "member"
                                              "subset?"
                                              "union")
                                (("1" (EXPAND "declared_var_names")
                                  (("1" (ASSERT)
                                    (("1" (SPLIT 1)
                                      (("1" (SKOSIMP*)
                                        (("1" (APPLY (REPEAT (INST?)))
                                          (("1" (REWRITE "var_names_union")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -2)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (APPLY (REPEAT (INST?)))
                                          (("2" (REWRITE "var_names_union")
                                            (("2" (ASSERT)
                                              (("2" (SPLIT -2)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-4 -6 -7 -8 -11 1))
                      (("2"
                        (EXPAND "wf_program_variables_not_reserved_words_def")
                        (("2" (EXPAND "declared_var_names")
                          (("2" (REPLACE -2 :HIDE? T)
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (REPLACE -2 :HIDE? T)
                                (("2"
                                  (AUTO-REWRITE "disjoint?"
                                                "empty?"
                                                "intersection"
                                                "member"
                                                "subset?"
                                                "union")
                                  (("2" (ASSERT)
                                    (("2" (SKOSIMP*)
                                      (("2" (APPLY (REPEAT (INST?)))
                                        (("2" (ASSERT)
                                          (("2" (SPLIT -1)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (ASSERT)
                                              (("3" (REWRITE "var_names_union")
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE-ALL-BUT (-12 1))
                      (("3" (EXPAND "wf_program_has_unique_class_names_def")
                        (("3" (SKOSIMP*)
                          (("3" (INST - "c1!2" "c1!3")
                            (("3" (ASSERT)
                              (("3" (EXPAND "ann_class")
                                (("3" (LIFT-IF)
                                  (("3" (ASSERT)
                                    (("3" (SPLIT -2)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (SPLIT -4)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (PROPAX) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (HIDE-ALL-BUT (-6 -7 -8 -13 1))
                      (("4" (EXPAND "wf_Classes")
                        (("4" (SKOSIMP*)
                          (("4" (INST?)
                            (("4" (ASSERT)
                              (("4" (USE "ann_class_almost_wf_Class")
                                (("4" (ASSERT)
                                  (("4" (FLATTEN)
                                    (("4" (REPLACE -4)
                                      (("4" (EXPAND "wf_Class")
                                        (("4" (ASSERT)
                                          (("4"
                                            (CASE
                                                "ext_declared_var_names((# classes
                                                                                                       := {c: Class[Name] |
                                                                                                             EXISTS (c1: Class[Name]):
                                                                                                               classes(program(mp!1))
                                                                                                                   (c1)
                                                                                                                AND
                                                                                                                c =
                                                                                                                 ann_class[CP, Name]
                                                                                                                     (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1" (SPLIT 1)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (FLATTEN)
                                                (("2" (SKOSIMP*)
                                                  (("2" (EXPAND "ann_class" -1)
                                                    (("2" (ASSERT)
                                                      (("2" (SPLIT -1)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND
                                                             "ann_methods")
                                                            (("1" (SKOSIMP*)
                                                              (("1" (INST? -13)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (USE
                                                                     "ann_method_wf_Body")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -11
                                                                                 :HIDE? T)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -10
                                                                                   :HIDE? T)
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (AUTO-REWRITE
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           1)
                                                                                          (("1"
                                                                                            (SKOSIMP*)
                                                                                            (("1"
                                                                                              (INST?)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP*)
                                                                                            (("2"
                                                                                              (INST?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (SKOSIMP*)
                                                                                            (("3"
                                                                                              (INST?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("4"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("5"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("6"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("7"
                                                                                            (SKOSIMP*)
                                                                                            (("7"
                                                                                              (INST?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (INST? -11)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "wf_Method")
                                                                (("2"
                                                                  (EXPAND
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (REPLACE
                                                                     -2)
                                                                    (("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-11 2))
                                                                      (("2"
                                                                        (AUTO-REWRITE
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (SPLIT
                                                                               1)
                                                                              (("1"
                                                                                (SKOSIMP*)
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (SKOSIMP*)
                                                                                (("2"
                                                                                  (INST?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (SKOSIMP*)
                                                                                (("3"
                                                                                  (INST?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("4"
                                                                                (SKOSIMP*)
                                                                                (("4"
                                                                                  (INST?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("5"
                                                                                (SKOSIMP*)
                                                                                (("5"
                                                                                  (INST?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("6"
                                                                                (SKOSIMP*)
                                                                                (("6"
                                                                                  (INST?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("7"
                                                                                (SKOSIMP*)
                                                                                (("7"
                                                                                  (INST?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (SKOSIMP*)
                                                (("3" (EXPAND "ann_class" -1)
                                                  (("3" (EXPAND "ann_class" 1)
                                                    (("3" (SPLIT -1)
                                                      (("1" (FLATTEN)
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (EXPAND
                                                             "ann_methods")
                                                            (("1" (SKOSIMP*)
                                                              (("1"
                                                                (INST -14
                                                                 "n!1")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REPLACE
                                                                     -3)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "ann_method")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2" (INST? -12)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("4" (FLATTEN)
                                                (("4" (EXPAND "wf_Body")
                                                  (("4" (REPLACE -1 :HIDE? T)
                                                    (("4" (SKOSIMP*)
                                                      (("4"
                                                        (AUTO-REWRITE "union"
                                                                      "member")
                                                        (("4" (ASSERT)
                                                          (("4" (INST? -3)
                                                            (("4" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-5 -6 -7 1))
                                              (("2"
                                                (AUTO-REWRITE "union" "member")
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (EXPAND
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (APPLY
                                                       (REPEAT
                                                        (REPLACE -1 :HIDE? T)))
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (APPLY-EXTENSIONALITY
                                                           :HIDE? T)
                                                          (("2"
                                                            (REWRITE
                                                             "var_names_union")
                                                            (("2" (ASSERT)
                                                              (("2" (IFF)
                                                                (("2" (PROP)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT (-3 1))
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                    (("2" (REWRITE "var_names_union")
                      (("2" (AUTO-REWRITE "union" "member")
                        (("2" (ASSERT)
                          (("2" (EXPAND "var_names")
                            (("2" (IFF)
                              (("2" (EXPAND "getGhostDecls")
                                (("2" (SPLIT 1)
                                  (("1" (SKOSIMP*)
                                    (("1" (REPLACE -2)
                                      (("1" (EXPAND "ann_class" -3)
                                        (("1" (ASSERT)
                                          (("1" (INST?)
                                            (("1" (INST? 2)
                                              (("1" (ASSERT)
                                                (("1" (INST 1 "c1!1")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKOSIMP*)
                                    (("2" (SPLIT -1)
                                      (("1" (SKOSIMP*)
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1"
                                              (INST 1 "ann_class(mp!1)(c!1)")
                                              (("1" (EXPAND "ann_class" 1 3)
                                                (("1" (ASSERT)
                                                  (("1" (INST?) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "ann_class")
                                              (("2" (TYPEPRED "mp!1")
                                                (("2" (EXPAND "compatible")
                                                  (("2" (FLATTEN)
                                                    (("2" (SKOSIMP*)
                                                      (("2"
                                                        (INST 1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "ann_class"
                                                                    1)
                                                            (("2" (ASSERT)
                                                              (("2" (INST?)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-2 1))
                (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (AUTO-REWRITE "LocalDecls_ann_class")
                    (("2" (EXPAND "var_names")
                      (("2" (EXPAND "getLocalDecls")
                        (("2" (ASSERT)
                          (("2" (IFF)
                            (("2" (SPLIT 1)
                              (("1" (SKOSIMP*)
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (INST?)
                                      (("1" (ASSERT)
                                        (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST?)
                                  (("2" (ASSERT)
                                    (("2" (INST 1 "ann_class(mp!1)(c!1)")
                                      (("2" (ASSERT) (("2" (INST?) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT (-1 1))
              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                (("2" (AUTO-REWRITE "FieldDecls_ann_class")
                  (("2" (EXPAND "var_names")
                    (("2" (EXPAND "getFieldDecls")
                      (("2" (ASSERT)
                        (("2" (IFF)
                          (("2" (SPLIT 1)
                            (("1" (SKOSIMP*)
                              (("1" (REPLACE -2)
                                (("1" (ASSERT)
                                  (("1" (INST?)
                                    (("1" (ASSERT)
                                      (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (INST?)
                                (("2" (ASSERT)
                                  (("2" (INST 1 "ann_class(mp!1)(c!1)")
                                    (("2" (ASSERT) (("2" (INST?) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (PROPAX) NIL NIL))
            NIL)
           ("2" (USE "ann_program_TCC1") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|FieldDecls_ann_class| FORMULA-DECL NIL |AnnotateClass| NIL) NIL NIL NIL
    (|wf_new_vars| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|wf_Method| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_method_wf_Body| FORMULA-DECL NIL |AnnotateMethod| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)
    (|ext_declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions|
     NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_class_almost_wf_Class| FORMULA-DECL NIL |AnnotateClass| NIL)
    (|wf_Classes| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_program_variables_not_reserved_words_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|finite_intersection2| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|wf_program_variables_disjoint_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|LocalDecls_ann_class| FORMULA-DECL NIL |AnnotateClass| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL (|ann_program_TCC1| SUBTYPE-TCC NIL |AnnotateProgram| NIL))
   782 781 T NIL)
  (|ann_program_TCC2-2| NIL 3401685127 3401689620
   ("" (SKOSIMP*)
    (("" (TYPEPRED "program(mp!1)")
      (("" (EXPAND "wf_Program")
        ((""
          (CASE "    is_finite[Class[Name]]
                       ({c: Class[Name] |
                           EXISTS (c1: Class[Name]):
                             mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (CASE "var_names(getFieldDecls((# classes
                                                                    := {c: Class[Name] |
                                                                          EXISTS (c1:
                                                                                    Class
                                                                                        [Name]):
                                                                            classes
                                                                              (program(mp!1))
                                                                                (c1)
                                                                             AND
                                                                             c =
                                                                              ann_class[CP, Name]
                                                                                  (mp!1)
                                                                                  (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (CASE "var_names(getLocalDecls((# classes
                                                                          := {c: Class[Name] |
                                                                                EXISTS (c1:
                                                                                          Class
                                                                                              [Name]):
                                                                                  classes
                                                                                    (program(mp!1))
                                                                                      (c1)
                                                                                   AND
                                                                                   c =
                                                                                    ann_class[CP, Name]
                                                                                        (mp!1)
                                                                                        (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (CASE "var_names(getGhostDecls((# classes
                                                                                := {c: Class[Name] |
                                                                                      EXISTS (c1:
                                                                                                Class
                                                                                                    [Name]):
                                                                                        classes
                                                                                          (program(mp!1))
                                                                                            (c1)
                                                                                         AND
                                                                                         c =
                                                                                          ann_class[CP, Name]
                                                                                              (mp!1)
                                                                                              (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (USE "wf_new_vars")
                  (("1" (PROP)
                    (("1" (HIDE-ALL-BUT (-5 -6 -7 -8 -10 1))
                      (("1" (EXPAND "wf_program_variables_disjoint_def")
                        (("1" (APPLY (REPEAT (REPLACE -2 :HIDE? T)))
                          (("1" (FLATTEN)
                            (("1"
                              (AUTO-REWRITE "disjoint?"
                                            "empty?"
                                            "intersection"
                                            "member"
                                            "subset?"
                                            "union")
                              (("1" (EXPAND "declared_var_names")
                                (("1" (ASSERT)
                                  (("1" (SPLIT 1)
                                    (("1" (PROPAX) NIL NIL)
                                     ("2" (SKOSIMP*)
                                      (("2" (APPLY (REPEAT (INST?)))
                                        (("2" (REWRITE "var_names_union")
                                          (("2" (ASSERT)
                                            (("2" (SPLIT -2)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (SKOSIMP*)
                                      (("3" (APPLY (REPEAT (INST?)))
                                        (("3" (REWRITE "var_names_union")
                                          (("3" (ASSERT)
                                            (("3" (SPLIT -2)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (PROPAX) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-4 -6 -7 -8 -11 1))
                      (("2"
                        (EXPAND "wf_program_variables_not_reserved_words_def")
                        (("2" (EXPAND "declared_var_names")
                          (("2" (REPLACE -2 :HIDE? T)
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (REPLACE -2 :HIDE? T)
                                (("2"
                                  (AUTO-REWRITE "disjoint?"
                                                "empty?"
                                                "intersection"
                                                "member"
                                                "subset?"
                                                "union")
                                  (("2" (ASSERT)
                                    (("2" (SKOSIMP*)
                                      (("2" (APPLY (REPEAT (INST?)))
                                        (("2" (ASSERT)
                                          (("2" (SPLIT -1)
                                            (("1" (ASSERT) NIL NIL)
                                             ("2" (ASSERT) NIL NIL)
                                             ("3" (ASSERT)
                                              (("3" (REWRITE "var_names_union")
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (HIDE-ALL-BUT (-12 1))
                      (("3" (EXPAND "wf_program_has_unique_class_names_def")
                        (("3" (SKOSIMP*)
                          (("3" (INST - "c1!2" "c1!3")
                            (("3" (ASSERT)
                              (("3" (EXPAND "ann_class")
                                (("3" (LIFT-IF)
                                  (("3" (ASSERT)
                                    (("3" (SPLIT -2)
                                      (("1" (FLATTEN) (("1" (ASSERT) NIL NIL))
                                        NIL)
                                       ("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (SPLIT -4)
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (PROPAX) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (HIDE-ALL-BUT (-6 -7 -8 -13 1))
                      (("4" (EXPAND "wf_Classes")
                        (("4" (SKOSIMP*)
                          (("4" (INST?)
                            (("4" (ASSERT)
                              (("4" (USE "ann_class_almost_wf_Class")
                                (("4" (ASSERT)
                                  (("4" (FLATTEN)
                                    (("4" (REPLACE -4)
                                      (("4" (EXPAND "wf_Class")
                                        (("4" (ASSERT)
                                          (("4"
                                            (CASE
                                                "ext_declared_var_names((# classes
                                                                         := {c: Class[Name] |
                                                                               EXISTS (c1: Class[Name]):
                                                                                 classes(program(mp!1))
                                                                                     (c1)
                                                                                  AND
                                                                                  c =
                                                                                   ann_class[CP, Name]
                                                                                       (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1" (SPLIT 1)
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (FLATTEN)
                                                (("2" (SKOSIMP*)
                                                  (("2" (EXPAND "ann_class" -1)
                                                    (("2" (ASSERT)
                                                      (("2" (SPLIT -1)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (EXPAND
                                                             "ann_methods")
                                                            (("1" (SKOSIMP*)
                                                              (("1" (INST? -13)
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (USE
                                                                     "body_ann_method_wf_Body")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (FLATTEN)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (EXPAND
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -11
                                                                                 :HIDE? T)
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -10
                                                                                   :HIDE? T)
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (AUTO-REWRITE
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (SPLIT
                                                                                           1)
                                                                                          (("1"
                                                                                            (SKOSIMP*)
                                                                                            (("1"
                                                                                              (INST?)
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOSIMP*)
                                                                                            (("2"
                                                                                              (INST?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("3"
                                                                                            (SKOSIMP*)
                                                                                            (("3"
                                                                                              (INST?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("4"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("5"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("6"
                                                                                            (PROPAX)
                                                                                            NIL
                                                                                            NIL)
                                                                                           ("7"
                                                                                            (SKOSIMP*)
                                                                                            (("7"
                                                                                              (INST?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (ASSERT)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (FLATTEN)
                                                          (("2" (INST? -11)
                                                            (("2" (ASSERT)
                                                              (("2"
                                                                (EXPAND
                                                                 "wf_Method")
                                                                (("2"
                                                                  (EXPAND
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (REPLACE
                                                                     -2)
                                                                    (("2"
                                                                      (HIDE-ALL-BUT
                                                                       (-11 2))
                                                                      (("2"
                                                                        (AUTO-REWRITE
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (FLATTEN)
                                                                            (("2"
                                                                              (SPLIT
                                                                               1)
                                                                              (("1"
                                                                                (SKOSIMP*)
                                                                                (("1"
                                                                                  (INST?)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (SKOSIMP*)
                                                                                (("2"
                                                                                  (INST?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (SKOSIMP*)
                                                                                (("3"
                                                                                  (INST?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("4"
                                                                                (SKOSIMP*)
                                                                                (("4"
                                                                                  (INST?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("5"
                                                                                (SKOSIMP*)
                                                                                (("5"
                                                                                  (INST?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("6"
                                                                                (SKOSIMP*)
                                                                                (("6"
                                                                                  (INST?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("7"
                                                                                (SKOSIMP*)
                                                                                (("7"
                                                                                  (INST?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("3" (FLATTEN)
                                                (("3" (EXPAND "wf_Body")
                                                  (("3" (REPLACE -1 :HIDE? T)
                                                    (("3" (SKOSIMP*)
                                                      (("3"
                                                        (AUTO-REWRITE "union"
                                                                      "member")
                                                        (("3" (ASSERT)
                                                          (("3" (INST? -3)
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-5 -6 -7 1))
                                              (("2"
                                                (AUTO-REWRITE "union" "member")
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (EXPAND
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (APPLY
                                                       (REPEAT
                                                        (REPLACE -1 :HIDE? T)))
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (APPLY-EXTENSIONALITY
                                                           :HIDE? T)
                                                          (("2"
                                                            (REWRITE
                                                             "var_names_union")
                                                            (("2" (ASSERT)
                                                              (("2" (IFF)
                                                                (("2" (PROP)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("5" (HIDE-ALL-BUT (-14 -12 1))
                      (("5" (EXPAND "wf_program_methods_only_in_one_class")
                        (("5" (SKOSIMP*)
                          (("5" (ASSERT)
                            (("5" (INST -8 "c1!2" "c1!3" _)
                              (("5" (ASSERT)
                                (("5" (REPLACE -2 :HIDE? T)
                                  (("5" (REPLACE -3 :HIDE? T)
                                    (("5" (EXPAND "ann_class")
                                      (("5" (SPLIT -3)
                                        (("1" (FLATTEN)
                                          (("1" (SPLIT -5)
                                            (("1" (FLATTEN)
                                              (("1"
                                                (EXPAND
                                                 "wf_program_has_unique_class_names_def")
                                                (("1" (INST -7 "c1!2" "c1!3")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (EXPAND "ann_methods")
                                                  (("2" (SKOSIMP*)
                                                    (("2" (INST -8 "n!1")
                                                      (("2" (ASSERT)
                                                        (("2" (POSTPONE) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (POSTPONE) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT (-3 1))
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                    (("2" (REWRITE "var_names_union")
                      (("2" (AUTO-REWRITE "union" "member")
                        (("2" (ASSERT)
                          (("2" (EXPAND "var_names")
                            (("2" (IFF)
                              (("2" (EXPAND "getGhostDecls")
                                (("2" (SPLIT 1)
                                  (("1" (SKOSIMP*)
                                    (("1" (REPLACE -2)
                                      (("1" (EXPAND "ann_class" -3)
                                        (("1" (ASSERT)
                                          (("1" (INST?)
                                            (("1" (INST? 2)
                                              (("1" (ASSERT)
                                                (("1" (INST 1 "c1!1")
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (SKOSIMP*)
                                    (("2" (SPLIT -1)
                                      (("1" (SKOSIMP*)
                                        (("1" (INST?)
                                          (("1" (ASSERT)
                                            (("1"
                                              (INST 1 "ann_class(mp!1)(c!1)")
                                              (("1" (EXPAND "ann_class" 1 3)
                                                (("1" (ASSERT)
                                                  (("1" (INST?) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (INST?)
                                          (("2" (ASSERT)
                                            (("2" (EXPAND "ann_class")
                                              (("2" (TYPEPRED "mp!1")
                                                (("2" (EXPAND "compatible")
                                                  (("2" (FLATTEN)
                                                    (("2" (SKOSIMP*)
                                                      (("2"
                                                        (INST 1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "ann_class"
                                                                    1)
                                                            (("2" (ASSERT)
                                                              (("2" (INST?)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT (-2 1))
                (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                  (("2" (AUTO-REWRITE "LocalDecls_ann_class")
                    (("2" (EXPAND "var_names")
                      (("2" (EXPAND "getLocalDecls")
                        (("2" (ASSERT)
                          (("2" (IFF)
                            (("2" (SPLIT 1)
                              (("1" (SKOSIMP*)
                                (("1" (REPLACE -2)
                                  (("1" (ASSERT)
                                    (("1" (INST?)
                                      (("1" (ASSERT)
                                        (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (INST?)
                                  (("2" (ASSERT)
                                    (("2" (INST 1 "ann_class(mp!1)(c!1)")
                                      (("2" (ASSERT) (("2" (INST?) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE-ALL-BUT (-1 1))
              (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                (("2" (AUTO-REWRITE "FieldDecls_ann_class")
                  (("2" (EXPAND "var_names")
                    (("2" (EXPAND "getFieldDecls")
                      (("2" (ASSERT)
                        (("2" (IFF)
                          (("2" (SPLIT 1)
                            (("1" (SKOSIMP*)
                              (("1" (REPLACE -2)
                                (("1" (ASSERT)
                                  (("1" (INST?)
                                    (("1" (ASSERT)
                                      (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (INST?)
                                (("2" (ASSERT)
                                  (("2" (INST 1 "ann_class(mp!1)(c!1)")
                                    (("2" (ASSERT) (("2" (INST?) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (PROPAX) NIL NIL))
            NIL)
           ("2" (USE "ann_program_TCC1") NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 30438 1249 T NIL)
  (|ann_program_TCC2-1| NIL 3401614556 3401685096 ("" (SUBTYPE-TCC) NIL NIL)
   UNFINISHED NIL 1529 4 T NIL)))
(|AnnotateProgramProperties|
 (|CP_is_enumerable| 0
  (|CP_is_enumerable-1| NIL 3392611795 3392611802 ("" (POSTPONE) NIL NIL)
   UNCHECKED NIL 7000 150 T SHOSTAK))
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396601223 3401704788
   ("" (USE "infinite_namespace") NIL NIL) UNCHECKED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 3
   3 T NIL))
 (|IMP_AnnotateProgram_TCC1| 0
  (|IMP_AnnotateProgram_TCC1-1| NIL 3390292134 3401704788
   ("" (USE "CP_is_enumerable") NIL NIL) UNCHECKED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 2 3
   T NIL))
 (|IMP_AnnotateProgram_TCC2| 0
  (|IMP_AnnotateProgram_TCC2-1| NIL 3395037658 3401704788
   ("" (USE "name_of_exists") NIL NIL) UNCHECKED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 22 22
   T NIL))
 (|ann_program_class_correspondence| 0
  (|ann_program_class_correspondence-1| NIL 3392569211 3401704788
   ("" (SKOSIMP*) (("" (EXPAND "ann_program") (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   UNCHECKED ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)) 5 5 T
   SHOSTAK))
 (|ann_program_method_correspondence| 0
  (|ann_program_method_correspondence-1| NIL 3392569244 3401704789
   ("" (SKOSIMP*)
    (("" (USE "ann_program_class_correspondence")
      (("" (ASSERT)
        (("" (SKOSIMP*)
          (("" (EXPAND* "ann_class" "ann_methods")
            (("" (INST 1 "c1!1" _)
              (("" (ASSERT)
                (("" (LIFT-IF)
                  (("" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (REPLACE -2 -5) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL))
   106 106 T SHOSTAK))
 (|ann_program_preserves_var_decls| 0
  (|ann_program_preserves_var_decls-1| NIL 3392566301 3401704792
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (EXPAND* "ann_program" "getFieldDecls")
        (("1" (APPLY-EXTENSIONALITY :HIDE? T)
          (("1" (IFF)
            (("1" (SPLIT)
              (("1" (SKOSIMP*)
                (("1" (INST 1 "ann_class(mp!1)(c!1)")
                  (("1" (SPLIT)
                    (("1" (INST?) NIL NIL)
                     ("2" (EXPAND "ann_class") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (EXPAND "ann_class")
                      (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "getLocalDecls")
        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
          (("2" (IFF)
            (("2" (EXPAND "getLocalDecls")
              (("2" (SPLIT)
                (("1" (EXPAND "ann_program")
                  (("1" (SKOSIMP*)
                    (("1" (CASE "name(c!1) = class_name(mva(mp!1))")
                      (("1" (INST 1 "ann_class(mp!1)(c!1)")
                        (("1" (ASSERT)
                          (("1" (SPLIT 1)
                            (("1" (INST?) NIL NIL)
                             ("2" (EXPAND "ann_class")
                              (("2" (EXPAND "ann_methods")
                                (("2" (INST 1 "ann_method(mp!1)(m!1)")
                                  (("2" (SPLIT 1)
                                    (("1" (INST?) NIL NIL)
                                     ("2" (EXPAND "ann_method")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (INST 2 "ann_class(mp!1)(c!1)")
                        (("2" (ASSERT)
                          (("2" (SPLIT 2)
                            (("1" (INST?) NIL NIL)
                             ("2" (INST 1 "m!1")
                              (("2" (EXPAND "ann_class")
                                (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (USE "ann_program_method_correspondence")
                    (("2" (ASSERT)
                      (("2" (SKOSIMP*)
                        (("2" (SPLIT -)
                          (("1" (FLATTEN)
                            (("1" (INST 1 "c1!1")
                              (("1" (ASSERT)
                                (("1" (INST 1 "m1!1")
                                  (("1" (REPLACE -2)
                                    (("1" (EXPAND "ann_method" -7)
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (ASSERT)
                              (("2" (INST 2 "c1!1")
                                (("2" (ASSERT)
                                  (("2" (INST 2 "m1!1")
                                    (("2" (ASSERT)
                                      (("2" (REPLACE -1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND* "subset?" "member")
        (("3" (SKOSIMP*)
          (("3" (EXPAND* "ann_program" "getGhostDecls")
            (("3" (SKOSIMP*)
              (("3" (INST 1 "ann_class(mp!1)(c!1)")
                (("3" (SPLIT)
                  (("1" (INST?) NIL NIL)
                   ("2" (EXPAND* "ann_class" "union" "member")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL) NIL
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_program_method_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL) NIL
    (|union| CONST-DECL "set" |sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   246 246 T SHOSTAK))
 (|ann_program_preserves_var_decl_names| 0
  (|ann_program_preserves_var_decl_names-1| NIL 3392567558 3401704793
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (FLATTEN)
        (("" (REPLACE -1)
          (("" (REPLACE -2)
            (("" (ASSERT)
              (("" (EXPAND* "subset?" "member" "var_names")
                (("" (SKOSIMP*)
                  (("" (INST?)
                    (("" (ASSERT) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL)
   98 98 T SHOSTAK))
 (|ann_program_add_ghost_var_decls| 0
  (|ann_program_add_ghost_var_decls-1| NIL 3396607040 3401704793
   ("" (SKOSIMP*)
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (EXPAND "getGhostDecls")
        (("" (EXPAND "union")
          (("" (EXPAND "member")
            (("" (IFF)
              (("" (SPLIT 1)
                (("1" (SKOSIMP*)
                  (("1" (USE "ann_program_class_correspondence")
                    (("1" (ASSERT)
                      (("1" (SKOSIMP*)
                        (("1" (INST 1 "c1!1")
                          (("1" (ASSERT)
                            (("1" (REPLACE -2 :HIDE? T)
                              (("1" (EXPAND "ann_class")
                                (("1" (EXPAND "union")
                                  (("1" (EXPAND "member")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (SPLIT -1)
                    (("1" (SKOSIMP*)
                      (("1" (INST 1 "ann_class(mp!1)(c!1)")
                        (("1" (EXPAND "ann_program")
                          (("1" (SPLIT 1)
                            (("1" (INST?) NIL NIL)
                             ("2" (EXPAND "ann_class")
                              (("2" (ASSERT)
                                (("2" (EXPAND "union")
                                  (("2" (EXPAND "member")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "mp!1")
                      (("2" (EXPAND "compatible")
                        (("2" (FLATTEN)
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "ann_class(mp!1)(c!1)")
                              (("2" (EXPAND "ann_program")
                                (("2" (SPLIT 1)
                                  (("1" (INST?) NIL NIL)
                                   ("2" (EXPAND "ann_class")
                                    (("2" (EXPAND "union")
                                      (("2" (EXPAND "member")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   69 68 T SHOSTAK))
 (|ann_program_ext_declared_var_names| 0
  (|ann_program_ext_declared_var_names-1| NIL 3401708815 3401708894
   ("" (SKOSIMP*)
    (("" (EXPAND "ext_declared_var_names")
      (("" (AUTO-REWRITE "union" "member")
        (("" (APPLY-EXTENSIONALITY :HIDE? T)
          (("" (USE "ann_program_preserves_var_decls")
            (("" (FLATTEN)
              (("" (REPLACE -1)
                (("" (REPLACE -2)
                  (("" (USE "ann_program_add_ghost_var_decls")
                    (("" (REPLACE -1)
                      (("" (REWRITE "var_names_union")
                        (("" (ASSERT) (("" (IFF) (("" (PROP) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|ext_declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|This| CONST-DECL "Name" |Program| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_program_add_ghost_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL))
   6107 176 T SHOSTAK))
 (|ann_program_preserves_wf_state| 0
  (|ann_program_preserves_wf_state-1| NIL 3390298254 3401704794
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND "wf_state")
        (("" (SKOSIMP*)
          (("" (INST?)
            (("" (FLATTEN)
              (("" (REPLACE -1) (("" (REPLACE -2) (("" (PROP) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL))
   115 114 T SHOSTAK))
 (|ann_program_preserves_pstate_vars| 0
  (|ann_program_preserves_pstate_vars-1| NIL 3392567663 3401704795
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND "wf_state")
        (("" (FLATTEN)
          (("" (EXPAND "wf_state")
            (("" (REPLACE -1)
              (("" (REPLACE -2)
                (("" (INST?) (("" (INST?) (("" (PROP) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL))
   102 102 T SHOSTAK))
 (|ann_program_preserves_ghoststate_vars| 0
  (|ann_program_preserves_ghoststate_vars-1| NIL 3392567791 3401704797
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND* "wf_state" "wf_ghoststate")
        (("" (FLATTEN)
          (("" (INST?)
            (("" (INST?)
              (("" (EXPAND* "id" "subset?" "member" "var_names")
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST?) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) NIL
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL))
   139 138 T SHOSTAK))
 (|var_names_ann_program| 0
  (|var_names_ann_program-1| NIL 3397470724 3401704805
   ("" (AUTO-REWRITE "subset?" "member" "union")
    (("" (SKOSIMP*)
      (("" (ASSERT)
        (("" (SKOSIMP*)
          (("" (EXPAND "ann_program")
            (("" (EXPAND "var_names" -1)
              (("" (EXPAND "Union")
                (("" (SKOSIMP*)
                  (("" (TYPEPRED "a!1")
                    (("" (SKOSIMP*)
                      (("" (REPLACE -3 :HIDE? T)
                        (("" (REPLACE -2 :HIDE? T)
                          (("" (EXPAND "ann_class")
                            (("" (ASSERT)
                              (("" (SPLIT -2)
                                (("1" (FLATTEN)
                                  (("1" (AUTO-REWRITE "Union")
                                    (("1" (REWRITE "var_names" -2)
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -2)
                                          (("1" (SKOSIMP*)
                                            (("1" (TYPEPRED "a!2")
                                              (("1" (SKOSIMP*)
                                                (("1" (REPLACE -2 :HIDE? T)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "ann_methods")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (REPLACE -2 :HIDE? T)
                                                          (("1"
                                                            (REWRITE
                                                             "var_names" -2)
                                                            (("1" (ASSERT)
                                                              (("1" (SKOSIMP*)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "a!3")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "ann_method")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (SPLIT
                                                                           -1)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (ASSERT)
                                                                              (("3"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("4"
                                                                            (REWRITE
                                                                             "var_names")
                                                                            (("4"
                                                                              (REPLACE
                                                                               -1
                                                                               :HIDE? T)
                                                                              (("4"
                                                                                (ASSERT)
                                                                                (("4"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "var_names(pre_set(n!1))")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST?)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REWRITE
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (USE
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               -1)
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (EXPAND
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (SKOSIMP*)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (APPLY
                                                                                           (REPEAT
                                                                                            (REWRITE
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (SPLIT
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (USE
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (EXPAND
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "add_as_union")
                                                                                                    (("2"
                                                                                                      (APPLY
                                                                                                       (REPEAT
                                                                                                        (REWRITE
                                                                                                         "var_names_union")))
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (FLATTEN)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "halted")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "var_names")
                                                                                                              (("2"
                                                                                                                (INST
                                                                                                                 2
                                                                                                                 "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "new_cps_gvds")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       2
                                                                                                                       "halted")
                                                                                                                      (("1"
                                                                                                                        (TYPEPRED
                                                                                                                         "mva(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "complete")
                                                                                                                          (("1"
                                                                                                                            (FLATTEN)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (EXPAND
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("5"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE? T)
                                                                            (("5"
                                                                              (REWRITE
                                                                               "var_names")
                                                                              (("5"
                                                                                (ASSERT)
                                                                                (("5"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "var_names(post_set(n!1))")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST?)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (USE
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (INST?)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (SKOSIMP*)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("6"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE? T)
                                                                            (("6"
                                                                              (REWRITE
                                                                               "var_names")
                                                                              (("6"
                                                                                (ASSERT)
                                                                                (("6"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (SPLIT
                                                                                     -2)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (INST
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         1
                                                                                                         "var_names(exc_set(n!1))")
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST?)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (INST?)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (USE
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (EXPAND
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (SKOSIMP*)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("7"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (ASSERT)
                                                                              (("7"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("8"
                                                                            (EXPAND
                                                                             "var_names"
                                                                             1)
                                                                            (("8"
                                                                              (ASSERT)
                                                                              (("8"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("9"
                                                                            (EXPAND
                                                                             "var_names"
                                                                             1)
                                                                            (("9"
                                                                              (ASSERT)
                                                                              (("9"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REWRITE "var_names" 1)
                                            (("2" (ASSERT)
                                              (("2" (INST 1 "var_names(c1!1)")
                                                (("1" (REWRITE "var_names" 1)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (INST?) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (REWRITE "var_names" 1)
                                            (("3" (ASSERT)
                                              (("3" (INST 1 "var_names(c1!1)")
                                                (("1" (REWRITE "var_names" 1)
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (REWRITE
                                                         "var_names_union")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST?) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("4" (REWRITE "var_names" -1)
                                            (("4" (ASSERT)
                                              (("4" (SPLIT -1)
                                                (("1"
                                                  (APPLY
                                                   (REPEAT
                                                    (REWRITE "var_names" -1)))
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "singleton")
                                                      (("1" (SPLIT -1)
                                                        (("1"
                                                          (USE
                                                           "cp_new_ghostvar")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (USE
                                                           "halted_new_ghostvar")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (REWRITE "var_names" 1)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (INST 1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (REWRITE "var_names" 1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (INST?) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "var_names" 2)
                                    (("2" (EXPAND "Union")
                                      (("2" (INST 2 "var_names(c1!1)")
                                        (("2" (INST 1 "c1!1") NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   (NIL
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj| ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (Conj?)]" |Body_adt|
     NIL)
    (|Neg| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Neg?)]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq| ADT-CONSTRUCTOR-DECL "[[Expr, Expr] -> (Eq?)]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (NumVarEval?)]" |Body_adt|
     NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL) NIL
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL) NIL
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    NIL NIL NIL (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL) NIL
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|halted| CONST-DECL "CP" MVA NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|cp_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|var_names_ann_event| FORMULA-DECL NIL |AnnotateEvent| NIL)
    (|Assert| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Assert?)]" |Body_adt| NIL)
    (|Entry| ADT-CONSTRUCTOR-DECL "(Entry?)" |EventType_adt| NIL)
    (|Entry?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateMethod| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateEvent| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|ExitNormal?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt|
     NIL)
    (|ExitNormal| ADT-CONSTRUCTOR-DECL "(ExitNormal?)" |EventType_adt| NIL)
    (|ExitExceptional?| ADT-RECOGNIZER-DECL "[EventType -> boolean]"
     |EventType_adt| NIL)
    (|ExitExceptional| ADT-CONSTRUCTOR-DECL "(ExitExceptional?)"
     |EventType_adt| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)
    (|halted_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL) NIL
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL))
   856 851 T SHOSTAK))
 (|ann_program_preserves_wf_body| 0
  (|ann_program_preserves_wf_body-1| NIL 3401438501 3401704961
   ("" (SKOSIMP*)
    (("" (TYPEPRED "b!1")
      (("" (EXPAND "wf_Body")
        (("" (SKOSIMP*)
          (("" (INST?)
            (("" (ASSERT)
              (("" (EXPAND "ext_declared_var_names")
                (("" (AUTO-REWRITE "union" "member")
                  (("" (ASSERT)
                    (("" (FLATTEN)
                      (("" (USE "ann_program_preserves_var_decls")
                        (("" (FLATTEN)
                          (("" (REPLACE -1)
                            (("" (REPLACE -2)
                              (("" (ASSERT)
                                (("" (EXPAND "subset?")
                                  (("" (EXPAND "member")
                                    (("" (HIDE -5)
                                      (("" (EXPAND "var_names")
                                        (("" (SKOSIMP*)
                                          (("" (INST?)
                                            (("" (ASSERT)
                                              (("" (INST? 3)
                                                (("" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL) NIL NIL
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|ext_declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions|
     NIL))
   9170 209 T SHOSTAK))
 (|ann_program_preserves_wf_method| 0
  (|ann_program_preserves_wf_method-1| NIL 3401708680 3401708970
   ("" (SKOSIMP*)
    (("" (TYPEPRED "m!1")
      (("" (USE "ann_method_wf_Body")
        (("" (ASSERT)
          (("" (EXPAND "wf_Method" 1)
            (("" (EXPAND "wf_Body")
              (("" (REWRITE "ann_program_ext_declared_var_names")
                (("" (AUTO-REWRITE "union" "member")
                  (("" (ASSERT)
                    (("" (FLATTEN)
                      (("" (SPLIT 1)
                        (("1" (SKOSIMP*)
                          (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (INST? -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
                         ("3" (SKOSIMP*)
                          (("3" (INST? -4) (("3" (ASSERT) NIL NIL)) NIL)) NIL)
                         ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL)
                         ("6" (PROPAX) NIL NIL)
                         ("7" (SKOSIMP*)
                          (("7" (INST? -5) (("7" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|ann_method_wf_Body| FORMULA-DECL NIL |AnnotateMethod| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_program_ext_declared_var_names| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|wf_Body| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_Method| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   6412 119 T SHOSTAK))
 (|get_class_ann_program| 0
  (|get_class_ann_program-1| NIL 3392567967 3401704808
   ("" (SKOSIMP*)
    (("" (REPLACE -3 :HIDE? T)
      (("" (REPLACE -3 :HIDE? T)
        (("" (EXPAND* "ann_program" "get_class")
          (("" (ASSERT)
            (("" (LIFT-IF -2)
              (("" (SPLIT -2)
                (("1" (FLATTEN)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (SPLIT -4)
                          (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL))
   42 42 T SHOSTAK))
 (|same_class_name_ann_class_implies_same_class| 0
  (|same_class_name_ann_class_implies_same_class-1| NIL 3387512899 3401704808
   ("" (SKOSIMP)
    (("" (EXPAND "ann_program")
      (("" (SKOSIMP)
        (("" (LEMMA "wf_program_has_unique_class_names")
          (("" (INST -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (TYPEPRED "mp!1")
              (("" (EXPAND "wf_MP")
                (("" (EXPAND "ann_class")
                  (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|wf_program_has_unique_class_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   38 37 T SHOSTAK))
 (|same_method_name_ann_class_implies_same_method| 0
  (|same_method_name_ann_class_implies_same_method-1| NIL 3401684952 3401704444
   ("" (SKOSIMP)
    (("" (LEMMA "wf_class_has_unique_method_names")
      (("" (INST -1 "ann_program(mp!1)" "c2!1" "m2!1" "ann_method(mp!1)(m1!1)")
        (("" (LEMMA "wf_program_has_wf_classes")
          (("" (INST -1 "ann_program(mp!1)" "c2!1")
            (("" (ASSERT)
              (("" (SPLIT -1)
                (("1" (ASSERT)
                  (("1" (EXPAND "ann_method" -2 2)
                    (("1" (REPLACE -3)
                      (("1" (EXPAND "ann_class" 1)
                        (("1" (EXPAND "ann_methods") (("1" (INST?) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "ann_program" 1)
                  (("2" (INST 1 "c1!1") (("2" (PROP) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|wf_class_has_unique_method_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_program_has_wf_classes| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateMethod| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateMethod| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   11268 88 T NIL))
 (|lookup_mthd_ann_program_TCC1| 0
  (|lookup_mthd_ann_program_TCC1-1| NIL 3398657929 3401704814
   ("" (SUBTYPE-TCC) NIL NIL) UNCHECKED
   ((|method_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|wf_Guard| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsP| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|MVA_events_correspond_to_methods| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|MVA_prog_vars_are_fields| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MVA_aut_vars_are_not_prog_vars| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    NIL NIL NIL NIL
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|lookup_mthd| CONST-DECL "lift[(methods(p))]" |ProgramFunctions| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   546 545 NIL NIL))
 (|lookup_mthd_ann_program| 0
  (|lookup_mthd_ann_program-1| NIL 3387195852 3401704452
   ("" (SKOSIMP)
    (("" (EXPAND "lookup_mthd")
      (("" (LIFT-IF)
        (("" (ASSERT)
          (("" (CASE "up?(get_class(ann_program(mp!1))(tgt!1))")
            (("1" (ASSERT)
              (("1" (SPLIT -2)
                (("1" (SPLIT -3)
                  (("1" (ASSERT)
                    (("1" (SPLIT 1)
                      (("1" (SKOSIMP*)
                        (("1"
                          (NAME "c1" "down(get_class(program(mp!1))(tgt!1))")
                          (("1" (REPLACE -1)
                            (("1"
                              (NAME "c2"
                                    "down(get_class(ann_program(mp!1))(tgt!1))")
                              (("1" (REPLACE -1)
                                (("1"
                                  (LEMMA
                                   "same_class_name_ann_class_implies_same_class")
                                  (("1" (INST -1 "mp!1" "c1" "c2")
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "get_class_ann_program")
                                        (("1" (ASSERT)
                                          (("1"
                                            (INST -1 "mp!1" "c1" "c2" "tgt!1")
                                            (("1" (ASSERT)
                                              (("1"
                                                (USE
                                                 "same_method_name_ann_class_implies_same_method")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (ASSERT)
                          (("2"
                            (CASE-REPLACE
                             " methods(down(get_class(ann_program(mp!1))(tgt!1))) = methods(down(get_class(program(mp!1))(tgt!1)))")
                            (("1" (ASSERT) NIL NIL)
                             ("2"
                              (CASE-REPLACE
                               "get_class(ann_program(mp!1))(tgt!1) = get_class(program(mp!1))(tgt!1)")
                              (("2"
                                (USE
                                 "same_class_name_ann_class_implies_same_class")
                                (("2" (ASSERT)
                                  (("2" (USE "get_class_ann_program")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("2" (USE "ann_program_class_correspondence")
              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|get_class_ann_program| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|same_method_name_ann_class_implies_same_method| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|same_class_name_ann_class_implies_same_class| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    NIL NIL
    (|lookup_mthd| CONST-DECL "lift[(methods(p))]" |ProgramFunctions| NIL))
   296 279 T SHOSTAK))
 (|ann_program_defines_MVA_vars| 0
  (|ann_program_defines_MVA_vars-2| NIL 3394875181 3401704464
   ("" (SKOSIMP)
    (("" (TYPEPRED "mp!1")
      (("" (EXPAND* "compatible" "var_names" "new_gvds")
        (("" (SKOSIMP*)
          (("" (INST 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (ASSERT)
              (("" (SPLIT 1)
                (("1" (EXPAND "ann_program") (("1" (INST?) NIL NIL)) NIL)
                 ("2" (EXPAND "ann_class") (("2" (PROPAX) NIL NIL)) NIL)
                 ("3" (EXPAND* "ann_class" "union" "member" "new_gvds") NIL
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    NIL (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   465 42 T NIL)
  (|ann_program_defines_MVA_vars-1| NIL 3389956467 3394872339
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost"
       "id")
      (("" (PROP)
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (EXPAND* "getGhostDecls" "var_names")
              (("1" (USE "ann_program_defines_MVA_vars2")
                (("1" (SPLIT -)
                  (("1" (SKOSIMP)
                    (("1" (INST?)
                      (("1" (ASSERT)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND* "var_names" "new_gvds" "union" "member")
                    (("2" (POSTPONE) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNTRIED
   ((|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL))
   974962 4000 T SHOSTAK))
 (|new_vars_ghost_in_ann_program| 0
  (|new_vars_ghost_in_ann_program-1| NIL 3394876088 3401704468
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost"
       "id")
      (("" (FLATTEN)
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE -1 2)
              (("" (EXPAND "getGhostDecls")
                (("" (EXPAND "var_names" 1)
                  (("" (USE "ann_program_defines_MVA_vars")
                    (("" (ASSERT)
                      (("" (SKOSIMP)
                        (("" (INST?)
                          (("" (ASSERT)
                            (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_defines_MVA_vars| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL) NIL
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL))
   68 65 T SHOSTAK))
 (|ann_program_preserves_class_names| 0
  (|ann_program_preserves_class_names-1| NIL 3398687801 3401704474
   ("" (SKOSIMP*)
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (EXPAND "class_names")
        (("" (IFF)
          (("" (SPLIT 1)
            (("1" (SKOSIMP*)
              (("1" (INST 1 "ann_class(mp!1)(c!1)")
                (("1" (ASSERT)
                  (("1" (REWRITE "ann_program_preserves_class_name")
                    (("1" (ASSERT)
                      (("1" (EXPAND "ann_program") (("1" (INST?) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (USE "ann_program_class_correspondence")
                (("2" (ASSERT)
                  (("2" (SKOSIMP*)
                    (("2" (INST 1 "c1!1")
                      (("2" (ASSERT)
                        (("2" (REPLACE -2)
                          (("2" (REWRITE "ann_program_preserves_class_name")
                            NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|ann_program_preserves_class_name| FORMULA-DECL NIL |AnnotateClass| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   87 83 T SHOSTAK))
 (|up_get_class_equivalence| 0
  (|up_get_class_equivalence-1| NIL 3398687657 3401704481
   ("" (SKOSIMP*)
    (("" (EXPAND "get_class")
      (("" (LIFT-IF)
        (("" (ASSERT)
          (("" (SPLIT 1)
            (("1" (PROPAX) NIL NIL)
             ("2" (SPLIT -1)
              (("1" (FLATTEN)
                (("1" (ASSERT)
                  (("1" (REWRITE "ann_program_preserves_class_names") NIL NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|ann_program_preserves_class_names| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL))
   42 35 T SHOSTAK))
 (|get_class_equivalence| 0
  (|get_class_equivalence-1| NIL 3398688099 3401704707
   ("" (SKOSIMP*)
    (("" (USE "up_get_class_equivalence")
      (("" (ASSERT)
        (("" (USE "ann_program_preserves_class_name")
          (("" (EXPAND "get_class")
            (("" (CASE "Reference?(a!1)")
              (("1" (ASSERT)
                (("1" (LIFT-IF)
                  (("1" (ASSERT)
                    (("1" (SPLIT -3)
                      (("1" (SPLIT -4)
                        (("1" (ASSERT)
                          (("1" (SPLIT 1)
                            (("1" (SKOSIMP*)
                              (("1" (EXPAND "class_names")
                                (("1" (SKOSIMP*)
                                  (("1"
                                    (CASE-REPLACE "{c_1: Class[Name] |
                                        classes(program(mp!1))(c_1) AND
                                         name(c_1) = class_name(a!1)} = singleton(c!1)"
                                     :HIDE? T)
                                    (("1"
                                      (CASE-REPLACE "{c: Class[Name] |
                               classes(ann_program(mp!1))(c) AND
                                name(c) = class_name(a!1)} = singleton(c!2)"
                                       :HIDE? T)
                                      (("1" (REWRITE "choose_singleton")
                                        (("1" (REWRITE "choose_singleton")
                                          (("1" (EXPAND "ann_program" -4)
                                            (("1" (SKOSIMP*)
                                              (("1" (REPLACE -5)
                                                (("1"
                                                  (TYPEPRED "program(mp!1)")
                                                  (("1"
                                                    (EXPAND* "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (INST -3 "c!1" "c1!1")
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (REPLACE -11
                                                                     :DIR RL)
                                                            (("1" (REPLACE -6)
                                                              (("1"
                                                                (REWRITE
                                                                 "ann_program_preserves_class_name"
                                                                 -9)
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("2" (EXPAND "singleton")
                                          (("2" (ASSERT)
                                            (("2" (IFF)
                                              (("2" (SPLIT 1)
                                                (("1" (SKOSIMP*)
                                                  (("1"
                                                    (TYPEPRED
                                                     "ann_program(mp!1)")
                                                    (("1"
                                                      (EXPAND* "wf_Program"
                                                       "wf_program_has_unique_class_names_def")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (INST -3 "x!1" "c!2")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (SKOSIMP*)
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                      (("2" (EXPAND "singleton")
                                        (("2" (IFF)
                                          (("2" (SPLIT 1)
                                            (("1" (SKOSIMP*)
                                              (("1" (TYPEPRED "program(mp!1)")
                                                (("1"
                                                  (EXPAND* "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -3 "x!1" "c!1")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (EXPAND "class_names")
                                (("2" (SKOSIMP*)
                                  (("2"
                                    (CASE-REPLACE "{c: Class[Name] |
                             classes(ann_program(mp!1))(c) AND
                              name(c) = class_name(a!1)} = singleton(c!2)"
                                     :HIDE? T)
                                    (("1"
                                      (CASE-REPLACE "{c_1: Class[Name] |
                                classes(program(mp!1))(c_1) AND
                                 name(c_1) = class_name(a!1)} = singleton(c!1)"
                                       :HIDE? T)
                                      (("1" (REWRITE "choose_singleton")
                                        (("1" (REWRITE "choose_singleton")
                                          (("1" (EXPAND "ann_program" -3)
                                            (("1" (SKOSIMP*)
                                              (("1" (REPLACE -4)
                                                (("1"
                                                  (REWRITE
                                                   "ann_program_preserves_class_name")
                                                  (("1" (EXPAND "ann_class" 2)
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (TYPEPRED
                                                         "program(mp!1)")
                                                        (("1"
                                                          (EXPAND* "wf_Program"
                                                           "wf_program_has_unique_class_names_def")
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (INST -3 "c1!1"
                                                               "c!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                        (("2" (EXPAND "singleton")
                                          (("2" (IFF)
                                            (("2" (SPLIT 1)
                                              (("1" (SKOSIMP*)
                                                (("1"
                                                  (TYPEPRED "program(mp!1)")
                                                  (("1"
                                                    (EXPAND* "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (INST -3 "x!1" "c!1")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP*)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                      (("2" (EXPAND "singleton")
                                        (("2" (IFF)
                                          (("2" (SPLIT 1)
                                            (("1" (SKOSIMP*)
                                              (("1"
                                                (TYPEPRED "ann_program(mp!1)")
                                                (("1"
                                                  (EXPAND* "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1" (FLATTEN)
                                                    (("1" (INST -3 "x!1" "c!2")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (SKOSIMP*)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (PROPAX) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (ASSERT) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNCHECKED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |WellFormedProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|up_get_class_equivalence| FORMULA-DECL NIL |AnnotateProgramProperties|
     NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|PreProgram| TYPE-EQ-DECL NIL |Program| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|ann_program_preserves_class_name| FORMULA-DECL NIL |AnnotateClass| NIL)
    (|Reference?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateClass| NIL)
    (|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|choose_singleton| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|class_name| ADT-ACCESSOR-DECL "[(Reference?) -> Name]" |Val_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|class_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL))
   20765 360 T SHOSTAK)))

