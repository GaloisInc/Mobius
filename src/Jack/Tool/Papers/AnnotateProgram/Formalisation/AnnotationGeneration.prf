(VariableNames
 (cp_TCC1 0
  (cp_TCC1-1 nil 3396601202 3431147740
   (""
    (inst 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (skosimp*)
      ((""
        (case "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (case-replace
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :hide? t)
          (("1" (use "infinite_nonempty[Name]") nil nil)
           ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
            nil))
          nil)
         ("2" (use "infinite_difference[Name]")
          (("1" (use "infinite_namespace") nil nil)
           ("2" (typepred "reserved_words")
            (("2" (typepred "declared_var_names(program(mp!1))")
              (("2" (typepred "var_names(mva(mp!1))")
                (("2" (expand "forbidden_names")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((infinite_difference judgement-tcc nil infinite_sets_def nil)
    (infinite_namespace formula-decl nil VariableNames nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (member const-decl "bool" sets nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (injective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (difference const-decl "set" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil VariableNames nil)
    (Name formal-nonempty-type-decl nil VariableNames nil))
   2684 2560 t nil)))
(NewVariableDeclarations
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-2 nil 3397386732 3431147742
   (";;; Proof IMP_VariableNames_TCC1-1 for formula AnnotateProgram.IMP_VariableNames_TCC1"
    (use "infinite_namespace") nil
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((infinite_namespace formula-decl nil NewVariableDeclarations nil))
   1757 1730 nil nil)
  (IMP_VariableNames_TCC1-1 nil 3397386612 nil
   ("" (assuming-tcc) nil nil) nil nil nil nil nil nil))
 (name_of_TCC1 0
  (name_of_TCC1-2 nil 3397386758 3431147744
   (";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
    (use "name_of_exists")
    ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
      (skosimp*)
      ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of_exists formula-decl nil NewVariableDeclarations nil))
   2015 2000 nil nil)
  (name_of_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (unique_TCC1 0
  (unique_TCC1-2 nil 3397386786 3431147746
   (";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
    (use "CP_is_enumerable")
    ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
      (skosimp*)
      ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (CP_is_enumerable formula-decl nil NewVariableDeclarations nil))
   1919 1860 nil nil)
  (unique_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (new_cp_gvd_TCC1 0
  (new_cp_gvd_TCC1-1 nil 3398096023 3431147748
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (defined? const-decl "boolean" ValProp nil))
   2124 2070 nil nil))
 (new_cps_gvds_TCC1 0
  (new_cps_gvds_TCC1-2 nil 3428816581 3431147750
   (";;; Proof new_cps_gvds_TCC1-1 for formula NewVariableDeclarations.new_cps_gvds_TCC1"
    (skosimp*)
    ((";;; Proof new_cps_gvds_TCC1-1 for formula NewVariableDeclarations.new_cps_gvds_TCC1"
      (typepred "cps(mva(mp!1))")
      ((";;; Proof new_cps_gvds_TCC1-1 for formula NewVariableDeclarations.new_cps_gvds_TCC1"
        (expand "is_finite")
        ((";;; Proof new_cps_gvds_TCC1-1 for formula NewVariableDeclarations.new_cps_gvds_TCC1"
          (skosimp*)
          ((";;; Proof new_cps_gvds_TCC1-1 for formula NewVariableDeclarations.new_cps_gvds_TCC1"
            (inst 1 "N!1" "LAMBDA(gd : ({gd: Decl[Name] |
                        EXISTS (q: (cps(mva(mp!1)))):
                          name(gd) = name_of(mp!1)(q) AND
                           jtype(gd) = IntType AND
                            init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
   (q: (cps(mva(mp!1))))|
                          name(gd) = name_of(mp!1)(q) AND
                           jtype(gd) = IntType AND
                            init_val(gd) = Int[Name](unique(q))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1)
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (apply-extensionality :hide? t) nil)))
                       ("2" (assert) nil)))))
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "q!1")
                          (("2" (assert) nil)))))))))
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil)))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (assert) nil))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nonempty? const-decl "bool" sets nil))
   2245 2170 nil nil)
  (new_cps_gvds_TCC1-1 nil 3398096023 3428816294
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
(q: (cps(mva(mp!1))))|
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1)
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (apply-extensionality :hide? t) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "q!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nonempty? const-decl "bool" sets nil))
   1275 1270 t nil))
 (new_vars_derived_from_mp 0
  (new_vars_derived_from_mp-1 nil 3397386643 3431147752
   ("" (skosimp*)
    (("" (expand "var_names")
      (("" (expand "new_gvds")
        (("" (split 1)
          (("1" (inst 1 "new_cp_gvd(mp!1)") (("1" (grind) nil nil))
            nil)
           ("2" (skosimp*)
            (("2"
              (inst 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("3" (skosimp*)
            (("3" (inst 1 "v!1") (("3" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil))
   2439 2350 t nil))
 (wf_new_vars 0
  (wf_new_vars-1 nil 3397386628 3431147760
   ("" (skosimp*)
    ((""
      (auto-rewrite ("empty?" "disjoint?" "intersection" "member"
                     "union"))
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (typepred "name_of(mp!1)(q!1)") (("1" (grind) nil nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (typepred "cp(mp!1)") (("2" (grind) nil nil)) nil))
          nil)
         ("3" (skosimp*)
          (("3" (typepred "name_of(mp!1)(q!1)") (("3" (grind) nil nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skosimp*)
            (("4" (expand "new_gvds")
              (("4" (rewrite "add_as_union")
                (("4" (rewrite "var_names_union")
                  (("4" (rewrite "var_names_union")
                    (("4" (assert)
                      (("4" (expand "var_names")
                        (("4" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (typepred "mva(mp!1)")
                                (("2"
                                  (expand "wf_MVA")
                                  (("2"
                                    (expand "wf_vdsA")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst? -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "var_names")
                                              (("2"
                                                (inst? 2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (skosimp*)
                              (("3"
                                (typepred "cp(mp!1)")
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (skosimp*)
            (("5" (expand "new_gvds")
              (("5" (rewrite "add_as_union")
                (("5" (rewrite "var_names_union")
                  (("5" (rewrite "var_names_union")
                    (("5" (assert)
                      (("5" (expand "var_names")
                        (("5" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (typepred "mp!1")
                                (("2"
                                  (expand "compatible")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand
                                       "MVA_aut_vars_are_not_prog_vars")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "ext_declared_var_names")
                                            (("2"
                                              (expand
                                               "declared_var_names")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3"
                                (expand "new_cp_gvd")
                                (("3"
                                  (expand "singleton")
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "forbidden_names")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (wf_vdsA const-decl "boolean" WellFormedMVA nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (set type-eq-decl nil sets nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil))
   7762 5680 t nil))
 (cp_new_ghostvar 0
  (cp_new_ghostvar-1 nil 3398086579 3431147763
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert) (("" (flatten) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   3185 3060 t shostak))
 (halted_new_ghostvar 0
  (halted_new_ghostvar-1 nil 3398086655 3431147765
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "var_names")
                    (("" (assert)
                      ((""
                        (inst 1
                         "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                        (("1" (assert)
                          (("1" (expand "halted")
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (inst 1 "halted")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "mp!1")
                                    (("1"
                                      (expand "wf_and_complete_MP")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "complete")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "defined?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (complete const-decl "boolean" MVAProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (halted const-decl "CP" MVA nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil))
   2013 1890 t shostak))
 (new_cp_gvd_TCC2 0
  (new_cp_gvd_TCC2-1 nil 3403876780 3431147769
   ("" (subtype-tcc) nil nil) unchecked
   ((Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (defined? const-decl "boolean" ValProp nil))
   3188 3100 nil nil))
 (new_cp_gvd_new_ghostvar 0
  (new_cp_gvd_new_ghostvar-1 nil 3403876818 3431147771
   ("" (skosimp)
    ((""
      (expand* "new_gvds" "new_cps_gvds" "new_cp_gvd" "add" "union"
       "member")
      (("" (flatten) (("" (inst?) nil nil)) nil)) nil))
    nil)
   untried
   ((new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil))
   2699 2630 t shostak))
 (new_mva_var_new_ghostvar 0
  (new_mva_var_new_ghostvar-1 nil 3403877388 3431147774
   ("" (skosimp)
    ((""
      (expand* "new_gvds" "new_mva_vars_gvds" "new_mva_var_gvd" "add"
       "union" "member")
      (("" (flatten) (("" (inst?) nil nil)) nil)) nil))
    nil)
   untried
   ((new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (new_mva_var_gvd const-decl "Decl" NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil))
   2597 2550 t shostak))
 (cp_not_cps_ghostvar 0
  (cp_not_cps_ghostvar-1 nil 3398156394 3431147777
   ("" (skosimp*)
    (("" (expand "new_cps_gvds")
      (("" (skosimp*)
        (("" (typepred "name_of(mp!1)(q!1)") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil))
   3448 3320 t shostak))
 (cp_not_mva_ghostvar 0
  (cp_not_mva_ghostvar-1 nil 3398156446 3431147783
   ("" (skosimp*)
    (("" (expand "new_mva_vars_gvds")
      (("" (typepred "cp(mp!1)") (("" (grind) nil nil)) nil)) nil))
    nil)
   untried
   ((new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil))
   5527 5400 t shostak))
 (var_names_MVA_subset_var_names_new_gdvs 0
  (var_names_MVA_subset_var_names_new_gdvs-1 nil 3401682644 3431147786
   (";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
    (skosimp)
    ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
      (expand* "var_names" "subset?" "union" "member")
      ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
        (skosimp)
        ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
          (split)
          (("1" (hide 1)
            (("1" (expand* "var_names" "new_gvds")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert)
                    (("1"
                      (expand* "add" "union" "member"
                       "new_mva_vars_gvds")
                      (("1" (flatten) (("1" (inst?) nil)))))))))))))))
           ("2" (hide 2)
            (("2" (expand* "Union" "var_names")
              (("2" (skosimp)
                (("2" (typepred "mp!1")
                  (("2" (expand "compatible")
                    (("2" (flatten)
                      (("2" (skosimp)
                        (("2" (inst 1 "var_names(c!1)")
                          (("1" (expand "var_names")
                            (("1"
                              (expand* "union" "member"
                               "MVA_prog_vars_are_fields")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" 2)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))))
                           ("2" (inst?) nil))))))))))))))))))))))))
    "")
   untried
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Union const-decl "set" sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil))
   2832 2760 nil nil)))
(AnnotateEvent
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619498 3431147788
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateEvent nil)) 2658 2580
   t nil))
 (IMP_NewVariableDeclarations_TCC1 0
  (IMP_NewVariableDeclarations_TCC1-1 nil 3401619498 3431147791
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateEvent nil)) 2627 2590 t
   nil))
 (IMP_NewVariableDeclarations_TCC2 0
  (IMP_NewVariableDeclarations_TCC2-1 nil 3401619498 3431147794
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateEvent nil)) 2648 2620 t
   nil))
 (ann_action_TCC1 0
  (ann_action_TCC1-1 nil 3401619498 3431147796
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   2684 2600 nil nil))
 (var_names_ann_action 0
  (var_names_ann_action-1 nil 3401682404 3431147799
   (";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
    (skolem 1 (_ "n!1"))
    ((";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
      (induct "a")
      (("1" (grind) nil)
       ("2" (skosimp*)
        (("2" (rewrite "ann_action" 1)
          (("2" (rewrite "var_names" 1)
            (("2" (rewrite "var_names" 1)
              (("2" (auto-rewrite "union" "add" "member")
                (("2" (assert)
                  (("2" (replace -1 :hide? t)
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (inst?) (("2" (assert) nil)))
                         ("3" (skosimp*)
                          (("3" (inst?) (("3" (assert) nil)))))
                         ("4" (skosimp*)
                          (("4" (split -1)
                            (("1" (assert) nil)
                             ("2" (inst?)
                              (("2"
                                (assert)
                                nil))))))))))))))))))))))))))))
    "")
   untried
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Action type-eq-decl nil MVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil))
   3046 2970 nil nil))
 (subterm_ann_action 0
  (subterm_ann_action-1 nil 3403600232 3431147802
   ("" (induct "a")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "ann_action" 1)
        (("2" (expand "subterm" 1 1)
          (("2" (assert)
            (("2" (iff)
              (("2" (prop)
                (("1" (inst 1 "cons1_var!1")
                  (("1" (assert)
                    (("1" (expand "member") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -2)
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "member")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (expand "member" -1)
                    (("3" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (inst?)
                        (("2" (assert)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((list_induction formula-decl nil list_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (OneAction type-eq-decl nil MVA nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (member def-decl "bool" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil) (Action type-eq-decl nil MVA nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   2907 2790 t shostak))
 (ann_guard_actions_set_TCC1 0
  (ann_guard_actions_set_TCC1-2 nil 3401619720 3431148339
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(x :({x: [Expr[Name], Stmt[Name]] |
                             EXISTS (t: Transition[CP, Name]):
                               ts!1(t) AND
                                x =
                                 (guard_to_expression[CP, Name]
                                      (guard(t))(v!1),
                                  update_vars(mp!1)(t))})) : f!1(choose({t : Transition[CP, Name] |  ts!1(t) AND
                                x =
                                 (guard_to_expression[CP, Name]
                                      (guard(t))(v!1),
                                  update_vars(mp!1)(t))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Val type-decl nil Val_adt nil) (Store type-eq-decl nil State nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (guard_to_expression const-decl "[ValOrExcpt -> Expr]"
     MVAMonitoring nil)
    (EventType type-decl nil EventType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (nonempty? const-decl "bool" sets nil))
   43774 2460 t nil)
  (ann_guard_actions_set_TCC1-1 nil 3401619498 nil
   ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
 (ann_event_set_TCC1 0
  (ann_event_set_TCC1-1 nil 3401619498 3431147808
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(t :
                        ({t: Transition[CP, Name] |
                             ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (expand "injective?")
              (("" (skosimp*)
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   2698 2610 t nil))
 (ann_event_set_TCC2 0
  (ann_event_set_TCC2-3 nil 3412498024 3431147826
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: [Expr[Name], Stmt[Name]] |
                                 EXISTS (q: CP):
                                   cps(mva(mp!1))(q) AND
                                    nonempty?[Transition[CP, Name]]
                                        ({t: Transition[CP, Name] |
                                            ts!1(t) AND scp(t) = q})
                                     AND
                                     c =
                                      ann_trans_cp(mp!1)
                                                  (q,
                                                   {t: Transition[CP, Name]
                                                    |
                                                    ts!1(t) AND scp(t) = q})(v!1)})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                                    nonempty?[Transition[CP, Name]]
                                        ({t: Transition[CP, Name] |
                                            ts!1(t) AND scp(t) = q})
                                     AND
                                     c =
                                      ann_trans_cp(mp!1)
                                                  (q,
                                                   {t: Transition[CP, Name]
                                                    |
                                                    ts!1(t) AND scp(t) = q})(v!1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1"
                        (name "q1" "choose({q: CP |
                                                                        cps(mva(mp!1))(q) AND
                                                                         nonempty?[Transition[CP, Name]]
                                                                             ({t: Transition[CP, Name] |
                                                                                 ts!1(t) AND scp(t) = q})
                                                                          AND
                                                                          x1!1 =
                                                                           ann_trans_cp(mp!1)
                                                                                       (q,
                                                                                        {t: Transition[CP, Name] |
                                                                                           ts!1(t) AND scp(t) = q})(v!1)})")
                        (("1"
                          (name "q2" "choose({q: CP |
                                                                                  cps(mva(mp!1))(q) AND
                                                                                   nonempty?[Transition[CP, Name]]
                                                                                       ({t: Transition[CP, Name] |
                                                                                           ts!1(t) AND scp(t) = q})
                                                                                    AND
                                                                                    x2!1 =
                                                                                     ann_trans_cp(mp!1)
                                                                                                 (q,
                                                                                                  {t: Transition[CP, Name] |
                                                                                                     ts!1(t) AND scp(t) = q})(v!1)})")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (case
                                 "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1})(v!1) = x1!1")
                                (("1"
                                  (case
                                   "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2})(v!1) = x2!1")
                                  (("1"
                                    (replace -5)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -2 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "ts!1")
                                    (("3"
                                      (expand "is_finite")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst 1 "N!2" "f!2")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 :dir rl)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (typepred "ts!1")
                                  (("3"
                                    (expand "is_finite")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (inst 1 "N!2" "f!2")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "x2!1")
                            (("2" (skosimp*)
                              (("2"
                                (rewrite "nonempty_exists" 1)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1!1")
                          (("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists" 1)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (typepred "ts!1")
                                  (("2"
                                    (expand "is_finite")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst 1 "N!2" "f!2")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*)
                          (("3" (typepred "ts!1")
                            (("3" (expand "is_finite")
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst 1 "N!2" "f!2")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (typepred "ts!1")
                      (("4" (expand "is_finite")
                        (("4" (skosimp*)
                          (("4" (inst 1 "N!2" "f!2")
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists" 1)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (typepred "ts!1")
                        (("2" (expand "is_finite")
                          (("2" (skosimp*)
                            (("2" (inst 1 "N!2" "f!2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (typepred "ts!1")
                (("3" (expand "is_finite")
                  (("3" (skosimp*)
                    (("3" (inst 1 "N!2" "f!2") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   17786 16920 t nil)
  (ann_event_set_TCC2-2 nil 3401619789 3412497664
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1"
             "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                               EXISTS (q: CP):
                                 cps(mva(mp!1))(q) AND
                                  nonempty?[Transition[CP, Name]]
                                      ({t: Transition[CP, Name] |
                                          ts!1(t) AND scp(t) = q})
                                   AND
                                   c =
                                    ann_trans_cp(mp!1)
                                                (q,
                                                 {t: Transition[CP, Name]
                                                  |
                                                  ts!1(t) AND scp(t) = q})(v!1)})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                                  nonempty?[Transition[CP, Name]]
                                      ({t: Transition[CP, Name] |
                                          ts!1(t) AND scp(t) = q})
                                   AND
                                   c =
                                    ann_trans_cp(mp!1)
                                                (q,
                                                 {t: Transition[CP, Name]
                                                  |
                                                  ts!1(t) AND scp(t) = q})(v!1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1"
                        (name "q1" "choose({q: CP |
                                                             cps(mva(mp!1))(q) AND
                                                              nonempty?[Transition[CP, Name]]
                                                                  ({t: Transition[CP, Name] |
                                                                      ts!1(t) AND scp(t) = q})
                                                               AND
                                                               x1!1 =
                                                                ann_trans_cp(mp!1)
                                                                            (q,
                                                                             {t: Transition[CP, Name] |
                                                                                ts!1(t) AND scp(t) = q})(v!1)})")
                        (("1"
                          (name "q2" "choose({q: CP |
                                                                     cps(mva(mp!1))(q) AND
                                                                      nonempty?[Transition[CP, Name]]
                                                                          ({t: Transition[CP, Name] |
                                                                              ts!1(t) AND scp(t) = q})
                                                                       AND
                                                                       x2!1 =
                                                                        ann_trans_cp(mp!1)
                                                                                    (q,
                                                                                     {t: Transition[CP, Name] |
                                                                                        ts!1(t) AND scp(t) = q})(v!1)})")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (case
                                 "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1})(v!1) = x1!1")
                                (("1"
                                  (case
                                   "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2})(v!1) = x2!1")
                                  (("1"
                                    (replace -5)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (replace -2 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "ts!1")
                                    (("3"
                                      (expand "is_finite")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst 1 "N!2" "f!2")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 :dir rl)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (typepred "ts!1")
                                  (("3"
                                    (expand "is_finite")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (inst 1 "N!2" "f!2")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "x2!1")
                            (("2" (skosimp*)
                              (("2"
                                (rewrite "nonempty_exists" 1)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "x1!1")
                          (("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists" 1)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (typepred "ts!1")
                                  (("2"
                                    (expand "is_finite")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst 1 "N!2" "f!2")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skosimp*)
                          (("3" (typepred "ts!1")
                            (("3" (expand "is_finite")
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst 1 "N!2" "f!2")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil nil)) nil)
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (typepred "ts!1")
                      (("4" (expand "is_finite")
                        (("4" (skosimp*)
                          (("4" (inst 1 "N!2" "f!2")
                            (("4" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists" 1)
                    (("1" (inst?) (("1" (assert) nil nil)) nil)
                     ("2" (skosimp*)
                      (("2" (typepred "ts!1")
                        (("2" (expand "is_finite")
                          (("2" (skosimp*)
                            (("2" (inst 1 "N!2" "f!2")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (typepred "ts!1")
                (("3" (expand "is_finite")
                  (("3" (skosimp*)
                    (("3" (inst 1 "N!2" "f!2") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   668 630 t nil)
  (ann_event_set_TCC2-1 nil 3401619498 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (var_names_ann_event_set 0
  (var_names_ann_event_set-2 nil 3410272325 3431147834
   ("" (auto-rewrite "defined?")
    (("" (skosimp*)
      (("" (auto-rewrite "subset?" "member" "union" "add")
        (("" (assert)
          (("" (skosimp*)
            (("" (expand "ann_event_set")
              (("" (skosimp*)
                (("" (expand "ann_trans_cp")
                  (("" (replace -4 :hide? t)
                    (("" (assert)
                      (("" (split -4)
                        (("1" (apply (repeat (rewrite "var_names" -1)))
                          (("1" (assert)
                            (("1" (expand "singleton")
                              (("1"
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (use "cp_new_ghostvar")
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2"
                                    (expand "new_gvds")
                                    (("2"
                                      (rewrite "add_as_union")
                                      (("2"
                                        (rewrite "var_names_union")
                                        (("2"
                                          (rewrite "var_names_union")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "new_cps_gvds")
                                                (("2"
                                                  (expand "var_names")
                                                  (("2"
                                                    (inst
                                                     2
                                                     "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                    (("2"
                                                      (inst 2 "q!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "ann_guard_actions")
                          (("2" (rewrite "var_names_CaseJML_set2list")
                            (("1" (skosimp*)
                              (("1"
                                (expand "ann_guard_actions_set")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (replace -3 :hide? t)
                                    (("1"
                                      (expand "update_vars")
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (use
                                           "guard_to_expression_yields_wf_Expr")
                                          (("1"
                                            (typepred "mp!1")
                                            (("1"
                                              (expand "wf_Expr")
                                              (("1"
                                                (expand "wf_Body")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "var_names_MVA_subset_var_names_new_gdvs")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "var_names" -1)
                                          (("2"
                                            (rewrite "var_names" -1)
                                            (("2"
                                              (rewrite "var_names" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (use
                                                       "cp_new_ghostvar")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "singleton")
                                                    (("2"
                                                      (expand
                                                       "new_gvds")
                                                      (("2"
                                                        (rewrite
                                                         "add_as_union")
                                                        (("2"
                                                          (rewrite
                                                           "var_names_union")
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "new_cps_gvds")
                                                                  (("2"
                                                                    (expand
                                                                     "var_names")
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         2
                                                                         "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                        (("2"
                                                                          (inst
                                                                           2
                                                                           "tcp(t!1)")
                                                                          (("2"
                                                                            (typepred
                                                                             "mva(mp!1)")
                                                                            (("2"
                                                                              (expand
                                                                               "wf_MVA")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "wf_Trans")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -5
                                                                                     "t!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -9
                                                                                         "t!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "var_names_ann_action")
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (typepred
                                                         "mva(mp!1)")
                                                        (("3"
                                                          (expand
                                                           "wf_MVA")
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (inst
                                                               -5
                                                               "t!1")
                                                              (("3"
                                                                (expand
                                                                 "wf_Trans")
                                                                (("3"
                                                                  (expand
                                                                   "wf_Action")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (inst
                                                                       -11
                                                                       "t!1")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (inst
                                                                               -8
                                                                               "oa!1")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "wf_Expr")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_Body")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -9
                                                                                             "x!1")
                                                                                            (("3"
                                                                                              (split
                                                                                               -13)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   -9)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "new_gvds")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "add_as_union")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "var_names_union")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "var_names_union")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "new_mva_vars_gvds")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       4
                                                                                                                       "f!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -10)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "var_names"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "new_gvds")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "add_as_union")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "var_names_union")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "var_names_union")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "new_mva_vars_gvds")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "var_names"
                                                                                                                         4)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (typepred
                                                                                                         "mp!1")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "compatible")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "MVA_prog_vars_are_fields")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "var_names"
                                                                                                                     -7)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -4
                                                                                                                         "f!1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "Union")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   2
                                                                                                                                   "var_names(c!1)")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "var_names")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "Union")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "var_names"
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               3
                                                                                                                                               "fd!1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "ann_event_set_TCC1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Union const-decl "set" sets nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (var_names_ann_action formula-decl nil AnnotateEvent nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (guard_to_expression_yields_wf_Expr formula-decl nil MVAMonitoring
     nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   7611 7190 t nil)
  (var_names_ann_event_set-1 nil 3406272100 3410272160
   ("" (skosimp*)
    (("" (auto-rewrite "subset?" "member" "union" "add")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_event_set")
            (("" (skosimp*)
              (("" (expand "ann_trans_cp")
                (("" (replace -4 :hide? t)
                  (("" (assert)
                    (("" (split -4)
                      (("1" (apply (repeat (rewrite "var_names" -1)))
                        (("1" (assert)
                          (("1" (expand "singleton")
                            (("1" (split -1)
                              (("1"
                                (replace -1)
                                (("1" (use "cp_new_ghostvar") nil nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (expand "new_gvds")
                                  (("2"
                                    (rewrite "add_as_union")
                                    (("2"
                                      (rewrite "var_names_union")
                                      (("2"
                                        (rewrite "var_names_union")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "new_cps_gvds")
                                              (("2"
                                                (expand "var_names")
                                                (("2"
                                                  (inst
                                                   2
                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                  (("2"
                                                    (inst 2 "q!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "ann_guard_actions")
                        (("2" (rewrite "var_names_CaseJML_set2list")
                          (("1" (skosimp*)
                            (("1" (expand "ann_guard_actions_set")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -3 :hide? t)
                                  (("1"
                                    (expand "update_vars")
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (use
                                         "guard_to_expression_yields_wf_BoolExpr")
                                        (("1"
                                          (typepred "mp!1")
                                          (("1"
                                            (expand "wf_MP")
                                            (("1"
                                              (expand "wf_BoolExpr")
                                              (("1"
                                                (expand "wf_Body")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "var_names_MVA_subset_var_names_new_gdvs")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "var_names" -1)
                                        (("2"
                                          (rewrite "var_names" -1)
                                          (("2"
                                            (rewrite "var_names" -1)
                                            (("2"
                                              (rewrite "var_names" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (use
                                                       "cp_new_ghostvar")
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "singleton")
                                                    (("2"
                                                      (expand
                                                       "new_gvds")
                                                      (("2"
                                                        (rewrite
                                                         "add_as_union")
                                                        (("2"
                                                          (rewrite
                                                           "var_names_union")
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "new_cps_gvds")
                                                                  (("2"
                                                                    (expand
                                                                     "var_names")
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         2
                                                                         "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                        (("2"
                                                                          (inst
                                                                           2
                                                                           "tcp(t!1)")
                                                                          (("2"
                                                                            (typepred
                                                                             "mp!1")
                                                                            (("2"
                                                                              (expand
                                                                               "wf_MP")
                                                                              (("2"
                                                                                (expand
                                                                                 "wf_MVA")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_Trans")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "t!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -9
                                                                                           "t!1")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "var_names_ann_action")
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (typepred
                                                         "mp!1")
                                                        (("3"
                                                          (expand
                                                           "wf_MP")
                                                          (("3"
                                                            (expand
                                                             "wf_MVA")
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (inst
                                                                 -6
                                                                 "t!1")
                                                                (("3"
                                                                  (expand
                                                                   "wf_Trans")
                                                                  (("3"
                                                                    (expand
                                                                     "wf_Action")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (inst
                                                                         -11
                                                                         "t!1")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (inst
                                                                                 -9
                                                                                 "oa!1")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_Expr")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "wf_Body")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (inst
                                                                                               -10
                                                                                               "x!1")
                                                                                              (("3"
                                                                                                (split
                                                                                                 -13)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "new_gvds")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "add_as_union")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "var_names_union")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "var_names_union")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "new_mva_vars_gvds")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   4)
                                                                                                                  (("1"
                                                                                                                    (skosimp*)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       4
                                                                                                                       "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           4
                                                                                                                           "f!1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "var_names"
                                                                                                     -11)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         -11)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "var_names"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "new_gvds")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "add_as_union")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "var_names_union")
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "var_names_union")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "new_mva_vars_gvds")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "var_names"
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (skosimp*)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               4
                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   4
                                                                                                                                   "f!1")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "compatible")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (skosimp*)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "MVA_prog_vars_are_fields")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "var_names"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (skosimp*)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -7
                                                                                                                         "l!1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skosimp*)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "Union")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   2
                                                                                                                                   "var_names(c!1)")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "var_names")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "Union")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "var_names"
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               3
                                                                                                                                               "fd!1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (inst?)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "ann_event_set_TCC1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (singleton? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (is_finite const-decl "bool" finite_sets nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (injective? const-decl "bool" functions nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Union const-decl "set" sets nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (var_names_ann_action formula-decl nil AnnotateEvent nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateEvent nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   2534 2330 t nil))
 (var_names_ann_event 0
  (var_names_ann_event-2 nil 3402742040 3431147836
   ("" (skosimp*)
    (("" (expand "ann_event")
      (("" (use "var_names_ann_event_set")
        (("" (assert)
          (("" (auto-rewrite "subset?" "member" "union" "add")
            (("" (assert)
              (("" (skosimp*)
                (("" (rewrite "var_names_CaseJML_set2list")
                  (("" (inst?)
                    (("" (skosimp*)
                      (("" (assert)
                        (("" (inst?) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_event const-decl "Stmt" AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (var_names_ann_event_set formula-decl nil AnnotateEvent nil))
   2767 2680 t nil)
  (var_names_ann_event-1 nil 3401682730 3401704757
   ("" (skosimp*)
    (("" (expand "subset?" 1)
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "ann_event")
            (("" (rewrite "var_names_CaseJML_set2list")
              (("" (skosimp*)
                (("" (expand "ann_event_set")
                  (("" (skosimp*)
                    (("" (expand "ann_trans_cp")
                      (("" (replace -4 :hide? t)
                        (("" (auto-rewrite "union" "member")
                          (("" (assert)
                            (("" (rewrite "var_names" -4)
                              ((""
                                (rewrite "var_names" -4)
                                ((""
                                  (rewrite "var_names" -4)
                                  ((""
                                    (rewrite "var_names" -4)
                                    ((""
                                      (rewrite "var_names" -4)
                                      ((""
                                        (expand "singleton")
                                        ((""
                                          (assert)
                                          ((""
                                            (split -4)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (use "cp_new_ghostvar")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "new_gvds")
                                                  (("2"
                                                    (rewrite
                                                     "add_as_union")
                                                    (("2"
                                                      (rewrite
                                                       "var_names_union")
                                                      (("2"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "new_cps_gvds")
                                                              (("2"
                                                                (expand
                                                                 "var_names")
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "q!1")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "defined?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "ann_guard_actions")
                                              (("3"
                                                (rewrite
                                                 "var_names_CaseJML_set2list")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand
                                                     "ann_guard_actions_set")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "update_vars")
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (use
                                                               "var_names_guard_to_expresion")
                                                              (("1"
                                                                (typepred
                                                                 "mp!1")
                                                                (("1"
                                                                  (expand
                                                                   "wf_MP")
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "var_names_MVA_subset_var_names_new_gdvs")
                                                                              (("1"
                                                                                (expand*
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "var_names"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "var_names"
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "var_names"
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "var_names"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "add")
                                                                        (("2"
                                                                          (expand
                                                                           "singleton")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "cp_new_ghostvar")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "new_gvds")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "add_as_union")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "var_names_union")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "var_names_union")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "new_cps_gvds")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "tcp(t!1)")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "mp!1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "wf_MP")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_MVA")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wf_Trans")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -6
                                                                                                                 "t!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -10
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "var_names_ann_action")
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "mp!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_MP")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "wf_MVA")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "wf_Trans")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "wf_Action")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "subset?")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -12)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -12
                                                                                                       "t!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (flatten)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -9
                                                                                                               "oa!1")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -10
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         -12)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "var_names"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "new_gvds")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "add_as_union")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "var_names_union")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "var_names_union")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "new_mva_vars_gvds")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "var_names"
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               4
                                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "f!1")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "new_gvds")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "add_as_union")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "var_names_union")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "var_names_union")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "new_mva_vars_gvds")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "var_names"
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       4
                                                                                                                                                       "f!1")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "compatible")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "MVA_prog_vars_are_fields")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "var_names"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -7
                                                                                                                                             "l!1")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "var_names"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "Union")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       2
                                                                                                                                                       "var_names(c!1)")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "Union")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "var_names"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   3
                                                                                                                                                                   "fd!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ann_event_set_TCC1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (list type-decl nil list_adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton? const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   783 774 t nil))
 (ann_event_var_names 0
  (ann_event_var_names-1 nil 3401682976 3431147840
   ("" (skosimp*)
    (("" (use "var_names_ann_event")
      (("" (assert)
        ((""
          (auto-rewrite "subset?" "member" "union" "add" "singleton")
          (("" (assert)
            (("" (inst?)
              (("" (assert)
                (("" (use "wf_program_var_names_declared")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((var_names_ann_event formula-decl nil AnnotateEvent nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   3248 3150 t shostak))
 (ann_event_set_set_ghostvar_TCC1 0
  (ann_event_set_set_ghostvar_TCC1-1 nil 3406272065 3431147843
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (subset? const-decl "bool" sets nil))
   3420 3290 nil nil))
 (ann_event_set_set_ghostvar 0
  (ann_event_set_set_ghostvar-2 nil 3412498685 3431147853
   ("" (skosimp*)
    (("" (expand "ann_event_set")
      (("" (skosimp*)
        (("" (expand "ann_trans_cp")
          (("" (replace -5 :hide? t)
            (("" (assert)
              (("" (split -5)
                (("1" (auto-rewrite "subterm") (("1" (assert) nil nil))
                  nil)
                 ("2" (expand "ann_guard_actions")
                  (("2" (use "subterm_CaseJML_set2list")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (hide -3)
                          (("1" (expand "ann_guard_actions_set")
                            (("1" (skosimp*)
                              (("1"
                                (replace -3 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (use
                                       "guard_to_expression_yields_wf_Expr")
                                      (("1"
                                        (typepred "mva(mp!1)")
                                        (("1"
                                          (expand "subset?")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst? -7)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "wf_Expr")
                                                    (("1"
                                                      (expand
                                                       "wf_Body")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst? -4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "update_vars")
                                      (("2"
                                        (rewrite "subterm")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (expand "subterm")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "cp_new_ghostvar")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (auto-rewrite
                                                 "subterm")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "subterm_ann_action")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "subterm" -2)
                                                  (("2"
                                                    (typepred
                                                     "mva(mp!1)")
                                                    (("2"
                                                      (expand*
                                                       "wf_MVA")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -12)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "wf_Trans")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Action")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 -12)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "mp!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (use
                                                                                         "var_names_MVA_subset_var_names_new_gdvs")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "compatible")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "MVA_aut_vars_are_not_prog_vars")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 -13)
                                                                                                (("1"
                                                                                                  (skosimp*)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "f!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (auto-rewrite
                                                                                                         "subset?"
                                                                                                         "member"
                                                                                                         "union")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "name(f!1)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_program_var_names_declared")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "var_names"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "wf_Expr")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_Body")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "ann_event_set_TCC1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (subterm_ann_action formula-decl nil AnnotateEvent nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (guard_to_expression_yields_wf_Expr formula-decl nil MVAMonitoring
     nil)
    (subset? const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (subterm_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil))
   9469 6600 t nil)
  (ann_event_set_set_ghostvar-1 nil 3406272110 3412498631
   ("" (skosimp*)
    (("" (expand "ann_event_set")
      (("" (skosimp*)
        (("" (expand "ann_trans_cp")
          (("" (replace -5 :hide? t)
            (("" (assert)
              (("" (split -5)
                (("1" (auto-rewrite "subterm") (("1" (assert) nil nil))
                  nil)
                 ("2" (expand "ann_guard_actions")
                  (("2" (use "subterm_CaseJML_set2list")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (hide -3)
                          (("1" (expand "ann_guard_actions_set")
                            (("1" (skosimp*)
                              (("1"
                                (replace -3 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (use
                                       "guard_to_expression_yields_wf_BoolExpr")
                                      (("1"
                                        (typepred "mp!1")
                                        (("1"
                                          (expand "wf_MP")
                                          (("1"
                                            (expand "subset?")
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (inst? -7)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "wf_BoolExpr")
                                                      (("1"
                                                        (expand
                                                         "wf_Body")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst?
                                                               -4)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "update_vars")
                                      (("2"
                                        (rewrite "subterm")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (expand "subterm")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "cp_new_ghostvar")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (auto-rewrite
                                                 "subterm")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use "subterm_ann_action")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (expand "subterm" -2)
                                                  (("2"
                                                    (typepred "mp!1")
                                                    (("2"
                                                      (expand*
                                                       "wf_MP"
                                                       "wf_MVA")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (expand
                                                               "member"
                                                               -12)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "wf_Trans")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Action")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (split
                                                                                 -12)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (use
                                                                                       "var_names_MVA_subset_var_names_new_gdvs")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "compatible")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "MVA_aut_vars_are_not_prog_vars")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "var_names"
                                                                                               -12)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (auto-rewrite
                                                                                                     "subset?"
                                                                                                     "member"
                                                                                                     "union")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -16
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (use
                                                                                                                   "wf_program_var_names_declared")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "wf_Expr")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "wf_Body")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "ann_event_set_TCC1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_event_set_TCC1 subtype-tcc nil AnnotateEvent nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (subterm_ann_action formula-decl nil AnnotateEvent nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (member const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (subset? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (subterm_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil))
   6578 200 t nil))
 (ann_event_set_ghostvar_TCC1 0
  (ann_event_set_ghostvar_TCC1-1 nil 3402770423 3431147856
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   3372 3260 nil nil))
 (ann_event_set_ghostvar 0
  (ann_event_set_ghostvar-1 nil 3403593988 3431147860
   ("" (skosimp*)
    (("" (expand "ann_event")
      (("" (use "subterm_CaseJML_set2list")
        (("" (use "ann_event_set_set_ghostvar")
          (("" (assert)
            (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_event const-decl "Stmt" AnnotateEvent nil)
    (ann_event_set_set_ghostvar formula-decl nil AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateEvent nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_event_set const-decl "finite_set[[Expr, Stmt]]" AnnotateEvent
     nil)
    (Name formal-nonempty-type-decl nil AnnotateEvent nil)
    (subterm_CaseJML_set2list formula-decl nil ProgramFunctions nil))
   3529 3420 t shostak)))
(AnnotateMethod
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619631 3431147862
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateMethod nil)) 2614 2570
   t nil))
 (IMP_AnnotateEvent_TCC1 0
  (IMP_AnnotateEvent_TCC1-1 nil 3401619631 3431147865
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateMethod nil)) 2623 2590 t
   nil))
 (IMP_AnnotateEvent_TCC2 0
  (IMP_AnnotateEvent_TCC2-1 nil 3401619631 3431147867
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateMethod nil)) 2676 2600 t
   nil))
 (filter_event_TCC1 0
  (filter_event_TCC1-2 nil 3401619964 3431147871
   (";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
    (skosimp*)
    ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
      (typepred "ts(a!1)")
      ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
        (expand "is_finite")
        ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
          (skosimp*)
          ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
            (inst 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                         ts(a!1)(t) AND
                          etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
              (grind) nil))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   3325 3240 nil nil)
  (filter_event_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (filter_event_subset 0
  (filter_event_subset-1 nil 3401684085 3431147874
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "filter_event") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((subset? const-decl "bool" sets nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (member const-decl "bool" sets nil))
   2665 2580 t shostak))
 (filter_event_cp_is_finite 0
  (filter_event_cp_is_finite-1 nil 3402860771 3431147876
   ("" (skosimp)
    (("" (expand "filter_event")
      (("" (typepred "ts(mva(mp!1))")
        (("" (lemma "finite_subset[Transition]")
          ((""
            (inst -1 "ts(mva(mp!1))"
             "{t: Transition | ts(mva(mp!1))(t) AND etype(event(t)) = et!1 AND mname(event(t)) = n!1 AND scp(t) = q!1}")
            (("" (assert)
              (("" (expand* "subset?" "member")
                (("" (skosimp) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (Action type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil))
   2658 2620 t shostak))
 (ann_methods_TCC1 0
  (ann_methods_TCC1-2 nil 3401620001 3431147879
   (";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
    (skosimp*)
    ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
      (typepred "ms!1")
      ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
        (expand "is_finite")
        ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
          (skosimp*)
          ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                         EXISTS (n: Method[Name]):
                           ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "n!1") (("2" (assert) nil)))))
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "n!2")
                            (("3" (assert) nil)))))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "m!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "n!1")
                      (("2" (assert) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Decl type-eq-decl nil Program nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (nonempty? const-decl "bool" sets nil))
   2898 2780 nil nil)
  (ann_methods_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (ann_method_name 0
  (ann_method_name-1 nil 3403429160 3431147882
   ("" (skosimp)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2619
   2580 t shostak))
 (ann_method_arg 0
  (ann_method_arg-1 nil 3401620571 3431147884
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2665
   2600 t shostak))
 (ann_method_pre 0
  (ann_method_pre-1 nil 3401620551 3431147887
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2623
   2590 t shostak))
 (ann_method_post 0
  (ann_method_post-1 nil 3401620559 3431147890
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2616
   2570 t shostak))
 (ann_method_lvars 0
  (ann_method_lvars-1 nil 3401620597 3431147892
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2659
   2590 t shostak))
 (ann_method_body 0
  (ann_method_body-1 nil 3401620545 3431147895
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2625
   2580 t shostak))
 (ann_method_pre_set 0
  (ann_method_pre_set-1 nil 3401620600 3431147898
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2627
   2600 t shostak))
 (ann_method_post_set 0
  (ann_method_post_set-1 nil 3401620605 3431147900
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2672
   2600 t shostak))
 (ann_method_exc_set 0
  (ann_method_exc_set-1 nil 3401620608 3431147903
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2627
   2590 t shostak))
 (ann_method_res 0
  (ann_method_res-1 nil 3401620574 3431147906
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2624
   2600 t shostak))
 (ann_method_res_type 0
  (ann_method_res_type-1 nil 3401620593 3431147908
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_method const-decl "Method" AnnotateMethod nil)) 2649
   2580 t shostak))
 (ann_method_wf_Body1 0
  (ann_method_wf_Body1-1 nil 3403610503 3431147916
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite "union" "member" "singleton")
        (("" (auto-rewrite-theory "AnnotateMethod")
          (("" (use "new_vars_derived_from_mp")
            (("" (use "halted_new_ghostvar")
              (("" (expand "wf_Method")
                (("" (expand "method_pred")
                  (("" (expand "wf_Body")
                    (("" (flatten)
                      (("" (assert)
                        (("" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (skosimp*)
                            (("2" (inst? -6)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst? -6)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (inst? -7)
                              (("3"
                                (flatten)
                                (("3"
                                  (inst? -7)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (propax) nil nil)
                           ("5" (skosimp*)
                            (("5" (rewrite "var_names" -1)
                              (("5"
                                (assert)
                                (("5"
                                  (split -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst? -10)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst? -10)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "var_names" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (use "ann_event_var_names")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (apply
                                           (repeat
                                            (then
                                             (rewrite "var_names" -1)
                                             (assert))))
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (skosimp*)
                            (("6" (rewrite "var_names" -1)
                              (("6"
                                (assert)
                                (("6"
                                  (split -1)
                                  (("1"
                                    (inst? -11)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst? -11)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "ann_event_var_names")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("7" (skosimp*)
                            (("7" (rewrite "var_names" -1)
                              (("7"
                                (assert)
                                (("7"
                                  (split -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst? -12)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst? -12)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "ann_event_var_names")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ann_event_var_names formula-decl nil AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt
     nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil))
   8101 7820 t nil))
 (ann_method_wf_Body2_TCC1 0
  (ann_method_wf_Body2_TCC1-1 nil 3403610870 3431147922
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   5828 5560 nil nil))
 (ann_method_wf_Body2_TCC2 0
  (ann_method_wf_Body2_TCC2-1 nil 3403610870 3431147931
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   8362 5580 nil nil))
 (ann_method_wf_Body2_TCC3 0
  (ann_method_wf_Body2_TCC3-1 nil 3403610870 3431147936
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   5871 5600 nil nil))
 (ann_method_wf_Body2_TCC4 0
  (ann_method_wf_Body2_TCC4-1 nil 3403610870 3431147942
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   5866 5600 nil nil))
 (ann_method_wf_Body2_TCC5 0
  (ann_method_wf_Body2_TCC5-1 nil 3403610870 3431147951
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   8368 5590 nil nil))
 (ann_method_wf_Body2_TCC6 0
  (ann_method_wf_Body2_TCC6-1 nil 3403610870 3431147957
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   6174 5870 nil nil))
 (ann_method_wf_Body2_TCC7 0
  (ann_method_wf_Body2_TCC7-1 nil 3403610870 3431147963
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   6211 5920 nil nil))
 (ann_method_wf_Body2 0
  (ann_method_wf_Body2-2 nil 3405934763 3431147972
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "AnnotateMethod")
        (("" (assert)
          (("" (expand* "wf_Method" "wf_Body" "method_pred")
            (("" (flatten)
              (("" (split 1)
                (("1" (inst? -4) (("1" (assert) nil nil)) nil)
                 ("2" (skosimp*)
                  (("2" (inst? -2)
                    (("2" (flatten)
                      (("2" (inst? -3) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (inst? -3)
                    (("3" (flatten)
                      (("3" (inst? -4) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skosimp*)
                  (("4" (inst? -10) (("4" (assert) nil nil)) nil)) nil)
                 ("5" (skosimp*)
                  (("5" (rewrite "subterm" -1)
                    (("5" (inst? -6)
                      (("5" (flatten)
                        (("5" (inst? -7)
                          (("5" (assert)
                            (("5" (assert)
                              (("5"
                                (rewrite "subterm" -1)
                                (("5"
                                  (split -1)
                                  (("1"
                                    (use "ann_event_set_ghostvar")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (repeat (rewrite "subterm" -1)))
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (skosimp*)
                  (("6" (rewrite "subterm" -1)
                    (("6" (inst? -7)
                      (("6" (flatten)
                        (("6" (inst? -8)
                          (("6" (assert)
                            (("6" (assert)
                              (("6"
                                (use "ann_event_set_ghostvar")
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (skosimp*)
                  (("7" (inst? -8)
                    (("7" (flatten)
                      (("7" (inst? -9)
                        (("7" (assert)
                          (("7" (rewrite "subterm" -1)
                            (("7" (assert)
                              (("7"
                                (use "ann_event_set_ghostvar")
                                (("7" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_method const-decl "Method" AnnotateMethod nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_event_set_ghostvar formula-decl nil AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (Method type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Decl type-eq-decl nil Program nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   8772 6030 t nil)
  (ann_method_wf_Body2-1 nil 3403610885 3405934636
   ("" (skosimp*)
    (("" (assert)
      (("" (auto-rewrite-theory "AnnotateMethod")
        (("" (assert)
          (("" (expand* "wf_Method" "wf_Body")
            (("" (flatten)
              (("" (apply (repeat (inst?)))
                (("" (assert)
                  (("" (split 1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (propax) nil nil) ("4" (propax) nil nil)
                     ("5" (skosimp*)
                      (("5" (rewrite "subterm" -1)
                        (("5" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "subterm" -1)
                            (("2" (split -1)
                              (("1"
                                (use "ann_event_set_ghostvar")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (apply (repeat (rewrite "subterm" -1)))
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (skosimp*)
                      (("6" (rewrite "subterm" -1)
                        (("6" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (use "ann_event_set_ghostvar")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("7" (skosimp*)
                      (("7" (rewrite "subterm" -1)
                        (("7" (split -1)
                          (("1" (assert) nil nil)
                           ("2" (use "ann_event_set_ghostvar")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_method const-decl "Method" AnnotateMethod nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (filter_event_subset formula-decl nil AnnotateMethod nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (ann_event_set_ghostvar formula-decl nil AnnotateEvent nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateMethod nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateMethod nil)
    (Body type-decl nil Body_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (target shared-adt-accessor-decl
            "[{x: Body | Set?(x) OR Assign?(x)} -> Name]" Body_adt nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil))
   972 940 t shostak)))
(AnnotateClass
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619633 3431147975
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateClass nil)) 2679 2580
   t nil))
 (IMP_AnnotateMethod_TCC1 0
  (IMP_AnnotateMethod_TCC1-1 nil 3401619633 3431147977
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateClass nil)) 2628 2580 t
   nil))
 (IMP_AnnotateMethod_TCC2 0
  (IMP_AnnotateMethod_TCC2-1 nil 3401619633 3431147980
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateClass nil)) 2642 2600 t
   nil))
 (FieldDecls_ann_class 0
  (FieldDecls_ann_class-1 nil 3401684150 3431147982
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
    nil)
   untried ((ann_class const-decl "Class" AnnotateClass nil)) 2624 2590
   t shostak))
 (LocalDecls_ann_class 0
  (LocalDecls_ann_class-1 nil 3401684165 3431147986
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (expand "getLocalDecls")
                (("1" (apply-extensionality :hide? t)
                  (("1" (expand "ann_methods")
                    (("1" (assert)
                      (("1" (auto-rewrite "ann_method_arg")
                        (("1" (auto-rewrite "ann_method_lvars")
                          (("1" (iff)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "ann_method(mp!1)(m!1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 1)
                                      (("1" (inst?) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_class const-decl "Class" AnnotateClass nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateClass nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (ann_method_lvars formula-decl nil AnnotateMethod nil)
    (ann_method_arg formula-decl nil AnnotateMethod nil)
    (ann_method const-decl "Method" AnnotateMethod nil))
   3052 2980 t shostak))
 (GhostDecls_ann_class_annotated 0
  (GhostDecls_ann_class_annotated-1 nil 3401684331 3431147988
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   untried ((ann_class const-decl "Class" AnnotateClass nil)) 2657 2580
   t shostak))
 (GhostDecls_ann_class_not_annotated 0
  (GhostDecls_ann_class_not_annotated-1 nil 3401684344 3431147991
   ("" (skosimp*)
    (("" (expand "ann_class") (("" (assert) nil nil)) nil)) nil)
   untried
   ((ann_class const-decl "Class" AnnotateClass nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   2628 2590 t shostak))
 (ann_class_almost_wf_Class 0
  (ann_class_almost_wf_Class-1 nil 3401684390 3431147994
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "wf_Class")
        (("" (flatten)
          (("" (skosimp*)
            (("" (expand "ann_class")
              (("" (split -3)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "ann_methods")
                      (("1" (skosimp*)
                        (("1" (inst -5 "n!1" "n!2")
                          (("1" (assert)
                            (("1" (expand "ann_method")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split -4)
                      (("1" (flatten) (("1" (assert) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (inst? -3) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_class const-decl "Class" AnnotateClass nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (Decl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil))
   3435 3350 t shostak))
 (ann_class_inv_wf_Body1 0
  (ann_class_inv_wf_Body1-1 nil 3405935060 3431147999
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (skosimp*)
        (("" (inst?)
          (("" (expand "ann_class" -3)
            (("" (split -3)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (rewrite "var_names" -3)
                    (("1" (auto-rewrite "union" "member")
                      (("1" (assert)
                        (("1" (rewrite "var_names" -3)
                          (("1" (rewrite "var_names" -3)
                            (("1" (assert)
                              (("1"
                                (apply
                                 (repeat (rewrite "var_names" -3)))
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (use "cp_new_ghostvar")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (use "halted_new_ghostvar")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (singleton const-decl "(singleton?)" sets nil)
    (halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateClass nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[Expr, Expr] -> (Conj?)]" Body_adt
     nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (ann_class const-decl "Class" AnnotateClass nil))
   4396 4270 t shostak))
 (ann_class_inv_TCC1 0
  (ann_class_inv_TCC1-1 nil 3401682275 3431148004
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateClass nil)
    (CP formal-nonempty-type-decl nil AnnotateClass nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil))
   5684 5490 nil nil))
 (ann_class_inv 0
  (ann_class_inv-1 nil 3401682311 3431148007
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (assert) (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   untried ((ann_class const-decl "Class" AnnotateClass nil)) 2631 2590
   t shostak))
 (ann_program_preserves_class_name 0
  (ann_program_preserves_class_name-1 nil 3401682902 3431148010
   (";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
    (skosimp*)
    ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
      (expand "ann_class")
      ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
        (lift-if)
        ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
          (propax) nil))))))
    "")
   untried ((ann_class const-decl "Class" AnnotateClass nil)) 2655 2590
   nil nil)))
(AnnotateProgram
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601203 3431148012
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateProgram nil)) 2623
   2580 t nil))
 (IMP_AnnotateClass_TCC1 0
  (IMP_AnnotateClass_TCC1-1 nil 3401620497 3431148015
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateProgram nil)) 2629 2600
   t nil))
 (IMP_AnnotateClass_TCC2 0
  (IMP_AnnotateClass_TCC2-1 nil 3401620497 3431148018
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateProgram nil)) 2644 2620 t
   nil))
 (ann_program_TCC1 0
  (ann_program_TCC1-1 nil 3383987003 3431148021
   ("" (skosimp)
    (("" (typepred "classes(program(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          (("" (split 2)
            (("1"
              (inst 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                             EXISTS (c1: Class[Name]):
                               classes(program(mp!1))(c1) AND
                                c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
              (("1" (expand "injective?")
                (("1" (skosimp*)
                  (("1" (typepred "x1!1")
                    (("1" (typepred "x2!1")
                      (("1" (skosimp*)
                        (("1" (inst? -6 :where -5)
                          (("1" (assert) nil nil)
                           ("2" (rewrite "nonempty_exists")
                            (("2" (inst 1 "c1!1")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (rewrite "nonempty_exists")
                            (("3" (inst 1 "c1!2")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (typepred "c!1")
                  (("2" (skosimp*)
                    (("2" (rewrite "nonempty_exists")
                      (("2" (inst 1 "c1!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand* "empty?" "member")
              (("2" (skosimp*)
                (("2" (inst -1 "ann_class(mp!1)(x!1)")
                  (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((empty? const-decl "bool" sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (choose const-decl "(p)" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (injective? const-decl "bool" functions nil))
   3669 3550 t nil))
 (ann_program_TCC2 0
  (ann_program_TCC2-6 nil 3428817455 3431149152
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "is_finite[Class]({c: Class | EXISTS (c1: Class): mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes := {c: Class | EXISTS (c1: Class):
                                                                            classes(program(mp!1))(c1) AND
                                                                            c = ann_class(mp!1)(c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes := {c: Class | EXISTS (c1:  Class):
                                                                                              classes(program(mp!1))(c1)  AND
                                                                                              c = ann_class(mp!1)(c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes := {c: Class | EXISTS (c1: Class):
                                                                                                                classes(program(mp!1))(c1) AND
                                                                                                                c = ann_class(mp!1)(c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (replace -3)
                                    (("4"
                                      (expand "wf_Class")
                                      (("4"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (expand "ann_class" -1)
                                            (("2"
                                              (expand "ann_class" 1)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst
                                                           -11
                                                           "n!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "ann_method")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst? -9)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-6 -7 -8 -14 1))
                      (("5" (expand "program_pred")
                        (("5" (skosimp*)
                          (("5" (inst?)
                            (("5" (assert)
                              (("5"
                                (flatten)
                                (("5"
                                  (use "ann_class_inv_wf_Body1")
                                  (("5"
                                    (assert)
                                    (("5"
                                      (case
                                       "ext_declared_var_names((# classes
                                                                                                                                                                                                                                                          := {c: Class[Name] |
                                                                                                                                                                                                                                                                EXISTS (c1: Class[Name]):
                                                                                                                                                                                                                                                                  classes(program(mp!1))
                                                                                                                                                                                                                                                                      (c1)
                                                                                                                                                                                                                                                                   AND
                                                                                                                                                                                                                                                                   c =
                                                                                                                                                                                                                                                                    ann_class[CP, Name]
                                                                                                                                                                                                                                                                        (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "wf_Body")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (auto-rewrite
                                                   "union"
                                                   "member")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (replace -7)
                                                  (("2"
                                                    (rewrite
                                                     "var_names_union")
                                                    (("2"
                                                      (auto-rewrite
                                                       "union"
                                                       "member")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "ann_class"
                                                                   -2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (rewrite
                                                                             "subterm"
                                                                             -2)
                                                                            (("1"
                                                                              (apply
                                                                               (repeat
                                                                                (rewrite
                                                                                 "subterm"
                                                                                 -2)))
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (expand "ann_class" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (inst? -12)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               "ann_method_wf_Body1")
                                                              (("1"
                                                                (lemma
                                                                 "ann_method_wf_Body2")
                                                                (("1"
                                                                  (expand
                                                                   "wf_Method")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "mp!1"
                                                                     "n!1"
                                                                     _)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "wf_method_all_lvars_disjoint(n!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "method_pred")
                                                                                (("1"
                                                                                  (expand
                                                                                   "wf_Body")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -12
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -15
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names_union")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-1
                                                                                              -2
                                                                                              -3
                                                                                              -4
                                                                                              -5
                                                                                              -6
                                                                                              -7
                                                                                              -8
                                                                                              1))
                                                                                            (("1"
                                                                                              (auto-rewrite
                                                                                               "union"
                                                                                               "member")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (skosimp*)
                                                                                                      (branch
                                                                                                       (split
                                                                                                        1)
                                                                                                       ((then
                                                                                                         (skosimp*))))))
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -4)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "v!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (skosimp*)
                                                                                                      (branch
                                                                                                       (split
                                                                                                        1)
                                                                                                       ((then
                                                                                                         (skosimp*))))))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "v!2"
                                                                                                       "v!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -4
                                                                                                             "v!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (skosimp*)
                                                                                                    (("3"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (skosimp*)
                                                                                                    (("4"
                                                                                                      (inst?
                                                                                                       -3)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (skosimp*)
                                                                                                      (branch
                                                                                                       (split
                                                                                                        1)
                                                                                                       ((then
                                                                                                         (skosimp*))))))
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -7)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -5
                                                                                                             "v!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("6"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (skosimp*)
                                                                                                      (branch
                                                                                                       (split
                                                                                                        1)
                                                                                                       ((then
                                                                                                         (skosimp*))))))
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -8)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -6
                                                                                                             "v!1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("7"
                                                                                                    (apply
                                                                                                     (then
                                                                                                      (skosimp*)
                                                                                                      (branch
                                                                                                       (split
                                                                                                        1)
                                                                                                       ((then
                                                                                                         (skosimp*))))))
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (inst?
                                                                                                         -9)))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst?
                                                                                                             -7)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("8"
                                                                                                    (skosimp*)
                                                                                                    (("8"
                                                                                                      (inst?
                                                                                                       -6)
                                                                                                      (("8"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("9"
                                                                                                    (skosimp*)
                                                                                                    (("9"
                                                                                                      (inst?)
                                                                                                      (("9"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "program(mp!1)")
                                                                          (("2"
                                                                            (expand
                                                                             "wf_Program")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (expand
                                                                                 "program_method_pred")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst? -10)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "method_pred")
                                                          (("2"
                                                            (expand
                                                             "wf_Body")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-10
                                                                    2))
                                                                  (("2"
                                                                    (rewrite
                                                                     "var_names_union")
                                                                    (("2"
                                                                      (auto-rewrite
                                                                       "union"
                                                                       "member")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (apply
                                                                               (then
                                                                                (skosimp*)
                                                                                (branch
                                                                                 (split
                                                                                  1)
                                                                                 ((then
                                                                                   (skosimp*))))))
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -4)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (apply
                                                                               (then
                                                                                (skosimp*)
                                                                                (branch
                                                                                 (split
                                                                                  1)
                                                                                 ((then
                                                                                   (skosimp*))))))
                                                                              (("1"
                                                                                (inst?
                                                                                 -3)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -3)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst?
                                                                                 -4)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -5)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skosimp*)
                                                                              (("3"
                                                                                (inst?
                                                                                 -4)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skosimp*)
                                                                              (("4"
                                                                                (inst?
                                                                                 -6)
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (apply
                                                                               (then
                                                                                (skosimp*)
                                                                                (branch
                                                                                 (split
                                                                                  1)
                                                                                 ((then
                                                                                   (skosimp*))))))
                                                                              (("1"
                                                                                (inst?
                                                                                 -6)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst?
                                                                                       -6)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst?
                                                                                 -7)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -8)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (apply
                                                                               (then
                                                                                (skosimp*)
                                                                                (branch
                                                                                 (split
                                                                                  1)
                                                                                 ((then
                                                                                   (skosimp*))))))
                                                                              (("1"
                                                                                (inst?
                                                                                 -7)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -7)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst?
                                                                                 -8)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst?
                                                                                     -9)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (apply
                                                                               (then
                                                                                (skosimp*)
                                                                                (branch
                                                                                 (split
                                                                                  1)
                                                                                 ((then
                                                                                   (skosimp*))))))
                                                                              (("1"
                                                                                (inst?
                                                                                 -8)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst?
                                                                                     -8)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst?
                                                                                 -9)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -10)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (skosimp*)
                                                                              (("8"
                                                                                (inst?
                                                                                 -9)
                                                                                (("8"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("9"
                                                                              (skosimp*)
                                                                              (("9"
                                                                                (inst?
                                                                                 -11)
                                                                                (("9"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 -6 -4 1))
                                        (("2"
                                          (auto-rewrite
                                           "union"
                                           "member")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "ext_declared_var_names")
                                              (("2"
                                                (apply
                                                 (repeat
                                                  (replace
                                                   -1
                                                   :hide?
                                                   t)))
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (rewrite
                                                       "var_names_union")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (iff)
                                                          (("2"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (hide-all-but (1 -15))
                      (("6" (expand "program_method_pred")
                        (("6" (skosimp*)
                          (("6" (inst?)
                            (("6" (assert)
                              (("6"
                                (replace -2 :hide? t)
                                (("6"
                                  (expand "ann_class")
                                  (("6"
                                    (apply
                                     (branch
                                      (split -2)
                                      ((then
                                        (flatten)
                                        (assert)
                                        (flatten)
                                        (assert)))))
                                    (("1"
                                      (expand "ann_methods")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst -5 "n!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3 :hide? t)
                                              (("1"
                                                (expand
                                                 "wf_method_all_lvars_disjoint")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (rewrite
                                                     "ann_method_lvars")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("1" (rewrite "var_names_union")
                      (("1" (auto-rewrite "union" "member")
                        (("1" (assert)
                          (("1" (expand "var_names")
                            (("1" (iff)
                              (("1"
                                (expand "getGhostDecls")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "classes(program(mp!1))")
                      (("2" (expand "empty?")
                        (("2" (expand "member")
                          (("2" (skosimp*)
                            (("2" (inst -3 "ann_class(mp!1)(x!1)")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("1" (auto-rewrite "LocalDecls_ann_class")
                    (("1" (expand "var_names")
                      (("1" (expand "getLocalDecls")
                        (("1" (assert)
                          (("1" (iff)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "classes(program(mp!1))")
                    (("2" (expand "empty?")
                      (("2" (expand "member")
                        (("2" (skosimp*)
                          (("2" (inst -3 "ann_class(mp!1)(x!1)")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("1" (auto-rewrite "FieldDecls_ann_class")
                  (("1" (expand "var_names")
                    (("1" (expand "getFieldDecls")
                      (("1" (assert)
                        (("1" (iff)
                          (("1" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "classes(program(mp!1))")
                  (("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (skosimp*)
                        (("2" (inst -3 "ann_class(mp!1)(x!1)")
                          (("2" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (typepred "classes(program(mp!1))")
                (("3" (expand* "empty?" "member")
                  (("3" (skosimp*)
                    (("3" (inst -3 "ann_class(mp!1)(x!1)")
                      (("3" (assert) (("3" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "ann_program_TCC1") (("2" (flatten) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program_TCC1 subtype-tcc nil AnnotateProgram nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (empty? const-decl "bool" sets nil)
    (LocalDecls_ann_class formula-decl nil AnnotateClass nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (wf_program_variables_disjoint_def const-decl "boolean"
     WellFormedProgram nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (wf_program_variables_not_reserved_words_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (wf_Classes const-decl "boolean" WellFormedProgram nil)
    (ann_class_almost_wf_Class formula-decl nil AnnotateClass nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (wf_Class const-decl "boolean" WellFormedProgram nil)
    (program_pred const-decl "bool" ProgramRestriction nil)
    (This const-decl "Name" Program nil)
    (Body type-decl nil Body_adt nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[Expr, Expr] -> (Conj?)]" Body_adt
     nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (ann_method_wf_Body2 formula-decl nil AnnotateMethod nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (ann_method_wf_Body1 formula-decl nil AnnotateMethod nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (ann_class_inv_wf_Body1 formula-decl nil AnnotateClass nil)
    (ann_method_lvars formula-decl nil AnnotateMethod nil)
    (wf_new_vars formula-decl nil NewVariableDeclarations nil)
    (FieldDecls_ann_class formula-decl nil AnnotateClass nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil))
   780447 19690 t nil)
  (ann_program_TCC2-5 nil 3403612149 3428817451
   ("" (skosimp*)
    (("" (use "ann_program_TCC1")
      (("" (assert)
        (("" (typepred "classes(program(mp!1))")
          (("" (expand* "empty?" "member")
            (("" (skosimp*)
              (("" (inst -4 "ann_class(mp!1)(x!1)")
                (("" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ann_program_TCC1 subtype-tcc nil AnnotateProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateProgram nil)
    (empty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (member const-decl "bool" sets nil))
   58619 1330 t nil)
  (ann_program_TCC2-4 nil 3402747058 3403612132
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "is_finite[Class]({c: Class | EXISTS (c1: Class): mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes := {c: Class | EXISTS (c1: Class):
                 classes(program(mp!1))(c1) AND
                 c = ann_class(mp!1)(c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes := {c: Class | EXISTS (c1:  Class):
                     classes(program(mp!1))(c1)  AND
                     c = ann_class(mp!1)(c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes := {c: Class | EXISTS (c1: Class):
                         classes(program(mp!1))(c1) AND
                         c = ann_class(mp!1)(c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                                                                                       := {c: Class[Name] |
                                                                                                                                             EXISTS (c1: Class[Name]):
                                                                                                                                               classes(program(mp!1))
                                                                                                                                                   (c1)
                                                                                                                                                AND
                                                                                                                                                c =
                                                                                                                                                 ann_class[CP, Name]
                                                                                                                                                     (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "ann_method_wf_Body1")
                                                                    (("1"
                                                                      (lemma
                                                                       "ann_method_wf_Body2")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "mp!1"
                                                                         "n!1"
                                                                         _)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (expand
                                                                               "wf_Method")
                                                                              (("1"
                                                                                (expand
                                                                                 "wf_Body")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -12
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -11
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          -3
                                                                                          -4
                                                                                          -5
                                                                                          -6
                                                                                          -7
                                                                                          -8
                                                                                          1))
                                                                                        (("1"
                                                                                          (auto-rewrite
                                                                                           "union"
                                                                                           "member")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skosimp*)
                                                                                                (("2"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skosimp*)
                                                                                                (("3"
                                                                                                  (inst?
                                                                                                   -4)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (skosimp*)
                                                                                                (("4"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    (("4"
                                                                                                      (flatten)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("5"
                                                                                                (skosimp*)
                                                                                                (("5"
                                                                                                  (inst?
                                                                                                   -5)
                                                                                                  (("5"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("6"
                                                                                                (skosimp*)
                                                                                                (("6"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("6"
                                                                                                    (assert)
                                                                                                    (("6"
                                                                                                      (flatten)
                                                                                                      (("6"
                                                                                                        (assert)
                                                                                                        (("6"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("7"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("8"
                                                                                                (skosimp*)
                                                                                                (("8"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("8"
                                                                                                    (assert)
                                                                                                    (("8"
                                                                                                      (flatten)
                                                                                                      (("8"
                                                                                                        (assert)
                                                                                                        (("8"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("9"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("10"
                                                                                                (skosimp*)
                                                                                                (("10"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("10"
                                                                                                    (assert)
                                                                                                    (("10"
                                                                                                      (flatten)
                                                                                                      (("10"
                                                                                                        (assert)
                                                                                                        (("10"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("11"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("12"
                                                                                                (skosimp*)
                                                                                                (("12"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("12"
                                                                                                    (assert)
                                                                                                    (("12"
                                                                                                      (flatten)
                                                                                                      (("12"
                                                                                                        (assert)
                                                                                                        (("12"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("13"
                                                                                                (skosimp*)
                                                                                                (("13"
                                                                                                  (inst?
                                                                                                   -6)
                                                                                                  (("13"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("14"
                                                                                                (skosimp*)
                                                                                                (("14"
                                                                                                  (inst?
                                                                                                   -3)
                                                                                                  (("14"
                                                                                                    (assert)
                                                                                                    (("14"
                                                                                                      (flatten)
                                                                                                      (("14"
                                                                                                        (assert)
                                                                                                        (("14"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("8"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("9"
                                                                                (skosimp*)
                                                                                (("9"
                                                                                  (assert)
                                                                                  (("9"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("10"
                                                                                (skosimp*)
                                                                                (("10"
                                                                                  (inst?
                                                                                   -12)
                                                                                  (("10"
                                                                                    (assert)
                                                                                    (("10"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("11"
                                                                                (skosimp*)
                                                                                (("11"
                                                                                  (inst?
                                                                                   -11)
                                                                                  (("11"
                                                                                    (assert)
                                                                                    (("11"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("12"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("13"
                                                                                (skosimp*)
                                                                                (("13"
                                                                                  (inst?
                                                                                   -13)
                                                                                  (("13"
                                                                                    (assert)
                                                                                    (("13"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("14"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand
                                                   "ann_class"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -14
                                                                 "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? -12)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (expand "wf_Body")
                                                  (("4"
                                                    (flatten)
                                                    (("4"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("4"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (split 1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 6966 152 t nil)
  (ann_program_TCC2-3 nil 3401699946 3402747036
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "    is_finite[Class[Name]]
                                 ({c: Class[Name] |
                                     EXISTS (c1: Class[Name]):
                                       mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes
                                                                                  := {c: Class[Name] |
                                                                                        EXISTS (c1:
                                                                                                  Class
                                                                                                      [Name]):
                                                                                          classes
                                                                                            (program(mp!1))
                                                                                              (c1)
                                                                                           AND
                                                                                           c =
                                                                                            ann_class[CP, Name]
                                                                                                (mp!1)
                                                                                                (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes
                                                                                            := {c: Class[Name] |
                                                                                                  EXISTS (c1:
                                                                                                            Class
                                                                                                                [Name]):
                                                                                                    classes
                                                                                                      (program(mp!1))
                                                                                                        (c1)
                                                                                                     AND
                                                                                                     c =
                                                                                                      ann_class[CP, Name]
                                                                                                          (mp!1)
                                                                                                          (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes
                                                                                                      := {c: Class[Name] |
                                                                                                            EXISTS (c1:
                                                                                                                      Class
                                                                                                                          [Name]):
                                                                                                              classes
                                                                                                                (program(mp!1))
                                                                                                                  (c1)
                                                                                                               AND
                                                                                                               c =
                                                                                                                ann_class[CP, Name]
                                                                                                                    (mp!1)
                                                                                                                    (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                                                       := {c: Class[Name] |
                                                                                                             EXISTS (c1: Class[Name]):
                                                                                                               classes(program(mp!1))
                                                                                                                   (c1)
                                                                                                                AND
                                                                                                                c =
                                                                                                                 ann_class[CP, Name]
                                                                                                                     (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "ann_method_wf_Body")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -10
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (inst?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp*)
                                                                                (("6"
                                                                                  (inst?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand
                                                   "ann_class"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -14
                                                                 "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? -12)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (expand "wf_Body")
                                                  (("4"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("4"
                                                      (skosimp*)
                                                      (("4"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (inst? -3)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   595475 1700 t nil)
  (ann_program_TCC2-2 nil 3401685127 3401689620
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "    is_finite[Class[Name]]
                       ({c: Class[Name] |
                           EXISTS (c1: Class[Name]):
                             mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes
                                                                    := {c: Class[Name] |
                                                                          EXISTS (c1:
                                                                                    Class
                                                                                        [Name]):
                                                                            classes
                                                                              (program(mp!1))
                                                                                (c1)
                                                                             AND
                                                                             c =
                                                                              ann_class[CP, Name]
                                                                                  (mp!1)
                                                                                  (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes
                                                                          := {c: Class[Name] |
                                                                                EXISTS (c1:
                                                                                          Class
                                                                                              [Name]):
                                                                                  classes
                                                                                    (program(mp!1))
                                                                                      (c1)
                                                                                   AND
                                                                                   c =
                                                                                    ann_class[CP, Name]
                                                                                        (mp!1)
                                                                                        (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes
                                                                                := {c: Class[Name] |
                                                                                      EXISTS (c1:
                                                                                                Class
                                                                                                    [Name]):
                                                                                        classes
                                                                                          (program(mp!1))
                                                                                            (c1)
                                                                                         AND
                                                                                         c =
                                                                                          ann_class[CP, Name]
                                                                                              (mp!1)
                                                                                              (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1"
                              (auto-rewrite "disjoint?" "empty?"
                                            "intersection" "member"
                                            "subset?" "union")
                              (("1"
                                (expand "declared_var_names")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (rewrite "var_names_union")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (apply (repeat (inst?)))
                                        (("3"
                                          (rewrite "var_names_union")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                         := {c: Class[Name] |
                                                                               EXISTS (c1: Class[Name]):
                                                                                 classes(program(mp!1))
                                                                                     (c1)
                                                                                  AND
                                                                                  c =
                                                                                   ann_class[CP, Name]
                                                                                       (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "body_ann_method_wf_Body")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -10
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (inst?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp*)
                                                                                (("6"
                                                                                  (inst?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (expand "wf_Body")
                                                  (("3"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst? -3)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-14 -12 1))
                      (("5"
                        (expand "wf_program_methods_only_in_one_class")
                        (("5" (skosimp*)
                          (("5" (assert)
                            (("5" (inst -8 "c1!2" "c1!3" _)
                              (("5"
                                (assert)
                                (("5"
                                  (replace -2 :hide? t)
                                  (("5"
                                    (replace -3 :hide? t)
                                    (("5"
                                      (expand "ann_class")
                                      (("5"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -5)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "wf_program_has_unique_class_names_def")
                                                (("1"
                                                  (inst
                                                   -7
                                                   "c1!2"
                                                   "c1!3")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "ann_methods")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst -8 "n!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 30438 1249 t nil)
  (ann_program_TCC2-1 nil 3401614556 3401685096
   ("" (subtype-tcc) nil nil) unfinished nil 1529 4 t nil)))
(AnnotateProgramProperties
 (CP_is_enumerable 0
  (CP_is_enumerable-1 nil 3392611795 3392611802 ("" (postpone) nil nil)
   unchecked nil 7000 150 t shostak))
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601223 3431148041
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil AnnotateProgramProperties
     nil))
   2637 2590 t nil))
 (IMP_AnnotateProgram_TCC1 0
  (IMP_AnnotateProgram_TCC1-1 nil 3390292134 3431148044
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateProgramProperties nil))
   2631 2590 t nil))
 (IMP_AnnotateProgram_TCC2 0
  (IMP_AnnotateProgram_TCC2-1 nil 3395037658 3431148047
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil AnnotateProgramProperties nil))
   2654 2620 t nil))
 (ann_program_class_correspondence 0
  (ann_program_class_correspondence-1 nil 3392569211 3431148050
   ("" (skosimp*)
    (("" (expand "ann_program") (("" (propax) nil nil)) nil)) nil)
   untried ((ann_program const-decl "Program" AnnotateProgram nil))
   2987 2890 t shostak))
 (ann_program_method_correspondence 0
  (ann_program_method_correspondence-1 nil 3392569244 3431148054
   ("" (skosimp*)
    (("" (use "ann_program_class_correspondence")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand* "ann_class" "ann_methods")
            (("" (inst 1 "c1!1" _)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (replace -2 -5) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil))
   3825 3750 t shostak))
 (ann_program_preserves_var_decls 0
  (ann_program_preserves_var_decls-1 nil 3392566301 3431148062
   ("" (skosimp*)
    (("" (split)
      (("1" (expand* "ann_program" "getFieldDecls")
        (("1" (apply-extensionality :hide? t)
          (("1" (iff)
            (("1" (split)
              (("1" (skosimp*)
                (("1" (inst 1 "ann_class(mp!1)(c!1)")
                  (("1" (split)
                    (("1" (inst?) nil nil)
                     ("2" (expand "ann_class") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "ann_class")
                      (("2" (lift-if) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "getLocalDecls")
        (("2" (apply-extensionality :hide? t)
          (("2" (iff)
            (("2" (expand "getLocalDecls")
              (("2" (split)
                (("1" (expand "ann_program")
                  (("1" (skosimp*)
                    (("1" (case "name(c!1) = class_name(mva(mp!1))")
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (expand "ann_methods")
                                (("2"
                                  (inst 1 "ann_method(mp!1)(m!1)")
                                  (("2"
                                    (split 1)
                                    (("1" (inst?) nil nil)
                                     ("2"
                                      (expand "ann_method")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 2 "ann_class(mp!1)(c!1)")
                        (("2" (assert)
                          (("2" (split 2)
                            (("1" (inst?) nil nil)
                             ("2" (inst 1 "m!1")
                              (("2"
                                (expand "ann_class")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (use "ann_program_method_correspondence")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (inst 1 "c1!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "m1!1")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (expand "ann_method" -7)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst 2 "c1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 2 "m1!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand* "subset?" "member")
        (("3" (skosimp*)
          (("3" (expand* "ann_program" "getGhostDecls")
            (("3" (skosimp*)
              (("3" (inst 1 "ann_class(mp!1)(c!1)")
                (("3" (split)
                  (("1" (inst?) nil nil)
                   ("2" (expand* "ann_class" "union" "member")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (ann_program_method_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (union const-decl "set" sets nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   8433 5690 t shostak))
 (ann_program_preserves_var_decl_names 0
  (ann_program_preserves_var_decl_names-1 nil 3392567558 3431148065
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (flatten)
        (("" (replace -1)
          (("" (replace -2)
            (("" (assert)
              (("" (expand* "subset?" "member" "var_names")
                (("" (skosimp*)
                  (("" (inst?)
                    (("" (assert)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (member const-decl "bool" sets nil))
   2916 2810 t shostak))
 (ann_program_add_ghost_var_decls 0
  (ann_program_add_ghost_var_decls-1 nil 3396607040 3431148069
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "getGhostDecls")
        (("" (expand "union")
          (("" (expand "member")
            (("" (iff)
              (("" (split 1)
                (("1" (skosimp*)
                  (("1" (use "ann_program_class_correspondence")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (inst 1 "c1!1")
                          (("1" (assert)
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (expand "ann_class")
                                (("1"
                                  (expand "union")
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (split -1)
                    (("1" (skosimp*)
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (expand "ann_program")
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "mp!1")
                      (("2" (expand "compatible")
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2" (inst 1 "ann_class(mp!1)(c!1)")
                              (("2"
                                (expand "ann_program")
                                (("2"
                                  (split 1)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (expand "ann_class")
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (union const-decl "set" sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (member const-decl "bool" sets nil))
   4425 4280 t shostak))
 (ann_program_ext_declared_var_names 0
  (ann_program_ext_declared_var_names-1 nil 3401708815 3431148073
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (auto-rewrite "union" "member")
        (("" (apply-extensionality :hide? t)
          (("" (use "ann_program_preserves_var_decls")
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2)
                  (("" (use "ann_program_add_ghost_var_decls")
                    (("" (replace -1)
                      (("" (rewrite "var_names_union")
                        (("" (assert)
                          (("" (iff) (("" (prop) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (This const-decl "Name" Program nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil))
   3328 3250 t shostak))
 (ann_program_preserves_wf_state 0
  (ann_program_preserves_wf_state-1 nil 3390298254 3431148076
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (inst?)
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2) (("" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_state const-decl "boolean" State nil))
   3022 2940 t shostak))
 (ann_program_preserves_pstate_vars 0
  (ann_program_preserves_pstate_vars-1 nil 3392567663 3431148079
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (replace -1)
              (("" (replace -2)
                (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_state const-decl "boolean" State nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil))
   3415 3350 t shostak))
 (ann_program_preserves_ghoststate_vars 0
  (ann_program_preserves_ghoststate_vars-1 nil 3392567791 3431148083
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand* "wf_state" "wf_ghoststate")
        (("" (flatten)
          (("" (inst?)
            (("" (inst?)
              (("" (expand* "id" "subset?" "member" "var_names")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst?)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (member const-decl "bool" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (subset? const-decl "bool" sets nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil))
   3872 3800 t shostak))
 (var_names_ann_program 0
  (var_names_ann_program-2 nil 3410272352 3431148093
   ("" (auto-rewrite "subset?" "member" "union" "defined?")
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_program")
            (("" (expand "var_names" -1)
              (("" (expand "Union")
                (("" (skosimp*)
                  (("" (typepred "a!1")
                    (("" (skosimp*)
                      (("" (replace -3 :hide? t)
                        (("" (replace -2 :hide? t)
                          (("" (expand "ann_class")
                            (("" (assert)
                              ((""
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (auto-rewrite "Union")
                                    (("1"
                                      (rewrite "var_names" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "a!2")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "var_names"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (rewrite
                                                                             "var_names")
                                                                            (("4"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "halted_new_ghostvar")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("5"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("6"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("6"
                                                                                (assert)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (assert)
                                                                              (("7"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("8"
                                                                              (assert)
                                                                              (("8"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("9"
                                                                              (assert)
                                                                              (("9"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "var_names" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "var_names" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite "var_names" -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split -1)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (rewrite
                                                     "var_names"
                                                     -1)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "singleton")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (use
                                                           "cp_new_ghostvar")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "halted_new_ghostvar")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (rewrite
                                                         "var_names"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "var_names" 2)
                                    (("2"
                                      (expand "Union")
                                      (("2"
                                        (inst 2 "var_names(c1!1)")
                                        (("2" (inst 1 "c1!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj adt-constructor-decl "[[Expr, Expr] -> (Conj?)]" Body_adt
     nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (is_finite const-decl "bool" finite_sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Const adt-constructor-decl "[(defined?) -> (Const?)]" Body_adt
     nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var_names_ann_event formula-decl nil AnnotateEvent nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt
     nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (set type-eq-decl nil sets nil) (Union const-decl "set" sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   10185 9660 t nil)
  (var_names_ann_program-1 nil 3397470724 3410272219
   ("" (auto-rewrite "subset?" "member" "union")
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_program")
            (("" (expand "var_names" -1)
              (("" (expand "Union")
                (("" (skosimp*)
                  (("" (typepred "a!1")
                    (("" (skosimp*)
                      (("" (replace -3 :hide? t)
                        (("" (replace -2 :hide? t)
                          (("" (expand "ann_class")
                            (("" (assert)
                              ((""
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (auto-rewrite "Union")
                                    (("1"
                                      (rewrite "var_names" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "a!2")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "var_names"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (rewrite
                                                                             "var_names")
                                                                            (("4"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "add_as_union")
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (rewrite
                                                                                                         "var_names_union")))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "halted")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "var_names")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "new_cps_gvds")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       2
                                                                                                                       "halted")
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "mva(mp!1)")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "complete")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("5"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("6"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("6"
                                                                                (assert)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (assert)
                                                                              (("7"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("8"
                                                                              (assert)
                                                                              (("8"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("9"
                                                                              (assert)
                                                                              (("9"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "var_names" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "var_names" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite "var_names" -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split -1)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (rewrite
                                                     "var_names"
                                                     -1)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "singleton")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (use
                                                           "cp_new_ghostvar")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "halted_new_ghostvar")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (rewrite
                                                         "var_names"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "var_names" 2)
                                    (("2"
                                      (expand "Union")
                                      (("2"
                                        (inst 2 "var_names(c1!1)")
                                        (("2" (inst 1 "c1!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (Union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (halted_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (ExitExceptional? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitExceptional adt-constructor-decl "(ExitExceptional?)"
     EventType_adt nil)
    (excpt? adt-recognizer-decl "[ValOrExcpt -> boolean]"
     ValOrExcpt_adt nil)
    (excpt adt-constructor-decl "[Excpt -> (excpt?)]" ValOrExcpt_adt
     nil)
    (ExitNormal? adt-recognizer-decl "[EventType -> boolean]"
     EventType_adt nil)
    (ExitNormal adt-constructor-decl "(ExitNormal?)" EventType_adt nil)
    (Assert adt-constructor-decl "[Expr -> (Assert?)]" Body_adt nil)
    (val adt-constructor-decl "[Expr -> (val?)]" ValOrExcpt_adt nil)
    (val? adt-recognizer-decl "[ValOrExcpt -> boolean]" ValOrExcpt_adt
     nil)
    (Entry adt-constructor-decl "(Entry?)" EventType_adt nil)
    (Entry? adt-recognizer-decl "[EventType -> boolean]" EventType_adt
     nil)
    (filter_event const-decl "finite_set[Transition]" AnnotateMethod
     nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (ann_event const-decl "Stmt" AnnotateEvent nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (var_names_ann_event formula-decl nil AnnotateEvent nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_cps_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (unique const-decl "(injective?[CP, nat])" NewVariableDeclarations
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (halted const-decl "CP" MVA nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (Throwable adt-constructor-decl "(Throwable?)" Excpt_adt nil)
    (Throwable? adt-recognizer-decl "[Excpt -> boolean]" Excpt_adt nil)
    (Unit adt-constructor-decl "(Unit?)" Val_adt nil)
    (Unit? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (Union_surjective name-judgement
     "(surjective?[setofsets[T], set[T]])" sets_lemmas nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq adt-constructor-decl "[[Expr, Expr] -> (Eq?)]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg adt-constructor-decl "[Expr -> (Neg?)]" Body_adt nil)
    (Conj adt-constructor-decl "[[Expr, Expr] -> (Conj?)]" Body_adt
     nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   6852 3000 t shostak))
 (var_names_declared_in_MVA_subset_ghostvars 0
  (var_names_declared_in_MVA_subset_ghostvars-1 nil 3403862450
   3431148097
   ("" (skosimp*)
    (("" (auto-rewrite "subset?" "member" "union" "add")
      (("" (assert)
        (("" (skosimp*)
          (("" (rewrite "ann_program_add_ghost_var_decls")
            (("" (rewrite "var_names_union")
              (("" (assert)
                (("" (flatten)
                  (("" (use "new_vars_derived_from_mp")
                    (("" (flatten)
                      (("" (expand "var_names" -4)
                        (("" (skosimp*)
                          (("" (inst? -3) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((var_names_union formula-decl nil ProgramFunctions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   3494 3390 t shostak))
 (ann_program_defines_MVA_vars 0
  (ann_program_defines_MVA_vars-2 nil 3394875181 3431148101
   ("" (skosimp)
    (("" (typepred "mp!1")
      (("" (expand* "compatible" "var_names" "new_gvds")
        (("" (skosimp*)
          (("" (inst 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (assert)
              (("" (split 1)
                (("1" (expand "ann_program") (("1" (inst?) nil nil))
                  nil)
                 ("2" (expand "ann_class") (("2" (propax) nil nil))
                  nil)
                 ("3" (expand* "ann_class" "union" "member" "new_gvds")
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil))
   4107 3990 t nil)
  (ann_program_defines_MVA_vars-1 nil 3389956467 3394872339
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (prop)
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand* "getGhostDecls" "var_names")
              (("1" (use "ann_program_defines_MVA_vars2")
                (("1" (split -)
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (expand* "var_names" "new_gvds" "union" "member")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   untried
   ((id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   974962 4000 t shostak))
 (new_vars_ghost_in_ann_program 0
  (new_vars_ghost_in_ann_program-1 nil 3394876088 3431148104
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (flatten)
        (("" (inst?)
          (("" (assert)
            (("" (hide -1 2)
              (("" (expand "getGhostDecls")
                (("" (expand "var_names" 1)
                  (("" (use "ann_program_defines_MVA_vars")
                    (("" (assert)
                      (("" (skosimp)
                        (("" (inst?)
                          (("" (assert)
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((id const-decl "(bijective?[T, T])" identity nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil))
   3103 3020 t shostak))
 (wf_Body_MVA_implies_wf_Body 0
  (wf_Body_MVA_implies_wf_Body-1 nil 3403370425 3431148108
   ("" (skosimp)
    (("" (expand "wf_Body")
      (("" (split)
        (("1" (skosimp)
          (("1" (expand* "subset?" "member")
            (("1" (inst?)
              (("1" (assert)
                (("1"
                  (expand* "ext_declared_var_names" "union" "member")
                  (("1" (flatten)
                    (("1" (expand "var_names" -2)
                      (("1" (expand* "union" "member")
                        (("1" (split)
                          (("1" (hide -2 -3 1 2 4)
                            (("1" (use "ann_program_defines_MVA_vars")
                              (("1"
                                (split)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (expand "var_names" 1)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "getGhostDecls")
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "var_names")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand*
                                             "new_gvds"
                                             "add"
                                             "union"
                                             "member")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "new_mva_vars_gvds")
                                                (("2"
                                                  (inst 3 "f!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -2 -3 2 3 4)
                            (("2" (expand "var_names")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "mp!1")
                                  (("2"
                                    (expand*
                                     "compatible"
                                     "MVA_prog_vars_are_fields")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst 1 "fd!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (use
                                                   "ann_program_preserves_var_decls")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "getFieldDecls")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (inst?) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (union const-decl "set" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (ann_program_defines_MVA_vars formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (new_mva_vars_gvds const-decl "finite_set[Decl]"
     NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   4022 3900 t shostak))
 (one_action_source_wf_Body 0
  (one_action_source_wf_Body-1 nil 3403614165 3431148112
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (expand "wf_Action")
        (("" (use "var_names_declared_in_MVA_subset_ghostvars")
          (("" (inst?)
            (("" (assert)
              (("" (flatten)
                (("" (expand "wf_Expr")
                  (("" (expand "wf_Body")
                    (("" (flatten)
                      (("" (assert)
                        (("" (auto-rewrite "subset?" "member")
                          (("" (assert)
                            (("" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst? -4)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (auto-rewrite "union")
                                          (("1"
                                            (expand
                                             "ext_declared_var_names")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split -4)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "mp!1")
                                                    (("2"
                                                      (expand
                                                       "compatible")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (expand
                                                             "MVA_prog_vars_are_fields")
                                                            (("2"
                                                              (expand
                                                               "var_names"
                                                               -7)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skosimp*)
                                                                      (("2"
                                                                        (use
                                                                         "ann_program_preserves_var_decls")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "var_names"
                                                                               1)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "fd!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "getFieldDecls")
                                                                                    (("2"
                                                                                      (inst?
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst? -6)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (var_names_declared_in_MVA_subset_ghostvars formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (Body type-decl nil Body_adt nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (Expr type-eq-decl nil Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil))
   3637 3520 t shostak))
 (one_action_translation_wf_Body 0
  (one_action_translation_wf_Body-1 nil 3403614375 3431148116
   ("" (skosimp*)
    (("" (use "one_action_source_wf_Body")
      (("" (assert)
        (("" (expand "wf_Action")
          (("" (inst?)
            (("" (assert)
              (("" (expand "wf_Expr")
                (("" (expand "wf_Body")
                  (("" (flatten)
                    (("" (split 1)
                      (("1" (skosimp*)
                        (("1" (rewrite "var_names" -1)
                          (("1" (expand "add")
                            (("1" (split -1)
                              (("1"
                                (assert)
                                (("1"
                                  (use
                                   "var_names_MVA_subset_var_names_new_gdvs")
                                  (("1"
                                    (rewrite
                                     "ann_program_ext_declared_var_names")
                                    (("1"
                                      (auto-rewrite
                                       "subset?"
                                       "union"
                                       "member")
                                      (("1"
                                        (expand "var_names" -1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use
                                                     "wf_program_var_names_declared")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst? -2)
                                (("2"
                                  (expand "member")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (rewrite "subterm" -2)
                          (("2" (assert)
                            (("2" (split -2)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "var_names_declared_in_MVA_subset_ghostvars")
                                    (("1"
                                      (auto-rewrite
                                       "subset?"
                                       "member"
                                       "union")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst? -7)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((one_action_source_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (Action type-eq-decl nil MVA nil) (list type-decl nil list_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (wf_Action const-decl "boolean" WellFormedMVA nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Body type-decl nil Body_adt nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (var_names const-decl "finite_set[Name]" MVA nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member def-decl "bool" list_props nil)
    (add const-decl "(nonempty?)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (var_names_declared_in_MVA_subset_ghostvars formula-decl nil
     AnnotateProgramProperties nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil))
   4502 4340 t shostak))
 (ann_action_yields_wf_Body 0
  (ann_action_yields_wf_Body-1 nil 3403860923 3431148120
   ("" (skosimp*)
    (("" (expand "wf_Body")
      (("" (use "one_action_translation_wf_Body")
        (("" (assert)
          (("" (expand "wf_Body")
            (("" (split 1)
              (("1" (skosimp*)
                (("1" (rewrite "var_names_ann_action")
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (inst? -3)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "var_names"
                                 "add"
                                 "member")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -2)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (use "subterm_ann_action")
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (inst? -6) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (var_names_ann_action formula-decl nil AnnotateEvent nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (subterm_ann_action formula-decl nil AnnotateEvent nil)
    (Body type-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Expr type-eq-decl nil Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (one_action_translation_wf_Body formula-decl nil
     AnnotateProgramProperties nil))
   3595 3480 t shostak))
 (update_vars_wf_Stmt 0
  (update_vars_wf_Stmt-1 nil 3403861319 3431148127
   ("" (skosimp*)
    (("" (expand "wf_Stmt")
      (("" (expand "update_vars")
        (("" (use "ann_action_yields_wf_Body")
          (("" (typepred "mva(mp!1)")
            (("" (expand "wf_MVA")
              (("" (flatten)
                (("" (inst?)
                  (("" (expand "wf_Trans")
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (hide-all-but (-6 -11 2))
                            (("" (expand "wf_Body")
                              ((""
                                (split 1)
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (auto-rewrite
                                     "var_names"
                                     "union"
                                     "member"
                                     "add"
                                     "singleton")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (stop-rewrite "var_names")
                                        (("1"
                                          (rewrite
                                           "ann_program_ext_declared_var_names")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (use "cp_new_ghostvar")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (use
                                                 "new_vars_derived_from_mp")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst? -2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst? -3)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp*)
                                  (("2"
                                    (rewrite "subterm" -2)
                                    (("2"
                                      (split -2)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (rewrite "subterm" -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "ann_program_add_ghost_var_decls")
                                                (("1"
                                                  (rewrite
                                                   "var_names_union")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (auto-rewrite
                                                       "union"
                                                       "member")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (use
                                                             "cp_new_ghostvar")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "subterm" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (inst? -5)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Stmt const-decl "boolean" WellFormedProgram nil)
    (ann_action_yields_wf_Body formula-decl nil
     AnnotateProgramProperties nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Expr type-eq-decl nil Body_adt nil)
    (OneAction type-eq-decl nil MVA nil)
    (list type-decl nil list_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (ann_action def-decl "Stmt" AnnotateEvent nil)
    (name_of const-decl "(injective?[CP, (legal_names(mp))])"
     NewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "set[Name]" VariableNames nil)
    (NumVarEval adt-constructor-decl "[Name -> (NumVarEval?)]" Body_adt
     nil)
    (cp const-decl "{n: Name | NOT forbidden_names(mp)(n)}"
     VariableNames nil)
    (forbidden_names const-decl "set[Name]" VariableNames nil)
    (set type-eq-decl nil sets nil)
    (Set adt-constructor-decl "[[Name, Expr] -> (Set?)]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence adt-constructor-decl "[[Stmt, Stmt] -> (Sequence?)]"
     Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Body type-decl nil Body_adt nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (cp_new_ghostvar formula-decl nil NewVariableDeclarations nil)
    (new_vars_derived_from_mp formula-decl nil NewVariableDeclarations
     nil)
    (wf_Trans const-decl "boolean" WellFormedMVA nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil))
   6957 6720 t shostak))
 (guard_to_expression_wf_Expr 0
  (guard_to_expression_wf_Expr-1 nil 3412499506 3431148131
   ("" (skosimp*)
    (("" (expand "wf_Expr")
      (("" (use "guard_to_expression_yields_wf_Expr")
        (("" (assert)
          (("" (typepred "mp!1")
            (("" (inst?)
              (("" (expand "wf_Expr")
                (("" (expand "wf_Body")
                  (("" (split 1)
                    (("1" (skosimp*)
                      (("1" (auto-rewrite "subset?" "member" "union")
                        (("1" (assert)
                          (("1" (inst? -4)
                            (("1" (assert)
                              (("1"
                                (use
                                 "var_names_MVA_subset_var_names_new_gdvs")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "ann_program_ext_declared_var_names")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (use
                                               "wf_program_var_names_declared")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst? -6) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Expr const-decl "boolean" WellFormedProgram nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (wf_Body const-decl "boolean" WellFormedMVA nil)
    (Body type-decl nil Body_adt nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (wf_program_var_names_declared formula-decl nil WellFormedProgram
     nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (var_names_MVA_subset_var_names_new_gdvs formula-decl nil
     NewVariableDeclarations nil)
    (wf_Expr const-decl "boolean" WellFormedMVA nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (guard_to_expression_yields_wf_Expr formula-decl nil MVAMonitoring
     nil))
   3824 3690 t nil))
 (ann_trans_cp_wf 0
  (ann_trans_cp_wf-2 nil 3412499534 3431148140
   ("" (beta)
    (("" (skosimp*)
      (("" (expand* "wf_Expr" "wf_Stmt" "ann_trans_cp")
        (("" (split)
          (("1" (expand "wf_Body")
            (("1" (split)
              (("1" (skosimp)
                (("1" (expand "ext_declared_var_names")
                  (("1" (auto-rewrite ("var_names" "union" "member"))
                    (("1" (assert)
                      (("1" (expand "singleton")
                        (("1" (flatten)
                          (("1" (hide 1 2)
                            (("1" (split)
                              (("1"
                                (inst 1 "new_cp_gvd(mp!1)")
                                (("1"
                                  (expand "new_cp_gvd" 1 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "ann_program_add_ghost_var_decls")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand*
                                               "new_gvds"
                                               "add"
                                               "member")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "new_cp_gvd(mp!1)(q!1)")
                                (("2"
                                  (expand "new_cp_gvd" 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "ann_program_add_ghost_var_decls")
                                      (("2"
                                        (rewrite -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "new_cp_gvd_new_ghostvar")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (auto-rewrite "subterm") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "ann_guard_actions")
            (("2" (expand "wf_Body")
              (("2" (split)
                (("1" (skosimp)
                  (("1" (use "var_names_CaseJML_set2list")
                    (("1" (rewrite -1)
                      (("1" (skosimp)
                        (("1"
                          (expand* "ann_guard_actions_set"
                           "ann_guard_actions")
                          (("1" (skosimp)
                            (("1" (rewrite -2)
                              (("1"
                                (expand* "union" "member")
                                (("1"
                                  (case "ts(mva(mp!1))(t!1)")
                                  (("1"
                                    (split)
                                    (("1"
                                      (use
                                       "guard_to_expression_wf_Expr")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand* "wf_Expr" "wf_Body")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "update_vars_wf_Stmt")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand* "wf_Stmt" "wf_Body")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand* "subset?" "member")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "subterm")
                    (("2" (assert)
                      (("2" (use "some_is_exists")
                        (("2" (rewrite -1)
                          (("2" (skosimp)
                            (("2" (use "set2list_same_elements")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -3)
                                  (("2"
                                    (expand*
                                     "member"
                                     "ann_guard_actions_set"
                                     "ann_guard_actions")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (rewrite -2)
                                        (("2"
                                          (case "ts(mva(mp!1))(t!1)")
                                          (("1"
                                            (use "update_vars_wf_Stmt")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "wf_Stmt"
                                                 "wf_Body")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst? -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "guard_to_expression_wf_Expr")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand*
                                                             "wf_Expr"
                                                             "wf_Body")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst?
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand*
                                             "subset?"
                                             "member")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (add const-decl "(nonempty?)" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (new_cp_gvd_new_ghostvar formula-decl nil NewVariableDeclarations
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (update_vars_wf_Stmt formula-decl nil AnnotateProgramProperties
     nil)
    (guard_to_expression_wf_Expr formula-decl nil
     AnnotateProgramProperties nil)
    (subset? const-decl "bool" sets nil)
    (Body type-decl nil Body_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (wf_Expr const-decl "boolean" WellFormedProgram nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil))
   8631 5870 t nil)
  (ann_trans_cp_wf-1 nil 3403872295 3412498591
   ("" (beta)
    (("" (skosimp*)
      (("" (expand* "wf_BoolExpr" "wf_Stmt" "ann_trans_cp")
        (("" (split)
          (("1" (expand "wf_Body")
            (("1" (split)
              (("1" (skosimp)
                (("1" (expand "ext_declared_var_names")
                  (("1" (auto-rewrite ("var_names" "union" "member"))
                    (("1" (assert)
                      (("1" (expand "singleton")
                        (("1" (flatten)
                          (("1" (hide 1 2)
                            (("1" (split)
                              (("1"
                                (inst 1 "new_cp_gvd(mp!1)")
                                (("1"
                                  (expand "new_cp_gvd" 1 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "ann_program_add_ghost_var_decls")
                                      (("1"
                                        (rewrite -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand*
                                               "new_gvds"
                                               "add"
                                               "member")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "new_cp_gvd(mp!1)(q!1)")
                                (("2"
                                  (expand "new_cp_gvd" 1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use
                                       "ann_program_add_ghost_var_decls")
                                      (("2"
                                        (rewrite -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "new_cp_gvd_new_ghostvar")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (auto-rewrite "subterm") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "ann_guard_actions")
            (("2" (expand "wf_Body")
              (("2" (split)
                (("1" (skosimp)
                  (("1" (use "var_names_CaseJML_set2list")
                    (("1" (rewrite -1)
                      (("1" (skosimp)
                        (("1"
                          (expand* "ann_guard_actions_set"
                           "ann_guard_actions")
                          (("1" (skosimp)
                            (("1" (rewrite -2)
                              (("1"
                                (expand* "union" "member")
                                (("1"
                                  (case "ts(mva(mp!1))(t!1)")
                                  (("1"
                                    (split)
                                    (("1"
                                      (use
                                       "guard_to_expression_wf_BoolExpr")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand*
                                           "wf_BoolExpr"
                                           "wf_Body")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "update_vars_wf_Stmt")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand* "wf_Stmt" "wf_Body")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand* "subset?" "member")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp)
                  (("2" (expand "subterm")
                    (("2" (assert)
                      (("2" (use "some_is_exists")
                        (("2" (rewrite -1)
                          (("2" (skosimp)
                            (("2" (use "set2list_same_elements")
                              (("2"
                                (assert)
                                (("2"
                                  (hide -3)
                                  (("2"
                                    (expand*
                                     "member"
                                     "ann_guard_actions_set"
                                     "ann_guard_actions")
                                    (("2"
                                      (skosimp)
                                      (("2"
                                        (rewrite -2)
                                        (("2"
                                          (case "ts(mva(mp!1))(t!1)")
                                          (("1"
                                            (use "update_vars_wf_Stmt")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand*
                                                 "wf_Stmt"
                                                 "wf_Body")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst? -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "guard_to_expression_wf_BoolExpr")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand*
                                                             "wf_BoolExpr"
                                                             "wf_Body")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst?
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand*
                                             "subset?"
                                             "member")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (var_names def-decl "[Name -> boolean]" ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (add const-decl "(nonempty?)" sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (new_cp_gvd_new_ghostvar formula-decl nil NewVariableDeclarations
     nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subterm adt-def-decl "boolean" Body_adt nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (member def-decl "bool" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (set2list_same_elements formula-decl nil set2list nil)
    (pred type-eq-decl nil defined_types nil)
    (some_is_exists formula-decl nil listfuncs nil)
    (list type-decl nil list_adt nil)
    (CaseJML adt-constructor-decl "[list[[Expr, Stmt]] -> (CaseJML?)]"
     Body_adt nil)
    (set2list def-decl "list[T]" set2list nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (update_vars const-decl "Stmt" AnnotateEvent nil)
    (PSt type-eq-decl nil State nil) (Store type-eq-decl nil State nil)
    (update_vars_wf_Stmt formula-decl nil AnnotateProgramProperties
     nil)
    (subset? const-decl "bool" sets nil)
    (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CaseJML? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (IfThenElse? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Sequence? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Set? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Skip? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (StmtExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Throw? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (TryCatch? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (While? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assert? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (ann_guard_actions_set const-decl "finite_set[[Expr, Stmt]]"
     AnnotateEvent nil)
    (var_names_CaseJML_set2list formula-decl nil ProgramFunctions nil)
    (ann_guard_actions const-decl "list[[Expr, Stmt]]" AnnotateEvent
     nil)
    (ann_trans_cp const-decl "[Expr, Stmt]" AnnotateEvent nil)
    (wf_Stmt const-decl "boolean" WellFormedProgram nil))
   1195 1080 t shostak))
 (ann_event_wf_Body 0
  (ann_event_wf_Body-1 nil 3402484935 3431148143
   ("" (skosimp)
    (("" (expand "wf_Body")
      (("" (split)
        (("1" (skosimp)
          (("1" (use "ann_event_var_names")
            (("1" (assert)
              (("1" (use "ann_program_ext_declared_var_names")
                (("1" (rewrite -1)
                  (("1" (expand* "union" "member") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (use "ann_event_set_ghostvar")
            (("2" (assert)
              (("2" (use "ann_program_add_ghost_var_decls")
                (("2" (rewrite -1)
                  (("2" (expand* "var_names" "union" "member")
                    (("2" (skosimp)
                      (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_Body const-decl "boolean" WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (Body type-decl nil Body_adt nil)
    (ann_event_set_ghostvar formula-decl nil AnnotateEvent nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (ValOrExcpt type-decl nil ValOrExcpt_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (ann_event_var_names formula-decl nil AnnotateEvent nil))
   3955 3800 t shostak))
 (ann_program_preserves_wf_method 0
  (ann_program_preserves_wf_method-1 nil 3401708680 3431149277
   ("" (skosimp*)
    (("" (typepred "m!1")
      (("" (use "ann_method_wf_Body1")
        (("" (use "ann_method_wf_Body2")
          (("" (assert)
            (("" (expand "wf_Method" 1)
              (("" (split 1)
                (("1" (expand "method_pred")
                  (("1" (expand "wf_Body")
                    (("1"
                      (rewrite "ann_program_ext_declared_var_names")
                      (("1" (rewrite "ann_program_add_ghost_var_decls")
                        (("1" (rewrite "var_names_union")
                          (("1" (auto-rewrite "union" "member")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (branch (split 1) ((skosimp*)))))
                                    (("1"
                                      (apply (repeat (inst? -4)))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (inst? -3) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (branch (split 1) ((skosimp*)))))
                                    (("1"
                                      (apply (repeat (inst? -5)))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (inst? -4) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3"
                                      (inst? -3)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skosimp*)
                                    (("4"
                                      (inst?)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (branch (split 1) ((skosimp*)))))
                                    (("1"
                                      (apply (repeat (inst? -7)))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (inst? -5) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (branch (split 1) ((skosimp*)))))
                                    (("1"
                                      (apply (repeat (inst? -8)))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (inst? -6) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (apply
                                     (then
                                      (skosimp*)
                                      (branch (split 1) ((skosimp*)))))
                                    (("1"
                                      (apply (repeat (inst? -9)))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (inst? -7) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("8"
                                    (skosimp*)
                                    (("8"
                                      (inst? -6)
                                      (("8" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("9"
                                    (skosimp*)
                                    (("9"
                                      (inst?)
                                      (("9" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 -2)
                  (("2" (expand "wf_Method")
                    (("2" (flatten)
                      (("2" (expand "wf_method_all_lvars_disjoint")
                        (("2" (skosimp*)
                          (("2" (rewrite "ann_method_lvars")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_Method const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ann_method_wf_Body2 formula-decl nil AnnotateMethod nil)
    (ann_method_lvars formula-decl nil AnnotateMethod nil)
    (wf_method_all_lvars_disjoint const-decl "boolean"
     WellFormedProgram nil)
    (method_pred const-decl "bool" ProgramRestriction nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (Body type-decl nil Body_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Plus? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (NumVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Neg? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Conj? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Eq? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (BoolVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (RefVarEval? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Assign? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (CondExpr? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (MethodCall? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (Const? adt-recognizer-decl "[Body -> boolean]" Body_adt nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (ann_method_wf_Body1 formula-decl nil AnnotateMethod nil))
   104049 5100 t shostak))
 (ann_program_preserves_wf_body 0
  (ann_program_preserves_wf_body-1 nil 3401438501 3431148152
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (split 1)
          (("1" (skosimp*)
            (("1" (inst?)
              (("1" (rewrite "ann_program_ext_declared_var_names")
                (("1" (auto-rewrite "union" "member")
                  (("1" (assert) (("1" (flatten) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (rewrite "ann_program_add_ghost_var_decls")
              (("2" (rewrite "var_names_union")
                (("2" (auto-rewrite "union" "member")
                  (("2" (inst? -4)
                    (("2" (assert) (("2" (flatten) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_Body const-decl "boolean" WellFormedProgram nil)
    (Body type-decl nil Body_adt nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_program_ext_declared_var_names formula-decl nil
     AnnotateProgramProperties nil)
    (ann_program_add_ghost_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (new_gvds const-decl "finite_set[Decl]" NewVariableDeclarations
     nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (var_names_union formula-decl nil ProgramFunctions nil))
   3032 2930 t shostak))
 (get_class_ann_program 0
  (get_class_ann_program-1 nil 3392567967 3431148156
   ("" (skosimp*)
    (("" (replace -3 :hide? t)
      (("" (replace -3 :hide? t)
        (("" (expand* "ann_program" "get_class")
          (("" (assert)
            (("" (lift-if -2)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (assert) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((get_class const-decl "lift[Class]" ProgramFunctions nil)
    (ann_program const-decl "Program" AnnotateProgram nil))
   3332 3290 t shostak))
 (same_class_name_ann_class_implies_same_class 0
  (same_class_name_ann_class_implies_same_class-1 nil 3387512899
   3431148160
   ("" (skosimp)
    (("" (expand "ann_program")
      (("" (skosimp)
        (("" (lemma "wf_program_has_unique_class_names")
          (("" (inst -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (typepred "mp!1")
              (("" (expand "wf_MP")
                (("" (expand "ann_class")
                  (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((ann_program const-decl "Program" AnnotateProgram nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_program_has_unique_class_names formula-decl nil
     WellFormedProgram nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil))
   4045 3920 t shostak))
 (same_method_name_ann_class_implies_same_method 0
  (same_method_name_ann_class_implies_same_method-1 nil 3401684952
   3431148165
   ("" (skosimp)
    (("" (lemma "wf_class_has_unique_method_names")
      ((""
        (inst -1 "ann_program(mp!1)" "c2!1" "m2!1"
         "ann_method(mp!1)(m1!1)")
        (("" (lemma "wf_program_has_wf_classes")
          (("" (inst -1 "ann_program(mp!1)" "c2!1")
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "ann_method" -2 2)
                    (("1" (replace -3)
                      (("1" (expand "ann_class" 1)
                        (("1" (expand "ann_methods")
                          (("1" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ann_program" 1)
                  (("2" (inst 1 "c1!1") (("2" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (wf_class_has_unique_method_names formula-decl nil
     WellFormedProgram nil)
    (wf_program_has_wf_classes formula-decl nil WellFormedProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateMethod nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (ann_method const-decl "Method" AnnotateMethod nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil))
   5036 4920 t nil))
 (lookup_mthd_ann_program_TCC1 0
  (lookup_mthd_ann_program_TCC1-1 nil 3398657929 3431148174
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (MVA_aut_vars_are_not_prog_vars const-decl "boolean"
     MonitoredProgram nil)
    (MVA_prog_vars_are_fields const-decl "boolean" MonitoredProgram
     nil)
    (MVA_events_correspond_to_methods const-decl "boolean"
     MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (trap_state const-decl "boolean" MVAProperties nil)
    (deterministic const-decl "boolean" MVAProperties nil)
    (total const-decl "boolean" MVAProperties nil)
    (complete const-decl "boolean" MVAProperties nil)
    (halted const-decl "CP" MVA nil)
    (lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (method_names const-decl "finite_set[Name]" ProgramFunctions nil))
   9632 9340 nil nil))
 (lookup_mthd_ann_program 0
  (lookup_mthd_ann_program-1 nil 3387195852 3431148179
   ("" (skosimp)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          (("" (case "up?(get_class(ann_program(mp!1))(tgt!1))")
            (("1" (assert)
              (("1" (split -2)
                (("1" (split -3)
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (skosimp*)
                        (("1"
                          (name "c1"
                                "down(get_class(program(mp!1))(tgt!1))")
                          (("1" (replace -1)
                            (("1"
                              (name "c2"
                                    "down(get_class(ann_program(mp!1))(tgt!1))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma
                                   "same_class_name_ann_class_implies_same_class")
                                  (("1"
                                    (inst -1 "mp!1" "c1" "c2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "get_class_ann_program")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -1
                                             "mp!1"
                                             "c1"
                                             "c2"
                                             "tgt!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "same_method_name_ann_class_implies_same_method")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (assert)
                          (("2"
                            (case-replace
                             " methods(down(get_class(ann_program(mp!1))(tgt!1))) = methods(down(get_class(program(mp!1))(tgt!1)))")
                            (("1" (assert) nil nil)
                             ("2"
                              (case-replace
                               "get_class(ann_program(mp!1))(tgt!1) = get_class(program(mp!1))(tgt!1)")
                              (("2"
                                (use
                                 "same_class_name_ann_class_implies_same_class")
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "get_class_ann_program")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (use "ann_program_class_correspondence")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((lookup_mthd const-decl "lift[(methods(p))]" ProgramFunctions nil)
    (ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (same_class_name_ann_class_implies_same_class formula-decl nil
     AnnotateProgramProperties nil)
    (same_method_name_ann_class_implies_same_method formula-decl nil
     AnnotateProgramProperties nil)
    (get_class_ann_program formula-decl nil AnnotateProgramProperties
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil))
   4640 4430 t shostak))
 (ann_program_preserves_class_names 0
  (ann_program_preserves_class_names-1 nil 3398687801 3431148182
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "class_names")
        (("" (iff)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (inst 1 "ann_class(mp!1)(c!1)")
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_name")
                    (("1" (assert)
                      (("1" (expand "ann_program")
                        (("1" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (use "ann_program_class_correspondence")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst 1 "c1!1")
                      (("2" (assert)
                        (("2" (replace -2)
                          (("2"
                            (rewrite
                             "ann_program_preserves_class_name")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (ann_program_preserves_class_name formula-decl nil AnnotateClass
     nil)
    (ann_class const-decl "Class" AnnotateClass nil))
   3382 3300 t shostak))
 (up_get_class_equivalence 0
  (up_get_class_equivalence-1 nil 3398687657 3431148185
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (propax) nil nil)
             ("2" (split -1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_names")
                    nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((get_class const-decl "lift[Class]" ProgramFunctions nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil) (Decl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (ann_program_preserves_class_names formula-decl nil
     AnnotateProgramProperties nil))
   2924 2850 t shostak))
 (get_class_equivalence 0
  (get_class_equivalence-1 nil 3398688099 3431149839
   ("" (skosimp*)
    (("" (use "up_get_class_equivalence")
      (("" (assert)
        (("" (use "ann_program_preserves_class_name")
          (("" (expand "get_class")
            (("" (case "Reference?(a!1)")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (split -4)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (expand "class_names")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case-replace
                                     "{c_1: Class[Name] |
                                                  classes(program(mp!1))(c_1) AND
                                                   name(c_1) = class_name(a!1)} = singleton(c!1)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c: Class[Name] |
                                           classes(ann_program(mp!1))(c) AND
                                            name(c) = class_name(a!1)} = singleton(c!2)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -4)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (typepred
                                                   "program(mp!1)")
                                                  (("1"
                                                    (expand*
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "c!1"
                                                         "c1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "ann_program_preserves_class_name"
                                                             -11)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (typepred
                                                     "ann_program(mp!1)")
                                                    (("1"
                                                      (expand*
                                                       "wf_Program"
                                                       "wf_program_has_unique_class_names_def")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "x!1"
                                                           "c!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred
                                                 "program(mp!1)")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (expand "class_names")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (case-replace
                                     "{c: Class[Name] |
                                       classes(ann_program(mp!1))(c) AND
                                        name(c) = class_name(a!1)} = singleton(c!2)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c_1: Class[Name] |
                                            classes(program(mp!1))(c_1) AND
                                             name(c_1) = class_name(a!1)} = singleton(c!1)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -3)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (rewrite
                                                   "ann_program_preserves_class_name")
                                                  (("1"
                                                    (expand
                                                     "ann_class"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "program(mp!1)")
                                                        (("1"
                                                          (expand*
                                                           "wf_Program"
                                                           "wf_program_has_unique_class_names_def")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "c1!1"
                                                               "c!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (iff)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred
                                                   "program(mp!1)")
                                                  (("1"
                                                    (expand*
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "x!1"
                                                         "c!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred
                                                 "ann_program(mp!1)")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((class_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (class_name adt-accessor-decl "[(Reference?) -> Name]" Val_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set[Class[Name]]" AnnotateProgramProperties nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (wf_program_has_unique_class_names_def const-decl "boolean"
     WellFormedProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_class const-decl "Class" AnnotateClass nil)
    (Reference? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil)
    (ann_program_preserves_class_name formula-decl nil AnnotateClass
     nil)
    (Name formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil) (MVA type-eq-decl nil MVA nil)
    (wf_MVA const-decl "boolean" WellFormedMVA nil)
    (good_for_monitoring const-decl "boolean" MonitoredProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_and_complete_MP const-decl "boolean" MonitoredProgram nil)
    (up_get_class_equivalence formula-decl nil
     AnnotateProgramProperties nil))
   542015 5420 t shostak))
 (ann_program_keeps_methods 0
  (ann_program_keeps_methods-1 nil 3432207685 3432285258
   ("" (skosimp*)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (split -)
          (("1" (flatten)
            (("1" (use "up_get_class_equivalence")
              (("1" (ground)
                (("1" (expand "method_names")
                  (("1" (skosimp*)
                    (("1" (inst 1 "ann_method(mp!1)(m!1)")
                      (("1" (use "get_class_in_classes")
                        (("1" (use "ann_method_name")
                          (("1" (assert)
                            (("1" (expand "get_class" (-5 1))
                              (("1"
                                (split -)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (use
                                     "ann_program_preserves_class_names")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "choose")
                                        (("1" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "get_class" -5)
                                      (("2"
                                        (lift-if)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1484950 9040 t shostak)))

