(VariableNames
 (cp_TCC1 0
  (cp_TCC1-1 nil 3396601202 3401699965
   (""
    (inst 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (skosimp*)
      ((""
        (case "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (case-replace
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :hide? t)
          (("1" (use "infinite_nonempty[Name]") nil nil)
           ("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
            nil))
          nil)
         ("2" (use "infinite_difference[Name]")
          (("1" (use "infinite_namespace") nil nil)
           ("2" (typepred "reserved_words")
            (("2" (typepred "declared_var_names(program(mp!1))")
              (("2" (typepred "var_names(mva(mp!1))")
                (("2" (expand "forbidden_names")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((infinite_difference judgement-tcc nil infinite_sets_def nil) nil
    nil nil nil nil nil nil (lift type-decl nil lift_adt nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil (member const-decl "bool" sets nil) nil nil nil
    (union const-decl "set" sets nil) nil
    (injective? const-decl "bool" functions nil)
    (empty? const-decl "bool" sets nil) nil
    (difference const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil) nil
    (set type-eq-decl nil sets nil) nil
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil nil nil nil (boolean nonempty-type-decl nil booleans nil)
    nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil)
   224 223 t nil)))
(NewVariableDeclarations
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-2 nil 3397386732 3401700088
   (";;; Proof IMP_VariableNames_TCC1-1 for formula AnnotateProgram.IMP_VariableNames_TCC1"
    (use "infinite_namespace") nil
    ";;; developed with SHOSTAK decision procedures")
   unchecked (nil) 1 1 nil nil)
  (IMP_VariableNames_TCC1-1 nil 3397386612 nil
   ("" (assuming-tcc) nil nil) nil nil nil nil nil nil))
 (name_of_TCC1 0
  (name_of_TCC1-2 nil 3397386758 3401700090
   (";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
    (use "name_of_exists")
    ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
      (skosimp*)
      ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   (nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    nil nil nil (boolean nonempty-type-decl nil booleans nil) nil nil
    nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) nil
    (injective? const-decl "bool" functions nil) nil)
   195 193 nil nil)
  (name_of_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (unique_TCC1 0
  (unique_TCC1-2 nil 3397386786 3401700091
   (";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
    (use "CP_is_enumerable")
    ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
      (skosimp*)
      ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
        (inst?) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil) nil)
   74 73 nil nil)
  (unique_TCC1-1 nil 3397386612 nil ("" (existence-tcc) nil nil) nil
   nil nil nil nil nil))
 (new_cp_gvd_TCC1 0
  (new_cp_gvd_TCC1-1 nil 3398096023 3401700092
   ("" (subtype-tcc) nil nil) unchecked (nil nil) 97 93 nil nil))
 (new_cps_gvds_TCC1 0
  (new_cps_gvds_TCC1-1 nil 3398096023 3401700095
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
(q: (cps(mva(mp!1))))|
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1)
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (apply-extensionality :hide? t) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "q!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil) nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil nil
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (injective? const-decl "bool" functions nil) nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil) nil nil
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil))
   299 295 t nil))
 (new_mva_vars_gvds_TCC1 0
  (new_mva_vars_gvds_TCC1-1 nil 3398096023 3401700096
   ("" (skosimp*)
    (("" (typepred "vdsA(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (v: (vdsA(mva(mp!1)))):
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)})) : f!1(choose({
                     (v: (vdsA(mva(mp!1)))) |
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst? -1 :where -2)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil nil))
                    nil)
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst 1 "v!1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst 1 "v!1") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "gd!1")
                (("2" (rewrite "nonempty_exists")
                  (("2" (skosimp*)
                    (("2" (inst 1 "v!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil nil nil
    nil nil (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   74 72 t nil))
 (new_vars_derived_from_mp 0
  (new_vars_derived_from_mp-1 nil 3397386643 3401704716
   ("" (skosimp*)
    (("" (expand "var_names")
      (("" (expand "new_gvds")
        (("" (split 1)
          (("1" (inst 1 "new_cp_gvd(mp!1)") (("1" (grind) nil nil))
            nil)
           ("2" (skosimp*)
            (("2"
              (inst 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil)
           ("3" (skosimp*)
            (("3"
              (inst 1
               "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
              (("3" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (add const-decl "(nonempty?)" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    (set type-eq-decl nil sets nil) nil nil nil
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (union const-decl "set" sets nil) nil
    (member const-decl "bool" sets nil) nil nil)
   610 601 t nil))
 (wf_new_vars 0
  (wf_new_vars-1 nil 3397386628 3401704732
   ("" (skosimp*)
    ((""
      (auto-rewrite ("empty?" "disjoint?" "intersection" "member"
                     "union"))
      (("" (split 1)
        (("1" (skosimp*)
          (("1" (typepred "name_of(mp!1)(q!1)") (("1" (grind) nil nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (typepred "cp(mp!1)") (("2" (grind) nil nil)) nil))
          nil)
         ("3" (skosimp*)
          (("3" (typepred "name_of(mp!1)(q!1)") (("3" (grind) nil nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (skosimp*)
            (("4" (expand "new_gvds")
              (("4" (rewrite "add_as_union")
                (("4" (rewrite "var_names_union")
                  (("4" (rewrite "var_names_union")
                    (("4" (assert)
                      (("4" (expand "var_names")
                        (("4" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (case-replace "f!1 = v!1" :hide? t)
                                  (("1"
                                    (typepred "v!1")
                                    (("1"
                                      (typepred "mp!1")
                                      (("1"
                                        (expand "wf_MP")
                                        (("1"
                                          (expand "wf_MVA")
                                          (("1"
                                            (expand "wf_vdsA")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst? -4)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "var_names")
                                                      (("1"
                                                        (inst? 2)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-extensionality :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (skosimp*)
            (("5" (expand "new_gvds")
              (("5" (rewrite "add_as_union")
                (("5" (rewrite "var_names_union")
                  (("5" (rewrite "var_names_union")
                    (("5" (assert)
                      (("5" (expand "var_names")
                        (("5" (split -1)
                          (("1" (skosimp*)
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "name_of(mp!1)(q!1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "new_mva_vars_gvds")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (typepred "mp!1")
                                  (("2"
                                    (expand "compatible")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand
                                         "MVA_aut_vars_are_not_prog_vars")
                                        (("2"
                                          (case-replace
                                           "f!1 = v!1"
                                           :hide?
                                           t)
                                          (("1"
                                            (typepred "v!1")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply-extensionality
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (skosimp*)
                            (("3" (typepred "cp(mp!1)")
                              (("3"
                                (expand "new_cp_gvd")
                                (("3"
                                  (expand "singleton")
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "forbidden_names")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    nil nil (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil nil nil
    nil (is_finite const-decl "bool" finite_sets nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil nil nil nil nil (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil
    (injective? const-decl "bool" functions nil) nil nil
    (set type-eq-decl nil sets nil) nil nil nil nil nil nil nil nil nil
    nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   1582 1575 t nil))
 (cp_new_ghostvar 0
  (cp_new_ghostvar-1 nil 3398086579 3401704738
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert) (("" (flatten) (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil nil nil nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil) nil nil
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil) nil
    (member const-decl "bool" sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil nil
    (is_finite const-decl "bool" finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil))
   629 625 t shostak))
 (halted_new_ghostvar 0
  (halted_new_ghostvar-1 nil 3398086655 3401704739
   ("" (skosimp*)
    (("" (expand "new_gvds")
      (("" (rewrite "add_as_union")
        (("" (rewrite "var_names_union")
          (("" (rewrite "var_names_union")
            (("" (auto-rewrite "union" "singleton" "member")
              (("" (assert)
                (("" (flatten)
                  (("" (expand "var_names")
                    (("" (assert)
                      ((""
                        (inst 1
                         "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                        (("1" (assert)
                          (("1" (expand "halted")
                            (("1" (expand "new_cps_gvds")
                              (("1"
                                (inst 1 "halted")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "mva(mp!1)")
                                    (("1"
                                      (expand "complete")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "defined?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil) nil nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil) nil nil
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil) nil nil nil nil nil
    nil (member const-decl "bool" sets nil) nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil nil
    (is_finite const-decl "bool" finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil))
   59 57 t shostak))
 (new_halted_gvd_TCC1 0
  (new_halted_gvd_TCC1-1 nil 3402473944 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (halted_gvd_new_ghostvar 0
  (halted_gvd_new_ghostvar-1 nil 3402474330 3402474561
   ("" (skosimp)
    (("" (expand* "new_gvds" "new_halted_gvd")
      (("" (expand* "add" "union" "member" "new_cps_gvds")
        (("" (flatten)
          (("" (inst 2 "halted")
            (("1" (expand "halted") (("1" (propax) nil nil)) nil)
             ("2" (typepred "mva(mp!1)")
              (("2" (expand "complete") (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((new_halted_gvd const-decl "FieldDecl" NewVariableDeclarations nil)
    (new_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (halted const-decl "Name" NewVariableDeclarations nil)
    (Name formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (CP formal-nonempty-type-decl nil NewVariableDeclarations nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (mp!1 skolem-const-decl "(wf_MP)" NewVariableDeclarations nil)
    (halted const-decl "CP" MVA nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (new_cps_gvds const-decl "finite_set[FieldDecl]"
     NewVariableDeclarations nil)
    (union const-decl "set" sets nil))
   230783 310 t shostak))
 (cp_not_cps_ghostvar 0
  (cp_not_cps_ghostvar-1 nil 3398156394 3401704740
   ("" (skosimp*)
    (("" (expand "new_cps_gvds")
      (("" (skosimp*)
        (("" (typepred "name_of(mp!1)(q!1)") (("" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil nil nil nil
    nil nil nil nil nil nil nil nil nil nil nil
    (set type-eq-decl nil sets nil) nil nil
    (injective? const-decl "bool" functions nil) nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil nil nil nil nil (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil)
   120 120 t shostak))
 (cp_not_mva_ghostvar 0
  (cp_not_mva_ghostvar-1 nil 3398156446 3401704746
   ("" (skosimp*)
    (("" (expand "new_mva_vars_gvds")
      (("" (skosimp*)
        (("" (typepred "cp(mp!1)")
          (("" (typepred "v!1") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   (nil nil nil (finite_set type-eq-decl nil finite_sets nil) nil nil
    nil nil nil nil (boolean nonempty-type-decl nil booleans nil) nil
    nil nil nil nil nil nil nil nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) nil nil nil nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    nil nil nil nil (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) nil nil)
   614 611 t shostak))
 (var_names_MVA_subset_var_names_new_gdvs 0
  (var_names_MVA_subset_var_names_new_gdvs-1 nil 3401682644 3401704747
   (";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
    (skosimp)
    ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
      (expand* "var_names" "subset?" "union" "member")
      ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
        (skosimp)
        ((";;; Proof for formula AnnotateProgramProperties.var_names_MVA_subset_var_names_new_gdvs"
          (split)
          (("1" (hide 1)
            (("1" (expand* "var_names" "new_gvds")
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert)
                    (("1"
                      (expand* "add" "union" "member"
                       "new_mva_vars_gvds")
                      (("1" (flatten) (("1" (inst?) nil)))))))))))))))
           ("2" (hide 2)
            (("2" (expand* "Union" "var_names")
              (("2" (skosimp)
                (("2" (typepred "mp!1")
                  (("2" (expand "compatible")
                    (("2" (flatten)
                      (("2" (skosimp)
                        (("2" (inst 1 "var_names(c!1)")
                          (("1" (expand "var_names")
                            (("1"
                              (expand* "union" "member"
                               "MVA_prog_vars_are_fields")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "var_names" 2)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            nil)))))))))))))))))
                           ("2" (inst?) nil))))))))))))))))))))))))
    "")
   unfinished
   ((member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil) nil nil nil nil
    (boolean nonempty-type-decl nil booleans nil) nil nil nil nil
    (add const-decl "(nonempty?)" sets nil) nil nil nil nil nil nil nil
    nil nil nil nil nil nil
    (finite_set type-eq-decl nil finite_sets nil) nil nil
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (union const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil nil
    (lift type-decl nil lift_adt nil) nil nil nil nil nil nil nil)
   109 108 nil nil)))
(AnnotateEvent
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619498 3401700039
   ("" (use "infinite_namespace") nil nil) unchecked nil 1 1 t nil))
 (IMP_NewVariableDeclarations_TCC1 0
  (IMP_NewVariableDeclarations_TCC1-1 nil 3401619498 3401700039
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 1 1 t nil))
 (IMP_NewVariableDeclarations_TCC2 0
  (IMP_NewVariableDeclarations_TCC2-1 nil 3401619498 3401700039
   ("" (use "name_of_exists") nil nil) unchecked nil 1 2 t nil))
 (ann_action_TCC1 0
  (ann_action_TCC1-1 nil 3401619498 3401700039
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   30 30 nil nil))
 (var_names_ann_action 0
  (var_names_ann_action-1 nil 3401682404 3401704749
   (";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
    (skolem 1 (_ "n!1"))
    ((";;; Proof for formula AnnotateProgramProperties.var_names_ann_action"
      (induct "a")
      (("1" (grind) nil)
       ("2" (skosimp*)
        (("2" (rewrite "ann_action" 1)
          (("2" (rewrite "var_names" 1)
            (("2" (rewrite "var_names" 1)
              (("2" (auto-rewrite "union" "add" "member")
                (("2" (assert)
                  (("2" (replace -1 :hide? t)
                    (("2" (iff)
                      (("2" (prop)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (inst?) (("2" (assert) nil)))
                         ("3" (skosimp*)
                          (("3" (inst?) (("3" (assert) nil)))))
                         ("4" (skosimp*)
                          (("4" (split -1)
                            (("1" (assert) nil)
                             ("2" (inst?)
                              (("2"
                                (assert)
                                nil))))))))))))))))))))))))))))
    "")
   unfinished
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (member def-decl "bool" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil))
   181 181 nil nil))
 (ann_guard_actions_set_TCC1 0
  (ann_guard_actions_set_TCC1-2 nil 3401619720 3401700045
   (";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
    (skosimp*)
    ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
      (typepred "ts!1")
      ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
        (expand "is_finite")
        ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
          (skosimp*)
          ((";;; Proof ann_guard_actions_set_TCC1-1 for formula AnnotateProgram.ann_guard_actions_set_TCC1"
            (inst 1 "N!1" "LAMBDA(x :({x: [BoolExpr[Name], Stmt[Name]] |
                       EXISTS (t: Transition[CP, Name]):
                         ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))})) : f!1(choose({t : Transition[CP, Name] |  ts!1(t) AND
                          x =
                           (guard_to_expression[CP, Name]
                                (mva(mp!1))(guard(t)),
                            update_vars(mp!1)(t))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (apply-extensionality :hide? t) nil)))
                   ("2" (rewrite "nonempty_exists")
                    (("2" (typepred "x2!1")
                      (("2" (skosimp*)
                        (("2" (inst?) (("2" (assert) nil)))))))))
                   ("3" (rewrite "nonempty_exists")
                    (("3" (typepred "x1!1")
                      (("3" (skosimp*)
                        (("3" (inst?) (("3" (assert) nil)))))))))))))))
             ("2" (skosimp*)
              (("2" (rewrite "nonempty_exists")
                (("2" (typepred "x!1")
                  (("2" (skosimp*)
                    (("2" (inst?)
                      (("2" (assert) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   322 318 nil nil)
  (ann_guard_actions_set_TCC1-1 nil 3401619498 nil
   ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
 (ann_event_set_TCC1 0
  (ann_event_set_TCC1-1 nil 3401619498 3401700045
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(t :
                        ({t: Transition[CP, Name] |
                             ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (expand "injective?")
              (("" (skosimp*)
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   64 62 t nil))
 (ann_event_set_TCC2 0
  (ann_event_set_TCC2-2 nil 3401619789 3401700078
   (";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
    (skosimp*)
    ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
      (typepred "cps(mva(mp!1))")
      ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
        (expand "is_finite")
        ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
          (skosimp*)
          ((";;; Proof ann_event_set_TCC2-1 for formula AnnotateProgram.ann_event_set_TCC2"
            (inst 1 "N!1"
             "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                             EXISTS (q: CP):
                               cps(mva(mp!1))(q) AND
                                nonempty?[Transition[CP, Name]]
                                    ({t: Transition[CP, Name] |
                                        ts!1(t) AND scp(t) = q})
                                 AND
                                 c =
                                  ann_trans_cp(mp!1)
                                              (q,
                                               {t: Transition[CP, Name]
                                                |
                                                ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                                nonempty?[Transition[CP, Name]]
                                    ({t: Transition[CP, Name] |
                                        ts!1(t) AND scp(t) = q})
                                 AND
                                 c =
                                  ann_trans_cp(mp!1)
                                              (q,
                                               {t: Transition[CP, Name]
                                                |
                                                ts!1(t) AND scp(t) = q})}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (hide -2)
                      (("1"
                        (name "q1" "choose({q: CP |
                                                  cps(mva(mp!1))(q) AND
                                                   nonempty?[Transition[CP, Name]]
                                                       ({t: Transition[CP, Name] |
                                                           ts!1(t) AND scp(t) = q})
                                                    AND
                                                    x1!1 =
                                                     ann_trans_cp(mp!1)
                                                                 (q,
                                                                  {t: Transition[CP, Name] |
                                                                     ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (name "q2" "choose({q: CP |
                                                        cps(mva(mp!1))(q) AND
                                                         nonempty?[Transition[CP, Name]]
                                                             ({t: Transition[CP, Name] |
                                                                 ts!1(t) AND scp(t) = q})
                                                          AND
                                                          x2!1 =
                                                           ann_trans_cp(mp!1)
                                                                       (q,
                                                                        {t: Transition[CP, Name] |
                                                                           ts!1(t) AND scp(t) = q})})")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (case
                                 "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (case
                                   "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1"
                                    (replace -5)
                                    (("1" (assert) nil)))
                                   ("2"
                                    (replace -2 :dir rl)
                                    (("2" (assert) nil)))
                                   ("3"
                                    (typepred "ts!1")
                                    (("3"
                                      (expand "is_finite")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst 1 "N!2" "f!2")
                                          (("3" (grind) nil)))))))))))
                                 ("2"
                                  (replace -1 :dir rl)
                                  (("2" (assert) nil)))
                                 ("3"
                                  (typepred "ts!1")
                                  (("3"
                                    (expand "is_finite")
                                    (("3"
                                      (skosimp*)
                                      (("3"
                                        (inst 1 "N!2" "f!2")
                                        (("3"
                                          (grind)
                                          nil)))))))))))))))
                           ("2" (typepred "x2!1")
                            (("2" (skosimp*)
                              (("2"
                                (rewrite "nonempty_exists" 1)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil)))))))))))
                         ("2" (typepred "x1!1")
                          (("2" (skosimp*)
                            (("2" (rewrite "nonempty_exists" 1)
                              (("1" (inst?) (("1" (assert) nil)))
                               ("2"
                                (skosimp*)
                                (("2"
                                  (typepred "ts!1")
                                  (("2"
                                    (expand "is_finite")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (inst 1 "N!2" "f!2")
                                        (("2"
                                          (grind)
                                          nil)))))))))))))))))
                         ("3" (skosimp*)
                          (("3" (typepred "ts!1")
                            (("3" (expand "is_finite")
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst 1 "N!2" "f!2")
                                  (("3" (grind) nil)))))))))))))))))
                   ("2" (typepred "x2!1")
                    (("2" (skosimp*)
                      (("2" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil)))))))))))))))))
                   ("3" (typepred "x1!1")
                    (("3" (skosimp*)
                      (("3" (rewrite "nonempty_exists" 1)
                        (("1" (inst?) (("1" (assert) nil)))
                         ("2" (skosimp*)
                          (("2" (typepred "ts!1")
                            (("2" (expand "is_finite")
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "N!2" "f!2")
                                  (("2" (grind) nil)))))))))))))))))
                   ("4" (skosimp*)
                    (("4" (typepred "ts!1")
                      (("4" (expand "is_finite")
                        (("4" (skosimp*)
                          (("4" (inst 1 "N!2" "f!2")
                            (("4" (grind) nil)))))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists" 1)
                    (("1" (inst?) (("1" (assert) nil)))
                     ("2" (skosimp*)
                      (("2" (typepred "ts!1")
                        (("2" (expand "is_finite")
                          (("2" (skosimp*)
                            (("2" (inst 1 "N!2" "f!2")
                              (("2" (grind) nil)))))))))))))))))))
             ("3" (skosimp*)
              (("3" (typepred "ts!1")
                (("3" (expand "is_finite")
                  (("3" (skosimp*)
                    (("3" (inst 1 "N!2" "f!2")
                      (("3" (grind) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (restrict const-decl "R" restrict nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (nonempty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   3327 3285 nil nil)
  (ann_event_set_TCC2-1 nil 3401619498 nil ("" (subtype-tcc) nil nil)
   nil nil nil nil nil nil))
 (var_names_ann_event 0
  (var_names_ann_event-1 nil 3401682730 3401704757
   ("" (skosimp*)
    (("" (expand "subset?" 1)
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "ann_event")
            (("" (rewrite "var_names_CaseJML_set2list")
              (("" (skosimp*)
                (("" (expand "ann_event_set")
                  (("" (skosimp*)
                    (("" (expand "ann_trans_cp")
                      (("" (replace -4 :hide? t)
                        (("" (auto-rewrite "union" "member")
                          (("" (assert)
                            (("" (rewrite "var_names" -4)
                              ((""
                                (rewrite "var_names" -4)
                                ((""
                                  (rewrite "var_names" -4)
                                  ((""
                                    (rewrite "var_names" -4)
                                    ((""
                                      (rewrite "var_names" -4)
                                      ((""
                                        (expand "singleton")
                                        ((""
                                          (assert)
                                          ((""
                                            (split -4)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (use "cp_new_ghostvar")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "new_gvds")
                                                  (("2"
                                                    (rewrite
                                                     "add_as_union")
                                                    (("2"
                                                      (rewrite
                                                       "var_names_union")
                                                      (("2"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "new_cps_gvds")
                                                              (("2"
                                                                (expand
                                                                 "var_names")
                                                                (("2"
                                                                  (inst
                                                                   2
                                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                  (("1"
                                                                    (inst
                                                                     2
                                                                     "q!1")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "defined?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "ann_guard_actions")
                                              (("3"
                                                (rewrite
                                                 "var_names_CaseJML_set2list")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (expand
                                                     "ann_guard_actions_set")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "update_vars")
                                                          (("1"
                                                            (split -4)
                                                            (("1"
                                                              (use
                                                               "var_names_guard_to_expresion")
                                                              (("1"
                                                                (typepred
                                                                 "mp!1")
                                                                (("1"
                                                                  (expand
                                                                   "wf_MP")
                                                                  (("1"
                                                                    (expand*
                                                                     "subset?"
                                                                     "member")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (use
                                                                               "var_names_MVA_subset_var_names_new_gdvs")
                                                                              (("1"
                                                                                (expand*
                                                                                 "subset?"
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "var_names"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "var_names"
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "var_names"
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "var_names"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "add")
                                                                        (("2"
                                                                          (expand
                                                                           "singleton")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "cp_new_ghostvar")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "new_gvds")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "add_as_union")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "var_names_union")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "var_names_union")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "new_cps_gvds")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "tcp(t!1)")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "mp!1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "wf_MP")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_MVA")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "wf_Trans")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -6
                                                                                                                 "t!1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -10
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "var_names_ann_action")
                                                                                (("3"
                                                                                  (skosimp*)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "mp!1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "wf_MP")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "wf_MVA")
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "wf_Trans")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "wf_Action")
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "subset?")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "member"
                                                                                                     -12)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -12
                                                                                                       "t!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (flatten)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -9
                                                                                                               "oa!1")
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (flatten)
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -10
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (split
                                                                                                                         -12)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "var_names"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "new_gvds")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "add_as_union")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "var_names_union")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "var_names_union")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "new_mva_vars_gvds")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "var_names"
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (skosimp*)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               4
                                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "f!1")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "var_names"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "new_gvds")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "add_as_union")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "var_names_union")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "var_names_union")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "new_mva_vars_gvds")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "var_names"
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       4
                                                                                                                                                       "f!1")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "compatible")
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (skosimp*)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "MVA_prog_vars_are_fields")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "var_names"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (skosimp*)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -7
                                                                                                                                             "l!1")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "var_names"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "Union")
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       2
                                                                                                                                                       "var_names(c!1)")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "Union")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "var_names"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   3
                                                                                                                                                                   "fd!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "ann_event_set_TCC1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (list type-decl nil list_adt nil)
    (nonempty_union1 application-judgement "(nonempty?)" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton? const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   783 774 t nil))
 (ann_event_var_names 0
  (ann_event_var_names-1 nil 3401682976 3401704762
   ("" (skosimp*)
    (("" (use "var_names_ann_event")
      (("" (split -1)
        (("1" (expand "subset?")
          (("1" (expand "member")
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "union")
                  (("1" (expand "member")
                    (("1" (typepred "program(mp!1)")
                      (("1" (expand "wf_Program")
                        (("1" (flatten)
                          (("1" (expand "var_names" -5)
                            (("1" (expand "Union")
                              (("1"
                                (skosimp*)
                                (("1"
                                  (typepred "a!1")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "var_names" -7)
                                        (("1"
                                          (auto-rewrite
                                           "union"
                                           "member")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -7)
                                              (("1"
                                                (expand "Union")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (typepred "a!2")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (expand
                                                           "var_names"
                                                           -3)
                                                          (("1"
                                                            (expand
                                                             "Union")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (typepred
                                                                 "a!3")
                                                                (("1"
                                                                  (expand
                                                                   "wf_Classes")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "wf_Class")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst?
                                                                             -11)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "wf_Method")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "wf_Body")
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -12)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst?
                                                                                           -13)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("3"
                                                                                          (inst?
                                                                                           -11)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("4"
                                                                                          (inst?
                                                                                           -14)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("5"
                                                                                          (inst?
                                                                                           -15)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("6"
                                                                                          (inst?
                                                                                           -16)
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("7"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("7"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           -4)
                                                                                          (("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (expand
                                                                                               "ext_declared_var_names"
                                                                                               1)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                (("7"
                                                                                                  (flatten)
                                                                                                  (("7"
                                                                                                    (expand
                                                                                                     "var_names"
                                                                                                     2)
                                                                                                    (("7"
                                                                                                      (inst?
                                                                                                       2)
                                                                                                      (("7"
                                                                                                        (assert)
                                                                                                        (("7"
                                                                                                          (expand
                                                                                                           "getLocalDecls")
                                                                                                          (("7"
                                                                                                            (inst?
                                                                                                             2)
                                                                                                            (("7"
                                                                                                              (assert)
                                                                                                              (("7"
                                                                                                                (expand
                                                                                                                 "getLocalDecls")
                                                                                                                (("7"
                                                                                                                  (inst?
                                                                                                                   2)
                                                                                                                  (("7"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("8"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("8"
                                                                                          (inst?
                                                                                           -17)
                                                                                          (("8"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("9"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("9"
                                                                                          (expand
                                                                                           "singleton")
                                                                                          (("9"
                                                                                            (expand
                                                                                             "ext_declared_var_names"
                                                                                             1)
                                                                                            (("9"
                                                                                              (assert)
                                                                                              (("9"
                                                                                                (flatten)
                                                                                                (("9"
                                                                                                  (expand
                                                                                                   "var_names"
                                                                                                   2)
                                                                                                  (("9"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "arg(m!1)")
                                                                                                    (("9"
                                                                                                      (assert)
                                                                                                      (("9"
                                                                                                        (expand
                                                                                                         "getLocalDecls")
                                                                                                        (("9"
                                                                                                          (inst?
                                                                                                           2)
                                                                                                          (("9"
                                                                                                            (assert)
                                                                                                            (("9"
                                                                                                              (expand
                                                                                                               "getLocalDecls")
                                                                                                              (("9"
                                                                                                                (inst?
                                                                                                                 2)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "ext_declared_var_names"
                                                 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "var_names"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "var_names"
                                                         1)
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "getFieldDecls")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "ext_declared_var_names")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (expand
                                                       "var_names"
                                                       -1)
                                                      (("3"
                                                        (expand
                                                         "var_names"
                                                         3)
                                                        (("3"
                                                          (skosimp*)
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "getGhostDecls")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (expand "wf_Classes")
                                                (("4"
                                                  (inst?)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (expand
                                                       "wf_Class")
                                                      (("4"
                                                        (flatten)
                                                        (("4"
                                                          (expand
                                                           "wf_Body")
                                                          (("4"
                                                            (inst? -10)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (union const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   546 546 t shostak)))
(AnnotateMethod
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619631 3401704762
   ("" (use "infinite_namespace") nil nil) unchecked nil 3 3 t nil))
 (IMP_AnnotateEvent_TCC1 0
  (IMP_AnnotateEvent_TCC1-1 nil 3401619631 3401704762
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 3 3 t nil))
 (IMP_AnnotateEvent_TCC2 0
  (IMP_AnnotateEvent_TCC2-1 nil 3401619631 3401704762
   ("" (use "name_of_exists") nil nil) unchecked nil 3 3 t nil))
 (filter_event_TCC1 0
  (filter_event_TCC1-2 nil 3401619964 3401704765
   (";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
    (skosimp*)
    ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
      (typepred "ts(a!1)")
      ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
        (expand "is_finite")
        ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
          (skosimp*)
          ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
            (inst 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                         ts(a!1)(t) AND
                          etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            ((";;; Proof filter_event_TCC1-1 for formula AnnotateProgram.filter_event_TCC1"
              (grind) nil))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   238 238 nil nil)
  (filter_event_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (filter_event_subset 0
  (filter_event_subset-1 nil 3401684085 3401704765
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (skosimp*)
          (("" (expand "filter_event") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   5 5 t shostak))
 (ann_method_TCC1 0
  (ann_method_TCC1-2 nil 3401619990 3401704765
   (";;; Proof ann_method_TCC1-1 for formula AnnotateProgram.ann_method_TCC1"
    (skolem-typepred)
    ((";;; Proof ann_method_TCC1-1 for formula AnnotateProgram.ann_method_TCC1"
      (expand* "wf_MP" "complete")
      ((";;; Proof ann_method_TCC1-1 for formula AnnotateProgram.ann_method_TCC1"
        (flatten) nil))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   21 21 nil nil)
  (ann_method_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (ann_methods_TCC1 0
  (ann_methods_TCC1-2 nil 3401620001 3401704765
   (";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
    (skosimp*)
    ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
      (typepred "ms!1")
      ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
        (expand "is_finite")
        ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
          (skosimp*)
          ((";;; Proof ann_methods_TCC1-1 for formula AnnotateProgram.ann_methods_TCC1"
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                         EXISTS (n: Method[Name]):
                           ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "n!1") (("2" (assert) nil)))))
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "n!2")
                            (("3" (assert) nil)))))))))))))))))
             ("2" (skosimp*)
              (("2" (typepred "m!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "n!1")
                      (("2" (assert) nil))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   38 37 nil nil)
  (ann_methods_TCC1-1 nil 3401619631 nil ("" (subtype-tcc) nil nil)
   unfinished nil nil nil nil nil))
 (ann_method_body 0
  (ann_method_body-1 nil 3401620545 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 21 21 t shostak))
 (ann_method_pre 0
  (ann_method_pre-1 nil 3401620551 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 4 4 t shostak))
 (ann_method_post 0
  (ann_method_post-1 nil 3401620559 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 3 4 t shostak))
 (ann_method_arg 0
  (ann_method_arg-1 nil 3401620571 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 39 39 t shostak))
 (ann_method_res 0
  (ann_method_res-1 nil 3401620574 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 4 4 t shostak))
 (ann_method_res_type 0
  (ann_method_res_type-1 nil 3401620593 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 3 3 t shostak))
 (ann_method_lvars 0
  (ann_method_lvars-1 nil 3401620597 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 21 21 t shostak))
 (ann_method_pre_set 0
  (ann_method_pre_set-1 nil 3401620600 3401704766
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 4 4 t shostak))
 (ann_method_post_set 0
  (ann_method_post_set-1 nil 3401620605 3401704767
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 4 4 t shostak))
 (ann_method_exc_set 0
  (ann_method_exc_set-1 nil 3401620608 3401704767
   ("" (skosimp*)
    (("" (expand "ann_method") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 22 21 t shostak))
 (ann_method_wf_Body 0
  (ann_method_wf_Body-1 nil 3401699901 3401704770
   (";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
    (skosimp*)
    ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
      (assert)
      ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
        (auto-rewrite "union" "member" "singleton")
        ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
          (auto-rewrite-theory "AnnotateMethod")
          ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
            (use "new_vars_derived_from_mp")
            ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
              (use "halted_new_ghostvar")
              ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                (expand "wf_Method")
                ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                  (expand "wf_Body")
                  ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                    (flatten)
                    ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                      (assert)
                      ((";;; Proof body_ann_method_wf_Body-1 for formula AnnotateMethod.body_ann_method_wf_Body"
                        (split 1)
                        (("1" (propax) nil) ("2" (propax) nil)
                         ("3" (propax) nil) ("4" (propax) nil)
                         ("5" (skosimp*)
                          (("5" (rewrite "var_names" -1)
                            (("5" (assert)
                              (("5"
                                (split -1)
                                (("1" (inst? -9) (("1" (assert) nil)))
                                 ("2"
                                  (rewrite "var_names" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (use "ann_event_var_names")
                                        (("1" (assert) nil)))
                                       ("2"
                                        (apply
                                         (repeat
                                          (then
                                           (rewrite "var_names" -1)
                                           (assert))))
                                        nil)))))))))))))))
                         ("6" (skosimp*)
                          (("6" (rewrite "var_names" -1)
                            (("6" (assert)
                              (("6"
                                (split -1)
                                (("1" (inst? -10) (("1" (assert) nil)))
                                 ("2"
                                  (use "ann_event_var_names")
                                  (("2" (assert) nil)))))))))))
                         ("7" (skosimp*)
                          (("7" (rewrite "var_names" -1)
                            (("7" (assert)
                              (("7"
                                (split -1)
                                (("1" (inst? -11) (("1" (assert) nil)))
                                 ("2"
                                  (use "ann_event_var_names")
                                  (("2"
                                    (assert)
                                    nil))))))))))))))))))))))))))))))))
    ";;; developed with SHOSTAK decision procedures")
   unfinished
   ((union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   320 320 nil nil)))
(AnnotateClass
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3401619633 3401704770
   ("" (use "infinite_namespace") nil nil) unchecked nil 3 2 t nil))
 (IMP_AnnotateMethod_TCC1 0
  (IMP_AnnotateMethod_TCC1-1 nil 3401619633 3401704770
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 3 2 t nil))
 (IMP_AnnotateMethod_TCC2 0
  (IMP_AnnotateMethod_TCC2-1 nil 3401619633 3401704770
   ("" (use "name_of_exists") nil nil) unchecked nil 3 3 t nil))
 (FieldDecls_ann_class 0
  (FieldDecls_ann_class-1 nil 3401684150 3401704770
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
    nil)
   unfinished nil 23 22 t shostak))
 (LocalDecls_ann_class 0
  (LocalDecls_ann_class-1 nil 3401684165 3401704771
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (expand "getLocalDecls")
                (("1" (apply-extensionality :hide? t)
                  (("1" (expand "ann_methods")
                    (("1" (assert)
                      (("1" (auto-rewrite "ann_method_arg")
                        (("1" (auto-rewrite "ann_method_lvars")
                          (("1" (iff)
                            (("1" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst 1 "ann_method(mp!1)(m!1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 1)
                                      (("1" (inst?) nil nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil))
   37 37 t shostak))
 (GhostDecls_ann_class_annotated 0
  (GhostDecls_ann_class_annotated-1 nil 3401684331 3401704771
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (lift-if) (("" (assert) nil nil)) nil)) nil))
    nil)
   unfinished nil 4 4 t shostak))
 (GhostDecls_ann_class_not_annotated 0
  (GhostDecls_ann_class_not_annotated-1 nil 3401684344 3401704771
   ("" (skosimp*)
    (("" (expand "ann_class") (("" (assert) nil nil)) nil)) nil)
   unfinished
   ((finite_union application-judgement "finite_set" finite_sets nil))
   40 40 t shostak))
 (ann_class_almost_wf_Class 0
  (ann_class_almost_wf_Class-1 nil 3401684390 3401704776
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "wf_Class")
        (("" (flatten)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (expand "ann_class")
                (("1" (split -1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "ann_methods")
                        (("1" (skosimp*)
                          (("1" (inst -8 "n!1" "n!2")
                            (("1" (assert)
                              (("1"
                                (expand "ann_method")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split -2)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (inst? -4) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_Body")
              (("2" (skosimp*)
                (("2" (inst?)
                  (("2" (expand "ann_class" -1)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (rewrite "var_names" -3)
                            (("1" (auto-rewrite "union" "member")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "var_names" -3)
                                  (("1"
                                    (rewrite "var_names" -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply
                                         (repeat
                                          (rewrite "var_names" -3)))
                                        (("1"
                                          (expand "singleton")
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (use "cp_new_ghostvar")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (use
                                               "halted_new_ghostvar")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil) (lift type-decl nil lift_adt nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil))
   536 535 t shostak))
 (ann_class_inv_TCC1 0
  (ann_class_inv_TCC1-1 nil 3401682275 3401704778
   ("" (subtype-tcc) nil nil) unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   159 158 nil nil))
 (ann_class_inv 0
  (ann_class_inv-1 nil 3401682311 3401704779
   ("" (skosimp*)
    (("" (expand "ann_class")
      (("" (assert) (("" (lift-if) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   unfinished nil 76 76 t shostak))
 (ann_program_preserves_class_name 0
  (ann_program_preserves_class_name-1 nil 3401682902 3401704779
   (";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
    (skosimp*)
    ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
      (expand "ann_class")
      ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
        (lift-if)
        ((";;; Proof for formula AnnotateProgramProperties.ann_program_preserves_class_name"
          (propax) nil))))))
    "")
   unfinished nil 3 4 nil nil)))
(AnnotateProgram
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601203 3401704779
   ("" (use "infinite_namespace") nil nil) unchecked nil 21 21 t nil))
 (IMP_AnnotateClass_TCC1 0
  (IMP_AnnotateClass_TCC1-1 nil 3401620497 3401704779
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 2 3 t nil))
 (IMP_AnnotateClass_TCC2 0
  (IMP_AnnotateClass_TCC2-1 nil 3401620497 3401704779
   ("" (use "name_of_exists") nil nil) unchecked nil 2 3 t nil))
 (ann_program_TCC1 0
  (ann_program_TCC1-1 nil 3383987003 3401704780
   ("" (skosimp)
    (("" (typepred "classes(program(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                         EXISTS (c1: Class[Name]):
                           classes(program(mp!1))(c1) AND
                            c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "c1!1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "c1!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "c1!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   70 70 t nil))
 (ann_program_TCC2 0
  (ann_program_TCC2-3 nil 3401699946 3401704788
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "    is_finite[Class[Name]]
                                 ({c: Class[Name] |
                                     EXISTS (c1: Class[Name]):
                                       mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes
                                                                                  := {c: Class[Name] |
                                                                                        EXISTS (c1:
                                                                                                  Class
                                                                                                      [Name]):
                                                                                          classes
                                                                                            (program(mp!1))
                                                                                              (c1)
                                                                                           AND
                                                                                           c =
                                                                                            ann_class[CP, Name]
                                                                                                (mp!1)
                                                                                                (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes
                                                                                            := {c: Class[Name] |
                                                                                                  EXISTS (c1:
                                                                                                            Class
                                                                                                                [Name]):
                                                                                                    classes
                                                                                                      (program(mp!1))
                                                                                                        (c1)
                                                                                                     AND
                                                                                                     c =
                                                                                                      ann_class[CP, Name]
                                                                                                          (mp!1)
                                                                                                          (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes
                                                                                                      := {c: Class[Name] |
                                                                                                            EXISTS (c1:
                                                                                                                      Class
                                                                                                                          [Name]):
                                                                                                              classes
                                                                                                                (program(mp!1))
                                                                                                                  (c1)
                                                                                                               AND
                                                                                                               c =
                                                                                                                ann_class[CP, Name]
                                                                                                                    (mp!1)
                                                                                                                    (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (auto-rewrite
                                 "disjoint?"
                                 "empty?"
                                 "intersection"
                                 "member"
                                 "subset?"
                                 "union")
                                (("1"
                                  (expand "declared_var_names")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (apply (repeat (inst?)))
                                          (("1"
                                            (rewrite "var_names_union")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (apply (repeat (inst?)))
                                          (("2"
                                            (rewrite "var_names_union")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                                                       := {c: Class[Name] |
                                                                                                             EXISTS (c1: Class[Name]):
                                                                                                               classes(program(mp!1))
                                                                                                                   (c1)
                                                                                                                AND
                                                                                                                c =
                                                                                                                 ann_class[CP, Name]
                                                                                                                     (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "ann_method_wf_Body")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -10
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (inst?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp*)
                                                                                (("6"
                                                                                  (inst?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skosimp*)
                                                (("3"
                                                  (expand
                                                   "ann_class"
                                                   -1)
                                                  (("3"
                                                    (expand
                                                     "ann_class"
                                                     1)
                                                    (("3"
                                                      (split -1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst
                                                                 -14
                                                                 "n!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst? -12)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (flatten)
                                                (("4"
                                                  (expand "wf_Body")
                                                  (("4"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("4"
                                                      (skosimp*)
                                                      (("4"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (inst? -3)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_intersection2 application-judgement "finite_set"
     finite_sets nil)
    (member const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   782 781 t nil)
  (ann_program_TCC2-2 nil 3401685127 3401689620
   ("" (skosimp*)
    (("" (typepred "program(mp!1)")
      (("" (expand "wf_Program")
        ((""
          (case "    is_finite[Class[Name]]
                       ({c: Class[Name] |
                           EXISTS (c1: Class[Name]):
                             mp!1`program`classes(c1) AND c = ann_class[CP, Name](mp!1)(c1)})")
          (("1"
            (case "var_names(getFieldDecls((# classes
                                                                    := {c: Class[Name] |
                                                                          EXISTS (c1:
                                                                                    Class
                                                                                        [Name]):
                                                                            classes
                                                                              (program(mp!1))
                                                                                (c1)
                                                                             AND
                                                                             c =
                                                                              ann_class[CP, Name]
                                                                                  (mp!1)
                                                                                  (c1)} #))) = var_names(getFieldDecls(program(mp!1)))")
            (("1"
              (case "var_names(getLocalDecls((# classes
                                                                          := {c: Class[Name] |
                                                                                EXISTS (c1:
                                                                                          Class
                                                                                              [Name]):
                                                                                  classes
                                                                                    (program(mp!1))
                                                                                      (c1)
                                                                                   AND
                                                                                   c =
                                                                                    ann_class[CP, Name]
                                                                                        (mp!1)
                                                                                        (c1)} #))) = var_names(getLocalDecls(program(mp!1)))")
              (("1"
                (case "var_names(getGhostDecls((# classes
                                                                                := {c: Class[Name] |
                                                                                      EXISTS (c1:
                                                                                                Class
                                                                                                    [Name]):
                                                                                        classes
                                                                                          (program(mp!1))
                                                                                            (c1)
                                                                                         AND
                                                                                         c =
                                                                                          ann_class[CP, Name]
                                                                                              (mp!1)
                                                                                              (c1)} #))) = var_names(union(getGhostDecls(program(mp!1)), new_gvds(mp!1)))")
                (("1" (use "wf_new_vars")
                  (("1" (prop)
                    (("1" (hide-all-but (-5 -6 -7 -8 -10 1))
                      (("1"
                        (expand "wf_program_variables_disjoint_def")
                        (("1" (apply (repeat (replace -2 :hide? t)))
                          (("1" (flatten)
                            (("1"
                              (auto-rewrite "disjoint?" "empty?"
                                            "intersection" "member"
                                            "subset?" "union")
                              (("1"
                                (expand "declared_var_names")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (rewrite "var_names_union")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (apply (repeat (inst?)))
                                        (("3"
                                          (rewrite "var_names_union")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (split -2)
                                              (("1" (propax) nil nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-4 -6 -7 -8 -11 1))
                      (("2"
                        (expand "wf_program_variables_not_reserved_words_def")
                        (("2" (expand "declared_var_names")
                          (("2" (replace -2 :hide? t)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (auto-rewrite
                                   "disjoint?"
                                   "empty?"
                                   "intersection"
                                   "member"
                                   "subset?"
                                   "union")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (apply (repeat (inst?)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "var_names_union")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but (-12 1))
                      (("3"
                        (expand "wf_program_has_unique_class_names_def")
                        (("3" (skosimp*)
                          (("3" (inst - "c1!2" "c1!3")
                            (("3" (assert)
                              (("3"
                                (expand "ann_class")
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide-all-but (-6 -7 -8 -13 1))
                      (("4" (expand "wf_Classes")
                        (("4" (skosimp*)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (use "ann_class_almost_wf_Class")
                                (("4"
                                  (assert)
                                  (("4"
                                    (flatten)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "wf_Class")
                                        (("4"
                                          (assert)
                                          (("4"
                                            (case
                                             "ext_declared_var_names((# classes
                                                                         := {c: Class[Name] |
                                                                               EXISTS (c1: Class[Name]):
                                                                                 classes(program(mp!1))
                                                                                     (c1)
                                                                                  AND
                                                                                  c =
                                                                                   ann_class[CP, Name]
                                                                                       (mp!1)(c1)} #)) = union(ext_declared_var_names(program(mp!1)), var_names(new_gvds(mp!1)))")
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "ann_class"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "ann_methods")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (inst?
                                                                 -13)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (use
                                                                     "body_ann_method_wf_Body")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (expand
                                                                           "wf_Method")
                                                                          (("1"
                                                                            (expand
                                                                             "wf_Body")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -10
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      -7
                                                                                      1))
                                                                                    (("1"
                                                                                      (auto-rewrite
                                                                                       "union"
                                                                                       "member")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (skosimp*)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skosimp*)
                                                                                            (("2"
                                                                                              (inst?
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (skosimp*)
                                                                                            (("3"
                                                                                              (inst?
                                                                                               -4)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("5"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("7"
                                                                                            (skosimp*)
                                                                                            (("7"
                                                                                              (inst?
                                                                                               -5)
                                                                                              (("7"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst? -11)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "wf_Method")
                                                                (("2"
                                                                  (expand
                                                                   "wf_Body")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-11
                                                                        2))
                                                                      (("2"
                                                                        (auto-rewrite
                                                                         "union"
                                                                         "member")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skosimp*)
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (skosimp*)
                                                                                (("3"
                                                                                  (inst?
                                                                                   -4)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (skosimp*)
                                                                                (("4"
                                                                                  (inst?
                                                                                   -5)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (skosimp*)
                                                                                (("5"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (skosimp*)
                                                                                (("6"
                                                                                  (inst?
                                                                                   -7)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (skosimp*)
                                                                                (("7"
                                                                                  (inst?
                                                                                   -8)
                                                                                  (("7"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (flatten)
                                                (("3"
                                                  (expand "wf_Body")
                                                  (("3"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (auto-rewrite
                                                         "union"
                                                         "member")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst? -3)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but
                                               (-5 -6 -7 1))
                                              (("2"
                                                (auto-rewrite
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_declared_var_names")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)))
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "var_names_union")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (prop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide-all-but (-14 -12 1))
                      (("5"
                        (expand "wf_program_methods_only_in_one_class")
                        (("5" (skosimp*)
                          (("5" (assert)
                            (("5" (inst -8 "c1!2" "c1!3" _)
                              (("5"
                                (assert)
                                (("5"
                                  (replace -2 :hide? t)
                                  (("5"
                                    (replace -3 :hide? t)
                                    (("5"
                                      (expand "ann_class")
                                      (("5"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -5)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand
                                                 "wf_program_has_unique_class_names_def")
                                                (("1"
                                                  (inst
                                                   -7
                                                   "c1!2"
                                                   "c1!3")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "ann_methods")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst -8 "n!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (apply-extensionality :hide? t)
                    (("2" (rewrite "var_names_union")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert)
                          (("2" (expand "var_names")
                            (("2" (iff)
                              (("2"
                                (expand "getGhostDecls")
                                (("2"
                                  (split 1)
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (expand "ann_class" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (inst? 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst 1 "c1!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               1
                                               "ann_class(mp!1)(c!1)")
                                              (("1"
                                                (expand
                                                 "ann_class"
                                                 1
                                                 3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "ann_class")
                                              (("2"
                                                (typepred "mp!1")
                                                (("2"
                                                  (expand "compatible")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "ann_class(mp!1)(c!1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "ann_class"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 1))
                (("2" (apply-extensionality :hide? t)
                  (("2" (auto-rewrite "LocalDecls_ann_class")
                    (("2" (expand "var_names")
                      (("2" (expand "getLocalDecls")
                        (("2" (assert)
                          (("2" (iff)
                            (("2" (split 1)
                              (("1"
                                (skosimp*)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "ann_class(mp!1)(c!1)")
                                      (("2"
                                        (assert)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1))
              (("2" (apply-extensionality :hide? t)
                (("2" (auto-rewrite "FieldDecls_ann_class")
                  (("2" (expand "var_names")
                    (("2" (expand "getFieldDecls")
                      (("2" (assert)
                        (("2" (iff)
                          (("2" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "ann_class(mp!1)(c!1)")
                                    (("2"
                                      (assert)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (use "ann_program_TCC1") nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 30438 1249 t nil)
  (ann_program_TCC2-1 nil 3401614556 3401685096
   ("" (subtype-tcc) nil nil) unfinished nil 1529 4 t nil)))
(AnnotateProgramProperties
 (CP_is_enumerable 0
  (CP_is_enumerable-1 nil 3392611795 3392611802 ("" (postpone) nil nil)
   unchecked nil 7000 150 t shostak))
 (IMP_VariableNames_TCC1 0
  (IMP_VariableNames_TCC1-1 nil 3396601223 3401704788
   ("" (use "infinite_namespace") nil nil) unchecked nil 3 3 t nil))
 (IMP_AnnotateProgram_TCC1 0
  (IMP_AnnotateProgram_TCC1-1 nil 3390292134 3401704788
   ("" (use "CP_is_enumerable") nil nil) unchecked nil 2 3 t nil))
 (IMP_AnnotateProgram_TCC2 0
  (IMP_AnnotateProgram_TCC2-1 nil 3395037658 3401704788
   ("" (use "name_of_exists") nil nil) unchecked nil 22 22 t nil))
 (ann_program_class_correspondence 0
  (ann_program_class_correspondence-1 nil 3392569211 3401704788
   ("" (skosimp*)
    (("" (expand "ann_program") (("" (propax) nil nil)) nil)) nil)
   unfinished nil 5 5 t shostak))
 (ann_program_method_correspondence 0
  (ann_program_method_correspondence-1 nil 3392569244 3401704789
   ("" (skosimp*)
    (("" (use "ann_program_class_correspondence")
      (("" (assert)
        (("" (skosimp*)
          (("" (expand* "ann_class" "ann_methods")
            (("" (inst 1 "c1!1" _)
              (("" (assert)
                (("" (lift-if)
                  (("" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (replace -2 -5) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   106 106 t shostak))
 (ann_program_preserves_var_decls 0
  (ann_program_preserves_var_decls-1 nil 3392566301 3401704792
   ("" (skosimp*)
    (("" (split)
      (("1" (expand* "ann_program" "getFieldDecls")
        (("1" (apply-extensionality :hide? t)
          (("1" (iff)
            (("1" (split)
              (("1" (skosimp*)
                (("1" (inst 1 "ann_class(mp!1)(c!1)")
                  (("1" (split)
                    (("1" (inst?) nil nil)
                     ("2" (expand "ann_class") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "ann_class")
                      (("2" (lift-if) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "getLocalDecls")
        (("2" (apply-extensionality :hide? t)
          (("2" (iff)
            (("2" (expand "getLocalDecls")
              (("2" (split)
                (("1" (expand "ann_program")
                  (("1" (skosimp*)
                    (("1" (case "name(c!1) = class_name(mva(mp!1))")
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (expand "ann_methods")
                                (("2"
                                  (inst 1 "ann_method(mp!1)(m!1)")
                                  (("2"
                                    (split 1)
                                    (("1" (inst?) nil nil)
                                     ("2"
                                      (expand "ann_method")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 2 "ann_class(mp!1)(c!1)")
                        (("2" (assert)
                          (("2" (split 2)
                            (("1" (inst?) nil nil)
                             ("2" (inst 1 "m!1")
                              (("2"
                                (expand "ann_class")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (use "ann_program_method_correspondence")
                    (("2" (assert)
                      (("2" (skosimp*)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (inst 1 "c1!1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "m1!1")
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (expand "ann_method" -7)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst 2 "c1!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 2 "m1!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand* "subset?" "member")
        (("3" (skosimp*)
          (("3" (expand* "ann_program" "getGhostDecls")
            (("3" (skosimp*)
              (("3" (inst 1 "ann_class(mp!1)(c!1)")
                (("3" (split)
                  (("1" (inst?) nil nil)
                   ("2" (expand* "ann_class" "union" "member")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   246 246 t shostak))
 (ann_program_preserves_var_decl_names 0
  (ann_program_preserves_var_decl_names-1 nil 3392567558 3401704793
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (flatten)
        (("" (replace -1)
          (("" (replace -2)
            (("" (assert)
              (("" (expand* "subset?" "member" "var_names")
                (("" (skosimp*)
                  (("" (inst?)
                    (("" (assert)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   98 98 t shostak))
 (ann_program_add_ghost_var_decls 0
  (ann_program_add_ghost_var_decls-1 nil 3396607040 3401704793
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "getGhostDecls")
        (("" (expand "union")
          (("" (expand "member")
            (("" (iff)
              (("" (split 1)
                (("1" (skosimp*)
                  (("1" (use "ann_program_class_correspondence")
                    (("1" (assert)
                      (("1" (skosimp*)
                        (("1" (inst 1 "c1!1")
                          (("1" (assert)
                            (("1" (replace -2 :hide? t)
                              (("1"
                                (expand "ann_class")
                                (("1"
                                  (expand "union")
                                  (("1"
                                    (expand "member")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (split -1)
                    (("1" (skosimp*)
                      (("1" (inst 1 "ann_class(mp!1)(c!1)")
                        (("1" (expand "ann_program")
                          (("1" (split 1)
                            (("1" (inst?) nil nil)
                             ("2" (expand "ann_class")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "mp!1")
                      (("2" (expand "compatible")
                        (("2" (flatten)
                          (("2" (skosimp*)
                            (("2" (inst 1 "ann_class(mp!1)(c!1)")
                              (("2"
                                (expand "ann_program")
                                (("2"
                                  (split 1)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (expand "ann_class")
                                    (("2"
                                      (expand "union")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (member const-decl "bool" sets nil))
   69 68 t shostak))
 (ann_program_ext_declared_var_names 0
  (ann_program_ext_declared_var_names-1 nil 3401708815 3401708894
   ("" (skosimp*)
    (("" (expand "ext_declared_var_names")
      (("" (auto-rewrite "union" "member")
        (("" (apply-extensionality :hide? t)
          (("" (use "ann_program_preserves_var_decls")
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2)
                  (("" (use "ann_program_add_ghost_var_decls")
                    (("" (replace -1)
                      (("" (rewrite "var_names_union")
                        (("" (assert)
                          (("" (iff) (("" (prop) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_union application-judgement "finite_set" finite_sets nil))
   6107 176 t shostak))
 (ann_program_preserves_wf_state 0
  (ann_program_preserves_wf_state-1 nil 3390298254 3401704794
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (inst?)
            (("" (flatten)
              (("" (replace -1)
                (("" (replace -2) (("" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   115 114 t shostak))
 (ann_program_preserves_pstate_vars 0
  (ann_program_preserves_pstate_vars-1 nil 3392567663 3401704795
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand "wf_state")
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (replace -1)
              (("" (replace -2)
                (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   102 102 t shostak))
 (ann_program_preserves_ghoststate_vars 0
  (ann_program_preserves_ghoststate_vars-1 nil 3392567791 3401704797
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (expand* "wf_state" "wf_ghoststate")
        (("" (flatten)
          (("" (inst?)
            (("" (inst?)
              (("" (expand* "id" "subset?" "member" "var_names")
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst?)
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   139 138 t shostak))
 (var_names_ann_program 0
  (var_names_ann_program-1 nil 3397470724 3401704805
   ("" (auto-rewrite "subset?" "member" "union")
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (expand "ann_program")
            (("" (expand "var_names" -1)
              (("" (expand "Union")
                (("" (skosimp*)
                  (("" (typepred "a!1")
                    (("" (skosimp*)
                      (("" (replace -3 :hide? t)
                        (("" (replace -2 :hide? t)
                          (("" (expand "ann_class")
                            (("" (assert)
                              ((""
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (auto-rewrite "Union")
                                    (("1"
                                      (rewrite "var_names" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (typepred "a!2")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "ann_methods")
                                                      (("1"
                                                        (skosimp*)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "var_names"
                                                             -2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (typepred
                                                                   "a!3")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "ann_method")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (rewrite
                                                                             "var_names")
                                                                            (("4"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "var_names(pre_set(n!1))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (skosimp*)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (apply
                                                                                           (repeat
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "add_as_union")
                                                                                                    (("2"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (rewrite
                                                                                                         "var_names_union")))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "halted")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "var_names")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "new_cps_gvds")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       2
                                                                                                                       "halted")
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "mva(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "complete")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("5"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("5"
                                                                                (assert)
                                                                                (("5"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "var_names(post_set(n!1))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (skosimp*)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("6"
                                                                              (rewrite
                                                                               "var_names")
                                                                              (("6"
                                                                                (assert)
                                                                                (("6"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "var_names(exc_set(n!1))")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (inst?)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (skosimp*)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (rewrite
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (assert)
                                                                              (("7"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("8"
                                                                              (assert)
                                                                              (("8"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (expand
                                                                             "var_names"
                                                                             1)
                                                                            (("9"
                                                                              (assert)
                                                                              (("9"
                                                                                (inst
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "a!3")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "var_names" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "var_names" 1)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst
                                                 1
                                                 "var_names(c1!1)")
                                                (("1"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (rewrite
                                                         "var_names_union")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite "var_names" -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (split -1)
                                                (("1"
                                                  (apply
                                                   (repeat
                                                    (rewrite
                                                     "var_names"
                                                     -1)))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "singleton")
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (use
                                                           "cp_new_ghostvar")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "halted_new_ghostvar")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "var_names"
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (rewrite
                                                         "var_names"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "var_names" 2)
                                    (("2"
                                      (expand "Union")
                                      (("2"
                                        (inst 2 "var_names(c1!1)")
                                        (("2" (inst 1 "c1!1") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (add_as_union formula-decl nil sets_lemmas nil)
    (nonempty_finite_union2 application-judgement
     "non_empty_finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil))
   856 851 t shostak))
 (ann_program_preserves_wf_body 0
  (ann_program_preserves_wf_body-1 nil 3401438501 3401704961
   ("" (skosimp*)
    (("" (typepred "b!1")
      (("" (expand "wf_Body")
        (("" (skosimp*)
          (("" (inst?)
            (("" (assert)
              (("" (expand "ext_declared_var_names")
                (("" (auto-rewrite "union" "member")
                  (("" (assert)
                    (("" (flatten)
                      (("" (use "ann_program_preserves_var_decls")
                        (("" (flatten)
                          (("" (replace -1)
                            (("" (replace -2)
                              ((""
                                (assert)
                                ((""
                                  (expand "subset?")
                                  ((""
                                    (expand "member")
                                    ((""
                                      (hide -5)
                                      ((""
                                        (expand "var_names")
                                        ((""
                                          (skosimp*)
                                          ((""
                                            (inst?)
                                            ((""
                                              (assert)
                                              ((""
                                                (inst? 3)
                                                (("" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil))
   9170 209 t shostak))
 (ann_program_preserves_wf_method 0
  (ann_program_preserves_wf_method-1 nil 3401708680 3401708970
   ("" (skosimp*)
    (("" (typepred "m!1")
      (("" (use "ann_method_wf_Body")
        (("" (assert)
          (("" (expand "wf_Method" 1)
            (("" (expand "wf_Body")
              (("" (rewrite "ann_program_ext_declared_var_names")
                (("" (auto-rewrite "union" "member")
                  (("" (assert)
                    (("" (flatten)
                      (("" (split 1)
                        (("1" (skosimp*)
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst? -3) (("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (skosimp*)
                          (("3" (inst? -4) (("3" (assert) nil nil))
                            nil))
                          nil)
                         ("4" (propax) nil nil) ("5" (propax) nil nil)
                         ("6" (propax) nil nil)
                         ("7" (skosimp*)
                          (("7" (inst? -5) (("7" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_union application-judgement "finite_set" finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   6412 119 t shostak))
 (ann_event_wf_Body 0
  (ann_event_wf_Body-1 nil 3402484935 3402485970
   ("" (skosimp)
    (("" (expand "ann_event")
      (("" (expand "wf_Body")
        (("" (split)
          (("1" (skosimp)
            (("1" (use "ann_program_ext_declared_var_names")
              (("1" (rewrite -1)
                (("1" (expand* "union" "member")
                  (("1" (flatten)
                    (("1" (expand "var_names" -1)
                      (("1" (expand "emptyset")
                        (("1" (prop)
                          (("1" (auto-rewrite ("union" "member"))
                            (("1" (assert) (("1" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1035372 870 t shostak))
 (get_class_ann_program 0
  (get_class_ann_program-1 nil 3392567967 3401704808
   ("" (skosimp*)
    (("" (replace -3 :hide? t)
      (("" (replace -3 :hide? t)
        (("" (expand* "ann_program" "get_class")
          (("" (assert)
            (("" (lift-if -2)
              (("" (split -2)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (assert)
                        (("1" (split -4)
                          (("1" (assert) nil nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 42 42 t shostak))
 (same_class_name_ann_class_implies_same_class 0
  (same_class_name_ann_class_implies_same_class-1 nil 3387512899
   3401704808
   ("" (skosimp)
    (("" (expand "ann_program")
      (("" (skosimp)
        (("" (lemma "wf_program_has_unique_class_names")
          (("" (inst -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (typepred "mp!1")
              (("" (expand "wf_MP")
                (("" (expand "ann_class")
                  (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((bool nonempty-type-eq-decl nil booleans nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   38 37 t shostak))
 (same_method_name_ann_class_implies_same_method 0
  (same_method_name_ann_class_implies_same_method-1 nil 3401684952
   3401704444
   ("" (skosimp)
    (("" (lemma "wf_class_has_unique_method_names")
      ((""
        (inst -1 "ann_program(mp!1)" "c2!1" "m2!1"
         "ann_method(mp!1)(m1!1)")
        (("" (lemma "wf_program_has_wf_classes")
          (("" (inst -1 "ann_program(mp!1)" "c2!1")
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (expand "ann_method" -2 2)
                    (("1" (replace -3)
                      (("1" (expand "ann_class" 1)
                        (("1" (expand "ann_methods")
                          (("1" (inst?) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "ann_program" 1)
                  (("2" (inst 1 "c1!1") (("2" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   11268 88 t nil))
 (lookup_mthd_ann_program_TCC1 0
  (lookup_mthd_ann_program_TCC1-1 nil 3398657929 3401704814
   ("" (subtype-tcc) nil nil) unchecked
   ((subset? const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_intersection1 application-judgement "finite_set"
     finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   546 545 nil nil))
 (lookup_mthd_ann_program 0
  (lookup_mthd_ann_program-1 nil 3387195852 3401704452
   ("" (skosimp)
    (("" (expand "lookup_mthd")
      (("" (lift-if)
        (("" (assert)
          (("" (case "up?(get_class(ann_program(mp!1))(tgt!1))")
            (("1" (assert)
              (("1" (split -2)
                (("1" (split -3)
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (skosimp*)
                        (("1"
                          (name "c1"
                                "down(get_class(program(mp!1))(tgt!1))")
                          (("1" (replace -1)
                            (("1"
                              (name "c2"
                                    "down(get_class(ann_program(mp!1))(tgt!1))")
                              (("1"
                                (replace -1)
                                (("1"
                                  (lemma
                                   "same_class_name_ann_class_implies_same_class")
                                  (("1"
                                    (inst -1 "mp!1" "c1" "c2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "get_class_ann_program")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             -1
                                             "mp!1"
                                             "c1"
                                             "c2"
                                             "tgt!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "same_method_name_ann_class_implies_same_method")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (assert)
                          (("2"
                            (case-replace
                             " methods(down(get_class(ann_program(mp!1))(tgt!1))) = methods(down(get_class(program(mp!1))(tgt!1)))")
                            (("1" (assert) nil nil)
                             ("2"
                              (case-replace
                               "get_class(ann_program(mp!1))(tgt!1) = get_class(program(mp!1))(tgt!1)")
                              (("2"
                                (use
                                 "same_class_name_ann_class_implies_same_class")
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "get_class_ann_program")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("2" (use "ann_program_class_correspondence")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   296 279 t shostak))
 (ann_program_defines_MVA_vars 0
  (ann_program_defines_MVA_vars-2 nil 3394875181 3401704464
   ("" (skosimp)
    (("" (typepred "mp!1")
      (("" (expand* "compatible" "var_names" "new_gvds")
        (("" (skosimp*)
          (("" (inst 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (assert)
              (("" (split 1)
                (("1" (expand "ann_program") (("1" (inst?) nil nil))
                  nil)
                 ("2" (expand "ann_class") (("2" (propax) nil nil))
                  nil)
                 ("3" (expand* "ann_class" "union" "member" "new_gvds")
                  nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((lift type-decl nil lift_adt nil) (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   465 42 t nil)
  (ann_program_defines_MVA_vars-1 nil 3389956467 3394872339
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (prop)
        (("1" (inst?)
          (("1" (assert)
            (("1" (expand* "getGhostDecls" "var_names")
              (("1" (use "ann_program_defines_MVA_vars2")
                (("1" (split -)
                  (("1" (skosimp)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (expand* "var_names" "new_gvds" "union" "member")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   untried
   ((id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (lift type-decl nil lift_adt nil))
   974962 4000 t shostak))
 (new_vars_ghost_in_ann_program 0
  (new_vars_ghost_in_ann_program-1 nil 3394876088 3401704468
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost" "id")
      (("" (flatten)
        (("" (inst?)
          (("" (assert)
            (("" (hide -1 2)
              (("" (expand "getGhostDecls")
                (("" (expand "var_names" 1)
                  (("" (use "ann_program_defines_MVA_vars")
                    (("" (assert)
                      (("" (skosimp)
                        (("" (inst?)
                          (("" (assert)
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (id const-decl "(bijective?[T, T])" identity nil))
   68 65 t shostak))
 (ann_program_preserves_class_names 0
  (ann_program_preserves_class_names-1 nil 3398687801 3401704474
   ("" (skosimp*)
    (("" (apply-extensionality :hide? t)
      (("" (expand "class_names")
        (("" (iff)
          (("" (split 1)
            (("1" (skosimp*)
              (("1" (inst 1 "ann_class(mp!1)(c!1)")
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_name")
                    (("1" (assert)
                      (("1" (expand "ann_program")
                        (("1" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (use "ann_program_class_correspondence")
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (inst 1 "c1!1")
                      (("2" (assert)
                        (("2" (replace -2)
                          (("2"
                            (rewrite
                             "ann_program_preserves_class_name")
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (lift type-decl nil lift_adt nil)
    (finite_set type-eq-decl nil finite_sets nil))
   87 83 t shostak))
 (up_get_class_equivalence 0
  (up_get_class_equivalence-1 nil 3398687657 3401704481
   ("" (skosimp*)
    (("" (expand "get_class")
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (propax) nil nil)
             ("2" (split -1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (rewrite "ann_program_preserves_class_names")
                    nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil))
   42 35 t shostak))
 (get_class_equivalence 0
  (get_class_equivalence-1 nil 3398688099 3401704707
   ("" (skosimp*)
    (("" (use "up_get_class_equivalence")
      (("" (assert)
        (("" (use "ann_program_preserves_class_name")
          (("" (expand "get_class")
            (("" (case "Reference?(a!1)")
              (("1" (assert)
                (("1" (lift-if)
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (split -4)
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (expand "class_names")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (case-replace
                                     "{c_1: Class[Name] |
                                        classes(program(mp!1))(c_1) AND
                                         name(c_1) = class_name(a!1)} = singleton(c!1)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c: Class[Name] |
                               classes(ann_program(mp!1))(c) AND
                                name(c) = class_name(a!1)} = singleton(c!2)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -4)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -5)
                                                (("1"
                                                  (typepred
                                                   "program(mp!1)")
                                                  (("1"
                                                    (expand*
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "c!1"
                                                         "c1!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -11
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -6)
                                                              (("1"
                                                                (rewrite
                                                                 "ann_program_preserves_class_name"
                                                                 -9)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (iff)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (typepred
                                                     "ann_program(mp!1)")
                                                    (("1"
                                                      (expand*
                                                       "wf_Program"
                                                       "wf_program_has_unique_class_names_def")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "x!1"
                                                           "c!2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred
                                                 "program(mp!1)")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (expand "class_names")
                                (("2"
                                  (skosimp*)
                                  (("2"
                                    (case-replace
                                     "{c: Class[Name] |
                             classes(ann_program(mp!1))(c) AND
                              name(c) = class_name(a!1)} = singleton(c!2)"
                                     :hide?
                                     t)
                                    (("1"
                                      (case-replace
                                       "{c_1: Class[Name] |
                                classes(program(mp!1))(c_1) AND
                                 name(c_1) = class_name(a!1)} = singleton(c!1)"
                                       :hide?
                                       t)
                                      (("1"
                                        (rewrite "choose_singleton")
                                        (("1"
                                          (rewrite "choose_singleton")
                                          (("1"
                                            (expand "ann_program" -3)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (rewrite
                                                   "ann_program_preserves_class_name")
                                                  (("1"
                                                    (expand
                                                     "ann_class"
                                                     2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "program(mp!1)")
                                                        (("1"
                                                          (expand*
                                                           "wf_Program"
                                                           "wf_program_has_unique_class_names_def")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "c1!1"
                                                               "c!1")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality :hide? t)
                                        (("2"
                                          (expand "singleton")
                                          (("2"
                                            (iff)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (typepred
                                                   "program(mp!1)")
                                                  (("1"
                                                    (expand*
                                                     "wf_Program"
                                                     "wf_program_has_unique_class_names_def")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "x!1"
                                                         "c!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (expand "singleton")
                                        (("2"
                                          (iff)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred
                                                 "ann_program(mp!1)")
                                                (("1"
                                                  (expand*
                                                   "wf_Program"
                                                   "wf_program_has_unique_class_names_def")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "x!1"
                                                       "c!2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((finite_set type-eq-decl nil finite_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lift type-decl nil lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (choose_singleton formula-decl nil sets_lemmas nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   20765 360 t shostak)))

