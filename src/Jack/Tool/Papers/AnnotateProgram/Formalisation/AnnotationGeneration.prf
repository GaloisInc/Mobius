(AnnotateProgram
 (unique_TCC1 0
  (unique_TCC1-1 nil 3383987003 3390296182
   ("" (use "CP_is_enumerable")
    (("" (skolem!) (("" (inst?) nil nil)) nil)) nil)
   unchecked
   ((CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (CP_is_enumerable formula-decl nil AnnotateProgram nil))
   46505 170 t nil))
 (name_of_TCC1 0
  (name_of_TCC1-1 nil 3383987003 3390295115
   ("" (use "unique_TCC1")
    (("" (use "nat2string_injective_function_exists")
      (("" (skosimp*)
        (("" (typepred "x!1")
          (("" (inst 1 "f!1 o x!1")
            (("" (use "composition_injective[CP, nat,string]") nil
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((nat2string_injective_function_exists formula-decl nil FunProp nil)
    (injective? const-decl "bool" functions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (composition_injective judgement-tcc nil function_props nil)
    (O const-decl "T3" function_props nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (unique_TCC1 existence-tcc nil AnnotateProgram nil))
   61 60 t nil))
 (new_gvds_TCC1 0
  (new_gvds_TCC1-1 nil 3390028807 3390296008
   ("" (skosimp*)
    ((""
      (case-replace "{gd: GhostVarDecl[string] |
                jtype(gd) = IntType AND
                 (name(gd) = cp AND
                   init_val(gd) = Int(unique(init_cp(mva(mp!1)))))
                 OR
                 ((EXISTS (q: (cps(mva(mp!1)))):
                     name(gd) = name_of(q) AND jtype(gd) = IntType AND init_val(gd) = Int(unique(q)))
                   OR
                   (EXISTS (v: (vdsA(mva(mp!1)))):
                      name(gd) = name(v) AND jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)))} = union ({gd: GhostVarDecl[string] |
                jtype(gd) = IntType AND
                 (name(gd) = cp AND
                   init_val(gd) = Int(unique(init_cp(mva(mp!1)))))}, union({gd : GhostVarDecl[string] | ((EXISTS (q: (cps(mva(mp!1)))):
                     name(gd) = name_of(q) AND jtype(gd) = IntType AND init_val(gd) = Int(unique(q))))}, {gd : GhostVarDecl[string] |  (EXISTS (v: (vdsA(mva(mp!1)))):
                      name(gd) = name(v) AND jtype(gd) = jtype(v) AND init_val(gd) = init_val(v))}))")
      (("1" (hide -1)
        (("1" (use "finite_union[GhostVarDecl[string]]")
          (("1" (hide 2)
            (("1" (use "finite_union[GhostVarDecl[string]]")
              (("1" (hide 2)
                (("1" (typepred "vdsA(mva(mp!1))")
                  (("1" (expand "is_finite")
                    (("1" (skosimp*)
                      (("1"
                        (inst 1 "N!1"
                         "LAMBDA(gd : ({gd: GhostVarDecl[string] |
                     (EXISTS (v: (vdsA(mva(mp!1)))):
                        name(gd) = name(v) AND
                         jtype(gd) = jtype(v) AND
                          init_val(gd) = init_val(v))})) : f!1((# name := name(gd), jtype := jtype(gd), init_val := init_val(gd) #))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1"
                              (inst -1
                               "(# name := name(x1!1), jtype := jtype(x1!1), init_val := init_val(x1!1) #)"
                               "(# name := name(x2!1), jtype := jtype(x2!1), init_val := init_val(x2!1) #)")
                              (("1"
                                (assert)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (typepred "gd!1")
                            (("2" (skosimp*)
                              (("2"
                                (typepred "v!1")
                                (("2"
                                  (case-replace
                                   "v!1 = (# name := name(gd!1), jtype := jtype(gd!1), init_val := init_val(gd!1) #)")
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "cps(mva(mp!1))")
                  (("2" (expand "is_finite")
                    (("2" (skosimp*)
                      (("2"
                        (inst 1 "N!1"
                         "LAMBDA(gd : ({gd: GhostVarDecl[string] |
                     ((EXISTS (q: (cps(mva(mp!1)))):
                         name(gd) = name_of(q) AND
                          jtype(gd) = IntType AND
                           init_val(gd) = Int(unique(q))))})) : f!1(choose ({q : (cps(mva(mp!1))) | name(gd) = name_of(q) AND init_val(gd) = Int(unique(q))}))")
                        (("1" (expand "injective?")
                          (("1" (skosimp*)
                            (("1" (typepred "x1!1")
                              (("1"
                                (typepred "x2!1")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (inst? -7)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (apply-extensionality :hide? t)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "nonempty_exists")
                                      (("2"
                                        (inst 1 "q!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (rewrite "nonempty_exists")
                                      (("3"
                                        (inst 1 "q!2")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "is_finite")
              (("2"
                (inst 1 "1" "LAMBDA(gd : ({gd: GhostVarDecl[string] |
                           jtype(gd) = IntType AND
                            (name(gd) = cp AND
                              init_val(gd) =
                               Int(unique(init_cp(mva(mp!1)))))})) : 0")
                (("2" (expand "injective?")
                  (("2" (skosimp*)
                    (("2" (typepred "x1!1")
                      (("2" (typepred "x2!1")
                        (("2" (apply-extensionality :hide? t) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (cp const-decl "string" AnnotateProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (>= const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (unique const-decl "(injective?[CP, nat])" AnnotateProgram nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil) nil
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    nil nil (Expr type-decl nil Expr_adt nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Stmt type-decl nil Stmt_adt nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil) nil
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil) nil
    (LocalVarDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Method type-eq-decl nil Program nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    nil
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil))
   53 50 t nil))
 (ann_action_TCC1 0
  (ann_action_TCC1-1 nil 3383987003 3390295115
   ("" (termination-tcc) nil nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   183 100 nil nil))
 (ann_guard_actions_TCC1 0
  (ann_guard_actions_TCC1-1 nil 3390028807 3390295118
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1"
             "LAMBDA(x : (({x: [Expr[string], Stmt[string]] |
                     EXISTS (t: Transition[CP, string]):
                       ts!1(t) AND
                        x =
                         (guard_to_expression[CP, string]
                              (mva(mp!1))(guard(t)),
                          update_vars(t))}))) : f!1(choose({t :Transition[CP, string] |
                       ts!1(t) AND
                        x = (guard_to_expression[CP, string]
                              (mva(mp!1))(guard(t)), update_vars(t))}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (grind) nil nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "t!2") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (Expr type-decl nil Expr_adt nil) (Stmt type-decl nil Stmt_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (EventType type-decl nil EventType_adt nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil) (Store type-eq-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (guard_to_expression const-decl "Expr" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil) nil
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) nil nil
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil) nil
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil) nil
    (LocalVarDecl type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    nil (update_vars const-decl "Stmt" AnnotateProgram nil)
    (nonempty? const-decl "bool" sets nil))
   2939 2400 t nil))
 (ann_event_TCC1 0
  (ann_event_TCC1-1 nil 3390028807 3390295119
   ("" (skosimp*)
    (("" (typepred "ts!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(t :
                ({t: Transition[CP, string] |
                     ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            (("" (expand "injective?")
              (("" (skosimp*)
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   338 110 t nil))
 (ann_event_TCC2 0
  (ann_event_TCC2-1 nil 3390028807 3390296014
   ("" (skosimp*)
    (("" (typepred "cps(mva(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1"
             "LAMBDA(c : ({c: [Expr[string], Stmt[string]] |
                     EXISTS (q: CP):
                       cps(mva(mp!1))(q) AND
                        nonempty?[Transition[CP, string]]
                            ({t: Transition[CP, string] |
                                ts!1(t) AND scp(t) = q})
                         AND
                         c =
                          ann_trans_cp(mp!1)
                                      (q,
                                       {t: Transition[CP, string]
                                        |
                                        ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                        nonempty?[Transition[CP, string]]
                            ({t: Transition[CP, string] |
                                ts!1(t) AND scp(t) = q})
                         AND
                         c =
                          ann_trans_cp(mp!1)
                                      (q,
                                       {t: Transition[CP, string]
                                        |
                                        ts!1(t) AND scp(t) = q})}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (hide -8)
                            (("1" (replace -3)
                              (("1"
                                (replace -6)
                                (("1"
                                  (expand "ann_trans_cp")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (apply-extensionality :hide? t)
                                      (("1"
                                        (expand "ann_guard_actions")
                                        (("1" (postpone) nil nil))
                                        nil)
                                       ("2"
                                        (use "ann_event_TCC1")
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (use "ann_event_TCC1")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "nonempty_exists")
                          (("1" (inst 1 "q!1") (("1" (assert) nil nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (use "ann_event_TCC1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("1" (inst 1 "q!2") (("1" (assert) nil nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (use "ann_event_TCC1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (skosimp*)
                          (("4" (use "ann_event_TCC1")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil)
             ("3" (skosimp*)
              (("3" (use "ann_event_TCC1") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked nil 5851 5030 t nil))
 (filter_event_TCC1 0
  (filter_event_TCC1-1 nil 3383987003 3390295125
   ("" (skosimp*)
    (("" (typepred "ts(a!1)")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(t : ({t: Transition[CP, string] |
                     ts(a!1)(t) AND
                      etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_MVA const-decl "boolean" WellFormedMVA nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil) (Val type-decl nil Val_adt nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Event type-eq-decl nil MVA nil)
    (Action type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   834 630 t nil))
 (ann_method_TCC1 0
  (ann_method_TCC1-1 nil 3389418364 3390295125
   ("" (skolem-typepred)
    (("" (expand* "wf_MP" "complete") (("" (flatten) nil nil)) nil))
    nil)
   unchecked
   (nil
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (Method type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil) nil
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (Stmt type-decl nil Stmt_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr type-decl nil Expr_adt nil) nil nil
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil) nil
    (Val type-decl nil Val_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   85 80 t nil))
 (ann_methods_TCC1 0
  (ann_methods_TCC1-1 nil 3383987003 3390295130
   ("" (skosimp*)
    (("" (typepred "ms!1")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(m : ({m: Method[string] |
                     EXISTS (n: Method[string]):
                       ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[string] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "n!1") (("2" (assert) nil nil))
                            nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "n!2") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "m!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "n!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (MVA type-eq-decl nil MVA nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (Val type-decl nil Val_adt nil) nil
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    nil nil (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil) nil
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil) nil
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    nil (ann_method const-decl "Method" AnnotateProgram nil)
    (nonempty? const-decl "bool" sets nil))
   5038 360 t nil))
 (ann_class_TCC1 0
  (ann_class_TCC1-1 nil 3387192887 3390295130
   ("" (skolem-typepred)
    (("" (expand "well_typed_Program")
      (("" (inst?) (("" (prop) nil nil)) nil)) nil))
    nil)
   unchecked
   ((defined? const-decl "boolean" ValProp nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil) nil
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (Method type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil) nil
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil) nil
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (Stmt type-decl nil Stmt_adt nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (Expr type-decl nil Expr_adt nil) nil nil
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil) nil
    (Val type-decl nil Val_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   62 60 t nil))
 (not_clashing_model_vars_TCC1 0
  (not_clashing_model_vars_TCC1-1 nil 3392566270 nil
   ("" (subtype-tcc) nil nil) nil nil nil nil nil nil))
 (ann_program_TCC1 0
  (ann_program_TCC1-1 nil 3383987003 3390295131
   ("" (skolem-typepred)
    (("" (expand "ann_program_pre") (("" (prop) nil nil)) nil)) nil)
   unchecked
   ((ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   89 30 t nil))
 (ann_program_TCC2 0
  (ann_program_TCC2-1 nil 3389418364 3390295131
   ("" (skosimp*)
    (("" (typepred "classes(program(mp!1))")
      (("" (expand "is_finite")
        (("" (skosimp*)
          ((""
            (inst 1 "N!1" "LAMBDA(c : ({c: Class[string] |
                     EXISTS (c1: Class[string]):
                       classes(program(mp!1))(c1) AND
                        c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[string] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (expand "injective?")
              (("1" (skosimp*)
                (("1" (typepred "x1!1")
                  (("1" (typepred "x2!1")
                    (("1" (skosimp*)
                      (("1" (inst? -5 :where -6)
                        (("1" (assert) nil nil)
                         ("2" (rewrite "nonempty_exists")
                          (("2" (inst 1 "c1!1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("3" (rewrite "nonempty_exists")
                          (("3" (inst 1 "c1!2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (typepred "c!1")
                (("2" (skosimp*)
                  (("2" (rewrite "nonempty_exists")
                    (("2" (inst 1 "c1!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skosimp*)
              (("3" (typepred "mp!1")
                (("3" (expand "ann_program_pre")
                  (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateProgram nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (injective? const-decl "bool" functions nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AState type-eq-decl nil MVASemantics nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil) nil
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil) nil nil
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil) nil
    (list type-decl nil list_adt nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil) nil
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    nil (ann_class const-decl "Class" AnnotateProgram nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   601 460 t nil)))
(AnnotateProgramProperties
 (IMP_AnnotateProgram_TCC1 0
  (IMP_AnnotateProgram_TCC1-1 nil 3390292134 3390295977
   ("" (use "CP_is_enumerable") nil nil) unchecked
   ((CP_is_enumerable formula-decl nil AnnotateProgramProperties nil))
   20116 30 t nil))
 (ann_program_class_correspondence_TCC1 0
  (ann_program_class_correspondence_TCC1-1 nil 3392569207 nil
   ("" (subtype-tcc) nil nil) unfinished nil nil nil nil nil))
 (ann_program_class_correspondence 0
  (ann_program_class_correspondence-1 nil 3392569211 3392569231
   ("" (skosimp*)
    (("" (expand "ann_program") (("" (propax) nil nil)) nil)) nil)
   unchecked ((ann_program const-decl "Program" AnnotateProgram nil))
   20151 660 t shostak))
 (ann_program_method_correspondence 0
  (ann_program_method_correspondence-1 nil 3392569244 3392569559
   ("" (skosimp*)
    (("" (use "ann_program_class_correspondence")
      (("" (assert)
        (("" (inst?)
          (("" (assert)
            (("" (skosimp*)
              (("" (inst 1 "c1!1" _)
                (("" (assert)
                  (("" (expand "ann_class")
                    (("" (lift-if)
                      (("" (assert)
                        (("" (split -2)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (replace -2 -6)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "ann_methods")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ann_class const-decl "Class" AnnotateProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (ann_program_class_correspondence formula-decl nil
     AnnotateProgramProperties nil))
   54482 3180 t shostak))
 (ann_program_preserves_var_decls 0
  (ann_program_preserves_var_decls-1 nil 3392566301 3392570209
   ("" (skosimp*)
    (("" (use "ann_program_method_correspondence")
      (("" (assert)
        (("" (expand "ann_program_pre")
          (("" (flatten)
            (("" (split 1)
              (("1" (expand "ann_program")
                (("1" (expand "getFieldDecls")
                  (("1" (apply-extensionality :hide? t)
                    (("1" (iff)
                      (("1" (split 1)
                        (("1" (skosimp*)
                          (("1" (inst 1 "ann_class(mp!1)(c!1)")
                            (("1" (split 1)
                              (("1" (inst?) nil nil)
                               ("2"
                                (expand "ann_class")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (expand "ann_class")
                                (("2"
                                  (lift-if)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "getLocalDecls")
                (("2" (apply-extensionality :hide? t)
                  (("2" (iff)
                    (("2" (split 1)
                      (("1" (expand "ann_program")
                        (("1" (skosimp*)
                          (("1"
                            (case "name(c!1) = class_name(mva(mp!1))")
                            (("1"
                              (inst 1 "ann_class(mp!1)(c!1)"
                               "ann_method(mp!1)(m!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (split 1)
                                  (("1" (inst?) nil nil)
                                   ("2"
                                    (expand "ann_class")
                                    (("2"
                                      (expand "ann_methods")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "ann_method")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 2 "ann_class(mp!1)(c!1)" "m!1")
                              (("2"
                                (split 2)
                                (("1" (inst?) nil nil)
                                 ("2"
                                  (expand "ann_class")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (inst? -4)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2"
                                (split -6)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst 1 "c1!1" "m1!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (expand "ann_method" -5)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst 2 "c1!1" "m1!1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "subset?")
                (("3" (expand "member")
                  (("3" (skosimp*)
                    (("3" (expand "ann_program")
                      (("3" (expand "getGhostDecls")
                        (("3" (skosimp*)
                          (("3" (inst 1 "ann_class(mp!1)(c!1)")
                            (("1" (split 1)
                              (("1" (inst?) nil nil)
                               ("2"
                                (expand "ann_class")
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (expand "member")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((ann_program_method_correspondence formula-decl nil
     AnnotateProgramProperties nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (getFieldDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, string]"
     AnnotateProgramProperties nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (subset? const-decl "bool" sets nil))
   571955 42580 t shostak))
 (ann_program_preserves_var_decl_names 0
  (ann_program_preserves_var_decl_names-1 nil 3392567558 3392567610
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (assert)
        (("" (flatten)
          (("" (replace -1)
            (("" (replace -2)
              (("" (assert)
                (("" (expand "subset?")
                  (("" (expand "member")
                    (("" (expand "var_names")
                      (("" (skosimp*)
                        (("" (inst?)
                          (("" (assert)
                            (("" (inst?) (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (subset? const-decl "bool" sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil))
   52162 3350 t shostak))
 (ann_program_preserves_wf_state 0
  (ann_program_preserves_wf_state-1 nil 3390298254 3390298483
   ("" (skosimp)
    (("" (expand "wf_state")
      (("" (skosimp*) (("" (inst?) (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 229536 100 t shostak))
 (ann_program_preserves_pstate_vars 0
  (ann_program_preserves_pstate_vars-1 nil 3392567663 3392567761
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (assert)
        (("" (expand "wf_state")
          (("" (flatten)
            (("" (expand "wf_state" -6)
              (("" (expand "wf_state" -8)
                (("" (assert)
                  (("" (replace -1)
                    (("" (replace -2)
                      (("" (inst?)
                        (("" (inst?)
                          (("" (assert) (("" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_state const-decl "boolean" State nil))
   98183 3400 t shostak))
 (ann_program_preserves_ghoststate_vars 0
  (ann_program_preserves_ghoststate_vars-1 nil 3392567791 3392567950
   ("" (skosimp*)
    (("" (use "ann_program_preserves_var_decls")
      (("" (assert)
        (("" (flatten)
          (("" (expand "wf_state")
            (("" (flatten)
              (("" (expand "wf_ghoststate")
                (("" (inst?)
                  (("" (inst?)
                    (("" (assert)
                      (("" (expand "id")
                        (("" (assert)
                          (("" (expand "subset?")
                            (("" (expand "member")
                              ((""
                                (expand "var_names")
                                ((""
                                  (skosimp*)
                                  ((""
                                    (assert)
                                    ((""
                                      (inst?)
                                      ((""
                                        (assert)
                                        ((""
                                          (inst?)
                                          (("" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" MonitoredProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (subset? const-decl "bool" sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (member const-decl "bool" sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (ann_program_preserves_var_decls formula-decl nil
     AnnotateProgramProperties nil))
   6483 770 t shostak))
 (get_class_ann_program 0
  (get_class_ann_program-1 nil 3392567967 3392568155
   ("" (skosimp*)
    (("" (replace -4 :hide? t)
      (("" (replace -4 :hide? t)
        (("" (expand "ann_program")
          (("" (expand "get_class")
            (("" (assert)
              (("" (lift-if -2)
                (("" (split -2)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (assert)
                          (("1" (split -5)
                            (("1" (assert) nil nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program const-decl "Program" AnnotateProgram nil)
    (get_class const-decl "lift[Class]" ProgramFunctions nil))
   188082 8460 t shostak))
 (same_class_name_ann_class_implies_same_class_TCC1 0
  (same_class_name_ann_class_implies_same_class_TCC1-1 nil 3389418365
   3390296014
   ("" (skosimp)
    (("" (expand "ann_program_pre") (("" (prop) nil nil)) nil)) nil)
   unchecked
   ((ann_program_pre const-decl "boolean" AnnotateProgram nil)) 171 60
   t nil))
 (same_class_name_ann_class_implies_same_class 0
  (same_class_name_ann_class_implies_same_class-1 nil 3387512899
   3392568766
   ("" (skosimp)
    (("" (expand "ann_program")
      (("" (skosimp)
        (("" (expand "ann_program_pre")
          (("" (flatten)
            (("" (lemma "wf_program_has_unique_class_names")
              (("" (inst -1 "program(mp!1)" "c1!1" "c1!2")
                (("" (assert)
                  (("" (expand "wf_MP")
                    (("" (flatten)
                      (("" (assert)
                        (("" (replace -9)
                          (("" (expand "ann_class" -10)
                            (("" (assert)
                              ((""
                                (assert)
                                ((""
                                  (expand "ann_class" 1)
                                  (("" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((ann_program const-decl "Program" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_program_has_unique_class_names formula-decl nil
     WellFormedProgram nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Program type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil))
   267835 13000 t shostak))
 (same_method_name_ann_class_implies_same_method_TCC1 0
  (same_method_name_ann_class_implies_same_method_TCC1-1 nil 3389418365
   3390296014
   ("" (skosimp)
    (("" (expand "ann_program_pre") (("" (prop) nil nil)) nil)) nil)
   unchecked
   ((ann_program_pre const-decl "boolean" AnnotateProgram nil)) 69 60 t
   nil))
 (same_method_name_ann_class_implies_same_method 0
  (same_method_name_ann_class_implies_same_method-1 nil 3387516443
   3390296015
   ("" (skosimp)
    (("" (lemma "wf_class_has_unique_method_names")
      (("" (inst -1 "c2!1" "m2!1" "ann_method(mp!1)(m1!1)")
        (("" (lemma "wf_program_has_wf_classes")
          (("" (inst -1 "ann_program(mp!1)" "c2!1")
            (("" (use "ann_program_yields_wf_program")
              (("" (assert)
                (("" (split -2)
                  (("1" (assert)
                    (("1" (expand "ann_method" -3 2)
                      (("1" (replace -5)
                        (("1" (expand "ann_class" 1)
                          (("1" (expand "ann_methods")
                            (("1" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ann_program" 1)
                    (("2" (inst 1 "c1!1") (("2" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wf_class_has_unique_method_names formula-decl nil
     WellFormedProgram nil)
    (wf_program_has_wf_classes formula-decl nil WellFormedProgram nil)
    (ann_program_yields_wf_program formula-decl nil
     AnnotateProgramProperties nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (ann_methods const-decl "finite_set[Method]" AnnotateProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (ann_method const-decl "Method" AnnotateProgram nil)
    (on_method_exit_exceptional_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_exit_normal_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_entry_MP const-decl "(on_method_event_type)"
     MonitoredProgramSemantics nil)
    (on_method_event_type const-decl "boolean" SemanticsTypes nil)
    (execute_CaseJML_type const-decl "boolean" SemanticsTypes nil)
    (list type-decl nil list_adt nil)
    (execute_set_type const-decl "boolean" SemanticsTypes nil)
    (deriv_expr_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_expr_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_rec_type type-eq-decl nil SemanticsTypes nil)
    (deriv_stmt_type type-eq-decl nil SemanticsTypes nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (MPState type-eq-decl nil MonitoredProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (AState type-eq-decl nil MVASemantics nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (MVA type-eq-decl nil MVA nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil))
   555 390 t shostak))
 (lookup_mthd_ann_program_TCC1 0
  (lookup_mthd_ann_program_TCC1-1 nil 3387195852 3390296015
   ("" (skosimp)
    (("" (expand "ann_program_pre") (("" (prop) nil nil)) nil)) nil)
   unchecked
   ((ann_program_pre const-decl "boolean" AnnotateProgram nil)) 74 80 t
   nil))
 (lookup_mthd_ann_program 0
  (lookup_mthd_ann_program-1 nil 3387195852 3390298588
   ("" (skosimp)
    (("" (lemma "lookup_mthd_axiom")
      (("" (inst-cp -1 "program(mp!1)" "s!1" "m1!1" "mn!1" "tgt!1")
        (("" (inst -1 "ann_program(mp!1)" "s!1" "m2!1" "mn!1" "tgt!1")
          (("" (assert)
            (("" (split)
              (("1" (flatten)
                (("1"
                  (name "c1"
                        "down(get_class(program(mp!1))(tgt!1, s!1))")
                  (("1" (replace -1)
                    (("1"
                      (name "c2"
                            "down(get_class(ann_program(mp!1))(tgt!1, s!1))")
                      (("1" (replace -1)
                        (("1"
                          (lemma
                           "same_class_name_ann_class_implies_same_class")
                          (("1" (inst -1 "mp!1" "c1" "c2")
                            (("1" (assert)
                              (("1"
                                (lemma "get_class_ann_program")
                                (("1"
                                  (inst
                                   -1
                                   "mp!1"
                                   "c1"
                                   "c2"
                                   "s!1"
                                   "tgt!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (use
                                         "same_method_name_ann_class_implies_same_method")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (use
                                         "wf_class_has_unique_method_names")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "wf_program_has_wf_classes")
                                            (("2"
                                              (inst
                                               -1
                                               "program(mp!1)"
                                               "c1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand*
                                                   "ann_program_pre"
                                                   "wf_MP")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-2 -3 1))
                (("2" (use "ann_program_preserves_wf_state")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (Program type-eq-decl nil Program nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (MVA type-eq-decl nil MVA nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (Excpt type-decl nil Excpt_adt nil)
    (PSt type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (ann_program_preserves_wf_state formula-decl nil
     AnnotateProgramProperties nil)
    (get_class_ann_program formula-decl nil AnnotateProgramProperties
     nil)
    (wf_class_has_unique_method_names formula-decl nil
     WellFormedProgram nil)
    (wf_program_has_wf_classes formula-decl nil WellFormedProgram nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (same_method_name_ann_class_implies_same_method formula-decl nil
     AnnotateProgramProperties nil)
    (same_class_name_ann_class_implies_same_class formula-decl nil
     AnnotateProgramProperties nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (down adt-accessor-decl "[(up?) -> T]" lift_adt nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil))
   12830 860 t shostak))
 (ann_program_preserves_well_behaved_Program 0
  (ann_program_preserves_well_behaved_Program-1 nil 3392570267
   3392571277
   ("" (skosimp*)
    (("" (expand "well_behaved_Program")
      (("" (skosimp*)
        (("" (expand "id")
          (("" (use "ann_program_class_correspondence")
            (("" (assert)
              (("" (inst? -1)
                (("" (assert)
                  (("" (skosimp*)
                    (("" (inst?)
                      (("" (assert)
                        (("" (flatten)
                          (("" (split 1)
                            (("1" (skosimp*)
                              (("1"
                                (hide -6)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "ann_class" -1)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           -5
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s1!1), gvs := gvs(s1!1) #)"
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s2!1), gvs := gvs(s2!1) #)"
                                           "v!1"
                                           _)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite
                                                   "deriv_expr"
                                                   -2)
                                                  (("1"
                                                    (rewrite
                                                     "deriv_expr"
                                                     -2)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "deriv_expr")
                                                      (("2"
                                                        (split -5)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (apply-extensionality
                                                             2
                                                             :hide?
                                                             t)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2"
                                (hide -5)
                                (("2"
                                  (use
                                   "ann_program_method_correspondence")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "c!1" "m!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (split -3)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished nil 1010156 33300 t shostak))
 (ann_program_defines_MVA_vars2 0
  (ann_program_defines_MVA_vars2-1 nil 3390026041 3392572274
   ("" (skosimp*)
    (("" (typepred "mp!1")
      (("" (expand "compatible")
        (("" (skosimp*)
          (("" (inst 1 "ann_class(mp!1)(c!1)")
            (("1" (assert)
              (("1" (replace -6 :hide? t)
                (("1" (expand "ann_program")
                  (("1" (expand "ann_class")
                    (("1" (expand "union")
                      (("1" (expand "member")
                        (("1" (expand "new_gvds")
                          (("1" (split 1)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2"
                              (inst 1
                               "(# jtype := IntType, name := cp, init_val := Int(unique(init_cp(mva(mp!1)))) #)")
                              (("2" (grind) nil nil)) nil)
                             ("3" (skosimp*)
                              (("3"
                                (inst
                                 1
                                 "(# jtype := IntType, name := name_of(q!1), init_val := Int(unique(q!1)) #)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1" (inst?) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("4" (skosimp*)
                              (("4"
                                (inst
                                 1
                                 "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
                                (("4"
                                  (flatten)
                                  (("4" (inst? 4) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "ann_program_pre")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (Program type-eq-decl nil Program nil)
    (complete const-decl "boolean" MVASemantics nil)
    (MVA type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (Val type-decl nil Val_adt nil)
    (Transition type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Event type-eq-decl nil MVA nil)
    (EventType type-decl nil EventType_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (string type-eq-decl nil strings nil)
    (char type-eq-decl nil strings nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (character type-decl nil character_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ann_program_pre const-decl "boolean" AnnotateProgram nil)
    (ann_program const-decl "Program" AnnotateProgram nil)
    (union const-decl "set" sets nil)
    (new_gvds const-decl "finite_set[FieldDecl]" AnnotateProgram nil)
    (v!1 skolem-const-decl "MVAVarDecl[CP, string]"
     AnnotateProgramProperties nil)
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (q!1 skolem-const-decl "CP" AnnotateProgramProperties nil)
    (IntType? adt-recognizer-decl "[JType -> boolean]" JType_adt nil)
    (IntType adt-constructor-decl "(IntType?)" JType_adt nil)
    (cp const-decl "string" AnnotateProgram nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Int? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (Int adt-constructor-decl "[int -> (Int?)]" Val_adt nil)
    (>= const-decl "bool" reals nil)
    (injective? const-decl "bool" functions nil)
    (unique const-decl "(injective?[CP, nat])" AnnotateProgram nil)
    (member const-decl "bool" sets nil)
    (ann_class const-decl "Class" AnnotateProgram nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_MP const-decl "boolean" MonitoredProgram nil)
    (mp!1 skolem-const-decl "MonitoredProgram[CP, string]"
     AnnotateProgramProperties nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (well_typed_Program const-decl "boolean" WellTypedProgram nil))
   519843 26780 t nil))
 (ann_program_defines_MVA_vars 0
  (ann_program_defines_MVA_vars-1 nil 3389956467 3392572683
   ("" (skosimp*)
    ((""
      (expand* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store"
       "is_ghost")
      (("" (use "ann_program_defines_MVA_vars2")
        (("" (assert)
          (("" (skosimp*)
            (("" (expand "id")
              (("" (expand "var_names")
                (("" (expand "getGhostDecls")
                  (("" (split 1)
                    (("1" (inst? -11)
                      (("1" (assert)
                        (("1" (inst? 1)
                          (("1" (assert)
                            (("1" (inst? 1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst? -12)
                        (("2" (assert)
                          (("2" (inst? -7)
                            (("2" (assert)
                              (("2"
                                (skosimp*)
                                (("2"
                                  (inst? 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst? 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (inst? -12)
                        (("3" (assert)
                          (("3" (inst? -8)
                            (("3" (assert)
                              (("3"
                                (skosimp*)
                                (("3"
                                  (inst? 1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst?)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((is_ghost const-decl "boolean" SemanticsJML nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (getGhostDecls const-decl "finite_set[FieldDecl]" ProgramFunctions
     nil)
    (name_of const-decl "(injective?[CP, string])" AnnotateProgram nil)
    (injective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cp const-decl "string" AnnotateProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (character type-decl nil character_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (char? adt-recognizer-decl "[character -> boolean]" character_adt
     nil)
    (char type-eq-decl nil strings nil)
    (string type-eq-decl nil strings nil)
    (CP formal-nonempty-type-decl nil AnnotateProgramProperties nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (EventType type-decl nil EventType_adt nil)
    (Event type-eq-decl nil MVA nil) (Action type-eq-decl nil MVA nil)
    (Guard type-eq-decl nil MVA nil)
    (Transition type-eq-decl nil MVA nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (MVAVarDecl type-eq-decl nil MVA nil)
    (ProgVarDecl type-eq-decl nil MVA nil)
    (MVA type-eq-decl nil MVA nil)
    (complete const-decl "boolean" MVASemantics nil)
    (Program type-eq-decl nil Program nil)
    (MonitoredProgramPre type-eq-decl nil MonitoredProgram nil)
    (compatible const-decl "boolean" MonitoredProgram nil)
    (MonitoredProgram type-eq-decl nil MonitoredProgram nil)
    (FieldDecl type-eq-decl nil Program nil)
    (Expr type-decl nil Expr_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-decl nil Stmt_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (ann_program_defines_MVA_vars2 formula-decl nil
     AnnotateProgramProperties nil))
   395358 26210 t shostak)))

