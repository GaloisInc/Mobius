(|VariableNames|
 (|IMP_MonitoredProgram_TCC1| 0
  (|IMP_MonitoredProgram_TCC1-1| NIL 3398144119 3398144575
   ("" (EXISTENCE-TCC) NIL NIL) UNFINISHED NIL 40 41 NIL NIL))
 (|IMP_MonitoredProgram_TCC2| 0
  (|IMP_MonitoredProgram_TCC2-1| NIL 3398144119 3398144576
   ("" (EXISTENCE-TCC) NIL NIL) UNFINISHED NIL 41 40 NIL NIL))
 (|cp_TCC1| 0
  (|cp_TCC1-1| NIL 3396601202 3398144578
   (""
    (INST 1
     "LAMBDA(mp : MonitoredProgram) : choose({n : Name | NOT forbidden_names(mp)(n)})")
    (("" (SKOSIMP*)
      ((""
        (CASE
            "NOT is_finite(difference({n : Name | TRUE}, forbidden_names(mp!1)))")
        (("1"
          (CASE-REPLACE
           "difference({n: Name | TRUE}, forbidden_names(mp!1)) = {n : Name | NOT forbidden_names(mp!1)(n)}"
           :HIDE? T)
          (("1" (USE "infinite_nonempty[Name]") NIL NIL)
           ("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (USE "infinite_difference[Name]")
          (("1" (USE "infinite_namespace") NIL NIL)
           ("2" (TYPEPRED "reserved_words")
            (("2" (TYPEPRED "declared_var_names(program(mp!1))")
              (("2" (TYPEPRED "var_names(mva(mp!1))")
                (("2" (EXPAND "forbidden_names") (("2" (PROPAX) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|infinite_difference| JUDGEMENT-TCC NIL |infinite_sets_def| NIL)
    (|infinite_namespace| FORMULA-DECL NIL |VariableNames| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|infinite_set| TYPE-EQ-DECL NIL |infinite_sets_def| NIL)
    (|mp!1| SKOLEM-CONST-DECL "MonitoredProgram[CP, Name]" |VariableNames| NIL)
    (|infinite_nonempty| JUDGEMENT-TCC NIL |infinite_sets_def| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |VariableNames| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |VariableNames| NIL))
   232 232 T NIL)))
(|NewVariableDeclarations|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-2| NIL 3397386732 3398144578
   (";;; Proof IMP_VariableNames_TCC1-1 for formula AnnotateProgram.IMP_VariableNames_TCC1"
    (USE "infinite_namespace") NIL
    ";;; developed with SHOSTAK decision procedures")
   PROVED
   ((|infinite_namespace| FORMULA-DECL NIL |NewVariableDeclarations| NIL)) 0 0
   NIL NIL)
  (|IMP_VariableNames_TCC1-1| NIL 3397386612 NIL ("" (ASSUMING-TCC) NIL NIL)
   NIL NIL NIL NIL NIL NIL))
 (|name_of_TCC1| 0
  (|name_of_TCC1-2| NIL 3397386758 3398144579
   (";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
    (USE "name_of_exists")
    ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
      (SKOSIMP*)
      ((";;; Proof name_of_TCC1-1 for formula AnnotateProgram.name_of_TCC1"
        (INST?) NIL))))
    ";;; developed with SHOSTAK decision procedures")
   PROVED
   ((|f!1| SKOLEM-CONST-DECL "[mp: (wf_MP) -> [CP -> (legal_names(mp))]]"
     |NewVariableDeclarations| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of_exists| FORMULA-DECL NIL |NewVariableDeclarations| NIL))
   133 132 NIL NIL)
  (|name_of_TCC1-1| NIL 3397386612 NIL ("" (EXISTENCE-TCC) NIL NIL) NIL NIL NIL
   NIL NIL NIL))
 (|unique_TCC1| 0
  (|unique_TCC1-2| NIL 3397386786 3398144580
   (";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
    (USE "CP_is_enumerable")
    ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
      (SKOSIMP*)
      ((";;; Proof unique_TCC1-1 for formula AnnotateProgram.unique_TCC1"
        (INST?) NIL))))
    ";;; developed with SHOSTAK decision procedures")
   PROVED
   ((|f!1| SKOLEM-CONST-DECL "[CP -> nat]" |NewVariableDeclarations| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|CP_is_enumerable| FORMULA-DECL NIL |NewVariableDeclarations| NIL))
   67 67 NIL NIL)
  (|unique_TCC1-1| NIL 3397386612 NIL ("" (EXISTENCE-TCC) NIL NIL) NIL NIL NIL
   NIL NIL NIL))
 (|new_cp_gvd_TCC1| 0
  (|new_cp_gvd_TCC1-1| NIL 3398096023 3398144582 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL))
   187 187 NIL NIL))
 (|new_cps_gvds_TCC1| 0
  (|new_cps_gvds_TCC1-1| NIL 3398096023 3398144584
   ("" (SKOSIMP*)
    (("" (TYPEPRED "cps(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (q: (cps(mva(mp!1)))):
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))})) : f!1(choose({
(q: (cps(mva(mp!1))))|
                       name(gd) = name_of(mp!1)(q) AND
                        jtype(gd) = IntType AND
                         init_val(gd) = Int[Name](unique(q))}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST? -1)
                  (("1" (ASSERT)
                    (("1" (SPLIT -1)
                      (("1" (ASSERT)
                        (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL)
                   ("2" (REWRITE "nonempty_exists")
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOSIMP*)
                        (("2" (INST 1 "q!1") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "nonempty_exists")
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOSIMP*)
                        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "gd!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "(cps(mva(mp!1)))" |NewVariableDeclarations| NIL)
    (|gd!1| SKOLEM-CONST-DECL "({gd: FieldDecl[Name] |
    EXISTS (q: (cps(mva(mp!1)))):
      name(gd) = name_of(mp!1)(q) AND
       jtype(gd) = IntType AND init_val(gd) = Int[Name](unique(q))})"
     |NewVariableDeclarations| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({gd: FieldDecl[Name] |
    EXISTS (q: (cps(mva(mp!1)))):
      name(gd) = name_of(mp!1)(q) AND
       jtype(gd) = IntType AND init_val(gd) = Int[Name](unique(q))})"
     |NewVariableDeclarations| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({gd: FieldDecl[Name] |
    EXISTS (q: (cps(mva(mp!1)))):
      name(gd) = name_of(mp!1)(q) AND
       jtype(gd) = IntType AND init_val(gd) = Int[Name](unique(q))})"
     |NewVariableDeclarations| NIL)
    (|q!1| SKOLEM-CONST-DECL "(cps(mva(mp!1)))" |NewVariableDeclarations| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|q!1| SKOLEM-CONST-DECL "(cps(mva(mp!1)))" |NewVariableDeclarations| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP[CP, Name])" |NewVariableDeclarations|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   208 208 T NIL))
 (|new_mva_vars_gvds_TCC1| 0
  (|new_mva_vars_gvds_TCC1-1| NIL 3398096023 3398144585
   ("" (SKOSIMP*)
    (("" (TYPEPRED "vdsA(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(gd : ({gd: FieldDecl[Name] |
                     EXISTS (v: (vdsA(mva(mp!1)))):
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)})) : f!1(choose({
                     (v: (vdsA(mva(mp!1)))) |
                       name(gd) = name(v) AND
                        jtype(gd) = jtype(v) AND
                         init_val(gd) = init_val(v)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST? -1 :WHERE -2)
                  (("1" (ASSERT)
                    (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                   ("2" (REWRITE "nonempty_exists")
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOSIMP*)
                        (("2" (INST 1 "v!1") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "nonempty_exists")
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOSIMP*)
                        (("3" (INST 1 "v!1") (("3" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "gd!1")
                (("2" (REWRITE "nonempty_exists")
                  (("2" (SKOSIMP*)
                    (("2" (INST 1 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|v!1| SKOLEM-CONST-DECL "(vdsA(mva(mp!1)))" |NewVariableDeclarations| NIL)
    (|gd!1| SKOLEM-CONST-DECL "({gd: FieldDecl[Name] |
    EXISTS (v: (vdsA(mva(mp!1)))):
      name(gd) = name(v) AND
       jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)})"
     |NewVariableDeclarations| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({gd: FieldDecl[Name] |
    EXISTS (v: (vdsA(mva(mp!1)))):
      name(gd) = name(v) AND
       jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)})"
     |NewVariableDeclarations| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({gd: FieldDecl[Name] |
    EXISTS (v: (vdsA(mva(mp!1)))):
      name(gd) = name(v) AND
       jtype(gd) = jtype(v) AND init_val(gd) = init_val(v)})"
     |NewVariableDeclarations| NIL)
    (|v!1| SKOLEM-CONST-DECL "(vdsA(mva(mp!1)))" |NewVariableDeclarations| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|v!1| SKOLEM-CONST-DECL "(vdsA(mva(mp!1)))" |NewVariableDeclarations| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP[CP, Name])" |NewVariableDeclarations|
     NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   63 63 T NIL))
 (|new_vars_derived_from_mp| 0
  (|new_vars_derived_from_mp-1| NIL 3397386643 3398144591
   ("" (SKOSIMP*)
    (("" (EXPAND "var_names")
      (("" (EXPAND "new_gvds")
        (("" (SPLIT 1)
          (("1" (INST 1 "new_cp_gvd(mp!1)") (("1" (GRIND) NIL NIL)) NIL)
           ("2" (SKOSIMP*)
            (("2"
              (INST 1
               "(# jtype := IntType, name := name_of(mp!1)(q!1), init_val := Int(unique(q!1)) #)")
              (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
            NIL)
           ("3" (SKOSIMP*)
            (("3"
              (INST 1
               "(# jtype := jtype(v!1), name := name(v!1), init_val := init_val(v!1) #)")
              (("3" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |NewVariableDeclarations| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |NewVariableDeclarations| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL))
   616 616 T NIL))
 (|wf_new_vars| 0
  (|wf_new_vars-1| NIL 3397386628 3398144607
   ("" (SKOSIMP*)
    (("" (AUTO-REWRITE ("empty?" "disjoint?" "intersection" "member" "union"))
      (("" (SPLIT 1)
        (("1" (SKOSIMP*)
          (("1" (TYPEPRED "name_of(mp!1)(q!1)") (("1" (GRIND) NIL NIL)) NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (TYPEPRED "cp(mp!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)
         ("3" (SKOSIMP*)
          (("3" (TYPEPRED "name_of(mp!1)(q!1)") (("3" (GRIND) NIL NIL)) NIL))
          NIL)
         ("4" (ASSERT)
          (("4" (SKOSIMP*)
            (("4" (EXPAND "new_gvds")
              (("4" (REWRITE "add_as_union")
                (("4" (REWRITE "var_names_union")
                  (("4" (REWRITE "var_names_union")
                    (("4" (ASSERT)
                      (("4" (EXPAND "var_names")
                        (("4" (SPLIT -1)
                          (("1" (SKOSIMP*)
                            (("1" (EXPAND "new_cps_gvds")
                              (("1" (SKOSIMP*)
                                (("1" (TYPEPRED "name_of(mp!1)(q!1)")
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (EXPAND "new_mva_vars_gvds")
                              (("2" (SKOSIMP*)
                                (("2" (CASE-REPLACE "f!1 = v!1" :HIDE? T)
                                  (("1" (TYPEPRED "v!1")
                                    (("1" (TYPEPRED "mp!1")
                                      (("1" (EXPAND "wf_MP")
                                        (("1" (EXPAND "wf_MVA")
                                          (("1" (EXPAND "wf_vdsA")
                                            (("1" (FLATTEN)
                                              (("1" (ASSERT)
                                                (("1" (INST? -4)
                                                  (("1" (ASSERT)
                                                    (("1" (EXPAND "var_names")
                                                      (("1" (INST? 2)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (SKOSIMP*)
                            (("3" (TYPEPRED "cp(mp!1)") (("3" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (ASSERT)
          (("5" (SKOSIMP*)
            (("5" (EXPAND "new_gvds")
              (("5" (REWRITE "add_as_union")
                (("5" (REWRITE "var_names_union")
                  (("5" (REWRITE "var_names_union")
                    (("5" (ASSERT)
                      (("5" (EXPAND "var_names")
                        (("5" (SPLIT -1)
                          (("1" (SKOSIMP*)
                            (("1" (EXPAND "new_cps_gvds")
                              (("1" (SKOSIMP*)
                                (("1" (TYPEPRED "name_of(mp!1)(q!1)")
                                  (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (EXPAND "new_mva_vars_gvds")
                              (("2" (SKOSIMP*)
                                (("2" (TYPEPRED "mp!1")
                                  (("2" (EXPAND "compatible")
                                    (("2" (FLATTEN)
                                      (("2"
                                        (EXPAND
                                         "MVA_aut_vars_are_not_prog_vars")
                                        (("2"
                                          (CASE-REPLACE "f!1 = v!1" :HIDE? T)
                                          (("1" (TYPEPRED "v!1")
                                            (("1" (INST?)
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                            NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (SKOSIMP*)
                            (("3" (TYPEPRED "cp(mp!1)")
                              (("3" (EXPAND "new_cp_gvd")
                                (("3" (EXPAND "singleton")
                                  (("3" (REPLACE -1 :HIDE? T)
                                    (("3" (ASSERT)
                                      (("3" (EXPAND "forbidden_names")
                                        (("3" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|MVA_aut_vars_are_not_prog_vars| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" MVA NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   1602 1601 T NIL))
 (|cp_new_ghostvar| 0
  (|cp_new_ghostvar-1| NIL 3398086579 3398144614
   ("" (SKOSIMP*)
    (("" (EXPAND "new_gvds")
      (("" (REWRITE "add_as_union")
        (("" (REWRITE "var_names_union")
          (("" (REWRITE "var_names_union")
            (("" (AUTO-REWRITE "union" "singleton" "member")
              (("" (ASSERT) (("" (FLATTEN) (("" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |NewVariableDeclarations| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL))
   661 661 T SHOSTAK))
 (|halted_new_ghostvar| 0
  (|halted_new_ghostvar-1| NIL 3398086655 3398144614
   ("" (SKOSIMP*)
    (("" (EXPAND "new_gvds")
      (("" (REWRITE "add_as_union")
        (("" (REWRITE "var_names_union")
          (("" (REWRITE "var_names_union")
            (("" (AUTO-REWRITE "union" "singleton" "member")
              (("" (ASSERT)
                (("" (FLATTEN)
                  (("" (EXPAND "var_names")
                    (("" (ASSERT)
                      ((""
                        (INST 1
                         "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                        (("1" (ASSERT)
                          (("1" (EXPAND "halted")
                            (("1" (EXPAND "new_cps_gvds")
                              (("1" (INST 1 "halted")
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "mva(mp!1)")
                                    (("1" (EXPAND "complete")
                                      (("1" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "defined?") (("2" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |NewVariableDeclarations| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|halted| CONST-DECL "CP" MVA NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |NewVariableDeclarations| NIL)
    (|union| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL))
   62 62 T SHOSTAK)))
(|AnnotateProgram|
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396601203 3398144614
   ("" (USE "infinite_namespace") NIL NIL) PROVED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateProgram| NIL)) 0 0 T NIL))
 (|IMP_NewVariableDeclarations_TCC1| 0
  (|IMP_NewVariableDeclarations_TCC1-1| NIL 3397387554 3398144614
   ("" (USE "CP_is_enumerable") NIL NIL) PROVED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgram| NIL)) 1 0 T NIL))
 (|IMP_NewVariableDeclarations_TCC2| 0
  (|IMP_NewVariableDeclarations_TCC2-1| NIL 3397387554 3398144614
   ("" (USE "name_of_exists") NIL NIL) PROVED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateProgram| NIL)) 1 1 T NIL))
 (|ann_action_TCC1| 0
  (|ann_action_TCC1-1| NIL 3383987003 3398144614 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL))
   6 5 NIL NIL))
 (|ann_guard_actions_set_TCC1| 0
  (|ann_guard_actions_set_TCC1-1| NIL 3398100725 3398145876
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(x :({x: [BoolExpr[Name], Stmt[Name]] |
                     EXISTS (t: Transition[CP, Name]):
                       ts!1(t) AND
                        x =
                         (guard_to_expression[CP, Name]
                              (mva(mp!1))(guard(t)),
                          update_vars(mp!1)(t))})) : f!1(choose({t : Transition[CP, Name] |  ts!1(t) AND
                        x =
                         (guard_to_expression[CP, Name]
                              (mva(mp!1))(guard(t)),
                          update_vars(mp!1)(t))}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL)
                   ("2" (REWRITE "nonempty_exists")
                    (("2" (TYPEPRED "x2!1")
                      (("2" (SKOSIMP*)
                        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (REWRITE "nonempty_exists")
                    (("3" (TYPEPRED "x1!1")
                      (("3" (SKOSIMP*)
                        (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (REWRITE "nonempty_exists")
                (("2" (TYPEPRED "x!1")
                  (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|x!1| SKOLEM-CONST-DECL "({x: [BoolExpr[Name], Stmt[Name]] |
    EXISTS (t: Transition[CP, Name]):
      ts!1(t) AND
       x =
        (guard_to_expression[CP, Name](mva(mp!1))(guard(t)),
         update_vars(mp!1)(t))})"
     |AnnotateProgram| NIL)
    (|t!1| SKOLEM-CONST-DECL "Transition[CP, Name]" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({x: [BoolExpr[Name], Stmt[Name]] |
    EXISTS (t: Transition[CP, Name]):
      ts!1(t) AND
       x =
        (guard_to_expression[CP, Name](mva(mp!1))(guard(t)),
         update_vars(mp!1)(t))})"
     |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({x: [BoolExpr[Name], Stmt[Name]] |
    EXISTS (t: Transition[CP, Name]):
      ts!1(t) AND
       x =
        (guard_to_expression[CP, Name](mva(mp!1))(guard(t)),
         update_vars(mp!1)(t))})"
     |AnnotateProgram| NIL)
    (|t!1| SKOLEM-CONST-DECL "Transition[CP, Name]" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|t!1| SKOLEM-CONST-DECL "Transition[CP, Name]" |AnnotateProgram| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ts!1| SKOLEM-CONST-DECL "finite_set[Transition[CP, Name]]"
     |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|Store| TYPE-EQ-DECL NIL |State| NIL) (|PSt| TYPE-EQ-DECL NIL |State| NIL)
    (|guard_to_expression| CONST-DECL "BoolExpr" |MVASemantics| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP[CP, Name])" |AnnotateProgram| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   10646 318 T NIL))
 (|ann_event_set_TCC1| 0
  (|ann_event_set_TCC1-2| NIL 3398099362 3398144709
   (";;; Proof for formula AnnotateProgram.ann_event_TCC1" (SKOSIMP*)
    ((";;; Proof for formula AnnotateProgram.ann_event_TCC1" (TYPEPRED "ts!1")
      ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
        (EXPAND "is_finite")
        ((";;; Proof for formula AnnotateProgram.ann_event_TCC1" (SKOSIMP*)
          ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
            (INST 1 "N!1" "LAMBDA(t :
                      ({t: Transition[CP, Name] |
                           ts!1(t) AND scp(t) = q!1})) : f!1(t)")
            ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
              (EXPAND "injective?")
              ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
                (SKOSIMP*)
                ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
                  (INST?)
                  ((";;; Proof for formula AnnotateProgram.ann_event_TCC1"
                    (ASSERT) NIL))))))))))))))))
    "")
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   34 34 NIL NIL)
  (|ann_event_set_TCC1-1| NIL 3398099323 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   NIL NIL NIL NIL))
 (|ann_event_set_TCC2| 0
  (|ann_event_set_TCC2-1| NIL 3398099323 3398144739
   ("" (SKOSIMP*)
    (("" (TYPEPRED "cps(mva(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: [BoolExpr[Name], Stmt[Name]] |
                           EXISTS (q: CP):
                             cps(mva(mp!1))(q) AND
                              nonempty?[Transition[CP, Name]]
                                  ({t: Transition[CP, Name] |
                                      ts!1(t) AND scp(t) = q})
                               AND
                               c =
                                ann_trans_cp(mp!1)
                                            (q,
                                             {t: Transition[CP, Name]
                                              |
                                              ts!1(t) AND scp(t) = q})})) : f!1(choose({q : CP | cps(mva(mp!1))(q) AND
                              nonempty?[Transition[CP, Name]]
                                  ({t: Transition[CP, Name] |
                                      ts!1(t) AND scp(t) = q})
                               AND
                               c =
                                ann_trans_cp(mp!1)
                                            (q,
                                             {t: Transition[CP, Name]
                                              |
                                              ts!1(t) AND scp(t) = q})}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (INST?)
                  (("1" (ASSERT)
                    (("1" (HIDE -2)
                      (("1"
                        (NAME "q1"
                              "choose({q: CP |
                                       cps(mva(mp!1))(q) AND
                                        nonempty?[Transition[CP, Name]]
                                            ({t: Transition[CP, Name] |
                                                ts!1(t) AND scp(t) = q})
                                         AND
                                         x1!1 =
                                          ann_trans_cp(mp!1)
                                                      (q,
                                                       {t: Transition[CP, Name] |
                                                          ts!1(t) AND scp(t) = q})})")
                        (("1"
                          (NAME "q2"
                                "choose({q: CP |
                                           cps(mva(mp!1))(q) AND
                                            nonempty?[Transition[CP, Name]]
                                                ({t: Transition[CP, Name] |
                                                    ts!1(t) AND scp(t) = q})
                                             AND
                                             x2!1 =
                                              ann_trans_cp(mp!1)
                                                          (q,
                                                           {t: Transition[CP, Name] |
                                                              ts!1(t) AND scp(t) = q})})")
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2)
                              (("1"
                                (CASE
                                    "ann_trans_cp(mp!1)(q1, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q1}) = x1!1")
                                (("1"
                                  (CASE
                                      "ann_trans_cp(mp!1)(q2, {t : Transition[CP, Name] | ts!1(t) AND scp(t) = q2}) = x2!1")
                                  (("1" (REPLACE -5) (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (REPLACE -2 :DIR RL)
                                    (("2" (ASSERT) NIL NIL)) NIL)
                                   ("3" (TYPEPRED "ts!1")
                                    (("3" (EXPAND "is_finite")
                                      (("3" (SKOSIMP*)
                                        (("3" (INST 1 "N!2" "f!2")
                                          (("3" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (REPLACE -1 :DIR RL)
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (TYPEPRED "ts!1")
                                  (("3" (EXPAND "is_finite")
                                    (("3" (SKOSIMP*)
                                      (("3" (INST 1 "N!2" "f!2")
                                        (("3" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "x2!1")
                            (("2" (SKOSIMP*)
                              (("2" (REWRITE "nonempty_exists" 1)
                                (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (TYPEPRED "x1!1")
                          (("2" (SKOSIMP*)
                            (("2" (REWRITE "nonempty_exists" 1)
                              (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (SKOSIMP*)
                                (("2" (TYPEPRED "ts!1")
                                  (("2" (EXPAND "is_finite")
                                    (("2" (SKOSIMP*)
                                      (("2" (INST 1 "N!2" "f!2")
                                        (("2" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (SKOSIMP*)
                          (("3" (TYPEPRED "ts!1")
                            (("3" (EXPAND "is_finite")
                              (("3" (SKOSIMP*)
                                (("3" (INST 1 "N!2" "f!2")
                                  (("3" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "x2!1")
                    (("2" (SKOSIMP*)
                      (("2" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "x1!1")
                    (("3" (SKOSIMP*)
                      (("3" (REWRITE "nonempty_exists" 1)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (SKOSIMP*)
                          (("2" (TYPEPRED "ts!1")
                            (("2" (EXPAND "is_finite")
                              (("2" (SKOSIMP*)
                                (("2" (INST 1 "N!2" "f!2")
                                  (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (SKOSIMP*)
                    (("4" (TYPEPRED "ts!1")
                      (("4" (EXPAND "is_finite")
                        (("4" (SKOSIMP*)
                          (("4" (INST 1 "N!2" "f!2") (("4" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists" 1)
                    (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (SKOSIMP*)
                      (("2" (TYPEPRED "ts!1")
                        (("2" (EXPAND "is_finite")
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "N!2" "f!2") (("2" (GRIND) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (SKOSIMP*)
              (("3" (TYPEPRED "ts!1")
                (("3" (EXPAND "is_finite")
                  (("3" (SKOSIMP*)
                    (("3" (INST 1 "N!2" "f!2") (("3" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|c!1| SKOLEM-CONST-DECL "({c: [BoolExpr[Name], Stmt[Name]] |
    EXISTS (q: CP):
      cps(mva(mp!1))(q) AND
       nonempty?[Transition[CP, Name]]
           ({t: Transition[CP, Name] | ts!1(t) AND scp(t) = q})
        AND
        c =
         ann_trans_cp(mp!1)
                     (q,
                      {t: Transition[CP, Name] | ts!1(t) AND scp(t) = q})})"
     |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({c: [BoolExpr[Name], Stmt[Name]] |
    EXISTS (q: CP):
      cps(mva(mp!1))(q) AND
       nonempty?[Transition[CP, Name]]
           ({t: Transition[CP, Name] | ts!1(t) AND scp(t) = q})
        AND
        c =
         ann_trans_cp(mp!1)
                     (q,
                      {t: Transition[CP, Name] | ts!1(t) AND scp(t) = q})})"
     |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({c: [BoolExpr[Name], Stmt[Name]] |
    EXISTS (q: CP):
      cps(mva(mp!1))(q) AND
       nonempty?[Transition[CP, Name]]
           ({t: Transition[CP, Name] | ts!1(t) AND scp(t) = q})
        AND
        c =
         ann_trans_cp(mp!1)
                     (q,
                      {t: Transition[CP, Name] | ts!1(t) AND scp(t) = q})})"
     |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (|ann_guard_actions| CONST-DECL "list[[BoolExpr, Stmt]]" |AnnotateProgram|
     NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|ann_guard_actions_set| CONST-DECL "finite_set[[BoolExpr, Stmt]]"
     |AnnotateProgram| NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgram| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP[CP, Name])" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|ts!1| SKOLEM-CONST-DECL "finite_set[Transition[CP, Name]]"
     |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_trans_cp| CONST-DECL "[BoolExpr, Stmt]" |AnnotateProgram| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   2994 2983 T NIL))
 (|filter_event_TCC1| 0
  (|filter_event_TCC1-1| NIL 3383987003 3398144741
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ts(a!1)")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(t : ({t: Transition[CP, Name] |
                       ts(a!1)(t) AND
                        etype(event(t)) = et!1 AND mname(event(t)) = m!1})) : f!1(t)")
            (("" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   235 231 T NIL))
 (|ann_method_TCC1| 0
  (|ann_method_TCC1-1| NIL 3389418364 3398144742
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "wf_MP" "complete") (("" (FLATTEN) NIL NIL)) NIL)) NIL)
   PROVED
   ((|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   38 36 T NIL))
 (|ann_methods_TCC1| 0
  (|ann_methods_TCC1-1| NIL 3383987003 3398144743
   ("" (SKOSIMP*)
    (("" (TYPEPRED "ms!1")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(m : ({m: Method[Name] |
                       EXISTS (n: Method[Name]):
                         ms!1(n) AND m = ann_method(mp!1)(n)})) : f!1(choose({n : Method[Name] | ms!1(n) AND m = ann_method(mp!1)(n)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "n!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "m!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|m!1| SKOLEM-CONST-DECL "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     |AnnotateProgram| NIL)
    (|n!1| SKOLEM-CONST-DECL "Method[Name]" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|n!2| SKOLEM-CONST-DECL "Method[Name]" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|n!1| SKOLEM-CONST-DECL "Method[Name]" |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     |AnnotateProgram| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({m: Method[Name] |
    EXISTS (n: Method[Name]): ms!1(n) AND m = ann_method(mp!1)(n)})"
     |AnnotateProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ms!1| SKOLEM-CONST-DECL "finite_set[Method[Name]]" |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP[CP, Name])" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   89 87 T NIL))
 (|ann_program_TCC1| 0
  (|ann_program_TCC1-1| NIL 3383987003 3398144744
   ("" (SKOSIMP)
    (("" (TYPEPRED "classes(program(mp!1))")
      (("" (EXPAND "is_finite")
        (("" (SKOSIMP*)
          ((""
            (INST 1 "N!1" "LAMBDA(c : ({c: Class[Name] |
                         EXISTS (c1: Class[Name]):
                           classes(program(mp!1))(c1) AND
                            c = ann_class(mp!1)(c1)})) : f!1(choose({c1 : Class[Name] | classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)}))")
            (("1" (EXPAND "injective?")
              (("1" (SKOSIMP*)
                (("1" (TYPEPRED "x1!1")
                  (("1" (TYPEPRED "x2!1")
                    (("1" (SKOSIMP*)
                      (("1" (INST? -5 :WHERE -6)
                        (("1" (ASSERT) NIL NIL)
                         ("2" (REWRITE "nonempty_exists")
                          (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("3" (REWRITE "nonempty_exists")
                          (("3" (INST 1 "c1!2") (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (SKOSIMP*)
              (("2" (TYPEPRED "c!1")
                (("2" (SKOSIMP*)
                  (("2" (REWRITE "nonempty_exists")
                    (("2" (INST 1 "c1!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgram| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|c!1| SKOLEM-CONST-DECL "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     |AnnotateProgram| NIL)
    (|c1!1| SKOLEM-CONST-DECL "Class[Name]" |AnnotateProgram| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|c1!2| SKOLEM-CONST-DECL "Class[Name]" |AnnotateProgram| NIL)
    (|nonempty_exists| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|c1!1| SKOLEM-CONST-DECL "Class[Name]" |AnnotateProgram| NIL)
    (|x1!1| SKOLEM-CONST-DECL "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     |AnnotateProgram| NIL)
    (|x2!1| SKOLEM-CONST-DECL "({c: Class[Name] |
    EXISTS (c1: Class[Name]):
      classes(program(mp!1))(c1) AND c = ann_class(mp!1)(c1)})"
     |AnnotateProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP[CP, Name])" |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   96 94 T NIL)))
(|AnnotateProgramProperties|
 (|CP_is_enumerable| 0
  (|CP_is_enumerable-1| NIL 3392611795 3392611802 ("" (POSTPONE) NIL NIL)
   UNCHECKED NIL 7000 150 T SHOSTAK))
 (|IMP_VariableNames_TCC1| 0
  (|IMP_VariableNames_TCC1-1| NIL 3396601223 3398144744
   ("" (USE "infinite_namespace") NIL NIL) PROVED
   ((|infinite_namespace| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 1
   1 T NIL))
 (|IMP_AnnotateProgram_TCC1| 0
  (|IMP_AnnotateProgram_TCC1-1| NIL 3390292134 3398144744
   ("" (USE "CP_is_enumerable") NIL NIL) PROVED
   ((|CP_is_enumerable| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 1 0
   T NIL))
 (|IMP_AnnotateProgram_TCC2| 0
  (|IMP_AnnotateProgram_TCC2-1| NIL 3395037658 3398144744
   ("" (USE "name_of_exists") NIL NIL) PROVED
   ((|name_of_exists| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)) 0 0 T
   NIL))
 (|ann_program_class_correspondence| 0
  (|ann_program_class_correspondence-1| NIL 3392569211 3398144744
   ("" (SKOSIMP*) (("" (EXPAND "ann_program") (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   PROVED ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)) 2 2 T
   SHOSTAK))
 (|ann_program_method_correspondence| 0
  (|ann_program_method_correspondence-1| NIL 3392569244 3398144745
   ("" (SKOSIMP*)
    (("" (USE "ann_program_class_correspondence")
      (("" (ASSERT)
        (("" (SKOSIMP*)
          (("" (EXPAND* "ann_class" "ann_methods")
            (("" (INST 1 "c1!1" _)
              (("" (ASSERT)
                (("" (LIFT-IF)
                  (("" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (REPLACE -2 -5) (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (FLATTEN)
                      (("2" (ASSERT)
                        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL))
   116 116 T SHOSTAK))
 (|ann_program_preserves_var_decls| 0
  (|ann_program_preserves_var_decls-1| NIL 3392566301 3398144747
   ("" (SKOSIMP*)
    (("" (SPLIT)
      (("1" (EXPAND* "ann_program" "getFieldDecls")
        (("1" (APPLY-EXTENSIONALITY :HIDE? T)
          (("1" (IFF)
            (("1" (SPLIT)
              (("1" (SKOSIMP*)
                (("1" (INST 1 "ann_class(mp!1)(c!1)")
                  (("1" (SPLIT)
                    (("1" (INST?) NIL NIL)
                     ("2" (EXPAND "ann_class") (("2" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (INST?)
                  (("2" (ASSERT)
                    (("2" (EXPAND "ann_class")
                      (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "getLocalDecls")
        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
          (("2" (IFF)
            (("2" (SPLIT)
              (("1" (EXPAND "ann_program")
                (("1" (SKOSIMP*)
                  (("1" (CASE "name(c!1) = class_name(mva(mp!1))")
                    (("1"
                      (INST 1 "ann_class(mp!1)(c!1)" "ann_method(mp!1)(m!1)")
                      (("1" (SPLIT 1)
                        (("1" (INST?) NIL NIL)
                         ("2" (EXPAND* "ann_class" "ann_methods")
                          (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL)) NIL)
                         ("3" (EXPAND "ann_method") (("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (INST 2 "ann_class(mp!1)(c!1)" "m!1")
                      (("2" (SPLIT 2)
                        (("1" (INST?) NIL NIL)
                         ("2" (EXPAND "ann_class") (("2" (ASSERT) NIL NIL))
                          NIL)
                         ("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKOSIMP*)
                (("2" (USE "ann_program_method_correspondence")
                  (("2" (ASSERT)
                    (("2" (SKOSIMP*)
                      (("2" (SPLIT -)
                        (("1" (FLATTEN)
                          (("1" (INST 1 "c1!1" "m1!1")
                            (("1" (ASSERT)
                              (("1" (REPLACE -2)
                                (("1" (EXPAND "ann_method" -7)
                                  (("1" (PROPAX) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (FLATTEN)
                          (("2" (INST 2 "c1!1" "m1!1")
                            (("2" (ASSERT)
                              (("2" (REPLACE -1) (("2" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("3" (EXPAND* "subset?" "member")
        (("3" (SKOSIMP*)
          (("3" (EXPAND* "ann_program" "getGhostDecls")
            (("3" (SKOSIMP*)
              (("3" (INST 1 "ann_class(mp!1)(c!1)")
                (("3" (SPLIT)
                  (("1" (INST?) NIL NIL)
                   ("2" (EXPAND* "ann_class" "union" "member")
                    (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_program_method_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   193 191 T SHOSTAK))
 (|ann_program_preserves_var_decl_names| 0
  (|ann_program_preserves_var_decl_names-1| NIL 3392567558 3398144748
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (FLATTEN)
        (("" (REPLACE -1)
          (("" (REPLACE -2)
            (("" (ASSERT)
              (("" (EXPAND* "subset?" "member" "var_names")
                (("" (SKOSIMP*)
                  (("" (INST?)
                    (("" (ASSERT) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL))
   91 90 T SHOSTAK))
 (|ann_program_add_ghost_var_decls| 0
  (|ann_program_add_ghost_var_decls-1| NIL 3396607040 3398144749
   ("" (SKOSIMP*)
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (EXPAND "getGhostDecls")
        (("" (EXPAND "union")
          (("" (EXPAND "member")
            (("" (IFF)
              (("" (SPLIT 1)
                (("1" (SKOSIMP*)
                  (("1" (USE "ann_program_class_correspondence")
                    (("1" (ASSERT)
                      (("1" (SKOSIMP*)
                        (("1" (INST 1 "c1!1")
                          (("1" (ASSERT)
                            (("1" (REPLACE -2 :HIDE? T)
                              (("1" (EXPAND "ann_class")
                                (("1" (EXPAND "union")
                                  (("1" (EXPAND "member")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (SPLIT -1)
                    (("1" (SKOSIMP*)
                      (("1" (INST 1 "ann_class(mp!1)(c!1)")
                        (("1" (EXPAND "ann_program")
                          (("1" (SPLIT 1)
                            (("1" (INST?) NIL NIL)
                             ("2" (EXPAND "ann_class")
                              (("2" (ASSERT)
                                (("2" (EXPAND "union")
                                  (("2" (EXPAND "member")
                                    (("2" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "mp!1")
                      (("2" (EXPAND "compatible")
                        (("2" (FLATTEN)
                          (("2" (SKOSIMP*)
                            (("2" (INST 1 "ann_class(mp!1)(c!1)")
                              (("2" (EXPAND "ann_program")
                                (("2" (SPLIT 1)
                                  (("1" (INST?) NIL NIL)
                                   ("2" (EXPAND "ann_class")
                                    (("2" (EXPAND "union")
                                      (("2" (EXPAND "member")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   82 82 T SHOSTAK))
 (|ann_program_preserves_wf_state| 0
  (|ann_program_preserves_wf_state-1| NIL 3390298254 3398144749
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND "wf_state")
        (("" (SKOSIMP*)
          (("" (INST?)
            (("" (FLATTEN)
              (("" (REPLACE -1) (("" (REPLACE -2) (("" (PROP) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL))
   74 74 T SHOSTAK))
 (|ann_program_preserves_pstate_vars| 0
  (|ann_program_preserves_pstate_vars-1| NIL 3392567663 3398144750
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND "wf_state")
        (("" (FLATTEN)
          (("" (EXPAND "wf_state")
            (("" (REPLACE -1)
              (("" (REPLACE -2)
                (("" (INST?) (("" (INST?) (("" (PROP) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_state| CONST-DECL "boolean" |State| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL))
   96 95 T SHOSTAK))
 (|ann_program_preserves_ghoststate_vars| 0
  (|ann_program_preserves_ghoststate_vars-1| NIL 3392567791 3398144752
   ("" (SKOSIMP*)
    (("" (USE "ann_program_preserves_var_decls")
      (("" (EXPAND* "wf_state" "wf_ghoststate")
        (("" (FLATTEN)
          (("" (INST?)
            (("" (INST?)
              (("" (EXPAND* "id" "subset?" "member" "var_names")
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST?) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|wf_state| CONST-DECL "boolean" |MonitoredProgramSemantics| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL))
   133 133 T SHOSTAK))
 (|var_names_ann_method_body| 0
  (|var_names_ann_method_body-1| NIL 3397473331 3398144752
   ("" (SKOSIMP*) (("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL)) NIL)
   PROVED ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)) 4 5 T
   SHOSTAK))
 (|var_names_ann_method_pre| 0
  (|var_names_ann_method_pre-1| NIL 3397473370 3398144752
   ("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)) 4 4 T SHOSTAK))
 (|var_names_ann_method_post| 0
  (|var_names_ann_method_post-1| NIL 3397473379 3398144752
   ("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)) 21 21 T SHOSTAK))
 (|var_names_ann_method_pre_set_TCC1| 0
  (|var_names_ann_method_pre_set_TCC1-1| NIL 3397473576 3398144753
   ("" (SUBTYPE-TCC) NIL NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL))
   110 110 NIL NIL))
 (|var_names_ann_method_pre_set| 0
  (|var_names_ann_method_pre_set-1| NIL 3397473576 3398144753
   ("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)) 4 4 T SHOSTAK))
 (|var_names_ann_method_post_set_TCC1| 0
  (|var_names_ann_method_post_set_TCC1-1| NIL 3397473576 3398144754
   ("" (SUBTYPE-TCC) NIL NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL))
   74 74 NIL NIL))
 (|var_names_ann_method_post_set| 0
  (|var_names_ann_method_post_set-1| NIL 3397473582 3398144754
   ("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)) 22 22 T SHOSTAK))
 (|var_names_ann_method_exc_set_TCC1| 0
  (|var_names_ann_method_exc_set_TCC1-1| NIL 3397473576 3398144755
   ("" (SUBTYPE-TCC) NIL NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL))
   94 92 NIL NIL))
 (|var_names_ann_method_exc_set| 0
  (|var_names_ann_method_exc_set-1| NIL 3397473588 3398144755
   ("" (EXPAND "ann_method") (("" (PROPAX) NIL NIL)) NIL) PROVED
   ((|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)) 3 4 T SHOSTAK))
 (|var_names_ann_class_inv_TCC1| 0
  (|var_names_ann_class_inv_TCC1-1| NIL 3397473847 3398144756
   ("" (SUBTYPE-TCC) NIL NIL) PROVED
   ((|getFieldDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getLocalDecls| CONST-DECL "finite_set[LocalVarDecl]" |ProgramFunctions|
     NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|MVA_aut_vars_are_not_prog_vars| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|MVA_prog_vars_are_fields| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MVA_events_correspond_to_methods| CONST-DECL "boolean" |MonitoredProgram|
     NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|reserved_words| CONST-DECL "finite_set[Name]" |Program| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|wf_vdsA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_vdsP| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Guard| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   115 115 NIL NIL))
 (|var_names_ann_class_inv| 0
  (|var_names_ann_class_inv-1| NIL 3397473848 3398144757
   ("" (SKOSIMP*)
    (("" (EXPAND "ann_class")
      (("" (ASSERT) (("" (LIFT-IF) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL))
    NIL)
   PROVED ((|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)) 58 57 T
   SHOSTAK))
 (|var_names_ann_action| 0
  (|var_names_ann_action-1| NIL 3398142929 3398144758
   ("" (SKOLEM 1 (_ "n!1"))
    (("" (INDUCT "a")
      (("1" (GRIND) NIL NIL)
       ("2" (SKOSIMP*)
        (("2" (REWRITE "ann_action" 1)
          (("2" (REWRITE "var_names" 1)
            (("2" (REWRITE "var_names" 1)
              (("2" (AUTO-REWRITE "union" "add" "member")
                (("2" (ASSERT)
                  (("2" (REPLACE -1 :HIDE? T)
                    (("2" (IFF)
                      (("2" (PROP)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)
                         ("3" (SKOSIMP*)
                          (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)
                         ("4" (SKOSIMP*)
                          (("4" (SPLIT -1)
                            (("1" (ASSERT) NIL NIL)
                             ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|ann_action| DEF-DECL "Stmt" |AnnotateProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|Set| ADT-CONSTRUCTOR-DECL "[[Name, Expr] -> (Set?)]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL))
   159 158 T SHOSTAK))
 (|var_names_CaseJML_set2list| 0
  (|var_names_CaseJML_set2list-1| NIL 3398139097 3398144761
   ("" (SKOLEM 1 (_ "n!1"))
    ((""
      (USE
       "wf_induction[finite_set[[BoolExpr, Stmt]], LAMBDA(x, y : finite_set[[BoolExpr, Stmt]]) : card(x) < card(y)]")
      (("1" (SPLIT -1)
        (("1" (PROPAX) NIL NIL)
         ("2" (HIDE 2)
          (("2" (SKOSIMP*)
            (("2" (REWRITE "set2list" 1)
              (("2" (LIFT-IF)
                (("2" (SPLIT 1)
                  (("1" (SKOSIMP*)
                    (("1" (REWRITE "var_names" 1)
                      (("1" (IFF)
                        (("1" (PROP)
                          (("1" (GRIND) NIL NIL)
                           ("2" (SKOSIMP*)
                            (("2" (AUTO-REWRITE "empty?" "member")
                              (("2" (ASSERT) (("2" (INST? -3) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (SKOSIMP*)
                    (("2" (REWRITE "var_names" 2)
                      (("2" (AUTO-REWRITE "union" "member")
                        (("2" (ASSERT)
                          (("2" (INST?)
                            (("2" (ASSERT)
                              (("2" (REWRITE "card_remove")
                                (("2" (ASSERT)
                                  (("2" (REPLACE -1 :HIDE? T)
                                    (("2" (IFF)
                                      (("2" (SPLIT 2)
                                        (("1" (SKOSIMP*)
                                          (("1"
                                            (CASE
                                                "  var_names(PROJ_1(choose(x!1)))(n!1)")
                                            (("1" (INST?)
                                              (("1" (ASSERT) NIL NIL)) NIL)
                                             ("2" (ASSERT)
                                              (("2"
                                                (CASE
                                                    "var_names(PROJ_2(choose(x!1)))(n!1)")
                                                (("1" (INST?)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (SKOSIMP*)
                                                    (("2" (INST 3 "x!2")
                                                      (("2" (ASSERT)
                                                        (("2"
                                                          (REWRITE "remove")
                                                          (("2" (FLATTEN)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (EXPAND "nonempty?")
                                              (("3" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP*)
                                          (("2" (INST 3 "x!2")
                                            (("2" (REWRITE "remove")
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (USE "wf_card[[BoolExpr, Stmt]]") NIL NIL))
      NIL))
    NIL)
   PROVED
   ((|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|CaseJML| ADT-CONSTRUCTOR-DECL "[list[[BoolExpr, Stmt]] -> (CaseJML?)]"
     |Body_adt| NIL)
    (|set2list| DEF-DECL "list[T]" |set2list| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|wf_induction| FORMULA-DECL NIL |wf_induction| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|remove| CONST-DECL "set" |sets| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|wf_card| FORMULA-DECL NIL |WF_Card| NIL))
   217 216 T SHOSTAK))
 (|var_names_ann_event| 0
  (|var_names_ann_event-1| NIL 3398098253 3398144567
   ("" (SKOSIMP*)
    (("" (EXPAND "subset?" 1)
      (("" (EXPAND "member")
        (("" (SKOSIMP*)
          (("" (EXPAND "ann_event")
            (("" (REWRITE "var_names_CaseJML_set2list")
              (("" (SKOSIMP*)
                (("" (EXPAND "ann_event_set")
                  (("" (SKOSIMP*)
                    (("" (EXPAND "ann_trans_cp")
                      (("" (REPLACE -4 :HIDE? T)
                        (("" (AUTO-REWRITE "union" "member")
                          (("" (ASSERT)
                            (("" (REWRITE "var_names" -4)
                              (("" (REWRITE "var_names" -4)
                                (("" (REWRITE "var_names" -4)
                                  (("" (REWRITE "var_names" -4)
                                    (("" (REWRITE "var_names" -4)
                                      (("" (EXPAND "singleton")
                                        (("" (ASSERT)
                                          (("" (SPLIT -4)
                                            (("1" (REPLACE -1)
                                              (("1" (USE "cp_new_ghostvar")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL)
                                             ("2" (REPLACE -1)
                                              (("2" (FLATTEN)
                                                (("2" (EXPAND "new_gvds")
                                                  (("2"
                                                    (REWRITE "add_as_union")
                                                    (("2"
                                                      (REWRITE
                                                       "var_names_union")
                                                      (("2"
                                                        (REWRITE
                                                         "var_names_union")
                                                        (("2" (ASSERT)
                                                          (("2" (FLATTEN)
                                                            (("2"
                                                              (EXPAND
                                                               "new_cps_gvds")
                                                              (("2"
                                                                (EXPAND
                                                                 "var_names")
                                                                (("2"
                                                                  (INST 2
                                                                   "(# name := name_of(mp!1)(q!1), jtype := IntType, init_val := Int(unique(q!1)) #)")
                                                                  (("1"
                                                                    (INST 2
                                                                     "q!1")
                                                                    NIL NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "defined?")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (EXPAND "ann_guard_actions")
                                              (("3"
                                                (REWRITE
                                                 "var_names_CaseJML_set2list")
                                                (("1" (SKOSIMP*)
                                                  (("1"
                                                    (EXPAND
                                                     "ann_guard_actions_set")
                                                    (("1" (SKOSIMP*)
                                                      (("1" (REPLACE -3)
                                                        (("1"
                                                          (EXPAND
                                                           "update_vars")
                                                          (("1" (SPLIT -4)
                                                            (("1"
                                                              (USE
                                                               "var_names_guard_to_expresion")
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (EXPAND
                                                                   "subset?")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "member")
                                                                    (("1"
                                                                      (INST?
                                                                       -5)
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REWRITE
                                                               "var_names" -1)
                                                              (("2"
                                                                (REWRITE
                                                                 "var_names"
                                                                 -1)
                                                                (("2"
                                                                  (REWRITE
                                                                   "var_names"
                                                                   -1)
                                                                  (("2"
                                                                    (REWRITE
                                                                     "var_names"
                                                                     -1)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "add")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "singleton")
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (SPLIT
                                                                               -1)
                                                                              (("1"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("1"
                                                                                  (USE
                                                                                   "cp_new_ghostvar")
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "new_gvds")
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "add_as_union")
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "var_names_union")
                                                                                      (("2"
                                                                                        (REWRITE
                                                                                         "var_names_union")
                                                                                        (("2"
                                                                                          (ASSERT)
                                                                                          (("2"
                                                                                            (FLATTEN)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "new_cps_gvds")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "var_names")
                                                                                                (("2"
                                                                                                  (INST
                                                                                                   2
                                                                                                   "(# name := name_of(mp!1)(tcp(t!1)), jtype := IntType, init_val := Int(unique(tcp(t!1))) #)")
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     2
                                                                                                     "tcp(t!1)")
                                                                                                    (("1"
                                                                                                      (TYPEPRED
                                                                                                       "mp!1")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "wf_MP")
                                                                                                        (("1"
                                                                                                          (EXPAND
                                                                                                           "wf_MVA")
                                                                                                          (("1"
                                                                                                            (FLATTEN)
                                                                                                            (("1"
                                                                                                              (EXPAND
                                                                                                               "wf_Trans")
                                                                                                              (("1"
                                                                                                                (INST
                                                                                                                 -6
                                                                                                                 "t!1")
                                                                                                                (("1"
                                                                                                                  (ASSERT)
                                                                                                                  (("1"
                                                                                                                    (EXPAND
                                                                                                                     "subset?")
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       -11
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (EXPAND
                                                                                                                         "member")
                                                                                                                        (("1"
                                                                                                                          (PROPAX)
                                                                                                                          NIL
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (EXPAND
                                                                                                     "defined?")
                                                                                                    (("2"
                                                                                                      (PROPAX)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (REWRITE
                                                                                 "var_names_ann_action")
                                                                                (("3"
                                                                                  (SKOSIMP*)
                                                                                  (("3"
                                                                                    (TYPEPRED
                                                                                     "mp!1")
                                                                                    (("3"
                                                                                      (EXPAND
                                                                                       "wf_MP")
                                                                                      (("3"
                                                                                        (EXPAND
                                                                                         "wf_MVA")
                                                                                        (("3"
                                                                                          (FLATTEN)
                                                                                          (("3"
                                                                                            (INST
                                                                                             -6
                                                                                             "t!1")
                                                                                            (("3"
                                                                                              (EXPAND
                                                                                               "wf_Trans")
                                                                                              (("3"
                                                                                                (EXPAND
                                                                                                 "wf_Action")
                                                                                                (("3"
                                                                                                  (EXPAND
                                                                                                   "subset?")
                                                                                                  (("3"
                                                                                                    (EXPAND
                                                                                                     "member"
                                                                                                     -13)
                                                                                                    (("3"
                                                                                                      (INST
                                                                                                       -13
                                                                                                       "t!1")
                                                                                                      (("3"
                                                                                                        (ASSERT)
                                                                                                        (("3"
                                                                                                          (ASSERT)
                                                                                                          (("3"
                                                                                                            (FLATTEN)
                                                                                                            (("3"
                                                                                                              (INST
                                                                                                               -9
                                                                                                               "oa!1")
                                                                                                              (("3"
                                                                                                                (ASSERT)
                                                                                                                (("3"
                                                                                                                  (FLATTEN)
                                                                                                                  (("3"
                                                                                                                    (INST
                                                                                                                     -10
                                                                                                                     "x!1")
                                                                                                                    (("3"
                                                                                                                      (ASSERT)
                                                                                                                      (("3"
                                                                                                                        (SPLIT
                                                                                                                         -13)
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "var_names"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (EXPAND
                                                                                                                             "new_gvds")
                                                                                                                            (("1"
                                                                                                                              (REWRITE
                                                                                                                               "add_as_union")
                                                                                                                              (("1"
                                                                                                                                (REWRITE
                                                                                                                                 "var_names_union")
                                                                                                                                (("1"
                                                                                                                                  (REWRITE
                                                                                                                                   "var_names_union")
                                                                                                                                  (("1"
                                                                                                                                    (ASSERT)
                                                                                                                                    (("1"
                                                                                                                                      (FLATTEN)
                                                                                                                                      (("1"
                                                                                                                                        (EXPAND
                                                                                                                                         "new_mva_vars_gvds")
                                                                                                                                        (("1"
                                                                                                                                          (EXPAND
                                                                                                                                           "var_names"
                                                                                                                                           4)
                                                                                                                                          (("1"
                                                                                                                                            (SKOSIMP*)
                                                                                                                                            (("1"
                                                                                                                                              (INST
                                                                                                                                               4
                                                                                                                                               "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                              (("1"
                                                                                                                                                (ASSERT)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   4
                                                                                                                                                   "f!1")
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL)
                                                                                                                         ("2"
                                                                                                                          (ASSERT)
                                                                                                                          (("2"
                                                                                                                            (SPLIT
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (EXPAND
                                                                                                                               "var_names"
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (EXPAND
                                                                                                                                 "new_gvds")
                                                                                                                                (("1"
                                                                                                                                  (REWRITE
                                                                                                                                   "add_as_union")
                                                                                                                                  (("1"
                                                                                                                                    (REWRITE
                                                                                                                                     "var_names_union")
                                                                                                                                    (("1"
                                                                                                                                      (REWRITE
                                                                                                                                       "var_names_union")
                                                                                                                                      (("1"
                                                                                                                                        (ASSERT)
                                                                                                                                        (("1"
                                                                                                                                          (FLATTEN)
                                                                                                                                          (("1"
                                                                                                                                            (EXPAND
                                                                                                                                             "new_mva_vars_gvds")
                                                                                                                                            (("1"
                                                                                                                                              (EXPAND
                                                                                                                                               "var_names"
                                                                                                                                               4)
                                                                                                                                              (("1"
                                                                                                                                                (SKOSIMP*)
                                                                                                                                                (("1"
                                                                                                                                                  (INST
                                                                                                                                                   4
                                                                                                                                                   "(# name := name(f!1), jtype := jtype(f!1), init_val := init_val(f!1) #)")
                                                                                                                                                  (("1"
                                                                                                                                                    (ASSERT)
                                                                                                                                                    (("1"
                                                                                                                                                      (INST
                                                                                                                                                       4
                                                                                                                                                       "f!1")
                                                                                                                                                      NIL
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL)
                                                                                                                             ("2"
                                                                                                                              (EXPAND
                                                                                                                               "compatible")
                                                                                                                              (("2"
                                                                                                                                (FLATTEN)
                                                                                                                                (("2"
                                                                                                                                  (SKOSIMP*)
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "MVA_prog_vars_are_fields")
                                                                                                                                    (("2"
                                                                                                                                      (ASSERT)
                                                                                                                                      (("2"
                                                                                                                                        (EXPAND
                                                                                                                                         "var_names"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (SKOSIMP*)
                                                                                                                                          (("2"
                                                                                                                                            (INST
                                                                                                                                             -7
                                                                                                                                             "l!1")
                                                                                                                                            (("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              (("2"
                                                                                                                                                (SKOSIMP*)
                                                                                                                                                (("2"
                                                                                                                                                  (EXPAND
                                                                                                                                                   "var_names"
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (EXPAND
                                                                                                                                                     "Union")
                                                                                                                                                    (("2"
                                                                                                                                                      (INST
                                                                                                                                                       2
                                                                                                                                                       "var_names(c!1)")
                                                                                                                                                      (("1"
                                                                                                                                                        (EXPAND
                                                                                                                                                         "var_names")
                                                                                                                                                        (("1"
                                                                                                                                                          (EXPAND
                                                                                                                                                           "Union")
                                                                                                                                                          (("1"
                                                                                                                                                            (ASSERT)
                                                                                                                                                            (("1"
                                                                                                                                                              (FLATTEN)
                                                                                                                                                              (("1"
                                                                                                                                                                (EXPAND
                                                                                                                                                                 "var_names"
                                                                                                                                                                 3)
                                                                                                                                                                (("1"
                                                                                                                                                                  (INST
                                                                                                                                                                   3
                                                                                                                                                                   "fd!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (ASSERT)
                                                                                                                                                                    NIL
                                                                                                                                                                    NIL))
                                                                                                                                                                  NIL))
                                                                                                                                                                NIL))
                                                                                                                                                              NIL))
                                                                                                                                                            NIL))
                                                                                                                                                          NIL))
                                                                                                                                                        NIL)
                                                                                                                                                       ("2"
                                                                                                                                                        (INST?)
                                                                                                                                                        NIL
                                                                                                                                                        NIL))
                                                                                                                                                      NIL))
                                                                                                                                                    NIL))
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (USE "ann_event_set_TCC1")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|cp_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "set[Name]" |ProgramFunctions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|q!1| SKOLEM-CONST-DECL "CP" |AnnotateProgramProperties| NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|ann_guard_actions_set| CONST-DECL "finite_set[[BoolExpr, Stmt]]"
     |AnnotateProgram| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|var_names_guard_to_expresion| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|add| CONST-DECL "(nonempty?)" |sets| NIL)
    (|var_names_ann_action| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_Action| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|MVA_prog_vars_are_fields| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|var_names| CONST-DECL "set[Name]" |ProgramFunctions| NIL)
    (|c!1| SKOLEM-CONST-DECL "Class[Name]" |AnnotateProgramProperties| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |AnnotateProgramProperties| NIL)
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    (|wf_Trans| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|t!1| SKOLEM-CONST-DECL "Transition[CP, Name]" |AnnotateProgramProperties|
     NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|nonempty_union1| APPLICATION-JUDGEMENT "(nonempty?)" |sets| NIL)
    (|ann_action| DEF-DECL "Stmt" |AnnotateProgram| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|OneAction| TYPE-EQ-DECL NIL MVA NIL)
    (|Set| ADT-CONSTRUCTOR-DECL "[[Name, Expr] -> (Set?)]" |Body_adt| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (|update_vars| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|ann_event_set_TCC1| SUBTYPE-TCC NIL |AnnotateProgram| NIL)
    (|ann_guard_actions| CONST-DECL "list[[BoolExpr, Stmt]]" |AnnotateProgram|
     NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (NumVarEval?)]" |Body_adt|
     NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq| ADT-CONSTRUCTOR-DECL "[[Expr, Expr] -> (Eq?)]" |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|ann_trans_cp| CONST-DECL "[BoolExpr, Stmt]" |AnnotateProgram| NIL)
    (|ann_event_set| CONST-DECL "finite_set[[BoolExpr, Stmt]]"
     |AnnotateProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|var_names_CaseJML_set2list| FORMULA-DECL NIL |AnnotateProgramProperties|
     NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL))
   6696 1103 T SHOSTAK))
 (|var_names_ann_program| 0
  (|var_names_ann_program-1| NIL 3397470724 3398145583
   ("" (AUTO-REWRITE "subset?" "member" "union")
    (("" (SKOSIMP*)
      (("" (ASSERT)
        (("" (SKOSIMP*)
          (("" (EXPAND "ann_program")
            (("" (EXPAND "var_names" -1)
              (("" (EXPAND "Union")
                (("" (SKOSIMP*)
                  (("" (TYPEPRED "a!1")
                    (("" (SKOSIMP*)
                      (("" (REPLACE -3 :HIDE? T)
                        (("" (REPLACE -2 :HIDE? T)
                          (("" (EXPAND "ann_class")
                            (("" (ASSERT)
                              (("" (SPLIT -2)
                                (("1" (FLATTEN)
                                  (("1" (AUTO-REWRITE "Union")
                                    (("1" (REWRITE "var_names" -2)
                                      (("1" (ASSERT)
                                        (("1" (SPLIT -2)
                                          (("1" (SKOSIMP*)
                                            (("1" (TYPEPRED "a!2")
                                              (("1" (SKOSIMP*)
                                                (("1" (REPLACE -2 :HIDE? T)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (EXPAND "ann_methods")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (REPLACE -2 :HIDE? T)
                                                          (("1"
                                                            (REWRITE
                                                             "var_names" -2)
                                                            (("1" (ASSERT)
                                                              (("1" (SKOSIMP*)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "a!3")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "ann_method")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        (("1"
                                                                          (SPLIT
                                                                           -1)
                                                                          (("1"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("3"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("3"
                                                                              (ASSERT)
                                                                              (("3"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("4"
                                                                            (REWRITE
                                                                             "var_names")
                                                                            (("4"
                                                                              (REPLACE
                                                                               -1
                                                                               :HIDE? T)
                                                                              (("4"
                                                                                (ASSERT)
                                                                                (("4"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "var_names(pre_set(n!1))")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST?)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REWRITE
                                                                                     "var_names")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (USE
                                                                                           "var_names_ann_event")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (SPLIT
                                                                                               -1)
                                                                                              (("1"
                                                                                                (INST?)
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (EXPAND
                                                                                                 "filter_event")
                                                                                                (("2"
                                                                                                  (SKOSIMP*)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (APPLY
                                                                                           (REPEAT
                                                                                            (REWRITE
                                                                                             "var_names"
                                                                                             -1)))
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "singleton")
                                                                                              (("2"
                                                                                                (SPLIT
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (USE
                                                                                                   "cp_new_ghostvar")
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (EXPAND
                                                                                                   "new_gvds")
                                                                                                  (("2"
                                                                                                    (REWRITE
                                                                                                     "add_as_union")
                                                                                                    (("2"
                                                                                                      (APPLY
                                                                                                       (REPEAT
                                                                                                        (REWRITE
                                                                                                         "var_names_union")))
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        (("2"
                                                                                                          (FLATTEN)
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "halted")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "var_names")
                                                                                                              (("2"
                                                                                                                (INST
                                                                                                                 2
                                                                                                                 "(# name := name_of(mp!1)(halted), jtype := IntType, init_val := Int(unique(halted)) #)")
                                                                                                                (("1"
                                                                                                                  (EXPAND
                                                                                                                   "new_cps_gvds")
                                                                                                                  (("1"
                                                                                                                    (ASSERT)
                                                                                                                    (("1"
                                                                                                                      (INST
                                                                                                                       2
                                                                                                                       "halted")
                                                                                                                      (("1"
                                                                                                                        (TYPEPRED
                                                                                                                         "mva(mp!1)")
                                                                                                                        (("1"
                                                                                                                          (EXPAND
                                                                                                                           "complete")
                                                                                                                          (("1"
                                                                                                                            (FLATTEN)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL)
                                                                                                                 ("2"
                                                                                                                  (EXPAND
                                                                                                                   "defined?")
                                                                                                                  (("2"
                                                                                                                    (PROPAX)
                                                                                                                    NIL
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("5"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE? T)
                                                                            (("5"
                                                                              (REWRITE
                                                                               "var_names")
                                                                              (("5"
                                                                                (ASSERT)
                                                                                (("5"
                                                                                  (SPLIT
                                                                                   -2)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "var_names"
                                                                                     1)
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(c1!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 1
                                                                                                 "var_names(n!1)")
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "var_names"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (INST
                                                                                                       1
                                                                                                       "var_names(post_set(n!1))")
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST?)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (USE
                                                                                     "var_names_ann_event")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      (("2"
                                                                                        (SPLIT
                                                                                         -1)
                                                                                        (("1"
                                                                                          (INST?)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (EXPAND
                                                                                           "filter_event")
                                                                                          (("2"
                                                                                            (SKOSIMP*)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("6"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE? T)
                                                                            (("6"
                                                                              (REWRITE
                                                                               "var_names")
                                                                              (("6"
                                                                                (ASSERT)
                                                                                (("6"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("6"
                                                                                    (SPLIT
                                                                                     -2)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "var_names"
                                                                                       1)
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        (("1"
                                                                                          (INST
                                                                                           1
                                                                                           "var_names(c1!1)")
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "var_names"
                                                                                             1)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              (("1"
                                                                                                (FLATTEN)
                                                                                                (("1"
                                                                                                  (INST
                                                                                                   1
                                                                                                   "var_names(n!1)")
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "var_names"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      (("1"
                                                                                                        (INST
                                                                                                         1
                                                                                                         "var_names(exc_set(n!1))")
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (INST?)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (INST?)
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "var_names"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (PROPAX)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (USE
                                                                                       "var_names_ann_event")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (INST?)
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (EXPAND
                                                                                             "filter_event")
                                                                                            (("2"
                                                                                              (SKOSIMP*)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("7"
                                                                            (REWRITE
                                                                             "var_names"
                                                                             1)
                                                                            (("7"
                                                                              (ASSERT)
                                                                              (("7"
                                                                                (INST
                                                                                 1
                                                                                 "var_names(c1!1)")
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "var_names"
                                                                                   1)
                                                                                  (("1"
                                                                                    (ASSERT)
                                                                                    (("1"
                                                                                      (FLATTEN)
                                                                                      (("1"
                                                                                        (INST
                                                                                         1
                                                                                         "var_names(n!1)")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "var_names"
                                                                                           1)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (INST
                                                                                               1
                                                                                               "a!3")
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (INST?)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST?)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REWRITE "var_names" 1)
                                            (("2" (ASSERT)
                                              (("2" (INST 1 "var_names(c1!1)")
                                                (("1" (REWRITE "var_names" 1)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2" (INST?) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (REWRITE "var_names" 1)
                                            (("3" (ASSERT)
                                              (("3" (INST 1 "var_names(c1!1)")
                                                (("1" (REWRITE "var_names" 1)
                                                  (("1" (ASSERT)
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (REWRITE
                                                         "var_names_union")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (INST?) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("4" (REWRITE "var_names" -1)
                                            (("4" (ASSERT)
                                              (("4" (SPLIT -1)
                                                (("1" (REWRITE "var_names" 1)
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (INST 1
                                                       "var_names(c1!1)")
                                                      (("1"
                                                        (REWRITE "var_names" 1)
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2" (INST?) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (APPLY
                                                   (REPEAT
                                                    (REWRITE "var_names" -1)))
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "singleton")
                                                      (("2" (SPLIT -1)
                                                        (("1"
                                                          (USE
                                                           "cp_new_ghostvar")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (USE
                                                           "halted_new_ghostvar")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "var_names" 2)
                                    (("2" (EXPAND "Union")
                                      (("2" (INST 2 "var_names(c1!1)")
                                        (("2" (INST 1 "c1!1") NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|var_names| CONST-DECL "set[Name]" |ProgramFunctions| NIL)
    (|Union_surjective| NAME-JUDGEMENT "(surjective?[setofsets[T], set[T]])"
     |sets_lemmas| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|Body| TYPE-DECL NIL |Body_adt| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (TT? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (FF? ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Neg?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BoolVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Conj| ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (Conj?)]" |Body_adt|
     NIL)
    (|Neg| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Neg?)]" |Body_adt| NIL)
    (|Assign?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|BExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CondExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|MethodCall?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|RExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Eq| ADT-CONSTRUCTOR-DECL "[[Expr, Expr] -> (Eq?)]" |Body_adt| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Plus?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumVarEval?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|NumExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|NExpr| ADT-CONSTRUCTOR-DECL "[NumExpr -> (NExpr?)]" |Body_adt| NIL)
    (|NumVarEval| ADT-CONSTRUCTOR-DECL "[Name -> (NumVarEval?)]" |Body_adt|
     NIL)
    (|forbidden_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|cp| CONST-DECL "{n: Name | NOT forbidden_names(mp)(n)}" |VariableNames|
     NIL)
    (|halted| CONST-DECL "Name" |NewVariableDeclarations| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|var_names| CONST-DECL "set[Name]" |ProgramFunctions| NIL)
    (|var_names| DEF-DECL "[Name -> boolean]" |ProgramFunctions| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|n!1| SKOLEM-CONST-DECL "Method[Name]" |AnnotateProgramProperties| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |AnnotateProgramProperties| NIL)
    (|c1!1| SKOLEM-CONST-DECL "Class[Name]" |AnnotateProgramProperties| NIL)
    (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|singleton| CONST-DECL "(singleton?)" |sets| NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|singleton?| CONST-DECL "bool" |sets| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|Int?| ADT-RECOGNIZER-DECL "[Val -> boolean]" |Val_adt| NIL)
    (|Int| ADT-CONSTRUCTOR-DECL "[int -> (Int?)]" |Val_adt| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|unique| CONST-DECL "(injective?[CP, nat])" |NewVariableDeclarations| NIL)
    (|halted| CONST-DECL "CP" MVA NIL)
    (|IntType| ADT-CONSTRUCTOR-DECL "(IntType?)" |JType_adt| NIL)
    (|IntType?| ADT-RECOGNIZER-DECL "[JType -> boolean]" |JType_adt| NIL)
    (|name_of| CONST-DECL "(injective?[CP, (legal_names(mp))])"
     |NewVariableDeclarations| NIL)
    (|legal_names| CONST-DECL "set[Name]" |VariableNames| NIL)
    (|new_cp_gvd| CONST-DECL "FieldDecl" |NewVariableDeclarations| NIL)
    (|new_mva_vars_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|new_cps_gvds| CONST-DECL "finite_set[FieldDecl]"
     |NewVariableDeclarations| NIL)
    (|add_as_union| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|cp_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|nonempty_finite_union2| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|var_names_ann_event| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|Assert| ADT-CONSTRUCTOR-DECL "[BoolExpr -> (Assert?)]" |Body_adt| NIL)
    (|Entry| ADT-CONSTRUCTOR-DECL "(Entry?)" |EventType_adt| NIL)
    (|Entry?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt| NIL)
    (|filter_event| CONST-DECL "finite_set[Transition]" |AnnotateProgram| NIL)
    (|wf_MVA| CONST-DECL "boolean" |WellFormedMVA| NIL)
    (|ann_event| CONST-DECL "Stmt" |AnnotateProgram| NIL)
    (|Sequence| ADT-CONSTRUCTOR-DECL "[[Stmt, Stmt] -> (Sequence?)]" |Body_adt|
     NIL)
    (|Assert?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|While?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|TryCatch?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Throw?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|StmtExpr?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Skip?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Set?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|Sequence?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|IfThenElse?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|CaseJML?| ADT-RECOGNIZER-DECL "[Body -> boolean]" |Body_adt| NIL)
    (|ExitNormal?| ADT-RECOGNIZER-DECL "[EventType -> boolean]" |EventType_adt|
     NIL)
    (|ExitNormal| ADT-CONSTRUCTOR-DECL "(ExitNormal?)" |EventType_adt| NIL)
    (|ExitExceptional?| ADT-RECOGNIZER-DECL "[EventType -> boolean]"
     |EventType_adt| NIL)
    (|ExitExceptional| ADT-CONSTRUCTOR-DECL "(ExitExceptional?)"
     |EventType_adt| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|halted_new_ghostvar| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|var_names| CONST-DECL "set[Name]" |ProgramFunctions| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Union| CONST-DECL "set" |sets| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL))
   72770 1357 T SHOSTAK))
 (|ann_program_yields_wf_program| 0
  (|ann_program_yields_wf_program-1| NIL 3393664525 3398144774
   ("" (SKOLEM-TYPEPRED)
    (("" (EXPAND* "wf_MP" "wf_Program")
      (("" (PROP)
        (("1" (HIDE-ALL-BUT (-3 1))
          (("1" (EXPAND "wf_program_variables_disjoint_def")
            (("1" (USE "ann_program_preserves_var_decls")
              (("1" (REWRITE "ann_program_add_ghost_var_decls")
                (("1" (FLATTEN)
                  (("1" (USE "wf_new_vars")
                    (("1" (REPLACE -2 :DIR RL :HIDE? T)
                      (("1" (REPLACE -2 :DIR RL :HIDE? T)
                        (("1" (FLATTEN)
                          (("1" (ASSERT)
                            (("1" (HIDE -1 -2 -3 -4 -7)
                              (("1"
                                (AUTO-REWRITE "disjoint?"
                                              "empty?"
                                              "intersection"
                                              "member"
                                              "subset?"
                                              "union")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "declared_var_names")
                                    (("1" (SPLIT 1)
                                      (("1" (SKOSIMP*)
                                        (("1" (APPLY (REPEAT (INST?)))
                                          (("1" (REWRITE "var_names_union")
                                            (("1" (ASSERT)
                                              (("1" (SPLIT -2)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (APPLY (REPEAT (INST?)))
                                          (("2" (REWRITE "var_names_union")
                                            (("2" (ASSERT)
                                              (("2" (SPLIT -2)
                                                (("1" (PROPAX) NIL NIL)
                                                 ("2" (PROPAX) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT (-1 -4 1))
          (("2" (EXPAND "wf_program_variables_not_reserved_words_def")
            (("2" (EXPAND "declared_var_names")
              (("2" (USE "ann_program_preserves_var_decls")
                (("2" (FLATTEN)
                  (("2" (REPLACE -1 :DIR RL :HIDE? T)
                    (("2" (REPLACE -1 :DIR RL :HIDE? T)
                      (("2" (REWRITE "ann_program_add_ghost_var_decls")
                        (("2" (REWRITE "var_names_union")
                          (("2" (USE "wf_new_vars")
                            (("2" (FLATTEN)
                              (("2" (HIDE -1 -2 -3 -5 -7)
                                (("2"
                                  (AUTO-REWRITE "disjoint?"
                                                "empty?"
                                                "intersection"
                                                "member"
                                                "subset?"
                                                "union")
                                  (("2" (ASSERT)
                                    (("2" (SKOSIMP*)
                                      (("2" (APPLY (REPEAT (INST?)))
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("3" (HIDE-ALL-BUT (-5 1))
          (("3" (EXPAND "wf_program_has_unique_class_names_def")
            (("3" (SKOSIMP)
              (("3" (EXPAND* "ann_program" "ann_class")
                (("3" (SKOSIMP*)
                  (("3" (INST - "c1!2" "c1!3")
                    (("3" (ASSERT)
                      (("3" (SPLIT -6)
                        (("1" (HIDE -6)
                          (("1" (REPLACE -3 :HIDE? T)
                            (("1" (REPLACE -4 :HIDE? T)
                              (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (REPLACE -2 :HIDE? T)
                            (("2" (REPLACE -3 :HIDE? T)
                              (("2" (LIFT-IF)
                                (("2" (ASSERT)
                                  (("2" (PROP)
                                    (("2" (LIFT-IF) (("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("4" (HIDE-ALL-BUT (-6 1))
          (("4" (EXPAND "wf_Classes")
            (("4" (SKOSIMP)
              (("4" (EXPAND* "ann_program" "ann_class")
                (("4" (SKOSIMP)
                  (("4" (INST - "c1!1")
                    (("4" (ASSERT)
                      (("4" (REPLACE -2 :HIDE? T)
                        (("4" (EXPAND* "wf_Class" "ann_methods" "ann_method")
                          (("4" (SKOSIMP)
                            (("4" (ASSERT)
                              (("4" (SPLIT)
                                (("1" (SPLIT)
                                  (("1" (SKOSIMP*)
                                    (("1" (INST - "n!1" "n!2")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL)
                                   ("2" (PROP) NIL NIL))
                                  NIL)
                                 ("2" (PROP)
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("5" (EXPAND "wf_program_all_variables_declared")
          (("5" (SKOSIMP)
            (("5" (INST?)
              (("5" (USE "ann_program_preserves_var_decls")
                (("5" (EXPAND "declared_var_names")
                  (("5" (FLATTEN)
                    (("5" (REPLACE -1)
                      (("5" (REPLACE -2)
                        (("5" (ASSERT)
                          (("5" (REWRITE "ann_program_add_ghost_var_decls")
                            (("5" (REWRITE "var_names_union")
                              (("5" (AUTO-REWRITE "union" "member")
                                (("5" (ASSERT)
                                  (("5" (FLATTEN)
                                    (("5" (USE "var_names_ann_program")
                                      (("5" (ASSERT)
                                        (("5" (EXPAND "subset?")
                                          (("5" (EXPAND "member")
                                            (("5" (INST?)
                                              (("5" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|wf_Program| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_program_all_variables_declared| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|var_names_ann_program| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|wf_Class| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|wf_Classes| CONST-DECL "boolean" |WellFormedProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|wf_program_has_unique_class_names_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_program_variables_not_reserved_words_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|ann_program_preserves_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|disjoint?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|var_names_union| FORMULA-DECL NIL |ProgramFunctions| NIL)
    (|declared_var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|wf_new_vars| FORMULA-DECL NIL |NewVariableDeclarations| NIL)
    (|ann_program_add_ghost_var_decls| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|wf_program_variables_disjoint_def| CONST-DECL "boolean"
     |WellFormedProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   1240 1237 T SHOSTAK))
 (|ann_program_preserves_well_behaved_Program| 0
  (|ann_program_preserves_well_behaved_Program-1| NIL 3392570267 3398144775
   ("" (SKOSIMP*)
    (("" (EXPAND "well_behaved_Program")
      (("" (SKOSIMP*)
        (("" (EXPAND "id")
          (("" (USE "ann_program_class_correspondence")
            (("" (ASSERT)
              (("" (INST? -1)
                (("" (ASSERT)
                  (("" (SKOSIMP*)
                    (("" (INST?)
                      (("" (ASSERT)
                        (("" (FLATTEN)
                          (("" (SPLIT 1)
                            (("1" (SKOSIMP*)
                              (("1" (HIDE -6)
                                (("1" (REPLACE -3)
                                  (("1" (EXPAND "ann_class" -1)
                                    (("1" (LIFT-IF)
                                      (("1" (ASSERT)
                                        (("1"
                                          (INST -5
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s1!1), gvs := gvs(s1!1) #)"
                                           "(# astate := initial_MVA_state(mva(mp!1)), pstate := pstate(s2!1), gvs := gvs(s2!1) #)"
                                           "v!1" _)
                                          (("1" (ASSERT)
                                            (("1" (SPLIT -1)
                                              (("1" (FLATTEN)
                                                (("1" (REWRITE "deriv_expr" -2)
                                                  (("1"
                                                    (REWRITE "deriv_expr" -2)
                                                    NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (FLATTEN)
                                                (("2" (INST?)
                                                  (("2" (ASSERT)
                                                    (("2" (EXPAND "deriv_expr")
                                                      (("2" (SPLIT -5)
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (APPLY-EXTENSIONALITY
                                                             2 :HIDE? T)
                                                            NIL NIL))
                                                          NIL)
                                                         ("2" (POSTPONE) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (HIDE -5)
                                (("2" (USE "ann_program_method_correspondence")
                                  (("2" (ASSERT)
                                    (("2" (INST -1 "c!1" "m!1")
                                      (("2" (ASSERT)
                                        (("2" (SKOSIMP*)
                                          (("2" (SPLIT -3)
                                            (("1" (FLATTEN)
                                              (("1" (REPLACE -2)
                                                (("1" (POSTPONE) NIL NIL))
                                                NIL))
                                              NIL)
                                             ("2" (POSTPONE) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   UNFINISHED NIL 183 183 T SHOSTAK))
 (|get_class_ann_program| 0
  (|get_class_ann_program-1| NIL 3392567967 3398144776
   ("" (SKOSIMP*)
    (("" (REPLACE -3 :HIDE? T)
      (("" (REPLACE -3 :HIDE? T)
        (("" (EXPAND* "ann_program" "get_class")
          (("" (ASSERT)
            (("" (LIFT-IF -2)
              (("" (SPLIT -2)
                (("1" (FLATTEN)
                  (("1" (ASSERT)
                    (("1" (LIFT-IF)
                      (("1" (ASSERT)
                        (("1" (SPLIT -4)
                          (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL))
   40 40 T SHOSTAK))
 (|same_class_name_ann_class_implies_same_class| 0
  (|same_class_name_ann_class_implies_same_class-1| NIL 3387512899 3398144776
   ("" (SKOSIMP)
    (("" (EXPAND "ann_program")
      (("" (SKOSIMP)
        (("" (LEMMA "wf_program_has_unique_class_names")
          (("" (INST -1 "program(mp!1)" "c1!1" "c1!2")
            (("" (TYPEPRED "mp!1")
              (("" (EXPAND "wf_MP")
                (("" (EXPAND "ann_class")
                  (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|wf_program_has_unique_class_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   35 36 T SHOSTAK))
 (|same_method_name_ann_class_implies_same_method| 0
  (|same_method_name_ann_class_implies_same_method-1| NIL 3387516443 3398144777
   ("" (SKOSIMP)
    (("" (LEMMA "wf_class_has_unique_method_names")
      (("" (INST -1 "c2!1" "m2!1" "ann_method(mp!1)(m1!1)")
        (("" (LEMMA "wf_program_has_wf_classes")
          (("" (INST -1 "ann_program(mp!1)" "c2!1")
            (("" (USE "ann_program_yields_wf_program")
              (("" (ASSERT)
                (("" (SPLIT -2)
                  (("1" (ASSERT)
                    (("1" (EXPAND "ann_method" -3 2)
                      (("1" (REPLACE -4)
                        (("1" (EXPAND "ann_class" 1)
                          (("1" (EXPAND "ann_methods") (("1" (INST?) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "ann_program" 1)
                    (("2" (INST 1 "c1!1") (("2" (PROP) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|wf_class_has_unique_method_names| FORMULA-DECL NIL |WellFormedProgram|
     NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|wf_program_has_wf_classes| FORMULA-DECL NIL |WellFormedProgram| NIL)
    (|ann_program_yields_wf_program| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|ann_methods| CONST-DECL "finite_set[Method]" |AnnotateProgram| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_method| CONST-DECL "Method" |AnnotateProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL))
   103 103 T SHOSTAK))
 (|lookup_mthd_ann_program| 0
  (|lookup_mthd_ann_program-1| NIL 3387195852 3398144779
   ("" (SKOSIMP)
    (("" (EXPAND "lookup_mthd")
      (("" (LIFT-IF)
        (("" (ASSERT)
          (("" (CASE "up?(get_class(ann_program(mp!1))(tgt!1))")
            (("1" (ASSERT)
              (("1" (SPLIT -2)
                (("1" (SPLIT -3)
                  (("1" (ASSERT)
                    (("1" (SPLIT 1)
                      (("1" (SKOSIMP*)
                        (("1"
                          (NAME "c1" "down(get_class(program(mp!1))(tgt!1))")
                          (("1" (REPLACE -1)
                            (("1"
                              (NAME "c2"
                                    "down(get_class(ann_program(mp!1))(tgt!1))")
                              (("1" (REPLACE -1)
                                (("1"
                                  (LEMMA
                                   "same_class_name_ann_class_implies_same_class")
                                  (("1" (INST -1 "mp!1" "c1" "c2")
                                    (("1" (ASSERT)
                                      (("1" (LEMMA "get_class_ann_program")
                                        (("1" (ASSERT)
                                          (("1"
                                            (INST -1 "mp!1" "c1" "c2" "tgt!1")
                                            (("1" (ASSERT)
                                              (("1"
                                                (USE
                                                 "same_method_name_ann_class_implies_same_method")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP*)
                        (("2" (ASSERT)
                          (("2"
                            (CASE-REPLACE
                             " methods(down(get_class(ann_program(mp!1))(tgt!1))) = methods(down(get_class(program(mp!1))(tgt!1)))")
                            (("1" (ASSERT) NIL NIL)
                             ("2"
                              (CASE-REPLACE
                               "get_class(ann_program(mp!1))(tgt!1) = get_class(program(mp!1))(tgt!1)")
                              (("2"
                                (USE
                                 "same_class_name_ann_class_implies_same_class")
                                (("2" (ASSERT)
                                  (("2" (USE "get_class_ann_program")
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL)
                 ("2" (PROPAX) NIL NIL))
                NIL))
              NIL)
             ("2" (USE "ann_program_class_correspondence")
              (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|lookup_mthd| CONST-DECL "lift[(methods(p))]" |ProgramFunctions| NIL)
    (|tgt!1| SKOLEM-CONST-DECL "Val[Name]" |AnnotateProgramProperties| NIL)
    (|mp!1| SKOLEM-CONST-DECL "(wf_MP)" |AnnotateProgramProperties| NIL)
    (|ann_program_class_correspondence| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|down| ADT-ACCESSOR-DECL "[(up?) -> T]" |lift_adt| NIL)
    (|same_class_name_ann_class_implies_same_class| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|same_method_name_ann_class_implies_same_method| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|get_class_ann_program| FORMULA-DECL NIL |AnnotateProgramProperties| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|Transition| TYPE-EQ-DECL NIL MVA NIL) (|Guard| TYPE-EQ-DECL NIL MVA NIL)
    (|Action| TYPE-EQ-DECL NIL MVA NIL) (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|get_class| CONST-DECL "lift[Class]" |ProgramFunctions| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|up?| ADT-RECOGNIZER-DECL "[lift -> boolean]" |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL))
   180 180 T SHOSTAK))
 (|ann_program_defines_MVA_vars| 0
  (|ann_program_defines_MVA_vars-2| NIL 3394875181 3398144779
   ("" (SKOSIMP)
    (("" (TYPEPRED "mp!1")
      (("" (EXPAND* "compatible" "var_names" "new_gvds")
        (("" (SKOSIMP*)
          (("" (INST 1 "ann_class(mp!1)(c!1)" "f!1")
            (("" (ASSERT)
              (("" (SPLIT 1)
                (("1" (EXPAND "ann_program") (("1" (INST?) NIL NIL)) NIL)
                 ("2" (EXPAND "ann_class") (("2" (PROPAX) NIL NIL)) NIL)
                 ("3" (EXPAND* "ann_class" "union" "member" "new_gvds")
                  (("3" (PROP) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL) (MVA TYPE-EQ-DECL NIL MVA NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set"
     |finite_sets| NIL)
    (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|ann_program| CONST-DECL "Program" |AnnotateProgram| NIL)
    (|ann_class| CONST-DECL "Class" |AnnotateProgram| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|new_gvds| CONST-DECL "finite_set[FieldDecl]" |NewVariableDeclarations|
     NIL))
   34 33 T NIL)
  (|ann_program_defines_MVA_vars-1| NIL 3389956467 3394872339
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost"
       "id")
      (("" (PROP)
        (("1" (INST?)
          (("1" (ASSERT)
            (("1" (EXPAND* "getGhostDecls" "var_names")
              (("1" (USE "ann_program_defines_MVA_vars2")
                (("1" (SPLIT -)
                  (("1" (SKOSIMP)
                    (("1" (INST?)
                      (("1" (ASSERT)
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND* "var_names" "new_gvds" "union" "member")
                    (("2" (POSTPONE) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL))
        NIL))
      NIL))
    NIL)
   UNTRIED
   ((|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL))
   974962 4000 T SHOSTAK))
 (|new_vars_ghost_in_ann_program| 0
  (|new_vars_ghost_in_ann_program-1| NIL 3394876088 3398144780
   ("" (SKOSIMP*)
    ((""
      (EXPAND* "wf_state" "wf_AState" "wf_ghoststate" "wf_Store" "is_ghost"
       "id")
      (("" (FLATTEN)
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE -1 2)
              (("" (EXPAND "getGhostDecls")
                (("" (EXPAND "var_names" 1)
                  (("" (USE "ann_program_defines_MVA_vars")
                    (("" (ASSERT)
                      (("" (SKOSIMP)
                        (("" (INST?)
                          (("" (ASSERT)
                            (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|is_ghost| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_ghoststate| CONST-DECL "boolean" |SemanticsJML| NIL)
    (|wf_state| CONST-DECL "boolean" |AnnotatedProgramSemantics| NIL)
    (|Name| FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|var_names| CONST-DECL "finite_set[Name]" |ProgramFunctions| NIL)
    (|FieldDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|BoolExpr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|LocalVarDecl| TYPE-EQ-DECL NIL |Program| NIL)
    (|Stmt| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Expr| TYPE-EQ-DECL NIL |Body_adt| NIL)
    (|Method| TYPE-EQ-DECL NIL |Program| NIL)
    (|lift| TYPE-DECL NIL |lift_adt| NIL)
    (|Class| TYPE-EQ-DECL NIL |Program| NIL)
    (|ann_program_defines_MVA_vars| FORMULA-DECL NIL
     |AnnotateProgramProperties| NIL)
    (|wf_MP| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgram| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|compatible| CONST-DECL "boolean" |MonitoredProgram| NIL)
    (|MonitoredProgramPre| TYPE-EQ-DECL NIL |MonitoredProgram| NIL)
    (|Program| TYPE-EQ-DECL NIL |Program| NIL)
    (|complete| CONST-DECL "boolean" |MVASemantics| NIL)
    (MVA TYPE-EQ-DECL NIL MVA NIL) (|ProgVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|MVAVarDecl| TYPE-EQ-DECL NIL MVA NIL)
    (|JType| TYPE-DECL NIL |JType_adt| NIL)
    (|defined?| CONST-DECL "boolean" |ValProp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|Val| TYPE-DECL NIL |Val_adt| NIL) (|Transition| TYPE-EQ-DECL NIL MVA NIL)
    (|Guard| TYPE-EQ-DECL NIL MVA NIL) (|Action| TYPE-EQ-DECL NIL MVA NIL)
    (|Event| TYPE-EQ-DECL NIL MVA NIL)
    (|EventType| TYPE-DECL NIL |EventType_adt| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (CP FORMAL-NONEMPTY-TYPE-DECL NIL |AnnotateProgramProperties| NIL)
    (|getGhostDecls| CONST-DECL "finite_set[FieldDecl]" |ProgramFunctions|
     NIL))
   65 64 T SHOSTAK)))

