% Semantics of Java programs without annotations. This theory is not used
% elsewhere, it is just provided as an example of the semantics instantiation
ProgramSemantics[Name : TYPE+] : THEORY
BEGIN

  IMPORTING State[Name],
            SemanticsTypes[Name, Program, PState, id]

  execute_set : (execute_set_type) =
    LAMBDA (p : Program, vn : Name, e : Expr, s1, s2 : PState, n : nat,
            derive_rec : derive_rec_type(n)) :
      s1 = s2 AND n = 1

  execute_CaseJML : (execute_CaseJML_type) =
    LAMBDA (p : Program, bs : list[[BoolExpr, Stmt]], s1, s2 : PState,  
            n : nat,
            derive_rec : derive_rec_type(n)) :
      s1 = s2 AND n = 1

  on_method_event : (on_method_event_type) =
    LAMBDA (p : Program, md : Method, a : Val, s1, s2 : PState, n : nat,
            derive_rec : derive_rec_type(n)) :
      s1 = s2 AND n = 1

  IMPORTING Semantics[Name, Program, PState, id, id, lookup,
                      LAMBDA(s : PState, upd : [PState -> PState]) : upd(s),
                      execute_set, execute_CaseJML,
                      on_method_event, on_method_event, on_method_event]

  run_program(p : Program)(main : Method, arg : int)(this_val : (defined?))
             (s2 : PState) : boolean =
    run_FullProgram(p)(main, arg)(initial_Program_state(p)(this_val), s2)


  IMPORTING SemanticsProofs[Name, Program, PState, id, id, lookup,
                      LAMBDA(s : PState, upd : [PState -> PState]) : upd(s),
                      execute_set, execute_CaseJML,
                      on_method_event, on_method_event, on_method_event]

  % MH: Missing is a proof that this semantics preserves wf_state 
  % wf_state should actually be defined in this file.

END ProgramSemantics
