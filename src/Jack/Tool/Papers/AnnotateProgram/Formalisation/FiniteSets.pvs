% NOTE: This theory is not used but the lemma may be interesting
FiniteSetProps[X, Y : TYPE] : THEORY
BEGIN

  get_y_from_x(P: pred[[X, Y]], x: {x: X | EXISTS (y: Y) : P(x, y)}): Y = 
    choose({y: Y | P(x, y)})

  subset_prop: LEMMA % :-)
    FORALL (P: pred[[X, Y]]):
      is_finite(P) IMPLIES
        is_finite({x: X | EXISTS (y: Y) : P(x, y)})

END FiniteSetProps


EpsilonProps[T : TYPE+] : THEORY
BEGIN

  epsilon_singleton: LEMMA % :-)
    FORALL (x : T) :
      epsilon(singleton(x)) = x

  choose_singleton? : LEMMA % :-)
    FORALL (s : set[T]) :
      singleton?(s) IMPLIES choose(s) = the(s)

END EpsilonProps


FiniteSetProp [T, U : TYPE] : THEORY
BEGIN

  s : VAR finite_set[T]

  finite_set_restrict : LEMMA % :-)
    FORALL(f : [U -> T], P : [U -> bool]) :
      injective?(f) IMPLIES
        is_finite({u : U |s(f(u)) AND P(u)})

END FiniteSetProp


FiniteSetInduction [T : TYPE] : THEORY
BEGIN

  IMPORTING WF_Card[T]

  finite_set_induction : LEMMA % :-)
    FORALL(p : [finite_set[T] -> bool]) :
      p(emptyset[T]) IMPLIES
      (FORALL(x : finite_set[T], t : T) : p(x) IMPLIES p(add(t, x))) IMPLIES
      (FORALL(x : finite_set[T]) : p(x))

END FiniteSetInduction
