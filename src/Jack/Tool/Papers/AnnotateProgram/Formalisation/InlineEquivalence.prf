(InlineEquivalence
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3409035720 3409044962
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineEquivalence nil)) 3447
   250 t nil))
 (IMP_InlineProgramAnnotationProperties_TCC1 0
  (IMP_InlineProgramAnnotationProperties_TCC1-1 nil 3409035720
   3409044968 ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineEquivalence nil)) 3257 250 t
   nil)))
(InlineRelatedStatesProperties
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3409036204 3409044923
   ("" (use "infinite_namespace") nil nil) proved
   ((infinite_namespace formula-decl nil InlineRelatedStatesProperties
     nil))
   5976 260 t nil))
 (IMP_InlineEquivalence_TCC1 0
  (IMP_InlineEquivalence_TCC1-1 nil 3409036204 3409044935
   ("" (use "name_of_exists") nil nil) proved
   ((name_of_exists formula-decl nil InlineRelatedStatesProperties
     nil))
   7479 250 t nil))
 (get_address_same_in_inline_related_states 0
  (get_address_same_in_inline_related_states-1 nil 3409041892
   3409044972
   ("" (skosimp*)
    (("" (expand* "inline_related_states" "Program_modeled?")
      (("" (flatten)
        (("" (expand "get_address") (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished nil 358 320 t shostak))
 (get_dynamic_type_name_same_in_inline_related_states 0
  (get_dynamic_type_name_same_in_inline_related_states-1 nil 3409041993
   3409044972 ("" (postpone) nil nil) unfinished nil 248 240 t
   shostak))
 (Program_modeled_implies_same_exception 0
  (Program_modeled_implies_same_exception-1 nil 3409042333 3409042341
   ("" (skosimp*)
    (("" (expand "Program_modeled?") (("" (flatten) nil nil)) nil))
    nil)
   proved
   ((Program_modeled? const-decl "boolean" InlineEquivalence nil)) 7560
   270 t shostak))
 (inline_related_states_implies_same_exception 0
  (inline_related_states_implies_same_exception-1 nil 3409042347
   3409042356
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (expand "Program_modeled?") (("" (flatten) nil nil)) nil))
      nil))
    nil)
   proved
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   8391 330 t shostak))
 (inline_related_states_implies_same_lookup 0
  (inline_related_states_implies_same_lookup-1 nil 3409042364
   3409043445
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        ((""
          (use "wf_state_ghost_not_local_or_field"
               ("p" "inline_program(p!1)"))
          (("" (assert)
            (("" (expand "wf_state")
              (("" (flatten)
                (("" (expand "wf_ghoststate")
                  ((""
                    (use "wf_state_vars_local_or_field"
                         ("p" "inline_program(p!1)"))
                    (("" (assert)
                      (("" (flatten)
                        (("" (expand "wf_state")
                          (("" (expand "Program_modeled?")
                            (("" (flatten)
                              ((""
                                (expand "ext_declared_var_names")
                                ((""
                                  (auto-rewrite "union" "member")
                                  ((""
                                    (assert)
                                    ((""
                                      (expand*
                                       "lookup"
                                       "lookup_local"
                                       "lookup_field"
                                       "is_local"
                                       "is_ghost"
                                       "is_field")
                                      ((""
                                        (replace -9 :hide? t)
                                        ((""
                                          (replace -10 :hide? t)
                                          ((""
                                            (inst?)
                                            ((""
                                              (inst?)
                                              ((""
                                                (inst?)
                                                ((""
                                                  (inst?)
                                                  ((""
                                                    (flatten)
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (expand "id")
                                                        ((""
                                                          (lift-if)
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (expand
                                                               "Program_lvs_modeled?")
                                                              ((""
                                                                (inst?)
                                                                ((""
                                                                  (apply
                                                                   (branch
                                                                    (split
                                                                     1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  ((""
                                                                    (lift-if)
                                                                    ((""
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         2)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties
     nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" State nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (lookup_field const-decl "Val" State nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (id_preserves application-judgement "S" identity_props nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (PSt type-eq-decl nil State nil)
    (Excpt type-decl nil Excpt_adt nil)
    (wf_state_vars_local_or_field formula-decl nil State nil))
   1080793 3840 t shostak))
 (inline_related_states_preserved_by_update 0
  (inline_related_states_preserved_by_update-1 nil 3409043468
   3409044623
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (split 1)
          (("1" (use "wf_update_PState")
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "update_PState")
                  (("1" (use "wf_state_update")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wf_update_PState")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "update_PState")
                  (("2" (use "wf_state_update")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Program_modeled?")
            (("3" (flatten)
              (("3" (expand "Program_lvs_modeled?")
                (("3" (expand "update_PState")
                  (("3" (split 1)
                    (("1"
                      (expand* "update" "update_local" "update_field")
                      nil nil)
                     ("2"
                      (expand* "update" "update_local" "update_field")
                      (("2" (replace -4)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (expand "wf_state" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (use "wf_state_vars_local_or_field")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (apply
                                         (branch
                                          (split 1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (expand "is_field")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case
                                           "is_local(vn!1, pstate(sAP2!1))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (branch
                                                (split 2)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (expand "wf_state" -7)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "wf_state_vars_local_or_field"
                                                     ("p"
                                                      "inline_program(p!1)"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "is_field")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "is_field")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (inst -6 "n!1")
                        (("3" (split -6)
                          (("1"
                            (expand* "update" "update_local"
                             "update_field" "is_local" "is_field")
                            (("1" (case-replace "vn!1 = n!1")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -2)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "ext_declared_var_names")
                              (("2"
                                (auto-rewrite "union" "member")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand*
                                     "update"
                                     "update_local"
                                     "update_field"
                                     "is_local"
                                     "is_field")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (wf_state_update formula-decl nil State nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (update const-decl "PState" State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties
     nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext_declared_var_names const-decl "finite_set[Name]"
     ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state_vars_local_or_field formula-decl nil State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (update_local const-decl "PState" State nil)
    (update_field const-decl "PState" State nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   1100786 2940 t shostak))
 (inline_related_states_preserved_by_catch 0
  (inline_related_states_preserved_by_catch-1 nil 3409044630 3409044705
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (split 1)
          (("1" (use "wf_update_PState")
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "update_PState")
                  (("1" (use "wf_state_catch") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wf_update_PState")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "update_PState")
                  (("2" (use "wf_state_catch") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Program_modeled?")
            (("3" (flatten)
              (("3" (expand "Program_lvs_modeled?")
                (("3" (expand "update_PState")
                  (("3" (expand "catch") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (wf_state_catch formula-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil)
    (FieldDecl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil)
    (lift type-decl nil lift_adt nil) (PSt type-eq-decl nil State nil)
    (catch const-decl "PState" State nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties
     nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   74718 1060 t shostak))
 (inline_related_states_preserved_by_raise 0
  (inline_related_states_preserved_by_raise-1 nil 3409044719 3409044729
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (split 1)
          (("1" (use "wf_update_PState")
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "update_PState")
                  (("1" (use "wf_state_raise") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wf_update_PState")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "update_PState")
                  (("2" (use "wf_state_raise") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Program_modeled?")
            (("3" (flatten)
              (("3" (expand "Program_lvs_modeled?")
                (("3" (expand "update_PState")
                  (("3" (expand "raise") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties
     nil)
    (raise const-decl "PState" State nil)
    (PSt type-eq-decl nil State nil) (lift type-decl nil lift_adt nil)
    (Excpt type-decl nil Excpt_adt nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (wf_state_raise formula-decl nil State nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (inline_related_states const-decl "boolean" InlineEquivalence nil))
   5544 1000 t nil))
 (inline_related_states_preserved_by_update_stack 0
  (inline_related_states_preserved_by_update_stack-1 nil 3409044745
   3409045481
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (use "wf_state_update_stack")
          (("" (assert)
            (("" (split -1)
              (("1" (assert)
                (("1"
                  (use "wf_state_update_stack"
                       ("p" "inline_program(p!1)"))
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (hide -1 -2)
                          (("1" (expand "Program_modeled?")
                            (("1" (expand "update_stack")
                              (("1"
                                (expand "update_PState")
                                (("1"
                                  (expand "o")
                                  (("1"
                                    (expand "update_local")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "Program_lvs_modeled?")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (apply
                                                 (branch
                                                  (split 1)
                                                  ((then
                                                    (flatten)
                                                    (assert)
                                                    (flatten)
                                                    (assert)))))
                                                (("1"
                                                  (apply
                                                   (branch
                                                    (split 1)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split 2)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (apply
                                                   (branch
                                                    (split -8)
                                                    ((then
                                                      (flatten)
                                                      (assert)
                                                      (flatten)
                                                      (assert)))))
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2"
                          (rewrite "inline_program_add_LocalVar_decls")
                          (("2" (auto-rewrite "union" "member")
                            (("2" (assert)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "arg!1")
                    (("2" (rewrite "inline_program_add_LocalVar_decls")
                      (("2" (auto-rewrite "union" "member")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics
     nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties
     nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (PState type-eq-decl nil State nil)
    (Store type-eq-decl nil State nil)
    (getLocalDecls const-decl "finite_set[LocalVarDecl]"
     ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (Class type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil)
    (Expr type-eq-decl nil Body_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (LocalVarDecl type-eq-decl nil Program nil)
    (BoolExpr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (FieldDecl type-eq-decl nil Program nil)
    (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (arg!1 skolem-const-decl "(getLocalDecls(p!1))"
     InlineRelatedStatesProperties nil)
    (p!1 skolem-const-decl "Program[Name]"
     InlineRelatedStatesProperties nil)
    (update_stack const-decl "FullState" Semantics nil)
    (O const-decl "T3" function_props nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (update_local const-decl "PState" State nil)
    (update_PState const-decl "(update_PState_type)"
     AnnotatedProgramSemantics nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_program_add_LocalVar_decls formula-decl nil
     InlineProgramAnnotationProperties nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (union const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   352213 2670 t shostak)))

