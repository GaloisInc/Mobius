(InlineEquivalence
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3409035720 3430053504
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil InlineEquivalence nil)) 756 720 t
   nil))
 (IMP_InlineProgramAnnotationProperties_TCC1 0
  (IMP_InlineProgramAnnotationProperties_TCC1-1 nil 3409035720 3430053504
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil InlineEquivalence nil)) 739 740 t nil)))
(InlineRelatedStatesProperties
 (IMP_InlineVariableNames_TCC1 0
  (IMP_InlineVariableNames_TCC1-1 nil 3409036204 3430053478
   ("" (use "infinite_namespace") nil nil) unchecked
   ((infinite_namespace formula-decl nil InlineRelatedStatesProperties nil))
   727 730 t nil))
 (IMP_InlineEquivalence_TCC1 0
  (IMP_InlineEquivalence_TCC1-1 nil 3409036204 3430053479
   ("" (use "name_of_exists") nil nil) unchecked
   ((name_of_exists formula-decl nil InlineRelatedStatesProperties nil)) 768
   740 t nil))
 (get_address_same_in_inline_related_states 0
  (get_address_same_in_inline_related_states-1 nil 3409041892 3430053480
   ("" (skosimp*)
    (("" (expand* "inline_related_states" "Program_modeled?")
      (("" (flatten) (("" (expand "get_address") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_related_states const-decl "boolean" InlineEquivalence nil)
    (get_address const-decl "int" Semantics nil))
   1049 1050 t shostak))
 (get_dynamic_type_name_same_in_inline_related_states 0
  (get_dynamic_type_name_same_in_inline_related_states-1 nil 3409041993
   3430053481
   ("" (skosimp*)
    (("" (expand "get_dynamic_type_name")
      (("" (expand "inline_related_states")
        (("" (expand "Program_modeled?")
          (("" (flatten) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   unfinished
   ((get_dynamic_type_name const-decl "Name" Semantics nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (inline_related_states const-decl "boolean" InlineEquivalence nil))
   1076 1040 t shostak))
 (Program_modeled_implies_same_exception 0
  (Program_modeled_implies_same_exception-1 nil 3409042333 3430053482
   ("" (skosimp*)
    (("" (expand "Program_modeled?") (("" (flatten) nil nil)) nil)) nil)
   unfinished ((Program_modeled? const-decl "boolean" InlineEquivalence nil))
   818 790 t shostak))
 (inline_related_states_implies_same_exception 0
  (inline_related_states_implies_same_exception-1 nil 3409042347 3430053483
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (expand "Program_modeled?") (("" (flatten) nil nil)) nil)) nil))
    nil)
   unfinished
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   1046 1050 t shostak))
 (inline_related_states_implies_same_lookup 0
  (inline_related_states_implies_same_lookup-1 nil 3409042364 3430053486
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        ((""
          (use "wf_state_ghost_not_local_or_field"
               ("p" "inline_program(p!1)"))
          (("" (assert)
            (("" (expand "wf_state")
              (("" (flatten)
                (("" (expand "wf_ghoststate")
                  ((""
                    (use "wf_state_vars_local_or_field"
                         ("p" "inline_program(p!1)"))
                    (("" (assert)
                      (("" (flatten)
                        (("" (expand "wf_state")
                          (("" (expand "Program_modeled?")
                            (("" (flatten)
                              (("" (expand "ext_declared_var_names")
                                (("" (auto-rewrite "union" "member")
                                  (("" (assert)
                                    ((""
                                      (expand*
                                       "lookup"
                                       "lookup_local"
                                       "lookup_field"
                                       "is_local"
                                       "is_ghost"
                                       "is_field")
                                      ((""
                                        (replace -9 :hide? t)
                                        ((""
                                          (replace -10 :hide? t)
                                          ((""
                                            (inst?)
                                            ((""
                                              (inst?)
                                              ((""
                                                (inst?)
                                                ((""
                                                  (inst?)
                                                  ((""
                                                    (flatten)
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (expand "id")
                                                        ((""
                                                          (lift-if)
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (expand
                                                               "Program_lvs_modeled?")
                                                              ((""
                                                                (inst?)
                                                                ((""
                                                                  (apply
                                                                   (branch
                                                                    (split 1)
                                                                    ((then
                                                                      (flatten)
                                                                      (assert)
                                                                      (flatten)
                                                                      (assert)))))
                                                                  ((""
                                                                    (lift-if)
                                                                    ((""
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         2)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (wf_state_ghost_not_local_or_field formula-decl nil
     AnnotatedProgramSemantics nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_ghoststate const-decl "boolean" SemanticsJML nil)
    (wf_state const-decl "boolean" State nil)
    (lookup_local const-decl "Val" State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (is_ghost const-decl "boolean" SemanticsJML nil)
    (lookup_field const-decl "Val" State nil)
    (lookup const-decl "Val" SemanticsJML nil)
    (id_preserves application-judgement "S" identity_props nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (union const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (PSt type-eq-decl nil State nil)
    (wf_state_vars_local_or_field formula-decl nil State nil))
   2855 2790 t shostak))
 (inline_related_states_preserved_by_update 0
  (inline_related_states_preserved_by_update-1 nil 3409043468 3430053489
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (split 1)
          (("1" (use "wf_update_PState")
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "update_PState")
                  (("1" (use "wf_state_update") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wf_update_PState")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "update_PState")
                  (("2" (use "wf_state_update") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Program_modeled?")
            (("3" (flatten)
              (("3" (expand "Program_lvs_modeled?")
                (("3" (expand "update_PState")
                  (("3" (split 1)
                    (("1" (expand* "update" "update_local" "update_field") nil
                      nil)
                     ("2" (expand* "update" "update_local" "update_field")
                      (("2" (replace -4)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (expand "wf_state" -1)
                              (("2" (flatten)
                                (("2" (use "wf_state_vars_local_or_field")
                                  (("2" (assert)
                                    (("2" (flatten)
                                      (("2"
                                        (apply
                                         (branch
                                          (split 1)
                                          ((then
                                            (flatten)
                                            (assert)
                                            (flatten)
                                            (assert)))))
                                        (("1"
                                          (expand "is_field")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case
                                           "is_local(vn!1, pstate(sAP2!1))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (apply
                                               (branch
                                                (split 2)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (expand "wf_state" -7)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "wf_state_vars_local_or_field"
                                                     ("p"
                                                      "inline_program(p!1)"))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand "is_field")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "is_field")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp*)
                      (("3" (inst -6 "n!1")
                        (("3" (split -6)
                          (("1"
                            (expand* "update" "update_local" "update_field"
                             "is_local" "is_field")
                            (("1" (case-replace "vn!1 = n!1")
                              (("1" (assert)
                                (("1" (replace -2) (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "ext_declared_var_names")
                              (("2" (auto-rewrite "union" "member")
                                (("2" (assert)
                                  (("2"
                                    (expand* "update" "update_local"
                                     "update_field" "is_local" "is_field")
                                    nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (wf_state_update formula-decl nil State nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil) (lift type-decl nil lift_adt nil)
    (PSt type-eq-decl nil State nil) (Val type-decl nil Val_adt nil)
    (update const-decl "PState" State nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext_declared_var_names const-decl "finite_set[Name]" ProgramFunctions
     nil)
    (member const-decl "bool" sets nil) (union const-decl "set" sets nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state_vars_local_or_field formula-decl nil State nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (update_local const-decl "PState" State nil)
    (update_field const-decl "PState" State nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   2814 2750 t shostak))
 (inline_related_states_preserved_by_catch 0
  (inline_related_states_preserved_by_catch-1 nil 3409044630 3430053491
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (split 1)
          (("1" (use "wf_update_PState")
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "update_PState")
                  (("1" (use "wf_state_catch") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wf_update_PState")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "update_PState")
                  (("2" (use "wf_state_catch") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Program_modeled?")
            (("3" (flatten)
              (("3" (expand "Program_lvs_modeled?")
                (("3" (expand "update_PState")
                  (("3" (expand "catch") (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (wf_state_catch formula-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil) (lift type-decl nil lift_adt nil)
    (PSt type-eq-decl nil State nil) (catch const-decl "PState" State nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   2275 2210 t shostak))
 (inline_related_states_preserved_by_raise 0
  (inline_related_states_preserved_by_raise-1 nil 3409044719 3430053493
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (split 1)
          (("1" (use "wf_update_PState")
            (("1" (assert)
              (("1" (skosimp*)
                (("1" (expand "update_PState")
                  (("1" (use "wf_state_raise") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "wf_update_PState")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (expand "update_PState")
                  (("2" (use "wf_state_raise") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Program_modeled?")
            (("3" (flatten)
              (("3" (expand "Program_lvs_modeled?")
                (("3" (expand "update_PState")
                  (("3" (expand "raise") (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((inline_related_states const-decl "boolean" InlineEquivalence nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (wf_state_raise formula-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Store type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Excpt type-decl nil Excpt_adt nil) (lift type-decl nil lift_adt nil)
    (PSt type-eq-decl nil State nil) (raise const-decl "PState" State nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties nil)
    (wf_update_PState formula-decl nil AnnotatedProgramSemantics nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil))
   2216 2170 t nil))
 (inline_related_states_preserved_by_update_stack 0
  (inline_related_states_preserved_by_update_stack-1 nil 3409044745 3433573477
   ("" (skosimp*)
    (("" (expand "inline_related_states")
      (("" (flatten)
        (("" (use "wf_state_update_stack")
          (("1" (assert)
            (("1" (split -1)
              (("1" (assert)
                (("1"
                  (use "wf_state_update_stack" ("p" "inline_program(p!1)"))
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (hide -1 -2)
                          (("1" (expand "Program_modeled?")
                            (("1" (expand "update_stack")
                              (("1" (expand "update_PState")
                                (("1" (expand "o")
                                  (("1" (expand "update_local")
                                    (("1" (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "Program_lvs_modeled?")
                                          (("1"
                                            (lift-if 1)
                                            (("1"
                                              (apply
                                               (branch
                                                (split 1)
                                                ((then
                                                  (flatten)
                                                  (assert)
                                                  (flatten)
                                                  (assert)))))
                                              (("1"
                                                (case
                                                 "is_finite[[Name, Val[Name]]]
                                                 ({x: [Name, Val[Name]] |
                                                     EXISTS (l: Decl[Name]):
                                                       lvars(m!1)(l) AND
                                                        name(l) = PROJ_1(x) AND
                                                         default_value[Name](jtype(l)) = PROJ_2(x)})")
                                                (("1"
                                                  (case
                                                   "is_finite[[Name, Val[Name]]]
                                                       ({x: [Name, Val[Name]] |
                                                           EXISTS (l: Decl[Name]):
                                                             add(new_res_lvar(p!1, m!1), lvars(m!1))(l) AND
                                                              name(l) = PROJ_1(x) AND
                                                               default_value[Name](jtype(l)) = PROJ_2(x)})")
                                                  (("1"
                                                    (apply
                                                     (branch
                                                      (split 1)
                                                      ((then
                                                        (flatten)
                                                        (assert)
                                                        (flatten)
                                                        (assert)))))
                                                    (("1"
                                                      (rewrite
                                                       "ex_update_locals")
                                                      (("1"
                                                        (rewrite
                                                         "ex_update_locals")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "fvs_update_locals")
                                                      (("2"
                                                        (rewrite
                                                         "fvs_update_locals")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (apply
                                                           (branch
                                                            (split 1)
                                                            ((then
                                                              (flatten)
                                                              (assert)
                                                              (flatten)
                                                              (assert)))))
                                                          (("3"
                                                            (apply
                                                             (branch
                                                              (split 2)
                                                              ((then
                                                                (flatten)
                                                                (assert)
                                                                (flatten)
                                                                (assert)))))
                                                            (("3"
                                                              (rewrite
                                                               "defined?_update_locals")
                                                              (("1"
                                                                (rewrite
                                                                 "lvs_update_locals_all_elements_different")
                                                                (("1"
                                                                  (rewrite
                                                                   "lvs_update_locals_all_elements_different")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (auto-rewrite
                                                                         "add"
                                                                         "member")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (auto-rewrite
                                                                             "union"
                                                                             "member"
                                                                             "add")
                                                                            (("1"
                                                                              (typepred
                                                                               "res(p!1)(m!1)")
                                                                              (("1"
                                                                                (expand
                                                                                 "legal_names")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "declared_var_names")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (hide
                                                                                         1
                                                                                         3
                                                                                         4)
                                                                                        (("1"
                                                                                          (inst?
                                                                                           -11)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "methods")
                                                                                              (("1"
                                                                                                (skosimp*)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "p!1")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "wf_Program")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "program_method_pred")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "wf_method_all_lvars_disjoint")
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "{v: Val[Name] |
                                                                EXISTS (l: Decl[Name]):
                                                                  (new_res_lvar(p!1, m!1) = l OR lvars(m!1)(l)) AND
                                                                   name(l) = n!1 AND default_value(jtype(l)) = v} = {v: Val[Name] |
                                                               EXISTS (l: Decl[Name]):
                                                                 lvars(m!1)(l) AND
                                                                  name(l) = n!1 AND default_value(jtype(l)) = v}")
                                                                                                                      (("1"
                                                                                                                        (prop)
                                                                                                                        (("1"
                                                                                                                          (skosimp*)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             -3)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "new_res_lvar")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "wf_state")
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "wf_state")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -14
                                                                                                                                           "n!1")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "is_local")
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skosimp*)
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (skosimp*)
                                                                                                                          (("3"
                                                                                                                            (inst?)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (skosimp*)
                                                                                                                          (("4"
                                                                                                                            (inst?)
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (apply-extensionality
                                                                                                                         :hide?
                                                                                                                         t)
                                                                                                                        (("2"
                                                                                                                          (iff)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             4)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (skosimp*)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "new_res_lvar")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -5)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_state")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "wf_state")
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -12
                                                                                                                                                       "n!1")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "is_local")
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (skosimp*)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "var_names")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   2
                                                                                                                                                   "l!2")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "getLocalDecls")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "getLocalDecls")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (typepred
                                                                       "p!1")
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Program")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "program_method_pred")
                                                                            (("2"
                                                                              (expand
                                                                               "methods")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst?
                                                                                       -6)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_method_all_lvars_disjoint")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -6
                                                                                             "l!1"
                                                                                             "l!2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 3
                                                                                                 -1
                                                                                                 -2
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5)
                                                                                                (("2"
                                                                                                  (auto-rewrite
                                                                                                   "add"
                                                                                                   "union"
                                                                                                   "member")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "res(p!1)(m!1)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "legal_names")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "declared_var_names")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "var_names")
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "l!2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "new_res_lvar")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "getLocalDecls")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "new_res_lvar")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "l!1")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "getLocalDecls")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "getLocalDecls")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 3)
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (typepred
                                                                       "p!1")
                                                                      (("2"
                                                                        (expand
                                                                         "wf_Program")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "program_method_pred")
                                                                            (("2"
                                                                              (expand
                                                                               "methods")
                                                                              (("2"
                                                                                (skosimp*)
                                                                                (("2"
                                                                                  (inst?
                                                                                   -6)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_method_all_lvars_disjoint")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -6
                                                                                               "l!1"
                                                                                               "l!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "default_value")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (expand "is_finite")
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "N!1 + 1"
                                                           "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: Decl[Name]):
                       add(new_res_lvar(p!1, m!1), lvars(m!1))(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : IF x = (res(p!1)(m!1), default_value(jtype(new_res_lvar(p!1, m!1)))) THEN N!1 ELSE f!1(x) ENDIF")
                                                          (("1"
                                                            (expand
                                                             "injective?")
                                                            (("1"
                                                              (skosimp*)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply
                                                                       (branch
                                                                        (split
                                                                         -1)
                                                                        ((then
                                                                          (flatten)
                                                                          (assert)
                                                                          (flatten)
                                                                          (assert)))))
                                                                      (("1"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -2)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (apply
                                                                         (branch
                                                                          (split
                                                                           -1)
                                                                          ((then
                                                                            (flatten)
                                                                            (assert)
                                                                            (flatten)
                                                                            (assert)))))
                                                                        (("2"
                                                                          (inst
                                                                           -2
                                                                           "x1!1"
                                                                           "x2!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (typepred
                                                               "f!1(x!1)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skosimp*)
                                                            (("3"
                                                              (typepred "x!1")
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (auto-rewrite
                                                                   "add"
                                                                   "member")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (apply-extensionality
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "new_res_lvar")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (typepred "lvars(m!1)")
                                                    (("2"
                                                      (hide-all-but (1 -1))
                                                      (("2"
                                                        (expand "is_finite")
                                                        (("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "N!1"
                                                             "LAMBDA(x : ({x: [Name, Val[Name]] |
                     EXISTS (l: Decl[Name]):
                       lvars(m!1)(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)})) : f!1(choose({l: Decl[Name]|
                       lvars(m!1)(l) AND
                        name(l) = PROJ_1(x) AND
                         default_value[Name](jtype(l)) = PROJ_2(x)}))")
                                                            (("1"
                                                              (expand
                                                               "injective?")
                                                              (("1"
                                                                (skosimp*)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "nonempty_exists")
                                                                    (("2"
                                                                      (typepred
                                                                       "x2!1")
                                                                      (("2"
                                                                        (skosimp*)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (rewrite
                                                                     "nonempty_exists")
                                                                    (("3"
                                                                      (typepred
                                                                       "x1!1")
                                                                      (("3"
                                                                        (skosimp*)
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (rewrite
                                                                 "nonempty_exists")
                                                                (("2"
                                                                  (typepred
                                                                   "x!1")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skosimp*)
                          (("2" (expand "methods")
                            (("2" (skosimp*)
                              (("2" (expand "getLocalDecls")
                                (("2" (inst 1 "inline_class(p!1)(c!1)")
                                  (("2" (assert)
                                    (("2" (expand "inline_program")
                                      (("2"
                                        (split 1)
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (expand "inline_class")
                                          (("2"
                                            (expand "getLocalDecls")
                                            (("2"
                                              (inst
                                               1
                                               "inline_method(p!1)(m!1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split 1)
                                                  (("1"
                                                    (expand "inline_methods")
                                                    (("1" (inst?) nil nil))
                                                    nil)
                                                   ("2"
                                                    (expand "inline_method")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "getLocalDecls")
                      (("2" (expand "methods")
                        (("2" (skosimp*)
                          (("2" (inst 1 "inline_class(p!1)(c!1)")
                            (("2" (split 1)
                              (("1" (expand "inline_program")
                                (("1" (inst?) nil nil)) nil)
                               ("2" (expand "getLocalDecls")
                                (("2" (inst 1 "inline_method(p!1)(m!1)")
                                  (("2" (split 1)
                                    (("1" (expand "inline_class")
                                      (("1"
                                        (expand "inline_methods")
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "inline_method")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "methods")
                  (("2" (skosimp*)
                    (("2" (expand "getLocalDecls")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "getLocalDecls")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "methods")
              (("2" (skosimp*)
                (("2" (expand "getLocalDecls")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "getLocalDecls") (("2" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((inline_methods const-decl "finite_set[Method]" InlineMethodAnnotation
     nil)
    (inline_method const-decl "Method" InlineMethodAnnotation nil)
    (inline_class const-decl "Class" InlineClassAnnotation nil)
    (Program_modeled? const-decl "boolean" InlineEquivalence nil)
    (update_PState const-decl "(update_PState_type)" AnnotatedProgramSemantics
     nil)
    (update_local const-decl "PState" State nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (N!1 skolem-const-decl "nat" InlineRelatedStatesProperties nil)
    (below type-eq-decl nil nat_types nil)
    (f!1 skolem-const-decl "[({x: [Name, Val[Name]] |
     EXISTS (l: Decl[Name]):
       lvars(m!1)(l) AND
        name(l) = PROJ_1(x) AND
         default_value[Name](jtype(l)) = PROJ_2(x)}) ->
   below[N!1]]" InlineRelatedStatesProperties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (ex_update_locals formula-decl nil State nil)
    (PSt type-eq-decl nil State nil)
    (fvs_update_locals formula-decl nil State nil)
    (lvs_update_locals_all_elements_different formula-decl nil State nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_method_all_lvars_disjoint const-decl "boolean" WellFormedProgram nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_state const-decl "boolean" AnnotatedProgramSemantics nil)
    (wf_state const-decl "boolean" State nil)
    (is_local const-decl "boolean" State nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (program_method_pred const-decl "bool" ProgramRestriction nil)
    (methods const-decl "finite_set[Method]" ProgramFunctions nil)
    (union const-decl "set" sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (res const-decl "(injective?[Method, (legal_names(p))])"
         InlineNewVariableDeclarations nil)
    (injective? const-decl "bool" functions nil)
    (legal_names const-decl "bool" InlineVariableNames nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (defined?_update_locals formula-decl nil State nil)
    (choose const-decl "(p)" sets nil)
    (l!1 skolem-const-decl "Decl[Name]" InlineRelatedStatesProperties nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (l!1 skolem-const-decl "Decl[Name]" InlineRelatedStatesProperties nil)
    (x2!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: Decl[Name]):
      lvars(m!1)(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     InlineRelatedStatesProperties nil)
    (x1!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: Decl[Name]):
      lvars(m!1)(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     InlineRelatedStatesProperties nil)
    (x!1 skolem-const-decl "({x: [Name, Val[Name]] |
    EXISTS (l: Decl[Name]):
      lvars(m!1)(l) AND
       name(l) = PROJ_1(x) AND default_value[Name](jtype(l)) = PROJ_2(x)})"
     InlineRelatedStatesProperties nil)
    (l!1 skolem-const-decl "Decl[Name]" InlineRelatedStatesProperties nil)
    (Program_lvs_modeled? const-decl "boolean" InlineEquivalence nil)
    (O const-decl "T3" function_props nil)
    (update_stack const-decl "FullState" Semantics nil)
    (new_res_lvar const-decl "Decl" InlineNewVariableDeclarations nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (inline_program const-decl "Program" InlineProgramAnnotation nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (m!1 skolem-const-decl "Method[Name]" InlineRelatedStatesProperties nil)
    (p!1 skolem-const-decl "Program[Name]" InlineRelatedStatesProperties nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (getLocalDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil) (Store type-eq-decl nil State nil)
    (PState type-eq-decl nil State nil)
    (APState type-eq-decl nil AnnotatedProgramSemantics nil)
    (Name formal-nonempty-type-decl nil InlineRelatedStatesProperties nil)
    (wf_state_update_stack formula-decl nil AnnotatedProgramSemantics nil)
    (inline_related_states const-decl "boolean" InlineEquivalence nil))
   588016 20020 t shostak)))

