CorrectnessAnnProgram[CP, Name : TYPE+] : THEORY
BEGIN

  ASSUMING

    CP_is_enumerable : ASSUMPTION
      EXISTS (f : [CP -> nat]) : injective?(f)

    infinite_namespace : ASSUMPTION
      is_infinite({n : Name | TRUE})

    IMPORTING VariableNames[CP, Name]

    name_of_exists : ASSUMPTION
      EXISTS (f : [mp : (wf_MP) -> [CP -> (legal_names(mp))]]) : 
        FORALL(mp : (wf_MP)) : 
          injective?(f(mp))

  ENDASSUMING

%  IMPORTING AnnGenerationLemmas[CP, Name]
  IMPORTING Equivalence[CP, Name],
            APSemanticsProperties,
            listfuncs

  mp : VAR (wf_MP)

  % Properties about related_states

  get_address_same_in_related_states : LEMMA  %:-)
    FORALL(vn : Name, sMP : MPState, sAP : APState) :
      related_states(mp)(sMP, sAP) IMPLIES
        get_address(vn, sMP) = get_address(vn, sAP)

  get_dynamic_type_name_same_in_related_states : LEMMA % :-)
    FORALL(vn : Name, sMP : MPState, sAP : APState) :
      related_states(mp)(sMP, sAP) IMPLIES
        get_dynamic_type_name(vn, sMP) = get_dynamic_type_name(vn, sAP)
  

  MP_modeled_implies_same_exception : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState) :
      MP_modeled?(mp)(sMP, sAP) IMPLIES ex(pstate(sMP)) = ex(pstate(sAP))

  related_states_implies_same_exception : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState) :
      related_states(mp)(sMP, sAP) IMPLIES ex(pstate(sMP)) = ex(pstate(sAP))

  related_states_implies_same_lookup : LEMMA % :-)
    FORALL(mp)(sMP : MPState, sAP : APState, n : Name) :
      related_states(mp)(sMP, sAP) IMPLIES 
      ext_declared_var_names(program(mp))(n) IMPLIES
        lookup(n, sMP) = lookup(n, sAP)
       
  % If cp(astate(sMP)) = halted, upd must leave the JML exception in sAP
  MP_modeled_preserved_by_update : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState)(upd : [PState -> PState]) :
      related_states(mp)(sMP, sAP) IMPLIES
      NOT up?(ex(pstate(sAP))) IMPLIES
        MP_modeled?(mp)(update_PState(sMP, upd), update_PState(sAP, upd))

  % If cp(astate(sMP)) = halted, upd must leave the JML exception in sAP
  halted_implies_JMLExc_preserved_by_update : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState)(upd : [PState -> PState]) :
      related_states(mp)(sMP, sAP) IMPLIES
      NOT up?(ex(pstate(sAP))) IMPLIES
        halted_implies_JMLExc(mp)(update_PState(sMP, upd), 
                                  update_PState(sAP, upd))

  MP_modeled_preserved_by_catch : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState) :
      related_states(mp)(sMP, sAP) IMPLIES
        MP_modeled?(mp)(update_PState(sMP, catch), update_PState(sAP, catch))

  MP_modeled_preserved_by_raise : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState, e : Excpt) :
      related_states(mp)(sMP, sAP) IMPLIES
        MP_modeled?(mp)(update_PState(sMP, raise(e)), 
                        update_PState(sAP, raise(e)))

  halted_implies_JMLExc_preserved_by_catch : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState) :
      related_states(mp)(sMP, sAP) IMPLIES
      (up?(ex(pstate(sAP))) IMPLIES NOT down(ex(pstate(sAP))) = JMLExc) IMPLIES
        halted_implies_JMLExc(mp)(update_PState(sMP, catch), 
                                  update_PState(sAP, catch))

  halted_implies_JMLExc_preserved_by_raise : LEMMA % :-)
    FORALL (mp)(sMP : MPState, sAP : APState, e : Excpt) :
      related_states(mp)(sMP, sAP) IMPLIES
      NOT e = JMLExc IMPLIES
      NOT up?(ex(pstate(sAP))) IMPLIES
        halted_implies_JMLExc(mp)(update_PState(sMP, raise(e)), 
                                  update_PState(sAP, raise(e)))

  % PROVE! This can be long. We have to show that the expressions and
  % statements of the mp are not modified, only new exprs and stmts are
  % added and they do not interfere with the others.
%  MP_modeled_implies_same_num_eval : LEMMA % :-)
%    FORALL (mp, ap : Program)
%           (sMP : MPState, sAP : APState)(n : NumExpr) :
%      related_states(mp, ap)(sMP, sAP) IMPLIES
%      (VarEval?(n) IMPLIES declared_var_names(program(mp))(varname(n))) IMPLIES
%          eval(n)(sMP) = eval(n)(sAP)

%  MP_modeled_implies_same_bool_eval : LEMMA % :-)
%    FORALL (mp, ap : Program)
%           (sMP : MPState, sAP : APState)(b : BoolExpr) :
%      related_states(mp, ap)(sMP, sAP) IMPLIES
%        eval(b)(sMP) = eval(b)(sAP)


  on_method_entry_preserves_related_states : LEMMA
    FORALL(md : Method, a : (defined?), m1, m2 : nat,
           sMP1, sMP2 : MPState, sAP1, sAP2 : APState) : 
      related_states(mp)(sMP1, sAP1) IMPLIES
      NOT up?(ex(pstate(sAP1))) IMPLIES
      NOT a = Null IMPLIES
      on_method_entry_MP(mp, md, a, sMP1, sMP2, m1,
                         LAMBDA (k: upto(m1))
                                (p: MonitoredProgram[CP, Name])
                                (b: Body[Name], sigma1: MPState[CP, Name],
                                 v: Val[Name], sigma2: MPState[CP, Name])
                                (m: below(k)):
                           derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES
      on_method_entry(ann_program(mp), md, a, sAP1, sAP2, m2,
                      LAMBDA (k: upto(m2))(p: Program[Name])
                             (b: Body[Name], sigma1: APState[Name],
                              v: Val[Name], sigma2: APState[Name])
                             (m: below(k)):
                        derive(p)(b, sigma1, v, sigma2)(m)) IMPLIES
        related_states(mp)(sMP2, sAP2)

  % Main lemmas used in the proof of the correcteness_of_ann_program

  initial_states_are_equivalent : LEMMA % :-)
    FORALL (mp)(root_object : (defined?)) :
        related_states(mp)(initial_MP_state(mp)(root_object),
                           initial_AP_state(ann_program(mp))(root_object))

  derive_maintains_related_states_for_unchanged_program : THEOREM
    FORALL (mp)(b : Body, v1, v2 : Val)
           (sMP1, sMP2 : MPState, sAP1, sAP2 : APState)
           (n1, n2 : nat) :
      well_behaved_MP(mp) IMPLIES
      subset?(var_names(b), ext_declared_var_names(program(mp))) IMPLIES
      related_states(mp)(sMP1, sAP1) IMPLIES
      derive(mp)(b, sMP1, v1, sMP2)(n1) IMPLIES
      derive(ann_program(mp))(b, sAP1, v2, sAP2)(n2) IMPLIES
        related_states(mp)(sMP2, sAP2) AND v1 = v2

%  derive_maintains_related_states : THEOREM
%    FORALL (mp)(b : Body, v1, v2 : Val)
%           (sMP1, sMP2 : MPState, sAP1, sAP2 : APState)
%           (n1, n2 : nat) :
%      well_behaved_MP(mp) IMPLIES
%      related_states(mp)(sMP1, sAP1) IMPLIES
%      derive(mp)(b, sMP1, v1, sMP2)(n1) IMPLIES
%      derive(ann_program(mp))(b, sAP1, v2, sAP2)(n2) IMPLIES
%        related_states(mp)(sMP2, sAP2) AND v1 = v2


  % The main result
  correctness_of_ann_program : THEOREM % :-)
    FORALL (mp)(main : Method, arg : int)
           (root_object : (defined?))
           (sMP : MPState, sAP : APState) :
      well_behaved_MP(mp) IMPLIES
      run_monitored_program(mp)(main, arg)(root_object)(sMP) IMPLIES
      run_annotated_program(ann_program(mp))(main, arg)(root_object)(sAP)
      IMPLIES
        related_states(mp)(sMP, sAP)

END CorrectnessAnnProgram
