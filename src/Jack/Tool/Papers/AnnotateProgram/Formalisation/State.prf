(State
 (update_locals_TCC1 0
  (update_locals_TCC1-1 nil 3391159723 3428166159 ("" (subtype-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Name formal-nonempty-type-decl nil State nil)
    (Val type-decl nil Val_adt nil) (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   104 110 nil nil))
 (update_locals_TCC2 0
  (update_locals_TCC2-1 nil 3391159723 3428166159
   ("" (skosimp*)
    (("" (use "card_rest[[Name, Val[Name]]]") (("" (assert) nil nil)) nil))
    nil)
   unchecked
   ((card_rest formula-decl nil finite_sets nil)
    (Name formal-nonempty-type-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   234 230 t nil))
 (initial_Program_state_TCC1 0
  (initial_Program_state_TCC1-1 nil 3390799294 3428166159
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   188 160 nil nil))
 (initial_Program_state_TCC2 0
  (initial_Program_state_TCC2-1 nil 3390799294 3428166160
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil State nil) nil nil
    (member const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   181 180 nil nil))
 (wf_initial_Program_state 0
  (wf_initial_Program_state-1 nil 3390799316 3428166160
   ("" (skosimp*)
    (("" (expand "initial_Program_state")
      (("" (expand "wf_state")
        (("" (skosimp*)
          (("" (expand "is_field")
            (("" (expand "is_local")
              (("" (expand "defined?")
                (("" (expand "var_names")
                  (("" (expand "get_FieldDecl")
                    (("" (expand "get_LocalDecl")
                      (("" (split 1)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (split 1)
                              (("1" (skosimp*)
                                (("1" (rewrite "nonempty_exists")
                                  (("1" (skosimp*)
                                    (("1" (typepred "x!1")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2" (split 1)
                                (("1" (propax) nil nil)
                                 ("2" (rewrite "nonempty_exists")
                                  (("2" (inst?) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lift-if)
                          (("3" (assert)
                            (("3" (split 1)
                              (("1" (propax) nil nil)
                               ("2" (skosimp*)
                                (("2" (split 2)
                                  (("1" (skosimp*)
                                    (("1" (expand "default_value")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "nonempty_exists")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (typepred "x!1")
                                                (("1"
                                                  (inst?)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (lift-if)
                          (("4" (assert)
                            (("4" (typepred "this_val!1")
                              (("4" (expand "defined?")
                                (("4" (assert)
                                  (("4" (split 2)
                                    (("1" (propax) nil nil)
                                     ("2" (skosimp*)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (expand "default_value")
                                          (("1"
                                            (lift-if)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (rewrite "nonempty_exists")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((initial_Program_state const-decl "PState" State nil)
    (is_local const-decl "boolean" State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (get_LocalDecl const-decl "lift[Decl]" ProgramFunctions nil)
    (default_value const-decl "(defined?)" ValProp nil)
    (nonempty_exists formula-decl nil sets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Stmt type-eq-decl nil Body_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Expr type-eq-decl nil Body_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (is_finite const-decl "bool" finite_sets nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Name formal-nonempty-type-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (JType type-decl nil JType_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (get_FieldDecl const-decl "lift[Decl]" ProgramFunctions nil)
    (defined? const-decl "boolean" ValProp nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil))
   191 170 t nil))
 (wf_state_vars_local_or_field 0
  (wf_state_vars_local_or_field-1 nil 3390798989 3428166166
   ("" (skosimp*)
    (("" (use "wf_program_variables_disjoint")
      (("" (case-replace "vn!1 = This")
        (("1" (use "wf_program_variables_not_reserved_words")
          (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_program_variables_disjoint formula-decl nil WellFormedProgram nil)
    (Name formal-nonempty-type-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (wf_program_variables_not_reserved_words formula-decl nil
     WellFormedProgram nil)
    (is_local const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil)
    (wf_store const-decl "boolean" State nil)
    (disjoint? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (reserved_words const-decl "finite_set[Name]" Program nil)
    (member const-decl "bool" sets nil)
    (declared_var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getGhostDecls const-decl "finite_set[Decl]" ProgramFunctions nil) nil nil
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (finite_intersection1 application-judgement "finite_set" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (This const-decl "Name" Program nil))
   5831 5700 t nil))
 (wf_state_update_local 0
  (wf_state_update_local-1 nil 3391158897 3428166166
   ("" (skosimp*)
    (("" (expand "update_local")
      (("" (expand "wf_state")
        (("" (expand "is_field")
          (("" (expand "is_local")
            (("" (expand "defined?")
              (("" (skosimp*)
                (("" (inst -1 "vn!2")
                  (("" (flatten)
                    (("" (assert)
                      (("" (split 2)
                        (("1" (propax) nil nil) ("2" (propax) nil nil)
                         ("3" (skosimp*)
                          (("3" (case-replace "vn!1 = vn!2")
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("4" (skosimp*)
                          (("4" (assert)
                            (("4" (case-replace "vn!1 = vn!2")
                              (("1" (assert)
                                (("1" (typepred "v!1") (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((update_local const-decl "PState" State nil)
    (is_field const-decl "boolean" State nil)
    (defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil State nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (is_local const-decl "boolean" State nil)
    (wf_state const-decl "boolean" State nil))
   129 90 t shostak))
 (wf_state_update_locals 0
  (wf_state_update_locals-2 nil 3410271480 3428166167
   (";;; Proof wf_state_update_locals-1 for formula State.wf_state_update_locals"
    (auto-rewrite "defined?")
    ((";;; Proof wf_state_update_locals-1 for formula State.wf_state_update_locals"
      (use "wf_induction[finite_set[[Name, Val]], (LAMBDA(x, y : finite_set[[Name, Val]]) : card(x) < card(y))]")
      (("1"
        (inst -1
         "LAMBDA (V : finite_set[[Name, Val]]) : FORALL (p: Program, s: PState) :
                    wf_state(p)(s) IMPLIES
                     (FORALL (v: [Name, Val]): V(v) IMPLIES
                        is_local(PROJ_1(v), s) AND defined?(PROJ_2(v)))
                      IMPLIES wf_state(p)(update_locals(V)(s))")
        (("1" (split -1)
          (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil)))))
           ("2" (hide 2)
            (("2" (skosimp*)
              (("2" (expand "update_locals" 1)
                (("2" (split 1)
                  (("1" (skosimp*) nil)
                   ("2" (skosimp*)
                    (("2" (inst -1 "rest(x!1)")
                      (("2" (use "card_rest[[Name, Val]]")
                        (("2" (assert)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (hide -1)
                                (("2" (split -1)
                                  (("1" (skosimp*)
                                    (("1" (inst-cp -3 "v!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -3 "choose(x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -4)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "update_local" 2)
                                                    (("1"
                                                      (expand "is_local" 2)
                                                      (("1"
                                                        (expand "defined?")
                                                        (("1"
                                                          (case-replace
                                                           "choose(x!1)`1 = proj_1(v!1)")
                                                          (("1" (assert) nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil)))))))))))))))
                                               ("2" (grind) nil)))))))))))))
                                   ("2" (lemma "wf_state_update_local")
                                    (("2"
                                      (inst
                                       -1
                                       "p!1"
                                       "s!1"
                                       "proj_1(choose(x!1))"
                                       "proj_2(choose(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst? -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil)))))))))))
                                       ("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))))))))))
       ("2" (use "wf_card[[Name, Val]]") nil))))
    ";;; developed with shostak decision procedures")
   unchecked
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (wf_induction formula-decl nil wf_induction nil)
    (Name formal-nonempty-type-decl nil State nil)
    (Val type-decl nil Val_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (rest const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil) nil
    (empty? const-decl "bool" sets nil) nil nil
    (wf_store const-decl "boolean" State nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (wf_state_update_local formula-decl nil State nil)
    (update_local const-decl "PState" State nil)
    (nonempty? const-decl "bool" sets nil) (choose const-decl "(p)" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (update_locals def-decl "PState" State nil)
    (is_local const-decl "boolean" State nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" State nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PState type-eq-decl nil State nil) (PSt type-eq-decl nil State nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (PreProgram type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (Class type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Method type-eq-decl nil Program nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Decl type-eq-decl nil Program nil) (JType type-decl nil JType_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (wf_card formula-decl nil WF_Card nil))
   845 810 nil nil)
  (wf_state_update_locals-1 nil 3391159739 3410271458
   (""
    (use "wf_induction[finite_set[[Name, Val]], (LAMBDA(x, y : finite_set[[Name, Val]]) : card(x) < card(y))]")
    (("1"
      (inst -1
       "LAMBDA (V : finite_set[[Name, Val]]) : FORALL (p: Program, s: PState) :
                wf_state(p)(s) IMPLIES
                 (FORALL (v: [Name, Val]): V(v) IMPLIES
                    is_local(PROJ_1(v), s) AND defined?(PROJ_2(v)))
                  IMPLIES wf_state(p)(update_locals(V)(s))")
      (("1" (split -1)
        (("1" (skosimp*) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (hide 2)
          (("2" (skosimp*)
            (("2" (expand "update_locals" 1)
              (("2" (split 1)
                (("1" (skosimp*) nil nil)
                 ("2" (skosimp*)
                  (("2" (inst -1 "rest(x!1)")
                    (("2" (use "card_rest[[Name, Val]]")
                      (("2" (assert)
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2" (split -1)
                                (("1" (skosimp*)
                                  (("1" (inst-cp -3 "v!1")
                                    (("1" (assert)
                                      (("1"
                                        (inst -3 "choose(x!1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -4)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "update_local" 2)
                                                  (("1"
                                                    (expand "is_local" 2)
                                                    (("1"
                                                      (expand "defined?")
                                                      (("1"
                                                        (case-replace
                                                         "choose(x!1)`1 = proj_1(v!1)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "wf_state_update_local")
                                  (("2"
                                    (inst -1 "p!1" "s!1" "proj_1(choose(x!1))"
                                     "proj_2(choose(x!1))")
                                    (("1" (assert)
                                      (("1"
                                        (inst? -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (use "wf_card[[Name, Val]]") nil nil))
    nil)
   unfinished
   ((wf_card formula-decl nil WF_Card nil)
    (defined? const-decl "boolean" ValProp nil)
    (JType type-decl nil JType_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Expr type-eq-decl nil Body_adt nil)
    (Method type-eq-decl nil Program nil) (lift type-decl nil lift_adt nil)
    (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (PSt type-eq-decl nil State nil) (PState type-eq-decl nil State nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_state const-decl "boolean" State nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (is_local const-decl "boolean" State nil)
    (update_locals def-decl "PState" State nil)
    (card_rest formula-decl nil finite_sets nil)
    (choose const-decl "(p)" sets nil) (nonempty? const-decl "bool" sets nil)
    (update_local const-decl "PState" State nil)
    (wf_state_update_local formula-decl nil State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (is_field const-decl "boolean" State nil)
    (Bottom? adt-recognizer-decl "[Val -> boolean]" Val_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rest const-decl "set" sets nil)
    (finite_rest application-judgement "finite_set" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (Name formal-nonempty-type-decl nil State nil)
    (wf_induction formula-decl nil wf_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   914 870 t shostak))
 (wf_state_update 0
  (wf_state_update-2 nil 3410271495 3428166167
   (";;; Proof wf_state_update-1 for formula State.wf_state_update"
    (auto-rewrite "defined?")
    ((";;; Proof wf_state_update-1 for formula State.wf_state_update"
      (skosimp*)
      ((";;; Proof wf_state_update-1 for formula State.wf_state_update"
        (expand "update")
        ((";;; Proof wf_state_update-1 for formula State.wf_state_update"
          (expand "wf_state")
          ((";;; Proof wf_state_update-1 for formula State.wf_state_update"
            (split 1)
            (("1" (skosimp*)
              (("1" (inst-cp -2 "vn!1")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (expand "update_local")
                      (("1" (expand "is_field")
                        (("1" (expand "is_local")
                          (("1" (assert)
                            (("1" (inst -1 "vn!2")
                              (("1" (flatten)
                                (("1" (split 2)
                                  (("1" (propax) nil) ("2" (propax) nil)
                                   ("3" (skosimp*)
                                    (("3" (assert) (("3" (assert) nil)))))
                                   ("4" (skosimp*)
                                    (("4" (assert)
                                      (("4"
                                        (case-replace "vn!2 = vn!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "v!1")
                                            (("1" (grind) nil)))))
                                         ("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))))
             ("2" (skosimp*)
              (("2" (split 2)
                (("1" (skosimp*)
                  (("1" (inst-cp -2 "vn!1")
                    (("1" (inst -2 "vn!2")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "update_field")
                              (("1" (expand "is_field")
                                (("1" (expand "is_local")
                                  (("1" (expand "defined?")
                                    (("1" (assert)
                                      (("1"
                                        (split 2)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case-replace "vn!2 = vn!1")
                                              (("1" (assert) nil)))))))
                                         ("2"
                                          (skosimp*)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case-replace "vn!2 = vn!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "v!1")
                                                  (("1" (grind) nil)))))
                                               ("2" (assert) nil)))))))
                                         ("3" (propax) nil)
                                         ("4"
                                          (propax)
                                          nil)))))))))))))))))))))))))
                 ("2" (skosimp*) nil))))))))))))))
    ";;; developed with shostak decision procedures")
   unchecked nil 152 130 nil nil)
  (wf_state_update-1 nil 3390803416 3410271458
   ("" (skosimp*)
    (("" (expand "update")
      (("" (expand "wf_state")
        (("" (split 1)
          (("1" (skosimp*)
            (("1" (inst-cp -2 "vn!1")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (expand "update_local")
                    (("1" (expand "is_field")
                      (("1" (expand "is_local")
                        (("1" (assert)
                          (("1" (inst -1 "vn!2")
                            (("1" (flatten)
                              (("1" (split 2)
                                (("1" (propax) nil nil) ("2" (propax) nil nil)
                                 ("3" (skosimp*)
                                  (("3" (assert) (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4" (skosimp*)
                                  (("4" (assert)
                                    (("4" (case-replace "vn!2 = vn!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "v!1")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (split 2)
              (("1" (skosimp*)
                (("1" (inst-cp -2 "vn!1")
                  (("1" (inst -2 "vn!2")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "update_field")
                            (("1" (expand "is_field")
                              (("1" (expand "is_local")
                                (("1" (expand "defined?")
                                  (("1" (assert)
                                    (("1" (split 2)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case-replace "vn!2 = vn!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skosimp*)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case-replace "vn!2 = vn!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "v!1")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (propax) nil nil)
                                       ("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unfinished
   ((update const-decl "PState" State nil)
    (Name formal-nonempty-type-decl nil State nil)
    (is_field const-decl "boolean" State nil)
    (defined? const-decl "boolean" ValProp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (is_local const-decl "boolean" State nil)
    (update_local const-decl "PState" State nil)
    (update_field const-decl "PState" State nil)
    (wf_state const-decl "boolean" State nil))
   359 330 t shostak))
 (wf_state_raise 0
  (wf_state_raise-1 nil 3390908545 3428166167 ("" (grind) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_store const-decl "boolean" State nil) nil nil
    (wf_state const-decl "boolean" State nil)
    (raise const-decl "PState" State nil))
   216 180 t shostak))
 (wf_state_catch 0
  (wf_state_catch-1 nil 3390908555 3428166167 ("" (grind) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Val type-decl nil Val_adt nil) (JType type-decl nil JType_adt nil)
    (Decl type-eq-decl nil Program nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Expr type-eq-decl nil Body_adt nil) (Stmt type-eq-decl nil Body_adt nil)
    (Excpt type-decl nil Excpt_adt nil) (Method type-eq-decl nil Program nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (defined? const-decl "boolean" ValProp nil)
    (Name formal-nonempty-type-decl nil State nil)
    (getFieldDecls const-decl "finite_set[Decl]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (wf_store const-decl "boolean" State nil) nil nil
    (wf_state const-decl "boolean" State nil)
    (catch const-decl "PState" State nil))
   181 180 t shostak))
 (wf_state_arg_is_local 0
  (wf_state_arg_is_local-1 nil 3398660967 3428166168
   ("" (skosimp*)
    (("" (expand "wf_state")
      (("" (inst -1 "name(arg(m!1))")
        (("" (flatten)
          (("" (assert)
            (("" (flatten)
              (("" (expand "var_names")
                (("" (inst 1 "arg(m!1)")
                  (("" (use "arg_in_getLocalDecls") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((wf_state const-decl "boolean" State nil)
    (lift type-decl nil lift_adt nil) (Class type-eq-decl nil Program nil)
    (PreProgram type-eq-decl nil Program nil)
    (wf_Program const-decl "boolean" WellFormedProgram nil)
    (Program type-eq-decl nil WellFormedProgram nil)
    (arg_in_getLocalDecls formula-decl nil ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (var_names const-decl "finite_set[Name]" ProgramFunctions nil)
    (Method type-eq-decl nil Program nil) (Expr type-eq-decl nil Body_adt nil)
    (defined? const-decl "boolean" ValProp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Val type-decl nil Val_adt nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (JType type-decl nil JType_adt nil) (Excpt type-decl nil Excpt_adt nil)
    (Stmt type-eq-decl nil Body_adt nil)
    (Name formal-nonempty-type-decl nil State nil))
   380 380 t shostak))
 (wf_state_alternative_def 0
  (wf_state_alternative_def-1 nil 3428166757 3428166902
   ("" (skosimp*)
    (("" (expand* "wf_state" "wf_store" "is_local" "is_field" "add" "member")
      (("" (iff)
        (("" (prop)
          (("1" (skosimp*) (("1" (inst?) (("1" (prop) nil nil)) nil)) nil)
           ("2" (skosimp*)
            (("2" (inst?)
              (("2" (flatten)
                (("2" (split 1)
                  (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                   ("2" (skosimp*)
                    (("2" (assert)
                      (("2" (split -1)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*)
            (("3" (inst?)
              (("3" (inst?)
                (("3" (flatten)
                  (("3" (split 1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil)
                     ("3" (skosimp*) (("3" (assert) nil nil)) nil)
                     ("4" (skosimp*)
                      (("4" (assert)
                        (("4" (split -1)
                          (("1" (assert) nil nil) ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((wf_store const-decl "boolean" State nil)
    (is_field const-decl "boolean" State nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (is_local const-decl "boolean" State nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (wf_state const-decl "boolean" State nil)
    (Name formal-nonempty-type-decl nil State nil))
   144845 480 t shostak)))

